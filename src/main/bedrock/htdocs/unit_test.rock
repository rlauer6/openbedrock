<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-15">
<title>Bedrock 2 Unit Tests...</title>
<style type="text/css">
body {
  font-family: verdana;
  font-size: 10pt;
  background: #E8D2FF;
}

.code {
 margin-left: 25px;
 color: purple;
 font-size: 11px;
 font-family: fixed;
 font-weight: 600;
}

pre {
 margin-left: 25px;
 width: 300px;
 padding: 5px;
 background: #F9FF9A;
 margin-bottom: 20px;
 border-style: solid;
 border-width: 2px 2px 1px 1px;
 border-color: #eeeeee;
}

h1 {
 padding: 5px;
 color: purple;
 font-size: 14pt;
 background: yellow;
}

h2 {
 padding-left: 5px;
 color: purple;
 font-size: 12pt;
 background: #ffffff;
 margin-left: 25px;
}

h3 {
 padding-left: 5px;
 color: #555555;
 font-size: 10pt;
 background: #cccccc;
 margin-left: 25px;
}
.note {
margin-top: 15px;
margin-bottom: 10px;
margin-left:25px;
padding: 5px;
border-style: solid;
border-color: purple;
border-width: 2px 2px 1px 1px;
width: 250px;
background: white;
font-style: italic;
color: #555555;
font-weight: 800;
font-size: 8pt;
}

.example {
 margin: 10px 25px 25px 25px;

}

</style>
</head>

<body>
<div style="valign:center;font-size:16pt;color:purple;background:white;padding:5px;font-weight:800;border-style:solid;border-width:1px;"><img src="/bedrock/img/bedrock.jpg" align="absmiddle">&nbsp;Bedrock 2 Unit Test Page</div>

<null:foo --json '{null : "Null Tag", var : "Var Tag" , tags : "Experimental Tags" , widgets : "HTML Widgets"}'>
<ul>
  <foreach $foo.keys()>
  <li><a href="#<var $_>"><var $foo.get($_)></li>
  </foreach>
</ul>
<hr>

<a name="null"></a>
<h1>&lt;null&gt;</h1>

<h2>Bedrock Quoting for JSON objects</h2>
<h3>Using q{} </h3>
<span class="code">&lt;null:foo --json q{{ foo: [1,2,4], bar : {a: 'baba'}}}&gt;</span><br>
<null:foo --json q{{ foo: [1,2,4], bar : {a: 'baba'}}}>

<pre>
foo:
[
<trace --output $foo>]
</pre>

<null:object:foobar --json q{{ foo: [1,2,4], bar : {a: 'baba'}}}>
<span class="code">&lt;null:object:foobar --json q{{ foo: [1,2,4], bar : {a: 'baba'}}}&gt;</span>
<div class="note">Note that using <code>:object</code> type and the q{} required --json</div>
<pre>
foobar:
[
<trace --output $foobar>]
</pre>

<div class="note">Note that using <code>:object</code> is permissible with a scalar
  argument now and that it is interpretted as a JSON string</div>
<null:object:foobar '{ foo: [1,2,4], bar : {a: "baba"}}' >
<span class="code">&lt;null:object:foobar '{ foo: [1,2,4], bar : {a: "baba"}}' &gt;</span>

<pre>
foobar:
[
<trace --output $foobar>]
</pre>

<h2>JSON support</h2>

<span class="code">&lt;null:foo --json '[ {a: "1", b: "2" , c: "3" }, [4,5,6], [7,8,9] ]'&gt;</span>
<null:foo --json '[ {a: "1", b: "2" , c: "3" }, [4,5,6], [7,8,9] ]'>
<pre>
foo:
[
<trace --output $foo>
]</pre>

<h2>&lt;null:name&gt; creation syntax</h2>
<h3>Create a scalar</h3>
<null --define-var="foo" "foo">
<span class="code">&lt;null --define-var="foo" "foo"&gt;</span>
<pre>foo: [<var  $foo>]</pre>

<span class="code">&lt;null:foo "foo"&gt;</span>
<null:foo "foo">
<pre>foo: [<var  $foo>]</pre>

<h3>Create an array</h3>

<null --define-array="foo" 1 2 3 4 5 6 8>
<span class="code">&lt;null --define-array="foo" 1 2 3 4 5 6 8&gt;</span>
<pre>
foo:
[
<trace --output $foo>]
</pre>

<null:foo 1 2 3 4 5 6 7 8>
<span class="code">&lt;null:foo 1 2 3 4 5 6 7 8&gt;</span>
<pre>
foo:
[
<trace --output $foo>]
</pre>

<h3>Create a hash</h3>
<null --create-object "foo" red 1 blue 2 green 3 black 4 brown 5>
<span class="code">&lt;null --create-object "foo" red 1 blue 2 green 3 black 4 brown 5&gt;</span>
<pre>
foo:
[
<trace --output $foo>]
</pre>

<null:hash:foo red 1 blue 2 green 3 black 4 brown 5>
<span class="code">&lt;null:hash:foo red 1 blue 2 green 3 black 4 brown 5&gt;</span>
<pre>
foo:
[
<trace --output $foo>]
</pre>

<h3>Create an ordered hash</h3>
<null --define-var="foo" $Bedrock.new("BLM::OrderedObject", "red", 1, "blue", 2, "green", 3, "black", 4, "brown", 5)>
<span class="code">&lt;null --define-var="foo" $Bedrock.new("BLM::OrderedObject", "red", 1, "blue", 2, "green", 3, "black", 4, "brown", 5)&gt;</span>

<pre>
foo:
<foreach $foo.keys()><var $_>:<var $foo.get($_)>
</foreach>
</pre>
  
<null:object:foo --ordered red 1 blue 2 green 3 black 4 brown 5>
<span class="code">&lt;null:object:foo --ordered red 1 blue 2 green 3 black 4 brown 5&gt;</span>
<pre>
foo:
<foreach $foo.keys()><var $_>:<var $foo.get($_)>
</foreach>
</pre>

<a name="var"></a>
<h1>&lt;var&gt;</h1>
<h2>JSON Suport</h2>

<null:json --json '[{foo: "bar"}, {foo :"baz"}, {foo: "buzz"}]'>
<span class="code">&lt;null:json --json '[{foo: "bar"}, {foo :"baz"}, {foo: "buzz"}]'&gt;</span><br>
<span class="code">&lt;var --json $json&gt;</span>

<pre>
json:
[
<trace --output $json>]
</pre>
<pre>
<var --json $json>
</pre>

<h2>Decoding output</h2>
<null:foo foo>
<span class="code">&lt;null:foo foo&gt;</span>

<h3>Option --decode</h3>
<span class="code">&lt;var --decode='{a : "b", c : "d", foo: "Correct!" , default : "z"}' $foo&gt;</span> = [<var --decode='{a : "b", c : "d", foo: "Correct!" , default : "z"}' $foo>]

<h3>Method --decode</h3>
<null:lookup --json '{a : "b", c : "d", foo: "Correct!" , default : "z"}'>
<span class="code">&lt;null:lookup --json '{a : "b", c : "d", foo: "Correct!" , default : "z"}'&gt;</span><br>
<pre>
lookup:
[
<trace --output $lookup>]
</pre>

<ul>
<li><b>use a lookup object</b> - <span style="margin-left:5px;" class="code">&lt;var $foo.decode($lookup)&gt;</span> = [<var  $foo.decode($lookup)>]</li>
<li><b>use a JSON string</b>   - <span style="margin-left:5px;" class="code">&lt;var $foo.decode('{a : "b", c : "d", foo: "Correct!" , default : "z"}')&gt;</span> = [<var $foo.decode('{a : "b", c : "d", foo: "Correct!" , default : "z"}')>]</li>
<li><b>use a list</b>          - <span style="margin-left:5px;" class="code">&lt;var $foo.decode("a", "b", "c" ,"d", "foo", "Correct!",  "z")&gt;</span> = [<var $foo.decode("a", "b", "c" ,"d", "foo", "Correct!", "z")>]</li>
</ul>
  
<null:foo bar>
<br>Now, set foo=bar, send an odd number of args to <code>decode()</code>, should use last element as default.<br>
<span class="code">&lt;null:foo bar&gt;</span><br>
<span class="code">&lt;var $foo.decode("a", "b", "c" ,"d", "foo", "Correct!",  "z")&gt;</span> = [<var $foo.decode("a", "b", "c" ,"d", "foo", "Correct!", "z")>]

<h2>Toggling output</h2>
<null:foo foo>
<span class="code">&lt;null:foo foo&gt;</span>
  
<h3>Option --toggle</h3>
<span class="code">&lt;var --toggle="foo,bar" $foo&gt;</span> = [<var --toggle="foo,bar" $foo>]
  
<h3>Method toggle()</h3>
<span class="code">&lt;var $foo.toggle("foo,bar")&gt;</span>  = [<var  $foo.toggle("foo,bar")>]

<a name="tags"></a>
<h1>Experimental Tags &lt;array&gt;, &lt;hash&gt;</h1>
<h2>&lt;hash&gt;</h2>
<null:safizzle "Huggy Bear">
<hash:foo d 4 a 1 b 2 c 3 $foo "Snoop Dog" safizzle $safizzle>
<span class="code">&lt;null:safizzle "Huggy Bear"&gt;</span><br>
<span class="code">&lt;hash:foo d 4 a 1 b 2 c 3 $foo "Snoop Dog" safizzle $safizzle&gt;</span>

<pre>
foo:
[
<trace --output $foo>]
</pre>

<h2>&lt;array&gt;</h2>
<array:foo  d 4 a 1 b 2 c 3 >
<span class="code">&lt;array:foo  d 4 a 1 b 2 c 3 &gt;</span>
<pre>
foo:
[
<trace --output $foo>]
</pre>

<a name="widgets"></a>
<h1>Experimental HTML Widgets</h1>

<h2>&lt;var --textarea&gt;</h2>
<null:foo "some interesting text">
<span class="code">&lt;null:foo "some interesting text"&gt;</span><br>
<span class="code">&lt;var --textarea='{nrows: 5, cols: 80, style: "color:blue;background:yellow;"}' $foo&gt;</span><br>
<var --textarea='{nrows: 5, cols: 80, style: "color:blue;background:yellow;"}' $foo>

<h2>&lt;var --ul&gt;</h2>
<span class="code">&lt;null:foo Cardinals Brewers Astros Pirates Cubs Reds&gt;</span><br>
<span class="code">&lt;var --ul $foo&gt;</span>
<null:foo Cardinals Brewers Astros Pirates Cubs Reds>

<var --ul $foo>

<ul>
<foreach $foo>
  <li><var $_></li>
</foreach>
</ul>

<h2>&lt;var --select&gt;</h2>
<h3>Using a simple hash</h3>

<span class="code">&lt;null:foo --json '{ 1: "this", 2: "that"}'&gt;</span><br>
<span class="code">&lt;var --select $foo&gt;</span><br>
<null:foo --json '[ { 1: "this"}, {2: "that"}]'>
<div class="example">
<var --select $foo><br>
</div>

<h3>Using an array of simple hashes</h3>
<span class="code">&lt;null:foo --json '[ { 1: "this"}, {2: "that"}]'&gt;</span><br>
<span class="code">&lt;var --select $foo&gt;</span><br>
<null:foo --json '[ { 1: "this"}, {2: "that"}]'>
<div class="example">
<var --select $foo><br>
</div>

<h3>Using a complex, well defined JSON object </h3>

<span class="code">&lt;null:foo --json '[ { attributes : {value : 1}, text: "this"}, { attributes: { value: 2, selected: "selected"}, text: "that"}]'&gt;</span><br>
<span class="code">&lt;var --select $foo&gt;</span><br>
<null:foo --json '[ { attributes : {value : 1}, text: "this"}, { attributes: { value: 2, selected: "selected"}, text: "that"}]'>
<div class="example">
<var --select $foo><br>
</div>

<h3>&lt;var --select-group $foo&gt;</h3>

<span class="code">&lt;sink:foo --json&gt;</span><br>
<span class="code">[ { label: "foo",  group : [ { attributes : {value : 1}, text: "this"}, { attributes: { value: 2, selected: "selected"}, text: "that"}] },</span><br>
<span class="code">&nbsp;&nbsp;{ label: "foo2", group : [ { attributes : {value : 3}, text: "foo this"}, { attributes: { value: 4}, text: "foo that"}] }</span><br>
<span class="code">]</span><br>
<span class="code">&lt;/sink&gt;</span><br>
<span class="code">&lt;var --select-group $foo&gt;<br>

<sink:foo --json>
[ { label: "foo",  group : [ { attributes : {value : 1}, text: "this"}, { attributes: { value: 2, selected: "selected"}, text: "that"}] },
  { label: "foo2", group : [ { attributes : {value : 3}, text: "foo this"}, { attributes: { value: 4}, text: "foo that"}] }
]
</sink>
<div class="example"><var --select-group $foo></div>

<hr>
<address></address>
<!-- hhmts start -->Last modified: Thu Dec 17 17:28:42 EST 2009 <!-- hhmts end -->
</body> </html>
