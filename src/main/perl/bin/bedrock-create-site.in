#! @PERL@
# -*- perl -*-
# @configure_input@

# bedrock-create-site: copy and create artifacts needed for a Bedrock project

# Copyright (C) 2008 Signature Information Solutions, LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# This is a command line program to create the initial scaffolding for a
# Bedrock project. It's purpose is to automate the handful of necessary (but
# simple) steps; it also provides support for some optional (but common)
# setup steps (such as creating MySQL databases).
#
# See bedrock-create-site(1) for full documentation. You can run perldoc on
# this file to view the POD used to create the man page.
#
# Exits with zero (success) if we were successful in creating the entire
# project scaffolding. Exits with non-zero status if an error was
# encountered.
#
# Note that the program is designed to be idempotent; it can be invoked
# multiple times with the same arguments and it will behave as if it were
# invoked exactly once. This is useful in situations in which the program
# encounters an error (such as not being able to write a file due to
# permissions); once the reported issue has been corrected, the program may
# be re-invoked and it will pick up where it left off. You can use the -O
# (--overwrite) option to force existing files to be regenerated or
# otherwise overwritten.
#
# Usage:
#     $ bedrock-create-site [OPTION]...
#

package _PROG_BEDROCK_CREATE_SITE;

use strict;
use warnings;

# Fixup @INC so that all Perl mods needed by the prog can be found
# ___REPLACE_ME__BEGIN_BLOCK__CONFIGURED_PERL_INC___

use Carp qw( confess );
use Cwd  qw( getcwd realpath );

use Getopt::Long qw( GetOptions );

use Fcntl qw( :mode );
use File::Basename qw( basename dirname );
use File::Copy qw( copy );
use File::Path qw( mkpath );
use File::Spec::Functions qw( catdir catfile abs2rel );
use Hash::Util qw( lock_hash );
use Term::ReadKey qw( ReadMode );

our $VERSION = '@VERSION@';  # filtered in at build time

my $PROG = 'bedrock-create-site';
my $BUILD_DATE = '@BUILD_DATE@';  # filtered in at build time
my $PROJECT_NAME = '@PACKAGE@';   # filtered in at build time

# We reference some files from the Bedrock distribution that was used to
# install this instance of the 'bedrock-create-site' program. Using filtered
# values allows the program to work correctly (and deterministically) even if
# multiple versions of Bedrock are installed.
#
my $BEDROCK_DIST_DATA_DIR   = '@datadir@';    # filtered in at build time
my $BEDROCK_DIST_CGIBIN_DIR = '@cgibindir@';  # filtered in at build time
my $BEDROCK_DIST_HTDOCS_DIR = '@htdocsdir@';  # filtered in at build time

# Options
Getopt::Long::Configure(qw( bundling
                            bundling_override
                            no_auto_abbrev
                            no_auto_help
                            no_auto_version
                            no_getopt_compat
                            no_gnu_compat
                            no_ignore_case_always
                            no_pass_through
                            no_require_order
                            permute));

my $BE_VERBOSE   = 0;
my $SHOW_HELP    = 0;
my $SHOW_VERSION = 0;
my $DO_OVERWRITE_ALL = 0;

# Authentication options that end up as values in the generated Apache
# config. Note that any defaults here are identical to those specified in
# maybe_create_apache_site_config_file_or_die(); they're duplicated here for
# ease of programming.
#
my  $AUTH_HOST     = 'localhost';
our $AUTH_USER     = undef;  # package scoped to allow dynamic deref
my  $AUTH_PASSWORD = undef;
my  $AUTH_DB       = 'bedrock_site';
my  $AUTH_TABLE    = 'session';
my  $AUTH_USERNAME_FIELD = 'username';
my  $AUTH_PASSWORD_FIELD = 'password';
my  $AUTH_PROMPT   = 'Please Enter Your Site Credentials';  # Value for Apache 'AuthName' directive


my $APACHE_AUTH_DB_TYPE;
my $APACHE_AUTH_DB_TYPE_DFLT = 'mysql';
# my @ALL_VALID_APACHE_AUTH_DB_TYPES = (qw( mysql postresql oracle ));
my @ALL_VALID_APACHE_AUTH_DB_TYPES = (qw( mysql ));  # only MySQL is currently supported :-/

# The user may request that the Apache auth db configuration directives be
# written to file separate from the (required) file path specified in
# $APACHE_SITE_CONF_FNAME. If specified, this var will hold that file name
# (path); if the user does not explicitly request an external auth db
# configuration file, then the Apache auth db configuration directives will
# be written inline in $APACHE_SITE_CONF_FNAME.
my $APACHE_AUTH_DB_INCLUDE_FNAME;

# These vars are package scoped so we can dereference them dynamically
our $DOMAIN_NAME;
our $WEBSITE_DIR;
our $APACHE_SITE_CONF_FNAME;  # where to write site (virtual host) configuration
our $APACHE_MOD_PERL_STARTUP_CONF_FNAME;  # where to write startup.pl style file

# These vars are also package scoped for dynamic dereferencing. These are
# the fine-grained overwrite flags, mostly useful for allowing the user to
# specify exceptions to the global --overwrite option. Without fine grained
# exceptions, the user would have to specify /all/ files he wished to
# overwrite explicitly whenever he wished to prevent overwriting of just one
# or two.
our $DO_OVERWRITE_ERROR_DOT_ROC  = -1;          # dflt; 0 if explicitly disabled; 1 if enabled
our $DO_OVERWRITE_ERROR_DOT_ROCK = -1;          # likewise
our $DO_OVERWRITE_INDEX_DOT_ROC  = -1;          # likewise
our $DO_OVERWRITE_INDEX_DOT_ROCK = -1;          # likewise
our $DO_OVERWRITE_ADMIN_INDEX_DOT_ROC  = -1;    # likewise
our $DO_OVERWRITE_ADMIN_INDEX_DOT_ROCK = -1;    # likewise
our $DO_OVERWRITE_BEDROCK_DOT_CGI = -1;         # likewise
our $DO_OVERWRITE_APACHE_SITE_CONF = -1;        # likewise
our $DO_OVERWRITE_APACHE_AUTH_DB_INCLUDE = -1;  # likewise
our $DO_OVERWRITE_APACHE_MOD_PERL_STARTUP_CONF = -1;  # likewise


# We keep a collection of all of our fine-grained overwrite opts so we can
# flip them all on if the user specifies the -O (--overwrite) global
# overwrite option. This simplifies code because only one option need be
# checked.
my %ALL_OVERWRITE_OPTS = ( DO_OVERWRITE_ERROR_DOT_ROC   => 'error.roc',
                           DO_OVERWRITE_ERROR_DOT_ROCK  => 'error.rock',

                           DO_OVERWRITE_INDEX_DOT_ROC   => 'index.roc',
                           DO_OVERWRITE_INDEX_DOT_ROCK  => 'index.rock',

                           DO_OVERWRITE_ADMIN_INDEX_DOT_ROC   => 'index.roc',
                           DO_OVERWRITE_ADMIN_INDEX_DOT_ROCK  => 'index.rock',

                           DO_OVERWRITE_BEDROCK_DOT_CGI => 'bedrock.cgi',
                           DO_OVERWRITE_APACHE_SITE_CONF => undef,  # not yet known
                           DO_OVERWRITE_APACHE_MOD_PERL_STARTUP_CONF => undef,  # not yet known
                           DO_OVERWRITE_APACHE_AUTH_DB_INCLUDE => undef,  # not yet known; may never be specified
                         );

# $var => { desc => str, sopt_name => str }
# Read 'sopt_name' as "short option name"
my %REQUIRED_STR_OPTS = (
                         DOMAIN_NAME => { sopt_name => 'd',
                                          desc => 'domain name'
                                        },

                         WEBSITE_DIR => { sopt_name => 's',
                                          desc => 'site directory'
                                        },

                         APACHE_SITE_CONF_FNAME => { sopt_name => 'f',
                                                     desc => 'apache site config file'
                                                   },

                         APACHE_MOD_PERL_STARTUP_CONF_FNAME => { sopt_name => 'm',
                                                                 desc => 'bedrock mod_perl startup script'
                                                               },

                         AUTH_USER => { sopt_name => 'u',
                                        desc => 'auth db username'
                                      },
                        );
lock_hash %REQUIRED_STR_OPTS;

sub print_usage {
    my ($where) = @_;
    print $where <<"EOH";
Usage: $PROG [OPTIONS]
Creates the initial scaffolding for a Bedrock project.
See ${PROG}(1) for all the gory details.

Options with an asterisk (*) are required unless -h or -V is specified.

Options with an exclamation mark (!) are for required data, but if the
option is not specified on the command line, the program will prompt you for
the data (this is safer for data such as passwords).

Note that the --nooverwrite-foo options represent the default behavior, but
are useful for specifying exceptions to the global --overwrite option.

Likewise, the --overwrite-foo options are useful for overwriting only a few
specific files, and not overwriting anything else (the default behavior is
to not overwrite existing files).

General Options:

  -h, --help         Display this message and exit
* -d, --domain-name=NAME
                     Use NAME as the domain name
* -f, --site-conf=FILE
                     Create Apache site config in FILE

* -m, --apache-mod-perl-startup=FILE
                     Create Bedrock mod_perl startup script in FILE

* -s, --site-dir=DIR Create the website in DIR
  -v, --verbose      Print program progress messages on stderr
  -V, --version      Print on stdout version info and exit


Apache Site Authentication Options:

  -i, --apache-auth-db-include=FILE
                     Write Apache auth db directives to FILE for inclusion
                     from the site-conf file (default is to write auth db
                     directives inline in the site-conf file)

  -t, --apache-auth-db-type=TYPE
                     Database used for website authentication is TYPE
                     Valid values for TYPE include:
                        [mysql]

* -u,--apache-auth-db-user=USERNAME
                     Specify the name of the database user Apache should use
                     for site authentication
! -p,--apache-auth-db-pass=PASSWORD
                     Specify the password for the database user Apache
                     should use for site authentication

  --apache-auth-db-host=HOSTNAME
                     Specify the host name which is the home of the
                     authentication database [localhost]

  --apache-auth-db-database=DATABASE
                     Specify the name of the database that Apache should use
                     when performing site authentication [bedrock_site]

  --apache-auth-db-table=TABLENAME
                     Specify the name of the database table that Apache
                     should use when performing site authentication
                     [session]

  --apache-auth-db-username-field=COLUMNNAME
                     Specify the name of the database table column that
                     contains user names [username]

  --apache-auth-db-password-field=COLUMNNAME
                     Specify the name of the database table column that
                     contains user password [password]

  --apache-auth-db-prompt=STRING
                     Specify the message that Apache should display when
                     requesting authentication credentials
                     [Please Enter Your Site Credentials]


Overwrite Options:

  -O, --overwrite    Overwrite any existing files

  --overwrite-apache-auth-db-include
                     Force overwriting of the specified Apache auth db
                     directives include file
  --nooverwrite-apache-auth-db-include
                     Do not overwrite the specified Apache auth db
                     directives include file

  --overwrite-apache-mod-perl-startup
                     Force overwriting of the specified Bedrock mod_perl
                     startup file
  --nooverwrite-apache-mod-perl-startup
                     Do not overwrite the specified Bedrock mod_perl startup
                     file

  --overwrite-bedrock-dot-cgi
                     Force overwriting of \$sitedir/cgi-bin/bedrock.cgi
  --nooverwrite-bedrock-dot-cgi
                     Do not overwrite \$sitedir/cgi-bin/bedrock.cgi

  --overwrite-error-dot-roc
                     Force overwriting of \$sitedir/htdocs/error.roc
  --nooverwrite-error-dot-roc
                     Do not overwrite \$sitedir/htdocs/error.roc

  --overwrite-error-dot-rock
                     Force overwriting of \$sitedir/htdocs/error.rock
  --nooverwrite-error-dot-rock
                     Do not overwrite \$sitedir/htdocs/error.rock

  --overwrite-index-dot-roc
                     Force overwriting of \$sitedir/htdocs/index.roc
  --nooverwrite-index-dot-roc
                     Do not overwrite \$sitedir/htdocs/index.roc

  --overwrite-index-dot-rock
                     Force overwriting of \$sitedir/htdocs/index.rock
  --nooverwrite-index-dot-rock
                     Do not overwrite \$sitedir/htdocs/index.rock

  --overwrite-admin-index-dot-roc
                     Force overwriting of \$sitedir/htdocs/admin/index.roc
  --nooverwrite-admin-index-dot-roc
                     Do not overwrite \$sitedir/htdocs/admin/index.roc

  --overwrite-admin-index-dot-rock
                     Force overwriting of \$sitedir/htdocs/admin/index.rock
  --nooverwrite-admin-index-dot-rock
                     Do not overwrite \$sitedir/htdocs/admin/index.rock

  --overwrite-site-conf
                     Force overwriting of the specified Apache site config file
  --nooverwrite-site-conf
                     Do not overwrite the specified Apache site config file

EOH
}

# prints program version info on stdout
sub print_version {
    print <<"EOV";
$PROG  (${PROJECT_NAME}) $VERSION
build date: ${BUILD_DATE}
Copyright (C) 2008 Signature Information Solutions, LLC

This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.
EOV
    return;
}

# Returns the function name of the calling function. Functions can use this
# as a generic way to get their own name without sprinkling clunky caller()
# invocations all over the place.
sub __func {
    # ($package, $filename, $line, $subroutine, $hasargs,
    #  $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller($i);
    return (caller(1))[3];
}

# Abstracts the pattern:
#
#     cd somedir;
#     do whatever;
#     cd -;
#
# Executes $what with the current working directory set to $otherdir. Will
# always change the current working directory back to the whatever it was when
# this function was invoked prior to returning.
#
# If an exception is thrown while executing $what, that will be re-thrown
# after changing the directory back to where it was. If /that/ directory
# change fails, then will die with an error message.
#
#
# Example usage:
#     my $rtn1 = with_changed_directory('/tmp', q{mkdir 'newdirA'});
#     my @rtn2 = with_changed_directory('/tmp', q{mkdir 'newdirB'});
#     my $rtn3 = with_changed_directory('/tmp', sub { mkdir 'newdirC' });
#     my @rtn4 = with_changed_directory('/tmp', sub { mkdir 'newdirD' });
#
#     my $rtn5 = eval {
#         with_changed_directory('/tmp', sub { die "intentional exception\n" });
#     };
#     $@ and print "caught exception: $@\n";
#
#
# @param $otherdir - (required) The directory to change into prior to invoking
#                    $what. Dies with a fatal error if we are unable to change
#                    to $otherdir for any reason.
#
# @param $what - (optional) The code to invoke. If not a code reference, will
#                be eval'ed.
#
# @return Returns whatever the result of invoking $what returned.
#
sub with_changed_directory {
    my ($otherdir, $what) = @_;

    confess( __func, q{(): required '$otherdir' param not provided} )
        unless defined $otherdir;
    confess( __func, q{(): required '$otherdir' param may not be then empty string} )
        unless length $otherdir;

    return unless defined $what;

    my $origdir = getcwd;

    confess( __func, qq{(): was unable to change to directory "${otherdir}": $!})
        unless chdir $otherdir;

    my $rtn;
    my @rtn;
    my $exception = undef;
    if ('CODE' eq ref( $what )) {
        if (wantarray) {
            @rtn = eval { &$what };
        }
        else {
            $rtn = eval { &$what };
        }
    }
    else {
        if (wantarray) {
            @rtn = eval "$what";
        }
        else {
            $rtn = eval "$what";
        }
    }
    $exception = $@ if $@;

    confess( __func, qq{(): was unable to change back to original directory "${origdir}": $!})
        unless chdir $origdir;

    die $exception if $exception;
    return (wantarray ? @rtn : $rtn);
}

# Creates all directories (and any needed parent directories) for the names
# passed as args. Duplicates are allowed, and will be silently ignored.
#
# @param @directories - (optional) The names of directories that should be
#                       created.
#
# @return Does not return a meaningful value. Exits program with an error
#         status on error.
#
sub __create_directories_or_die {
    my (@directories) = @_;

    # prevents attempts to create duplicates which may have been passed;
    # also prevents spurious "checking..."  messages
    my $seen = {};

    foreach my $dir ( @directories ) {
        next if exists $seen->{$dir};  # dup
        print STDERR qq{${PROG} (info): checking for the existince of directory "$dir"...}
            if $BE_VERBOSE;
        if (-d $dir) {
            print STDERR qq{found.\n};
        } else {
            print STDERR qq{not found; creating.\n};
            eval { mkpath( $dir ) };
            if ($@) {
                warn(qq{${PROG} (error): was unable to create dir "${dir}": $@\n});
                exit 1;
            }
            print STDERR qq{${PROG} (info): successfully created dir "$dir"\n}
                if $BE_VERBOSE;
        }
        $seen->{$dir} = 1;
    }
    return;
}

# Checks for the existence of the user-specified site directory. If it does
# not exist, attempts to create it.
#
# @param $site_dir - (required) The directory in which the user wants his
#                    web site created.
#
# @return Does not return a meaningful value; exits with an error status on
#         error.
sub __maybe_create_site_directory_or_die {
    my ($site_dir) = @_;
    confess( __func, q{(): required '$site_dir' param not provided} )
        unless defined $site_dir;

    print STDERR "${PROG} (info): checking for the existence of site directory..."
        if $BE_VERBOSE;
    if (-d $site_dir) {
        print STDERR "found\n" if $BE_VERBOSE;
        return;
    }
    else {
        print STDERR "not found; creating\n" if $BE_VERBOSE;
        eval { mkpath( $site_dir ) };
        if ($@) {
            warn(qq{${PROG} (error): was unable to create site dir "${site_dir}": $@\n});
            exit 1;
        }
        print STDERR qq{${PROG} (info): successfully created site dir "$site_dir"\n}
            if $BE_VERBOSE;
    }
    return;
}

# Checks for the existence of all of our subdirs beneath the user-specified
# site directory. If any do not exist, attempts to create them.
#
# @param $site_dir - (required) The directory in which the user wants his
#                    web site created.
#
# @return Does not return a meaningful value; exits with an error status on
#         error.
sub __maybe_create_site_subdirs_or_die {
    my ($site_dir) = @_;
    confess( __func, q{(): required '$site_dir' param not provided} )
        unless defined $site_dir;

    # FIXME: maybe change 'config' to 'bedrock-config', or maybe even make
    #        it conf/bedrock-config

    # FIXME: move startup BLM directory out of the web document tree!

    # Most of these are obvious. The others are:
    #     config    - home to Bedrock configuration file, 'tagx.xml'
    #     logs/html - home to Bedrock page logs
    #
    # Also note that we create a symlink from:
    #     htdocs/admin/cgi-bin
    # to:
    #     cgi-bin
    my @subdirs = (qw(
                       conf
                       config
                       cgi-bin

                       cgi-bin/Perl
                       cgi-bin/Perl/BLM
                       cgi-bin/Perl/BLM/Startup

                       htdocs
                       htdocs/admin
                       htdocs/img
                       logs
                       logs/html
                       session
                    ));

    foreach my $dir (map { catdir($site_dir, $_) } @subdirs) {
        print STDERR qq{${PROG} (info): checking for the existence of dir "$dir"...}
            if $BE_VERBOSE;
        if (-d $dir) {
            print STDERR "found\n" if $BE_VERBOSE;
            next;
        }
        else {
            print STDERR "not found; creating\n" if $BE_VERBOSE;
            eval { mkpath( $dir ) };
            if ($@) {
                warn(qq{${PROG} (error): was unable to create dir "${dir}": $@\n});
                exit 1;
            }
            print STDERR qq{${PROG} (info): successfully created dir "$dir"\n}
                if $BE_VERBOSE;
        }
    }

    my $new = catdir( $site_dir, 'htdocs/admin/cgi-bin' );
    print STDERR qq{${PROG} (info): checking for the existence of dir symlink "$new"...}
        if $BE_VERBOSE;
    if (-d $new) {
# FIXME: check target of the link
        print STDERR "found\n" if $BE_VERBOSE;
        return;
    }

    print STDERR "not found; creating\n" if $BE_VERBOSE;
    eval {
        # CAREFUL: We want to have a file structure like this:
        #
        #     ${site_dir}/cgi-bin
        #     ${site_dir}/htdocs/admin/cgi-bin  ->  ../../cgi-bin
        my $old = catdir( $site_dir, 'cgi-bin' );
        die qq{was unable to create symlinks from "$new" to "$old"\n}
            unless (with_changed_directory( dirname( $new ),
                                            sub { symlink( abs2rel( realpath( $old )),
                                                           basename($new)) })); # may throw fatal error
    };
    if ($@) {
        warn(qq{${PROG} (error): was unable to create symlink: $@\n});
        exit 1;
    }
    print STDERR qq{${PROG} (info): successfully created dir symlink "$new"\n}
        if $BE_VERBOSE;

    return;
}

# Checks for the existence of the user-specified site directory. If it does
# not exist, attempts to create it. Likewise for any subdirectories beneatch
# $site_dir that we use.
#
# @param $site_dir - (required) The directory in which the user wants his
#                    web site created.
#
# @return Does not return a meaningful value; exits with an error status on
#         error.
#
sub maybe_create_site_directory_tree_or_die {
    my ($site_dir) = @_;
    confess( __func, q{(): required '$site_dir' param not provided} )
        unless defined $site_dir;

    __maybe_create_site_directory_or_die( $site_dir );
    __maybe_create_site_subdirs_or_die( $site_dir );
}


# Worker function that always creates contents suitable for an
# htdocs/admin/index.rock file in the file specified in the $indexrock_path
# param.
#
# @param $indexrock_path - (required) Path where the file should be written.
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub __create_admin_index_dot_rock_or_die {
    my ($indexrock_path) = @_;
    unless( open(INDEX_DOT_ROCK, ">$indexrock_path")) {
        warn(qq{${PROG} (error): was unable to open file for writing "${indexrock_path}": $!\n});
        exit 1;
    }

    # Note that the Bedrock/img/ path below is aliased in the Apache config
    # file snippet that we create
    my $now = localtime;  # e.g., "Thu Oct 13 04:54:34 2007"
    print INDEX_DOT_ROCK <<'EOF';
<html>
<body>
  <h1>Admin Page</h1>
<if $env.REMOTE_USER>
  You have authenticated correctly and are logged in as: <b><var $env.REMOTE_USER></b>.
  <hr>
  Output from example BLM (BLM::Startup::HelloWorld)
  Message: <b><var $helloworld.config.message></b>
<pre>
<trace --output $helloworld>
</pre>
<else>
  There appears to be something wrong with the website configuration. You should have
  had a REMOTE_USER environment variable.
</if>
  <hr>
<pre>
<trace --output \$env>
</pre>
</body>
</html>
EOF
    unless( close(INDEX_DOT_ROCK)) {
        warn (qq{${PROG} (warning): was error while closing file "$indexrock_path": $!}
              . qq{; continuing anyway\n});
    }
    return;

}


# Worker function that always creates contents suitable for an
# htdocs/index.rock file in the file specified in the $indexrock_path param.
#
# @param $indexrock_path - (required) Path where the file should be written.
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
sub __create_index_dot_rock_or_die {
    my ($indexrock_path) = @_;
    unless( open(INDEX_DOT_ROCK, ">$indexrock_path")) {
        warn(qq{${PROG} (error): was unable to open file for writing "${indexrock_path}": $!\n});
        exit 1;
    }

    # Note that the Bedrock/img/ path below is aliased in the Apache config
    # file snippet that we create
    my $now = localtime;  # e.g., "Thu Oct 13 04:54:34 2007"
    print INDEX_DOT_ROCK <<"EOF";
<html>
<body>
  <img src="/Bedrock/img/bedrock.jpg">
  <h1>Bedrock Appears to Work!</h1>
  <i>Autogenerated via $PROG on: $now</i>
  <h2>Environment</h2>
  <pre>
<trace --output \$env>
  </pre>
  <hr/>
  <h2>Session</h2>
  <pre>
<trace --output \$session>
  </pre>
</body>
</html>
EOF
    unless( close(INDEX_DOT_ROCK)) {
        warn (qq{${PROG} (warning): was error while closing file "$indexrock_path": $!}
              . qq{; continuing anyway\n});
    }
    return;
}

# Parameterized function for creating these files:
#
#     htdocs/index.rock
#     htdocs/admin/index.rock
#
# and the corresponding index.roc symlinks to them. This function basically
# contains the logic for obeying the overwrite flags and logging messages,
# etc., as appropriate. The function that actually creates the file contents
# is passed by the caller as a code reference in the $content_creation_func
# param.
#
# @param $indexrock - (required) The path to the file that will contain the
#                     appropriate index.rock contents (as determined by
#                     $content_creation_func).
#
# @param $indexroc - (required) The path to the file that, by default, will be
#                    a symlink to the file specified by $indexrock.
#
# @param $overwrite_rock_flag - (required) Indicates whether or not we should
#                               ovewrite the file named by $indexrock if it
#                               already exists.
#
# @param $overwrite_roc_flag - (required) Indicates whether or not we should
#                              ovewrite the file named by $indexroc if it
#                              already exists.
#
# @param $content_creation_func - (required) reference to a function that
#                                 should be invoked to create the contents in
#                                 $indexrock. The function should take a
#                                 single parameter (the path to write the file
#                                 contents to) and exit on any error.
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub __maybe_create_named_index_dot_rock_file_or_die {
    my ($indexrock,           $indexroc,
        $overwrite_rock_flag, $overwrite_roc_flag,
        $content_creation_func) = @_;

    confess( __func, q{(): required '$indexrock' param not provided} )
        unless defined $indexrock;
    confess( __func, q{(): required '$indexroc' param not provided} )
        unless defined $indexroc;

    # We'll accept undef as false for our $overwrite_roc?_flag params, so no need to validate them

    confess( __func, q{(): required '$content_creation_func' param not provided} )
        unless defined $content_creation_func;

    my $create_indexrock = 0;
    print STDERR qq{${PROG} (info): checking for the existince of file "$indexrock"...}
        if $BE_VERBOSE;
    if (-f $indexrock) {
        if ($overwrite_rock_flag) {
            print STDERR qq{found; will overwrite.\n};
            $create_indexrock = 1;
        }
        else {
            print STDERR qq{found; will not overwrite.\n};
        }
    }
    else {
        print STDERR qq{not found; will create.\n};
        $create_indexrock = 1;
    }

    if ($create_indexrock) {
        &$content_creation_func( $indexrock );
        print STDERR qq{${PROG} (info): successfully created file "$indexrock"\n}
            if $BE_VERBOSE;
    }

    my $create_indexroc = 0;
    print STDERR qq{${PROG} (info): checking for the existince of file "$indexroc"...}
        if $BE_VERBOSE;
    if (-f $indexroc) {
        if ($overwrite_roc_flag) {
            print STDERR qq{found; will overwrite.\n};
            $create_indexroc = 1;
        }
        else {
            print STDERR qq{found; will not overwrite.\n};
        }
    }
    else {
        print STDERR qq{not found; will create.\n};
        $create_indexroc = 1;
    }

    if ($create_indexroc) {
        if (-f $indexroc) {
            # We need to unlink the symlink file if it already exists;
            # otherwise our symlink() command will fail.
            unless( unlink( $indexroc )) {
                warn(qq{${PROG} (error): was unable to unlink file "${indexroc}": $!\n});
                exit 1;
            }
        }
        eval {
            die qq{was unable to create symlinks from "$indexroc" to "$indexrock"\n}
                unless (with_changed_directory( dirname( $indexrock ),
                                                sub { symlink( basename($indexrock), basename($indexroc)) })); # may throw fatal error
        };
        if ($@) {
            warn(qq{${PROG} (error): was unable to create symlink: $@\n});
            exit 1;
        }
        print STDERR qq{${PROG} (info): successfully created symlink "$indexroc"\n}
            if $BE_VERBOSE;
    }
    return;
}

# Looks for the following files:
#
#     ${site_dir}/htdocs/index.roc
#     ${site_dir}/htdocs/index.rock
#
# and creates one or both if not found ('index.rock', if created, will always
# be a regular file, and 'index.roc', if created, will always be a symlink to
# 'index.rock').
#
# This function obeys these fine-grained overwrite flags:
#     $DO_OVERWRITE_INDEX_DOT_ROC
#     $DO_OVERWRITE_INDEX_DOT_ROCK
#
# @param $site_dir - (required) The web site diretory as specified by the
#                    user. The index.rock and index.roc files will live in
#                    $site_dir/htdocs/
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub maybe_create_index_dot_rock_or_die {
    my ($site_dir) = @_;
    confess( __func, q{(): required '$site_dir' param not provided} )
        unless defined $site_dir;

    my $indexrock = catdir( $site_dir, 'htdocs', 'index.rock');
    my $indexroc  = catdir( $site_dir, 'htdocs', 'index.roc' );

    __maybe_create_named_index_dot_rock_file_or_die(
        $indexrock, $indexroc,
        $DO_OVERWRITE_INDEX_DOT_ROCK,
        $DO_OVERWRITE_INDEX_DOT_ROC,
        \&__create_index_dot_rock_or_die
    );
}

# Looks for the following files:
#     ${site_dir}/htdocs/admin/index.roc
#     ${site_dir}/htdocs/admin/index.rock
#
# and creates one or both if not found ('index.rock', if created, will always
# be a regular file, and 'index.roc', if created, will always be a symlink to
# 'index.rock').
#
# This function obeys these fine-grained overwrite flags:
#     $DO_OVERWRITE_ADMIN_INDEX_DOT_ROC
#     $DO_OVERWRITE_ADMIN_INDEX_DOT_ROCK
#
# @param $site_dir - (required) The web site diretory as specified by the
#                    user. The index.rock and index.roc files will live in
#                    $site_dir/htdocs/admin/
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub maybe_create_admin_index_dot_rock_or_die {
    my ($site_dir) = @_;
    confess( __func, q{(): required '$site_dir' param not provided} )
        unless defined $site_dir;

    my $indexrock = catdir( $site_dir, 'htdocs', 'admin', 'index.rock');
    my $indexroc  = catdir( $site_dir, 'htdocs', 'admin', 'index.roc' );

    __maybe_create_named_index_dot_rock_file_or_die(
        $indexrock, $indexroc,
        $DO_OVERWRITE_ADMIN_INDEX_DOT_ROCK,
        $DO_OVERWRITE_ADMIN_INDEX_DOT_ROC,
        \&__create_admin_index_dot_rock_or_die
    );
}

# Looks for an 'error.roc' file and an 'error.rock' file (or symlink), and
# copies the one from the bedrock distribution if not found ('error.rock', if
# created, will always be a regular file, and 'error.roc', if created, will
# always be a symlink to 'error.rock').
#
# This function obeys these fine-grained overwrite flags:
#     $DO_OVERWRITE_ERROR_DOT_ROC
#     $DO_OVERWRITE_ERROR_DOT_ROCK
#
# @param $site_dir - (required) The web site diretory as specified by the
#                    user. The error.rock and error.roc files will live in
#                    $site_dir/htdocs/
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub maybe_copy_dist_error_dot_rock_or_die {
    my ($site_dir) = @_;
    confess( __func, q{(): required '$site_dir' param not provided} )
        unless defined $site_dir;

    my $errorrock = catdir( $site_dir, 'htdocs', 'index.rock');
    my $errorroc  = catdir( $site_dir, 'htdocs', 'index.roc' );

    my $copy_errorrock = 0;
    print STDERR qq{${PROG} (info): checking for the existince of file "$errorrock"...}
        if $BE_VERBOSE;
    if (-f $errorrock) {
        if ($DO_OVERWRITE_ERROR_DOT_ROCK) {
            print STDERR qq{found; will overwrite.\n};
            $copy_errorrock = 1;
        }
        else {
            print STDERR qq{found; will not overwrite.\n};
        }
    }
    else {
        print STDERR qq{not found; will copy from Bedrock distribution.\n};
        $copy_errorrock = 1;
    }

    if ($copy_errorrock) {
        my $dist_errorrock = "${BEDROCK_DIST_HTDOCS_DIR}/error.rock";
        unless (-f $dist_errorrock) {
            warn(qq{${PROG} (error): Bedrock distribution file does not exist: "${dist_errorrock}": $!\n});
            exit 1;
        }

        unless ( copy( $dist_errorrock, $errorrock )) {
            warn(qq{${PROG} (error): Was unable to copy Bedrock distribution file ("${dist_errorrock}") to "$errorrock": $!\n});
            exit 1;
        }
        print STDERR qq{${PROG} (info): successfully copied file "$errorrock" from Bedrock distribution\n}
            if $BE_VERBOSE;
    }

    my $create_errorroc = 0;
    print STDERR qq{${PROG} (info): checking for the existince of file "$errorroc"...}
        if $BE_VERBOSE;
    if (-f $errorroc) {
        if ($DO_OVERWRITE_ERROR_DOT_ROC) {
            print STDERR qq{found; will overwrite.\n};
            $create_errorroc = 1;
        }
        else {
            print STDERR qq{found; will not overwrite.\n};
        }
    }
    else {
        print STDERR qq{not found; will create.\n};
        $create_errorroc = 1;
    }

    if ($create_errorroc) {
        if (-f $errorroc) {
            # We need to unlink the symlink file if it already exists;
            # otherwise our symlink() command will fail.
            unless( unlink( $errorroc )) {
                warn(qq{${PROG} (error): was unable to unlink file "${errorroc}": $!\n});
                exit 1;
            }
        }
        eval {
            die qq{was unable to create symlink from "$errorroc" to "$errorrock"\n}
                unless (with_changed_directory( dirname( $errorrock),
                                                sub { symlink( basename($errorrock), basename($errorroc)) })); # may throw fatal error
        };
        if ($@) {
            warn(qq{${PROG} (error): was unable to create symlink: $@\n});
            exit 1;
        }
        print STDERR qq{${PROG} (info): successfully created symlink "$errorroc"\n}
            if $BE_VERBOSE;
    }
    return;
}

# Looks for a 'bedrock.cgi' file copies the one from the bedrock distribution
# if not found. Ensures that the resulting file is world readable and
# executable (so it will actually work as a CGI program).
#
# This function obeys this fine-grained overwrite flag:
#     $DO_OVERWRITE_BEDROCK_DOT_CGI
#
# @param $site_dir - (required) The web site diretory as specified by the
#                    user. The bedrock.cgi file will live in:
#                        $site_dir/cgi-bin/
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub maybe_copy_dist_bedrock_dot_cgi_or_die {
    my ($site_dir) = @_;
    confess( __func, q{(): required '$site_dir' param not provided} )
        unless defined $site_dir;

    my $bedrockcgi = catdir( $site_dir, 'cgi-bin', 'bedrock.cgi');

    my $copy_bedrockcgi = 0;
    print STDERR qq{${PROG} (info): checking for the existince of file "$bedrockcgi"...}
        if $BE_VERBOSE;
    if (-f $bedrockcgi) {
        if ($DO_OVERWRITE_BEDROCK_DOT_CGI) {
            print STDERR qq{found; will overwrite.\n};
            $copy_bedrockcgi = 1;
        }
        else {
            print STDERR qq{found; will not overwrite.\n};
        }
    }
    else {
        print STDERR qq{not found; will copy from Bedrock distribution.\n};
        $copy_bedrockcgi = 1;
    }

    return unless $copy_bedrockcgi;

    my $dist_bedrockcgi = "${BEDROCK_DIST_CGIBIN_DIR}/bedrock.cgi";
    unless (-f $dist_bedrockcgi) {
        warn(qq{${PROG} (error): Bedrock distribution file does not exist: "${dist_bedrockcgi}": $!\n});
        exit 1;
    }

    unless ( copy( $dist_bedrockcgi, $bedrockcgi )) {
        warn(qq{${PROG} (error): Was unable to copy Bedrock distribution file ("${dist_bedrockcgi}") to "$bedrockcgi": $!\n});
        exit 1;
    }
    print STDERR qq{${PROG} (info): successfully copied file "$bedrockcgi" from Bedrock distribution\n}
        if $BE_VERBOSE;

    my $mode = ( stat( $bedrockcgi ))[2];

    my $newbits = 0;
    $newbits |= S_IROTH unless ( $mode & S_IROTH );
    $newbits |= S_IXOTH unless ( $mode & S_IXOTH );
    if ( $newbits ) {
        unless( chmod( $mode|$newbits, $bedrockcgi )) {
            warn(qq{${PROG} (error): Was unable to chmod file to be "other" readable and executable: "${bedrockcgi}": $!\n});
            exit 1;
        }
    }

    return;
}

# Creates an apache virtual host config file snippet in the file named by
# APACHE_SITE_CONF_PATH (and APACHE_AUTH_DB_INCLUDE_FNAME, if provided). Any
# parent directories will also be created.
#
# This function obeys the following fine-grained overwrite flag:
#     $DO_OVERWRITE_APACHE_SITE_CONF
#     $DO_OVERWRITE_APACHE_AUTH_DB_INCLUDE
#
# This function takes an alarming number of "named" parameters (only 5 of
# which are required). Most of them are simply used as values for various
# Apache authentication directives in the generated config file(s).
#
# @param APACHE_SITE_CONF_PATH - (required) Path where we should write a
#                                virtual host config file snippet for the
#                                Bedrock site being configured.
#
# @param SITE_DIR - (required) The web site diretory as specified by the
#                   user. The value specified will be used to populate
#                   Apache config file directives in the generated file.
#
# @param APACHE_MOD_PERL_STARTUP_CONF_PATH - (required) Path where the Bedrock
#                                            mod_perl startup script will be
#                                            written.
#
# @param APACHE_AUTH_DB_TYPE - (optional) The type of database used by
#                              Apache for Bedrock site
#                              authentication. Currently, the only valid
#                              value is 'mysql', but we plan on supporting
#                              other databases in the future. Defaults to
#                              'mysql' if not specified.
#
# @param APACHE_AUTH_DB_INCLUDE_FNAME - (optional) The name of a file into
#                                       which Apache authentication
#                                       directives should be written; this
#                                       file will be included via an Apache
#                                       'Include' directive from the main
#                                       config file that we write to
#                                       APACHE_SITE_CONF_PATH. If undef,
#                                       such directives will be written
#                                       inline in the file specified by
#                                       APACHE_SITE_CONF_PATH.
#
# @param AUTH_HOST - (optional) The host on which the site authentication
#                    database. Defaults to 'localhost' if not specified.
#
# @param AUTH_USER - (required) The name of the database user to use for
#                    site authentication.
#
# @param AUTH_PASSWORD - (required) The password for AUTH_USER.
#
# @param AUTH_DB - (optional) The name of the database to use for
#                  authentication. If not specified, defaults to
#                  'bedrock_site'.
#
# @param AUTH_TABLE - (optional) The name of the table in AUTH_DB that
#                     contains the authentication data. If not specified,
#                     defaults to 'session'.
#
# @param AUTH_USERNAME_FIELD - (optional) The name of the column in
#                              AUTH_TABLE that contains usernames to
#                              reference during authentication. If not
#                              specified, defaults to 'username'.
#
# @param AUTH_PASSWORD_FIELD - (optional) The name of the column in
#                              AUTH_TABLE that contains passwords to
#                              reference during authentication. If not
#                              specified, defaults to 'password'.
#
# @param AUTH_PROMPT - (optional) String to display when prompting for site
#                      authentication credentials. If not provided, defaults
#                      to 'Please Enter Your Site Credentials'.
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub maybe_create_apache_site_config_file_or_die {
    my (%args) = (APACHE_SITE_CONF_PATH => undef,
                  SITE_DIR              => undef,
                  APACHE_MOD_PERL_STARTUP_CONF_PATH => undef,
                  APACHE_AUTH_DB_TYPE   => 'mysql',
                  APACHE_AUTH_DB_INCLUDE_FNAME => undef,

                  AUTH_HOST     => 'localhost',
                  AUTH_USER     => undef,
                  AUTH_PASSWORD => undef,

                  AUTH_DB             => 'bedrock_site',
                  AUTH_TABLE          => 'session',
                  AUTH_USERNAME_FIELD => 'username',
                  AUTH_PASSWORD_FIELD => 'password',

                  AUTH_PROMPT         => 'Please Enter Your Site Credentials',

                  # Passed "named" arguments override above defaults
                  @_);

    confess( __func, q{(): required 'APACHE_SITE_CONF_PATH' param not provided} )
        unless (exists $args{APACHE_SITE_CONF_PATH}
                && defined $args{APACHE_SITE_CONF_PATH});
    confess( __func, q{(): required 'SITE_DIR' param not provided} )
        unless (exists $args{SITE_DIR}
                && defined $args{SITE_DIR});
    confess( __func, q{(): required 'APACHE_MOD_PERL_STARTUP_CONF_PATH' param not provided} )
        unless (exists $args{APACHE_MOD_PERL_STARTUP_CONF_PATH}
                && defined $args{APACHE_MOD_PERL_STARTUP_CONF_PATH});
    confess( __func, q{(): required 'AUTH_USER' param not provided} )
        unless (exists $args{AUTH_USER}
                && defined $args{AUTH_USER});
    confess( __func, q{(): required 'AUTH_PASSWORD' param not provided} )
        unless (exists $args{AUTH_PASSWORD}
                && defined $args{AUTH_PASSWORD});

    # Make sure caller hasn't set to undef any of our optional opts. We're
    # depending on these having values (except for
    # APACHE_AUTH_DB_INCLUDE_FNAME).
    foreach my $optional_arg_key (qw( APACHE_AUTH_DB_TYPE
                                      AUTH_HOST
                                      AUTH_DB
                                      AUTH_TABLE
                                      AUTH_USERNAME_FIELD
                                      AUTH_PASSWORD_FIELD
                                      AUTH_PROMPT ))
    {
        confess( __func, qq{(): optional '${optional_arg_key}' param may not be undef or empty} )
            unless (defined $args{$optional_arg_key}
                    && length $args{$optional_arg_key});
    }

    # XXX: This will need to be fixed up to support other database types
    confess( __func, qq{(): Illegal value ("$args{APACHE_AUTH_DB_TYPE}") for},
             q{ 'APACHE_AUTH_DB_TYPE' param; must be 'mysql'} )
        unless ('mysql' eq $args{APACHE_AUTH_DB_TYPE});

    # For convenience, pull frequently referenced params out of %args
    my ($apache_site_conf_path, $site_dir,
        $apache_auth_db_type,   $apache_auth_db_include_fname) =
            delete @args{qw( APACHE_SITE_CONF_PATH  SITE_DIR
                             APACHE_AUTH_DB_TYPE    APACHE_AUTH_DB_INCLUDE_FNAME )};

    my $have_apache_auth_db_include_fname = ((defined $apache_auth_db_include_fname
                                              && length $apache_auth_db_include_fname) ? 1 : 0);

    my @confdirs = ( dirname( $apache_site_conf_path ) );
    push (@confdirs, dirname( $apache_auth_db_include_fname ))
        if $have_apache_auth_db_include_fname;

    __create_directories_or_die( @confdirs );

    unless( open(APACHE_SITE_CONF, ">$apache_site_conf_path")) {
        warn(qq{${PROG} (error): was unable to open file for writing "${apache_site_conf_path}": $!\n});
        exit 1;
    }

    my $was_error = 0;

    my $apache_auth_db_handle;
    if ($have_apache_auth_db_include_fname) {
        unless( open($apache_auth_db_handle, ">$apache_auth_db_include_fname")) {
            warn(qq{${PROG} (error): was unable to open file for writing "${apache_auth_db_include_fname}": $!\n});
            $was_error = 1;
            goto DONE_APACHE_SITE_CONF;
        }
    }
    else {
        $apache_auth_db_handle = \*APACHE_SITE_CONF;
    }

    my $now = localtime;  # e.g., "Thu Oct 13 04:54:34 2007"

    if ($DO_OVERWRITE_APACHE_SITE_CONF) {
# FIXME: correctly set PERL5LIB, if needed; for now I've temporarily disabled it
        print APACHE_SITE_CONF <<"EOF";
<VirtualHost *>
# - Autogenerated via $PROG on: $now

SetEnv     CONFIG_PATH ${site_dir}/config
PerlSetEnv CONFIG_PATH ${site_dir}/config

#SetEnv PERL5LIB \$BEDROCK_PERL_DIR

# FIXME: we probably want to be using PerlPostConfigRequire instead of PerlRequire
#PerlRequire ${site_dir}/conf/startup.pl
PerlRequire $args{APACHE_MOD_PERL_STARTUP_CONF_PATH}

ServerName www.$DOMAIN_NAME
ServerAlias $DOMAIN_NAME

LogFormat COMBINED
ErrorLog    ${site_dir}/logs/error_log
TransferLog ${site_dir}/logs/access_log

HostNameLookups off

DirectoryIndex index.html index.roc index.rock

DocumentRoot ${site_dir}/htdocs

<Directory "${site_dir}/htdocs">
  Options All FollowSymLinks
  AllowOverride All
  Order allow,deny
  Allow from all

# if you want to have an 401 (Authorization Required) ErrorDocument that does something interesting in the event
# your user forgot his password, you probably do not want to protect the document root

#  Include ${site_dir}/config/auth_mysql.conf

  ErrorDocument 401 /401.html

  <FilesMatch "\\.rock\$">
    Action bedrock_cgi /cgi-bin/bedrock.cgi
    AddHandler   bedrock_cgi             .rock
    SetHandler   bedrock_cgi
    AcceptPathInfo On
  </FilesMatch>

  <FilesMatch "\\.roc\$">
    AddType	text/html	.roc
    SetHandler	perl-script
    PerlHandler	Apache::Bedrock
  </FilesMatch>

</Directory>

Alias /img_shared  ${site_dir}/htdocs/img
Alias /Bedrock/img ${site_dir}/htdocs/img

<Directory ${site_dir}/htdocs/img>
   Options All 
   AllowOverride All
   Order allow,deny
   Allow from all
</Directory>

ScriptAlias /cgi-bin ${site_dir}/cgi-bin

<Directory "${site_dir}/cgi-bin">
  AllowOverride None
  Order allow,deny
  Allow from all
  Options ExecCGI SymLinksIfOwnerMatch
</Directory>

ScriptAlias /admin/cgi-bin ${site_dir}/htdocs/admin/cgi-bin

<Directory "${site_dir}/htdocs/admin/cgi-bin">
  Options ExecCGI SymLinksIfOwnerMatch
</Directory>

<Directory "${site_dir}/htdocs/admin/">

# This is where you might want to protect an area of your website
EOF

        # If the user provided an external file for the auth directives,
        # then we'll provide an 'Include' directive to pull it in.
        if ($have_apache_auth_db_include_fname) {
            print APACHE_SITE_CONF <<"EOF";
  Include $apache_auth_db_include_fname
EOF
        }

        print APACHE_SITE_CONF <<"EOF";
# ------------------------------------------------------------------------------------------------
# This is where it gets a bit tricky...
#
# Since we want an environment variable REMOTE_USER to reflect the currently
# authenticated user of the site, we need to put the actual bedrock processor
# under a protected part of the site.
#
# Apache 2 does however set the environment variable REDIRECT_REMOTE_USER when an
# action handler not under Auth control is used to process a page on a part of the site that is
# under Auth control. One might have expected to see REMOTE_USER in the environment.
#
# So, typically, I would do this:
#
# ln -s ${site_dir}/cgi-bin ${site_dir}/htdocs/admin/cgi-bin
#
# ...so that when the CGI script runs it contains the environment variable REMOTE_USER.
# That\'s because that part of the site (the /admin/cgi-bin/bedrock.cgi) WAS under Auth control.
# If we just has the /cgi-bin/bedrock.cgi script process .rock files in the /admin directory
# older versions of Apache would not have reflected REMOTE_USER since /cgi-bin/bedrock.cgi itself
# is not under Auth control.  New versions of Apache reflect REDIRECT_REMOTE_USER under that
# situation.  Rather than have a page look for both enviornment variables, I prefer the somewhat
# convoluted approach I have just described.
# ------------------------------------------------------------------------------------------------

  <FilesMatch "\\.rock\$">
    Action bedrock_cgi /admin/cgi-bin/bedrock.cgi
    AddHandler   bedrock_cgi             .rock
    SetHandler   bedrock_cgi
    AcceptPathInfo On
  </FilesMatch>

  <FilesMatch "\\.roc\$">
    AddType	text/html	.roc
    SetHandler	perl-script
    PerlHandler	Apache::Bedrock
  </FilesMatch>

</Directory>
</VirtualHost>
EOF
    }

    if ( ((!$have_apache_auth_db_include_fname)
          && $DO_OVERWRITE_APACHE_SITE_CONF)

         || ($have_apache_auth_db_include_fname
             && $DO_OVERWRITE_APACHE_AUTH_DB_INCLUDE))
    {
        # Only print the "Autogenerated" message if printing to an external
        # file (we've already printed such a message above if writing to the
        # main site config file).
        if ($have_apache_auth_db_include_fname) {
            print $apache_auth_db_handle <<"EOF";
# - Autogenerated via $PROG on: $now
EOF
        }

        print $apache_auth_db_handle <<"EOF";
# - found the line below necessary so Apache 2 does not 
#   assume it has control of authentication and let's mod_auth_mysql do
#   its thing...

AuthBasicAuthoritative Off

AuthName "$args{AUTH_PROMPT}"

AuthUserFile /dev/null
AuthGroupFile /dev/null

AuthMySQL on
AuthMySQL_Authoritative on

AuthMySQL_DB   $args{AUTH_DB}
AuthMySQL_Host $args{AUTH_HOST}
AuthMySQL_User $args{AUTH_USER}
AuthMySQL_Password $args{AUTH_PASSWORD}

AuthMySQL_Encryption_Types Crypt

AuthMySQL_Password_Table $args{AUTH_TABLE}
AuthMySQL_Username_Field $args{AUTH_USERNAME_FIELD}
AuthMySQL_Password_Field $args{AUTH_PASSWORD_FIELD}

AuthType Basic
require valid-user
EOF
    }

  DONE_APACHE_AUTH_DB:
    # Don't close if apache auth db is an indirect handle to APACHE_SITE_CONF
    if ($have_apache_auth_db_include_fname) {
        unless( close($apache_auth_db_handle)) {
            warn (qq{${PROG} (warning): was error while closing file "$apache_auth_db_include_fname": $!}
                  . qq{; continuing anyway\n});
        }
    }

  DONE_APACHE_SITE_CONF:
    unless( close(APACHE_SITE_CONF)) {
        warn (qq{${PROG} (warning): was error while closing file "$apache_site_conf_path": $!}
              . qq{; continuing anyway\n});
    }

    exit 1 if $was_error;
    return;  # success
}

# Creates a file suitable for reference via the Apache mod_perl PerlRequire
# (or related). The file is created in the file named by
# APACHE_MOD_PERL_STARTUP_CONF_PATH; any parent directories will be created as
# needed.
#
# This function obeys the following fine-grained overwrite flag:
#     $DO_OVERWRITE_APACHE_MOD_PERL_STARTUP_CONF
#
# Note that the created file will contain the contents of the file
# 'bedrock-perl5-inc-begin-block.snippet' installed as part of the Bedrock
# distribution. This allows the Perl interpreter to find all of the installed
# Bedrock perl modules regardless of where they were installed.
#
# @param APACHE_MOD_PERL_STARTUP_CONF_PATH - (required) Path where we should
#                                            write a Perl program file
#                                            suitable for inclusion via
#                                            mod_perl's 'PerlRequire'
#                                            directive (or equivalent).
#
# @param SITE_DIR - (required) The web site diretory as specified by the
#                   user. The value specified will be used to push the
#                   SITE_DIR/cgi-bin/Perl directory onto Perl's @INC in the
#                   generated file. FIXME: This is dubious.
#
# @return Does not return a meaningful value. Exits with an error status on
#         error.
#
sub maybe_create_apache_mod_perl_startup_dot_pl_file_or_die {
    my (%args) = (APACHE_MOD_PERL_STARTUP_CONF_PATH => undef,
                  SITE_DIR => undef,
                  # Passed "named" arguments override above defaults
                  @_);

    confess( __func, q{(): required 'APACHE_MOD_PERL_STARTUP_CONF_PATH' param not provided} )
        unless (exists $args{APACHE_MOD_PERL_STARTUP_CONF_PATH}
                && defined $args{APACHE_MOD_PERL_STARTUP_CONF_PATH});
    confess( __func, q{(): required 'SITE_DIR' param not provided} )
        unless (exists $args{SITE_DIR}
                && defined $args{SITE_DIR});


    print STDERR qq{${PROG} (info): checking for the existince of file "$args{APACHE_MOD_PERL_STARTUP_CONF_PATH}"...}
        if $BE_VERBOSE;
    if (-f $args{APACHE_MOD_PERL_STARTUP_CONF_PATH}) {
        if ($DO_OVERWRITE_APACHE_MOD_PERL_STARTUP_CONF) {
            print STDERR qq{found; will overwrite.\n};
        }
        else {
            print STDERR qq{found; will not overwrite.\n};
            return;
        }
    }
    else {
        print STDERR qq{not found; will create.\n};
    }

    # Create any parent directories, if needed
    __create_directories_or_die( dirname( $args{APACHE_MOD_PERL_STARTUP_CONF_PATH} ) );

    unless( open(APACHE_MOD_PERL_STARTUP_CONF, ">$args{APACHE_MOD_PERL_STARTUP_CONF_PATH}")) {
        warn(qq{${PROG} (error): was unable to open file for writing "$args{APACHE_MOD_PERL_STARTUP_CONF_PATH}": $!\n});
        exit 1;
    }
    my $now = localtime;  # e.g., "Thu Oct 13 04:54:34 2007"

    my $was_error = 0;

# FIXME: I think pushing cgi-bin/Perl onto @INC is a bug. Investigate if this
#        is really necesary and remove if not
    print APACHE_MOD_PERL_STARTUP_CONF <<"EOF";
# - Autogenerated via $PROG on: $now

# - Apache2 mod_perl script to be run during Apache startup by specifying:
#
#   PerlRequire $args{APACHE_MOD_PERL_STARTUP_CONF_PATH}
#
BEGIN {
  push \@INC, "$args{SITE_DIR}/cgi-bin/Perl";
}
EOF

    # Splice in the contents of the 'bedrock-perl5-inc-begin-block.snippet'
    # file installed as part of the same Bedrock distribution that installed
    # this instance of the 'bedrock-create-site' program. This will allow the
    # perl interpreter to find the Bedrock modules regardless of where they
    # were installed.
    my $br_perl5_inc_file = catfile( $BEDROCK_DIST_DATA_DIR, 'bedrock-perl5-inc-begin-block.snippet' );
    unless (-f $br_perl5_inc_file) {
        warn(qq{${PROG} (error): Bedrock distribution file does not exist: "${br_perl5_inc_file}": $!\n});
        $was_error = 1;
        goto DONE_APACHE_MOD_PERL_STARTUP_CONF;
    }

    unless( open( BR_PERL5_INC, "<${br_perl5_inc_file}" )) {
        warn(qq{${PROG} (error): was unable to open file for writing "${br_perl5_inc_file}": $!\n});
        $was_error = 1;
        goto DONE_APACHE_MOD_PERL_STARTUP_CONF;
    }

    {
        # FIXME: use a specialized tool to grab the needed contents rather
        #        than doing a manual slurp here. This pulls in the '##'
        #        comment lines, too, which we don't really want.
        local $/ = undef;  # localized slurp mode
        print APACHE_MOD_PERL_STARTUP_CONF <BR_PERL5_INC>;
    }
    unless( close( BR_PERL5_INC )) {
        warn (qq{${PROG} (warning): was error while closing file "$br_perl5_inc_file": $!}
              . qq{; continuing anyway\n});
    }

    print APACHE_MOD_PERL_STARTUP_CONF <<"EOF";

use Apache2::compat;

use Bedrock;
use Text::TagX;
use POSIX;

# - If you plan on using DBI and most LAMB sites do...uncomment this to get this loaded at startup
# use DBI;

1;
EOF

  DONE_APACHE_MOD_PERL_STARTUP_CONF:

    unless( close( APACHE_MOD_PERL_STARTUP_CONF )) {
        warn (qq{${PROG} (warning): was error while closing file "$args{APACHE_MOD_PERL_STARTUP_CONF}": $!}
              . qq{; continuing anyway\n});
    }

    exit 1 if $was_error;
    return;  # success
}

# ----------------------------------------------------------------
# main of program begins here
# ----------------------------------------------------------------

unless ( GetOptions(
                    'h|help'          => \$SHOW_HELP,
                    'd|domain-name=s' => \$DOMAIN_NAME,
                    'f|site-conf=s'   => \$APACHE_SITE_CONF_FNAME,
                    'm|apache-mod-perl-startup=s' => \$APACHE_MOD_PERL_STARTUP_CONF_FNAME,
                    'i|apache-auth-db-include=s'  => \$APACHE_AUTH_DB_INCLUDE_FNAME,

                    't|apache-auth-db-type=s'    => \$APACHE_AUTH_DB_TYPE,

                    'apache-auth-db-host=s'   => \$AUTH_HOST,
                    'u|apache-auth-db-user=s' => \$AUTH_USER,
                    'p|apache-auth-db-pass=s' => \$AUTH_PASSWORD,

                    'apache-auth-db-database=s' => \$AUTH_DB,
                    'apache-auth-db-table=s'    => \$AUTH_TABLE,
                    'apache-auth-db-username-field=s' => \$AUTH_USERNAME_FIELD,
                    'apache-auth-db-password-field=s' => \$AUTH_PASSWORD_FIELD,
                    'apache-auth-db-prompt=s'         => \$AUTH_PROMPT,

                    'O|overwrite'     => \$DO_OVERWRITE_ALL,
                    'overwrite-error-dot-roc!'   => \$DO_OVERWRITE_ERROR_DOT_ROC,
                    'overwrite-error-dot-rock!'  => \$DO_OVERWRITE_ERROR_DOT_ROCK,

                    'overwrite-index-dot-roc!'   => \$DO_OVERWRITE_INDEX_DOT_ROC,
                    'overwrite-index-dot-rock!'  => \$DO_OVERWRITE_INDEX_DOT_ROCK,

                    'overwrite-admin-index-dot-roc!'   => \$DO_OVERWRITE_ADMIN_INDEX_DOT_ROC,
                    'overwrite-admin-index-dot-rock!'  => \$DO_OVERWRITE_ADMIN_INDEX_DOT_ROCK,

                    'overwrite-site-conf!'       => \$DO_OVERWRITE_APACHE_SITE_CONF,
                    'overwrite-apache-auth-db-include!'  => \$DO_OVERWRITE_APACHE_AUTH_DB_INCLUDE,
                    'overwrite-apache-mod-perl-startup!' => \$DO_OVERWRITE_APACHE_MOD_PERL_STARTUP_CONF,
                    's|site-dir=s'    => \$WEBSITE_DIR,

                    'V|version'       => \$SHOW_VERSION,
                    'v|verbose'       => \$BE_VERBOSE,
                   ))
{
    print_usage( \*STDERR );
    exit 1;
}

if ($SHOW_HELP) {
    print_usage( \*STDOUT );
    exit 0;
}

if ($SHOW_VERSION) {
    print_version;
    exit 0;
}

# The 'sort' simply makes the order deterministic, so repeated user errors
# are guaranteed to be reported consistently
foreach my $varname (sort keys %REQUIRED_STR_OPTS) {
    my $sopt = $REQUIRED_STR_OPTS{$varname}->{sopt_name};
    my $desc = $REQUIRED_STR_OPTS{$varname}->{desc};
    no strict 'refs';
    unless (defined $$varname) {
        use strict 'refs';
        warn "${PROG} (error): required $desc option not specified (see -${sopt})\n";
        exit 1;
    }
    unless (length $$varname) {
        use strict 'refs';
        warn "${PROG} (error): $desc may not be the empty string\n";
        exit 1;
    }
}

# Now that we know the user has specified an Apache site config and mod_perl
# startup file names, add their basenames as the value for the corresponding
# keys in ALL_OVERWRITE_OPTS so they can be displayed nicely in the verbose
# summary code below.
$ALL_OVERWRITE_OPTS{DO_OVERWRITE_APACHE_SITE_CONF} = basename( $APACHE_SITE_CONF_FNAME );
$ALL_OVERWRITE_OPTS{DO_OVERWRITE_APACHE_MOD_PERL_STARTUP_CONF} = basename( $APACHE_MOD_PERL_STARTUP_CONF_FNAME );

# Leave desc as undef if the user did not specify a separate apache auth db
# include file; undef ensures that the option is omitted from the
# "overwrite" options summary printed below when in verbose mode.
$ALL_OVERWRITE_OPTS{DO_OVERWRITE_APACHE_AUTH_DB_INCLUDE} = basename( $APACHE_AUTH_DB_INCLUDE_FNAME )
    if defined $APACHE_AUTH_DB_INCLUDE_FNAME;

# Ensure all fine grained "overwrite" options have a true (1) or false (0)
# value. Any "overwrite" options not explicitly specified one way or the
# other by the user are set to correspond with the value of
# $DO_OVERWRITE_ALL.
foreach my $fgopt (sort keys %ALL_OVERWRITE_OPTS) {
    no strict 'refs';
    # we only muck with opts not explicitly set by the user
    next unless -1 == $$fgopt;
    $$fgopt = ($DO_OVERWRITE_ALL ? 1 : 0);
}


# Validate choice of Apache site authentication database type, if specified
if (defined $APACHE_AUTH_DB_TYPE) {
    my $is_legit = 0;
    ++$is_legit if grep { defined and length }
        map { $_ eq $APACHE_AUTH_DB_TYPE } @ALL_VALID_APACHE_AUTH_DB_TYPES;
    unless ($is_legit) {
        warn ("${PROG} (error): specified apache auth db type",
              " (${APACHE_AUTH_DB_TYPE}) is not valid.\n",
              "    Valid values include:\n",
              ' ' x 8,
              join("\n" . ' ' x 8, @ALL_VALID_APACHE_AUTH_DB_TYPES),
              "\n");
        exit 1;
    }
}
$APACHE_AUTH_DB_TYPE = $APACHE_AUTH_DB_TYPE_DFLT
    unless defined $APACHE_AUTH_DB_TYPE;

# Prompt the user for the authentication db password (if it was not specified
# on the command line)
unless (defined $AUTH_PASSWORD) {
    print qq{DB Password for "${AUTH_USER}": };
    ReadMode 'noecho';
    $AUTH_PASSWORD=<STDIN>;
    ReadMode 'restore';
    chomp $AUTH_PASSWORD;
    print "\n";
}


# Maybe print a summary of the configured options
if ($BE_VERBOSE) {
    my $longest_desc = 0;
    map { $longest_desc = $_ if $_ > $longest_desc }
        map { length $REQUIRED_STR_OPTS{$_}->{desc} } keys %REQUIRED_STR_OPTS;
    {
        no strict 'refs';
        printf STDERR qq{${PROG} (info): using %-*s: "%s"\n}, $longest_desc, $_->[0], $_->[1]
            foreach map { [ $REQUIRED_STR_OPTS{$_}->{desc}, $$_ ] }
                sort keys %REQUIRED_STR_OPTS;
    }

    if (defined $APACHE_AUTH_DB_INCLUDE_FNAME) {
        printf STDERR qq{${PROG} (info): apache auth db include: %s\n}, $APACHE_AUTH_DB_INCLUDE_FNAME;
    }

    # Summarize optional auth db opts
    printf STDERR qq{${PROG} (info): apache auth db host:     %s\n}, $AUTH_HOST;
    printf STDERR qq{${PROG} (info): apache auth db database: %s\n}, $AUTH_DB;
    printf STDERR qq{${PROG} (info): apache auth db table:    %s\n}, $AUTH_TABLE;
    printf STDERR qq{${PROG} (info): apache auth db username field: %s\n}, $AUTH_USERNAME_FIELD;
    printf STDERR qq{${PROG} (info): apache auth db password field: %s\n}, $AUTH_PASSWORD_FIELD;
    printf STDERR qq{${PROG} (info): apache site auth prompt: "%s"\n}, $AUTH_PROMPT;

    # Summarize overwrite flags
    $longest_desc = 0;  # reset
    map { $longest_desc = $_ if $_ > $longest_desc }
        map { length } grep { defined } values %ALL_OVERWRITE_OPTS;
    printf STDERR qq{${PROG} (info): overwrite %-*s: %s\n}, $longest_desc, 'all',
        ($DO_OVERWRITE_ALL ? 'yes' : 'no');
    {
        no strict 'refs';
        printf STDERR qq{${PROG} (info): overwrite %-*s: %s\n}, $longest_desc, $_->[0], $_->[1]
            foreach
                grep { defined $_->[0] }
                    map { [ $ALL_OVERWRITE_OPTS{$_}, ( $$_ ? 'yes' : 'no' ) ] }
                        sort keys %ALL_OVERWRITE_OPTS;
    }
}

maybe_create_site_directory_tree_or_die( $WEBSITE_DIR );

maybe_create_index_dot_rock_or_die( $WEBSITE_DIR );
maybe_create_admin_index_dot_rock_or_die( $WEBSITE_DIR );

maybe_copy_dist_bedrock_dot_cgi_or_die( $WEBSITE_DIR );
maybe_copy_dist_error_dot_rock_or_die( $WEBSITE_DIR );

maybe_create_apache_site_config_file_or_die(
    APACHE_SITE_CONF_PATH => $APACHE_SITE_CONF_FNAME,
    SITE_DIR => $WEBSITE_DIR,
    APACHE_MOD_PERL_STARTUP_CONF_PATH => $APACHE_MOD_PERL_STARTUP_CONF_FNAME,
    APACHE_AUTH_DB_TYPE          => $APACHE_AUTH_DB_TYPE,
    APACHE_AUTH_DB_INCLUDE_FNAME => $APACHE_AUTH_DB_INCLUDE_FNAME,  # may be undef

    AUTH_HOST     => $AUTH_HOST,
    AUTH_USER     => $AUTH_USER,
    AUTH_PASSWORD => $AUTH_PASSWORD,

    AUTH_DB       => $AUTH_DB,
    AUTH_TABLE    => $AUTH_TABLE,
    AUTH_USERNAME_FIELD => $AUTH_USERNAME_FIELD,
    AUTH_PASSWORD_FIELD => $AUTH_PASSWORD_FIELD,

    AUTH_PROMPT   => $AUTH_PROMPT );

maybe_create_apache_mod_perl_startup_dot_pl_file_or_die( 
    APACHE_MOD_PERL_STARTUP_CONF_PATH => $APACHE_MOD_PERL_STARTUP_CONF_FNAME,
    SITE_DIR => $WEBSITE_DIR
);

# XXX: The 'make_site.sh' program that was the original idea on which
#      'bedrock-create-site' is based created a Bedrock 'perl.INC' file in the
#      '${site_dir}/cgi-bin' directory. I think the 'perl.INC' thing may be a
#      misfeature, so I do not want to add support for it unless I absolutely
#      have to. In the mean time, for reference, here's what 'make_site.sh'
#      did:
#
#          echo
#          echo Creating a default perl.INC in $WEBSITE_PATH/cgi-bin
#
#          cat >$WEBSITE_PATH/cgi-bin/perl.INC <<EOF
#          # - Autogenerated: $DATE
#          $BEDROCK_PERL_DIR
#          $WEBSITE_PATH/cgi-bin/Perl
#          EOF
#          echo
#          read ans?"Now we'll create the Bedrock configuration file..."
#          echo
#          echo "Creating the default Bedrock configuration files (tagx.xml, tagx_apps.xml)"
#          cat >$WEBSITE_PATH/config/tagx_apps.xml <<EOF
#          <object>
#          </object>
#          EOF


exit 0;

__END__

#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball, DEB, or RPM, for
# instance), you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='Bedrock' \
#               --release='bedrock-1.6.6' \
#               --section='1' \
#               > /outputdir/bedrock-create-site.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#     'man -l -'
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  bedrock-create-site - create initial scaffolding for a Bedrock project


=head1 SYNOPSIS

  bedrock-create-site -h
  bedrock-create-site -V
  bedrock-create-site [options]


=head1 DESCRIPTION

C<bedrock-create-site> is part of the C<bedrock> project.

The C<bedrock-create-site> program is a command line program that may be
used to create the initial scaffolding for a Bedrock project. It's purpose
is to automate the handful of necessary (but simple) steps needed to start
working on a project build on Bedrock. It also provides support for some
optional (but common) setup steps (such as creating a MySQL database to use
as the backend for site authentication).

There are two primary users of C<bedrock-create-site>: software developers
who need to setup a Bedrock-enabled site and packagers (of DEBs, RPMs,
whatever) of programs that use Bedrock as an implementation
technology. Software developers might run the program directly while mocking
up a project, or they may invoke the program from a Makefile (or
similar). Packagers may invoke the program from Makefiles, or maybe as a
worker tool invoked by a platform-specific installation framework (such as
L<debconf(7)>).

The program makes a number of assumptions about how you want your site
configured:

=over 4

=item *

The program assumes that you want your site configured as an Apache virtual
host. As of 2008-02-29, this is the only kind of Apache config file that
this program knows how to create.

=item *

The provided domain name will be used in the creation of files and in Apache
configuration directives. Specifically:

=over 4

=item *

The specified C<$DOMAIN_NAME> will be used for the Apache C<ServerName>
directive. An alias named C<www.$DOMAIN_NAME> will also be created via the
Apache C<ServerAlias> directive.

=back

=back

The following tasks are always performed:

=over 4

=item *

The directory specified via the required C<--site-dir=DIR> option is created
(if it does not already exist).

=item *

The following directory structure is created beneath the specified site
directory. Only those directories which do not already exist are created:

    $sitedir/conf
    $sitedir/config
    $sitedir/cgi-bin
    $sitedir/cgi-bin/Perl
    $sitedir/cgi-bin/Perl/BLM
    $sitedir/cgi-bin/Perl/BLM/Startup
    $sitedir/htdocs
    $sitedir/htdocs/admin
    $sitedir/htdocs/img
    $sitedir/logs
    $sitedir/logs/html
    $sitedir/session

=item *

A symbolic link (symlink) is created from:

    $sitedir/htdocs/admin/cgi-bin

to:

    $sitedir/cgi-bin


=item *

Some "*.rock" files will be created:

    $sitedir/htdocs/index.rock
    $sitedir/htdocs/admin/index.rock

    $sitedir/htdocs/error.rock


Symlinks will be made to corresponding "*.roc" files that point to the above
named "*.rock" files:

    $sitedir/htdocs/index.roc
    $sitedir/htdocs/admin/index.roc

    $sitedir/htdocs/error.roc


=item *

An Apache 2.0.x style configuration file snippet will be created in the file
specified by the required C<--site-conf> command line option.


=item *

A Perl program file will be written to file specified by the required
C<--apache-mod-perl-startup=FILE> command line option. This file will be
referenced in created Apache site conf file via an Apache C<PerlRequire>
directive.

=back

B<FIXME>: finish documenting steps that are always performed


The following tasks are only performed if explicitly requested via
corresponding command line options:

B<FIXME>: document option steps



=head1 OPTIONS

=head2 General Options

=over 4

=item -d, --domain-name=NAME

(Required) Specify the domain name to use (e.g., C<example.com>)


=item -f, --site-conf=FILE

(Required) Create the Apache site (virtual host) config snippet in FILE. Any
parent directories in the path specified by FILE will be created as
necessary.

Note that the created file is not a complete Apache 2.0.x config file (we
figure you already have one of those which you don't want anyone mucking
with), but it is suitable for being included via the Apache C<Include>
directive from your main Apache config file.


=item -m, --apache-mod-perl-startup=FILE

(Required) Create Bedrock mod_perl startup script in FILE.


=item -h, --help

(Optional) Print help usage message


=item -s, --site-dir=DIR

(Required) Create the web site in DIR. If DIR does not exist, it will be
created (along with any parent directories). For example, if you want your
site created beneath:

    /var/www/vhosts/example.com

then specify the option like this:

    --site-dir=/var/www/vhosts/example.com


=item -V

(Optional) Print the version of the program to stdout and then exit.


=item -v

(Optional) Turn on verbose mode. Causes program to emit messages on
C<stderr> indicating what it is doing.

=back


=head2 Apache Site Authentication Options

=over 4

=item -i, --apache-auth-db-include=FILE

(Optional) Write Apache directives related to site authentication to FILE,
which will be included in the file specified by the required
C<--site-conf=FILE> option via an Apache C<Include> directive.

The default behavior (when no C<--apache-auth-db-include=FILE> option is
provided) is to write such directives inline with the other Apache
directives that we write to the file specified by the C<--site-conf=FILE>
option.

This option is useful for simply keeping the site authentication directives
in a separate file (which may make them easier to work with, for instance,
if you change your database password frequently).

It is also useful for working with multiple databases (perhaps to migrate
from one to another), as you can create a different include file for each
database (or database type (see the C<--apache-auth-db-type> option)) and
control the one that is actually used via a single Apache C<Include>
directive from your main Apache config file.


=item -t, --apache-auth-db-type=TYPE

(Optional) Allows user to specify the type of database used for site
authentication.

This option controls the Apache directives that will be written to the file
specified by the C<--site-conf=FILE> option (or rather the file specified by
the optional C<--apache-auth-db-include=FILE> option, if specified). It also
affects how the program communicates with the database (if the user
explicitly requests it).

B<FIXME>: Create pointers to options that control whether or not the program
will attempt to communicate with a database.

Valid values for TYPE include: "mysql".

See the L</"BUGS"> section below for notes regarding support for databases
other than MySQL.


=item -u, --apache-auth-db-user=USERNAME

(Required) Specify the name of the database user Apache should use for site
authentication.


=item -p,--apache-auth-db-pass=PASSWORD

(Will prompt for, if not provided) Specify the password for the database
user Apache should use for site authentication.

Note that providing the password on the command line will make it visible to
all users on the host for the duration of the program run (via the L<ps(1)>
command or similar). If you do not provide the password on the command line,
then C<bedrock-create-site> will prompt you for it (this is more secure).


=item --apache-auth-db-host=HOSTNAME

(Optional) Specify the host name which is the home of the authentication
database. If not specified, defaults to C<localhost>.


=item --apache-auth-db-database=DATABASE

(Optional) Specify the name of the database that Apache should use when
performing site authentication. If not specified, defaults to
C<bedrock_site>.


=item --apache-auth-db-table=TABLENAME

(Optional) Specify the name of the database table that Apache should use
when performing site authentication. If not specified, defaults to
C<session>.


=item --apache-auth-db-username-field=COLUMNNAME

(Optional) Specify the name of the database table column that contains user
names. If not specified, defaults to C<username>.


=item --apache-auth-db-password-field=COLUMNNAME

(Optional) Specify the name of the database table column that contains user
password. If not specified, defaults to C<password>.


=item --apache-auth-db-prompt=STRING

(Optional) Specify the message that Apache should display when requesting
authentication credentials from users of your site. If not specified,
defaults to "Please Enter Your Site Credentials".

=back


=head2 Overwrite Options

=over 4

=item -O, --overwrite

(Optional) Causes any existing files to be overwritten (except for those
explicitly protected via C<--nooverwrite-*> options). The default behavior
is to not overwrite any existing files.

If you only want to overwrite a couple of files, you will be better off
using one of the finer-grained C<--overwrite-*> options.


=item --overwrite-apache-auth-db-include

(Optional) Force overwriting of file specified by the optional
C<--apache-auth-db-include=FILE> command line option. If no
C<--apache-auth-db-include=FILE> command line option has been specified,
then this option has no effect.

=item --nooverwrite-apache-auth-db-include

(Optional) Do not overwrite the file specified by the optional
C<--apache-auth-db-include=FILE> command line option. This is the default
behavior, unless the global C<--overwrite> option has been specified. If no
C<--apache-auth-db-include=FILE> command line option has been specified,
then this option has no effect.


=item --overwrite-apache-mod-perl-startup

(Optional) Force overwriting of file specified by the required
C<--apache-mod-perl-startup=FILE> command line option.

=item --nooverwrite-apache-mod-perl-startup

(Optional) Do not overwrite the file specified by the required
C<--apache-mod-perl-startup=FILE> command line option. This is the default
behavior, unless the global C<--overwrite> option has been specified.


=item --overwrite-bedrock-dot-cgi

(Optional) Force overwriting of C<$sitedir/cgi-bin/bedrock.cgi>

=item --nooverwrite-bedrock-dot-cgi

(Optional) Do not overwrite C<$sitedir/cgi-bin/bedrock.cgi>. This is the
default behavior, unless the global C<--overwrite> option has been
specified.


=item --overwrite-error-dot-roc

(Optional) Force overwriting of C<$sitedir/htdocs/error.roc>

=item --nooverwrite-error-dot-roc

(Optional) Do not overwrite C<$sitedir/htdocs/error.roc>. This is the
default behavior, unless the global C<--overwrite> option has been
specified.


=item --overwrite-error-dot-rock

(Optional) Force overwriting of C<$sitedir/htdocs/error.rock>

=item --nooverwrite-error-dot-rock

(Optional) Do not overwrite C<$sitedir/htdocs/error.rock>. This is the
default behavior, unless the global C<--overwrite> option has been
specified.


=item --overwrite-index-dot-roc

(Optional) Force overwriting of C<$sitedir/htdocs/index.roc>

=item --nooverwrite-index-dot-roc

(Optional) Do not overwrite C<$sitedir/htdocs/index.roc>. This is the
default behavior, unless the global C<--overwrite> option has been
specified.


=item --overwrite-index-dot-rock

(Optional) Force overwriting of C<$sitedir/htdocs/index.rock>

=item --nooverwrite-index-dot-rock

(Optional) Do not overwrite C<$sitedir/htdocs/index.rock>. This is the
default behavior, unless the global C<--overwrite> option has been
specified.


=item --overwrite-admin-index-dot-roc

(Optional) Force overwriting of C<$sitedir/htdocs/admin/index.roc>

=item --nooverwrite-admin-index-dot-roc

(Optional) Do not overwrite C<$sitedir/htdocs/admin/index.roc>. This is the
default behavior, unless the global C<--overwrite> option has been specified.


=item --overwrite-admin-index-dot-rock

(Optional) Force overwriting of C<$sitedir/htdocs/admin/index.rock>

=item --nooverwrite-admin-index-dot-rock

(Optional) Do not overwrite C<$sitedir/htdocs/admin/index.rock>. This is the
default behavior, unless the global C<--overwrite> option has been specified.


=item --overwrite-site-conf

(Optional) Force overwriting of file specified by the required
C<--site-conf=FILE> command line option.

=item --nooverwrite-site-conf

(Optional) Do not overwrite the file specified by the required
C<--site-conf=FILE> command line option. This is the default behavior,
unless the global C<--overwrite> option has been specified.

=back


=head1 EXAMPLES

B<FIXME>: document examples


=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error. The program stops processing
at the first error that is encountered.


=head1 CAVEATS

=over 4

=item *

There are some combinations of command line options that may result in a
broken Bedrock configuration, but you would have to direct the program to do
something very specific to make this happen.

For example, let's imagine a user who already has an Apache configuration
file for his site that he does not wish to have overwritten by
C<bedrock-create-site>, but he does wish to have the program create a new
Apache config file snippet that configures Apache to use MySQL for site
authentication (ultimately for inclusion from his main Apache config). Such
a user might invoke C<bedrock-create-site> thus:

    $ bedrock-create-site ... \
        --site-conf=www.foobar.com.conf \
        --apache-auth-db-type=mysql \
        --apache-auth-db-include=www.foobar.com-auth-mysql.conf \
        --nooverwrite-site-conf

If the 'www.foobar.com.conf' file does not already have an Apache C<Include>
directive that pulls in the 'www.foobar.com-auth-mysql.conf' file, then the
configuration is not complete until the user manually fixes it.

We consider all such invocations to be in the domain of expert usage, and no
attempt is made to second-guess the user. The C<bedrock-create-site> program
assumes that you know what you are doing.

=back


=head1 BUGS

=over 4

=item *

We currently check for the existence of the C<$sitedir/htdocs/admin/cgi-bin>
symlink, but we do not check that the target of that link is sane.

=item *

The program currently prints messages about existing files that it will not
overwrite only when invoked with the C<--verbose> option. Users may prefer
that such things always be printed.

=item *

The program currently only supports MySQL as the database used for web site
authentication. This is a limitation of this program, not of Bedrock or
Apache. We've built in a framework for supporting other databases (see the
C<--apache-auth-db-type=TYPE> command line option), but it is not currently
useful to users because only the MySQL default is accepted.

We should add support for at least these other popular databases:

=over 4

=item PostgreSQL

=item Oracle

=back

=item *

The C<bedrock-create-site> program is a big honkin' all-or-nothing program;
there is no provision for accessing parts of the available functionality
without taking all of the funtionality. For instance, it is conceivable that
a user would want to create an Apache config file snippet without creating
the site directory structure. We may want to consider breaking out the major
pieces of functionality into separate programs that can be invoked to
achieve specific tasks, and have C<bedrock-create-site> invoke those
programs.


=item *

The generated Apache config files are ugly and barely readable. They need a
visit from the indentation police.

=back

If you find any other bugs (or have suggestions for improvements), please
report them to the Signature Inforamation Solutions, LLC Developers' mailing
list:

  cjldev@signatureinfo.com


=head1 SEE ALSO

L<deb(5)>,
L<debconf(7)>,
L<rpm(8)>

On Debian (or Debian-derived) systems, you may be interested in the following
programs that enable and disable apache web sites. At the time of writing
(2008-03), both are available in the C<apache2.2-common> Debian package:

=over 4

=item C</usr/sbin/a2ensite>

=item C</usr/sbin/a2dissite>

=back


=head1 AUTHORS

In late February 2008, Rob Lauer <RLauer@signatureinfo.com> wrote the first
incarnation of the ideas embodied in here in program called C<make_site.sh>

The C<bedrock-create-site> program is a re-implementation and an expansion
of those ideas written by Alan D. Salewski <ASalewski@signatureinfo.com>
working in close collaboration with Rob Lauer.


=head1 COPYRIGHT

Copyright 2008 Signature Information Solutions, LLC

This is free software. You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

=cut

