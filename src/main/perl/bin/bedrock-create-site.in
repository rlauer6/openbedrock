#! @PERL@
# -*- perl -*-
# @configure_input@

# bedrock-create-site: copy and create artifacts needed for a Bedrock project

# Copyright (C) 2008 Signature Information Solutions, LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# This is a command line program to create the initial scaffolding for a
# Bedrock project. It's purpose is to automate the handful of necessary (but
# simple) steps; it also provides support for some optional (but common)
# setup steps (such as creating MySQL databases).
#
# See bedrock-create-site(1) for full documentation. You can run perldoc on
# this file to view the POD used to create the man page.
#
# Exits with zero (success) if we were successful in creating the entire
# project scaffolding. Exits with non-zero status if an error was
# encountered.
#
# Note that the program is designed to be idempotent; it can be invoked
# multiple times with the same arguments and it will behave as if it were
# invoked exactly once. This is useful in situations in which the program
# encounters an error (such as not being able to write a file due to
# permissions); once the reported issue has been corrected, the program may
# be re-invoked and it will pick up where it left off. You can use the -O
# (--overwrite) option to force existing files to be regenerated or
# otherwise overwritten.
#
# Usage:
#     $ bedrock-create-site [OPTION]...
#

package _PROG_BEDROCK_CREATE_SITE;

use strict;
use warnings;

# Fixup @INC so that all Perl mods needed by the prog can be found
# ___REPLACE_ME__BEGIN_BLOCK__CONFIGURED_PERL_INC___

use Carp qw( confess );

use Getopt::Long qw( GetOptions );

use File::Path qw( mkpath );

our $VERSION = '@VERSION@';  # filtered in at build time

my $PROG = 'bedrock-create-site';
my $BUILD_DATE = '@BUILD_DATE@';  # filtered in at build time
my $PROJECT_NAME = '@PACKAGE@';   # filtered in at build time

# Options
Getopt::Long::Configure(qw( bundling
                            bundling_override
                            no_auto_abbrev
                            no_auto_help
                            no_auto_version
                            no_getopt_compat
                            no_gnu_compat
                            no_ignore_case_always
                            no_pass_through
                            no_require_order
                            permute));

my $BE_VERBOSE = 0;
my $SHOW_HELP = 0;
my $SHOW_VERSION = 0;
my $DO_OVERWRITE_ALL = 0;

my $DOMAIN_NAME;


sub print_usage {
    my ($where) = @_;
    print $where <<"EOH";
Usage: $PROG [OPTIONS]
Creates the initial scaffolding for a Bedrock project.
See ${PROG}(1) for all the gory details.

Options with an asterisk (*) are required unless -h or -V is specified.

  -h, --help         Display this message and exit
* -d, --domain-name=NAME
                     Use NAME as the domain name
  -O, --overwrite    Overwrite any existing files
  -v, --verbose      Print program progress messages on stderr
  -V, --version      Print on stdout version info and exit
EOH
}

# prints program version info on stdout
sub print_version {
    print <<"EOV";
$PROG  (${PROJECT_NAME}) $VERSION
build date: ${BUILD_DATE}
Copyright (C) 2008 Signature Information Solutions, LLC

This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.
EOV
    return;
}

# Returns the function name of the calling function. Functions can use this
# as a generic way to get their own name without sprinkling clunky caller()
# invocations all over the place.
sub __func {
    # ($package, $filename, $line, $subroutine, $hasargs,
    #  $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller($i);
    return (caller(1))[3];
}

# ----------------------------------------------------------------
# main of program begins here
# ----------------------------------------------------------------

unless ( GetOptions(
                    "h|help"          => \$SHOW_HELP,
                    "d|domain-name=s" => \$DOMAIN_NAME,
                    "O|overwrite"     => \$DO_OVERWRITE_ALL,
                    "V|version"       => \$SHOW_VERSION,
                    "v|verbose"       => \$BE_VERBOSE,
                   ))
{
    print_usage( \*STDERR );
    exit 1;
}

if ($SHOW_HELP) {
    print_usage( \*STDOUT );
    exit 0;
}

if ($SHOW_VERSION) {
    print_version;
    exit 0;
}

unless (defined $DOMAIN_NAME) {
    warn "${PROG} (error): required domain name option not specified (see -d)\n";
    print_usage( \*STDERR );
    exit 1;
}
unless (length $DOMAIN_NAME) {
    warn "${PROG} (error): domain name may not be the empty string\n";
    exit 1;
}

if ($BE_VERBOSE) {
    warn qq{${PROG} (info): using domain name: "${DOMAIN_NAME}"\n};
}

exit 0;

__END__

#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball, DEB, or RPM, for
# instance), you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='Bedrock' \
#               --release='bedrock-1.6.6' \
#               --section='1' \
#               > /outputdir/bedrock-create-site.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#     'man -l -'
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  bedrock-create-site - create initial scaffolding for a Bedrock project


=head1 SYNOPSIS

  bedrock-create-site -h
  bedrock-create-site -V
  bedrock-create-site [options]


=head1 DESCRIPTION

C<bedrock-create-site> is part of the C<bedrock> project.

The C<bedrock-create-site> program is a command line program that may be
used to create the initial scaffolding for a Bedrock project. It's purpose
is to automate the handful of necessary (but simple) steps. It also provides
support for some optional (but common) setup steps (such as creating MySQL
databases).

There are two primary users of C<bedrock-create-site>: software developers
who need to setup a Bedrock-enabled site and packagers (of DEBs, RPMs,
whatever) of programs that use Bedrock as an implementation
technology. Software developers might run the program directly while mocking
up a project, or they may invoke the program from a Makefile (or
similar). Packagers may invoke the program from Makefiles, or maybe as a
worker tool invoked by a platform-specific installation framework (such as
L<debconf(7)>).

The program makes a number of assumptions about how you want your site
configured:

=over 4

=item *

The provided domain name will be used in the creation of files and
directories. Specifically:

=over 4

=item *

The files that comprise your website will be placed beneath a single
directory, and that directory will be named using the provided domain name:

    C<$SITES_ROOT/$DOMAIN_NAME>

=item *

The Apache 2.0.x configuration file will be named C<$DOMAIN_NAME.conf>

=item *

The specified C<$DOMAIN_NAME> will be used for the Apache C<ServerName>
directive. An alias named C<www.$DOMAIN_NAME> will also be created via the
Apache C<ServerAlias> directive.

=back

=back

The following tasks are always performed:

FIXME: document steps that are always performed


The following tasks are only performed if explicitly requested via
corresponding command line options:

FIXME: document option steps



=head1 OPTIONS

=over 4

=item -d, --domain-name=NAME

(Required) Specify the domain name to use (e.g., C<example.com>)

=item -h, --help

Print help usage message


=item -O, --overwrite

Causes any existing files to be overwritten. The default behavior is to not
overwrite any existing files.

FIXME: maybe implement finer-grained overwrite options


=item -V

Print the version of the program to stdout and then exit.


=item -v

Turn on verbose mode. Causes program to emit messages on C<stderr>
indicating what it is doing.

=back


=head1 EXAMPLES

FIXME: document examples


=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error.


=head1 BUGS

None known. If you find any, please report them to the Signature
Inforamation Solutions, LLC Developers' mailing list:

  cjldev@signatureinfo.com


=head1 SEE ALSO

L<deb(5)>,
L<debconf(7)>,
L<rpm(8)>


=head1 AUTHORS

In late February 2008, Rob Lauer <RLauer@signatureinfo.com> wrote the first
incarnation of the ideas embodied in here in program called C<make_site.sh>

The C<bedrock-create-site> program is a re-implementation and an expansion
of those ideas written by Alan D. Salewski <ASalewski@signatureinfo.com>
working in close collaboration with Rob Lauer.


=head1 COPYRIGHT

Copyright 2008 Signature Information Solutions, LLC

This is free software. You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

=cut

