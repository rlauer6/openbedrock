#!@PERL@

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Developent Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

BEGIN {
  use lib '@perl5libdir@';
}

# create a model class from a MySQL table

use DBI;
use Bedrock::Model;
use Bedrock::Model::Maker;
use Bedrock::Model::Migration;
use Bedrock::Template;
use Data::Dumper;
use Getopt::Long;
use Bedrock::Constants qw(:booleans);
use BLM::DBHandler qw(easy_connect);

=pod

=head1 NAME

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 NOTES

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>k

=cut

sub help {
  print <<'END_OF_HELP';
bedrock-model options command

Options
-------
-h, --host        MySQL host, default: localhost
-u, --user        MySQL user
-p, --password    MySQL password (optional)
-D, --dryrun      do not execute create or migrations, only report
-d, --database    MySQL database name
-P, --prefix      class prefix, default: Bedrock::Model
-t, --table       table name

Environment Variables
---------------------
Instead of using options for database credentials, environment
variables are recognized as well.

DBI_USER
DBI_PASS
DBI_DSN
DBI_DB

DBI_DSN=dbi:mysql:foo:localhost DBI_USER=root DBI_PASS="" bedrock-model dump foo

Commands
--------
help
make-model
dump table-name
migrate

Hints
-----
1. tidy up your model...

   bedrock-model -u root -d some_database -t contacts dump | perltidy
END_OF_HELP

  return;

}

# +---------------------------+
# | MAIN PROGRAM STARTS HERE |
# +---------------------------+

my %options;

my @option_specs = qw(
  host=s
  user=s
  password=s
  dryrun|D
  table|t=s
  database|d=s
  prefix|P=s
);

GetOptions( \%options, @option_specs );

my $command = shift;

if ( !$command ) {
  help();
  exit;
}

my $database = $options{database};
my $host     = $options{host};
my $user     = $options{user};
my $pass     = $options{password};
my $dryrun   = exists $options{'dryrun'} ? $TRUE : $FALSE;

my $dbi = easy_connect(
  user     => $user,
  password => $pass,
  database => $database,
  host     => $host
);

foreach ("$command") {
  /help/xsm && do {
    help();

    last;
  };

  /(dump|make\-model)/xsm && do {
    my $table = shift;
    $table //= $options{table};

    my $class_prefix = $options{prefix} || 'Bedrock::Model';

    die "no table specifed for dump command\n"
      if !$table;

    my $model = Bedrock::Model->new(
      dbi   => $dbi,
      table => $table,
    )->fetch_model;

    $model = Bedrock::Model->new(
      dbi   => $dbi,
      table => $table,
      model => $model,
    );

    #    my $model_maker = Bedrock::Model::Maker->new(
    #      { dbi          => $dbi,
    #        table        => $table,
    #        package_name => ucfirst $table,
    #        tidy         => $TRUE,
    #      }
    #    );
    #
    #    my $model = [ $model_maker->create_model_def() ];
    #    print {*STDOUT} Dumper( [ model => $model ] );
    #    print {*STDOUT} $model_maker->as_string();
    #    exit;

    if ( $command eq 'dump' ) {
      print $model->as_string;
    }
    else {
      my $class_name = sprintf '%s::%s', $class_prefix, ucfirst $table;
      my $timestamp  = localtime;

      my $template = <<'END_OF_TEXT';
package <var $class_name>;

# -*- AUTOGENERATED: <var $timestamp> -*-

use strict;
use warnings;

use parent qw(BLM::IndexedTableHandler);

use Role::Tiny::With;
with 'Bedrock::Model::Role';

<var $model>

=pod

=head1 NAME

<var $class_name> - ORM to support the $table table

=head1 SYNOPSIS

 my $table = <var $class_name>->new($dbi);

=head1 DESCRIPTION

ORM to support the $table table.

=head1 METHODS AND SUBROUTINES

=cut

1;
END_OF_TEXT

      my $bedrock_template = Bedrock::Template->new(
        $template,
        class_name => $class_name,
        timestamp  => $timestamp,
        model      => $model->as_string,
        table      => $table,
      );

      my $output = $bedrock_template->parse();
      require Perl::Tidy;

      my $class = q{};

      Perl::Tidy::perltidy( source => \$output, destination => \$class );

      print {*STDOUT} $class;

    }

    last;
  };

  /create/xsm && do {
    last;
  };

  /migrate/xsm && do {
    last;
  };
}

$dbi->disconnect;

exit;
