#!@PERL@

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

BEGIN {
  use lib '@perl5libdir@';
}

# create a model class from a MySQL table

use DBI;
use Bedrock::Model;
use Bedrock::Model::Migration;
use Data::Dumper;
use Getopt::Long;

=pod

=head1 NAME

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 NOTES

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=cut

sub help {
  print <<eot;
bedrock-model options command

Options
-------
-h, --host        MySQL host, default: localhost
-u, --user        MySQL user
-p, --password    MySQL password (optional)
-D, --dry-run     do not execute create or migrations, only report
-d, --database    MySQL database name

Environment Variables
---------------------
Instead of using options for database credentials, environment
variables are recognized as well.

DBI_USER
DBI_PASS
DBI_DSN

Commands
--------
help

create

dump table-name

migrate

Hints
-----
1. tidy up your model...

   \$ bedrock-model -u root -d some_database -t contacts dump | perltidy
eot

}

# +---------------------------+
# | MAIN PROGRAM STARTS HERE | 
# +---------------------------+

my %options;

GetOptions(\%options,
	   "host=s",
	   "user=s",
	   "password=s",
	   "dry-run|D",
	   "database|d=s"
	  );

my $command = shift;

unless ( $command ) {
  help();
  exit;
}

my $database = $options{database};

die "no database specified\n"
  unless defined $database;

my $host = $options{host} || 'localhost';
my $dsn = sprintf("dbi:mysql:database=%s;host=%s", $database, $host);
my $user = $options{user};
my $pass = $options{password};
my $dry_run = exists $options{'dry-run'} ? 1 : 0;

if ( exists $ENV{DBI_DSN} && exists $ENV{DBI_USER} && exists $ENV{DBI_PASS} ) {
  $dsn = $ENV{DBI_DSN};
  $user = $ENV{DBI_USER};
  $pass = $ENV{DBI_PASS};
}

my $dbi = DBI->connect($dsn, $user, $pass, { PrintError => 1, RaiseError => 1, AutoCommit => 0 });

foreach ("$command") {
  /help/ && do {
    help();
    
    last;
  };

  /(dump|make\-model)/ && do {
    my $table = shift;
    
    die "no table specifed for dump command\n"
      unless $table;
    
    my $model = Bedrock::Model->new({ dbi => $dbi, table => $table, dry_run => 1 });

    my $model_as_string = $model->model_as_string();
    
    if ( $command eq 'dump' ) {
      print $model_as_string;
    }
    else {
      my $class_name = 'Bedrock::Model::' . lcfirst($table);
      my $timestamp = localtime;
      
      print <<eot;
package $class_name;

# -*- AUTOGENERATED: $timestamp -*-

use strict;
use warnings;

use parent qw/BLM::IndexedTableHandler/;

use Role::Tiny::With;
with 'Bedrock::Model::Role';

$model_as_string

1;
eot
}      
      last;
  };

  /create/ && do {
    last;
  };

  /migrate/ && do {
    last;
  };
}

$dbi->disconnect;

exit;
