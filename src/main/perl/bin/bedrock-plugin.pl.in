#!@PERL@

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Archive::Tar qw(COMPRESS_GZIP);
use Bedrock::Constants qw(:chars :booleans);
use Bedrock qw(slurp_file);
use Getopt::Long;
use Cwd;
use Pod::Usage;

use Role::Tiny::With;
with 'Bedrock::Logger';

our $VERSION = '@PACKAGE_VERSION@';

########################################################################
sub version {
########################################################################
  my ($donot_exit) = @_;

  print <<"END_OF_VERSION";
bedrock-plugin $VERSION
END_OF_VERSION

  exit if !$donot_exit;

  return;
}

########################################################################
sub help {
########################################################################
  return pod2usage(1);
}

########################################################################
sub main {
########################################################################
  my %options = (
    test    => $TRUE,
    replace => $FALSE,
    tarball => $TRUE,
    author  => 'Anonymouse',
    email   => 'anonymouse@example.org',
  );

  my @option_specs = qw(
    binding=s
    help
    loglevel|l=s
    module=s
    test|t
    tarball|T
    plugin
    replace
    version|v
    verbose|V
    author|a=s
    email|e=s
  );

  my $success = GetOptions( \%options, @option_specs );

  if ( !$success || $options{help} ) {
    help();
  }

  if ( $options{version} ) {
    version();
  }

  my $logger = get_logger();

  my $loglevel = $options{loglevel} ? $options{loglevel} : $options{verbose} ? 'info' : 'error';

  txt2level( $logger, $loglevel );

  $options{logger} = $logger;

  if ( !$options{module} && !$options{binding} ) {
    $logger->error('You must specify one of --module or --binding.');
    help();
  }

  if ( $options{binding} && $options{plugin} ) {
    $logger->warn(
      "no binding needed for Plugins. Only useful for Application Plugins...ignoring $options{binding}.");
    delete $options{binding};
  }

  if ( $options{plugin} && !$options{module} ) {
    $logger->error('You must supply a module name for Plugins.');
    exit;
  }
  else {
    if ( !$options{binding} && !$options{plugin} ) {
      $options{binding} = lc $options{module};
    }

    if ( !$options{module} ) {
      $options{module} = ucfirst $options{binding};
    }
  }

  my $plugin_type = $options{plugin} ? 'Plugin' : 'Application Plugin';
  $options{plugin_type} = $plugin_type;

  my $plugin_path = $options{plugin} ? 'BLM' : 'BLM/Startup';

  my $test_file = $options{plugin} ? lc $options{module} : $options{binding};

  my $config_file = $options{plugin} ? $EMPTY : lc $options{module};

  my $binding = $options{binding} // $EMPTY;

  my $summary = <<"END_OF_SUMMARY";

\tOptions
\t-------
\tmodule:  [$options{module}]
\tbinding: [$binding]
\ttype:    [$plugin_type]
END_OF_SUMMARY

  $logger->info($summary);

  my $config = sprintf '%s.xml', lc $options{module};
  my $plugin = sprintf '%s.pm',  $options{module};
  my $test   = sprintf '%s.roc', $test_file;

  if ( !$options{replace} && ( -s $plugin || -s $config ) ) {
    $logger->error('plugin or config already exists. Specify -r to replace.');
    exit;
  }
  else {
    if ( -s $plugin ) {
      $logger->warn("$plugin will be replaced.");
    }

    if ( -s $config ) {
      $logger->warn("$config will be replaced.");
    }

    if ( $options{test} && -s $test ) {
      $logger->warn("$test will be replaced.");
    }
  }

  create_plugin_file( $plugin, %options );

  create_config_file( $config, %options );

  create_test_file( $test, %options );

  if ( -s $plugin ) {
    $logger->info("created: $plugin");
  }

  if ( -s $config ) {
    $logger->info("created: $config");
  }

  if ( -s $test ) {
    $logger->info("created: $test");
  }

  my $copy_path = $options{plugin} ? 'BLM/' : 'BLM/Startup';

  $logger->info("Copy $options{module} to the $copy_path directory.\n");

  if ( !$options{plugin} ) {
    $logger->info("Copy $config to Bedrock's configuration directory.\n");
  }

  create_tarball(
    %options,
    plugin_path => $plugin_path,
    plugin      => scalar( slurp_file($plugin) ),
    config_file => "$config_file.xml",
    test_file   => "$test_file.roc"
  );

  return 0;
}

########################################################################
sub create_tarball {
########################################################################
  my (%options) = @_;

  return
    if !$options{tarball};

  my $tar = Archive::Tar->new();

  my $plugin_path = sprintf '%s/%s.pm', $options{plugin_path}, $options{module};

  $tar->add_data( $plugin_path, $options{plugin} );
  $tar->add_files( $options{config_file} );

  if ( $options{test_file} ) {
    $tar->add_files( $options{test_file} );
  }
  my $tarball = sprintf '%s.tgz', $options{module};

  if ( -e $tarball ) {
    unlink $tarball;
  }

  $tar->write( $tarball, COMPRESS_GZIP );

  return;
}

########################################################################
sub create_plugin_file {
########################################################################
  my ( $plugin, %options ) = @_;

  open my $fh, '>', $plugin
    or die "Could not open $plugin for writing.";

  my $module = $options{module};

  if ( $options{plugin_type} eq 'Plugin' ) {
    print {$fh} sprintf _create_plugin(), $module, $module, $module, $options{author}, $options{email};
  }
  else {
    print {$fh} sprintf _create_application_plugin(), $module, $module, $options{binding}, $module,
      $options{author}, $options{email};
  }

  return close $fh;
}

########################################################################
sub create_config_file {
########################################################################
  my ( $config, %options ) = @_;

  return
    if $options{plugin};

  my $xml = <<'END_OF_XML';
<object>
  <scalar name="binding">%s</scalar>
  <scalar name="module">BLM::Startup::%s</scalar>
  <object name="config">
  <!-- your config info here -->
  </object>
</object>
END_OF_XML

  open my $fh, '>', $config
    or die "Could not open $config for writing.";

  print {$fh} sprintf $xml, $options{binding}, $options{module};

  return close $fh;
}

########################################################################
sub create_test_file {
########################################################################
  my ( $test, %options ) = @_;

  return
    if !$options{test};

  open my $fh, '>', $test
    or die "Could not open $test for writing.\n";

  if ( $options{plugin} ) {
    my $module = $options{module};
    print {$fh} sprintf "<plugin:%s><var \$%s.version()>\n", $module, $module;
  }
  else {
    print {$fh} sprintf "<var \$%s.version()>\n", $options{binding};
  }

  return close $fh;
}

########################################################################
sub _create_plugin {
########################################################################
  my $class = <<'END_OF_PLUGIN';
package BLM::%s;

use strict;
use warnings;

use parent qw(BLM::Plugin);

our $VERSION = 1.0.0;

########################################################################
sub init_plugin {
-########################################################################
  my ($self, @args) = @_;

  return 1;
}

########################################################################
sub version {
########################################################################
  my ($self) = @_;

  return $VERSION;
}

1;

__END__
END_OF_PLUGIN

  my $pod = <<'END_OF_POD';
 =pod
 
 =head1 PUBLIC
 
 BLM::%s
 
 =head1 SYNOPSIS
 
  <plugin:%s args>
 
 =head1 DESCRIPTION
 
 =head1 SEE ALSO
 
 L<BLM::Plugin>
 
 =head1 AUTHOR
 
 %s - <%s>
 
 =cut
END_OF_POD

  $pod =~ s/^\s//xmsg;

  return sprintf "%s\n%s", $class, $pod;
}

########################################################################
sub _create_application_plugin {
########################################################################

  my $class = <<'END_OF_PLUGIN';
package BLM::Startup::%s;

use strict;
use warnings;

use parent qw(Bedrock::Application::Plugin);

our $VERSION = 1.0.0;

########################################################################
sub init_plugin {
########################################################################
  my ($self) = @_;

  return 1;
}

########################################################################
sub version {
########################################################################
  my ($self) = @_;

  return $VERSION;
}

1;

__END__
END_OF_PLUGIN

  my $pod = <<'END_OF_POD';
 =pod
  
 =head1 NAME
 
 BLM::Startup::%s
 
 =head1 SYNOPSIS
 
  <var $%s.version()>
 
 =head1 DESCRIPTION
 
 This is the %s Application Plugin.
 
 =head1 METHODS AND SUBROUTINES
 
 =head1 SEE ALSO
 
 L<Bedrock::Application::Plugin>
 
 =head1 AUTHOR
 
 %s - <%s>
 
 =cut
END_OF_POD

  $pod =~ s/^\s//xmsg;

  return sprintf "%s\n%s", $class, $pod;
}

exit main();

1;

__END__

=pod

=head1 NAME

bedrock-plugin

=head1 SYNOPSIS

bedrock-plugin --module Foo --binding foo

=head1 DESCRIPTION

Provides a quick and easy way to create the scaffolding for a new
application plugin.

=head1 OPTIONS
 
  -r, --replace       replace modules, files if they exist
  -b, --binding=NAME  name of the variable to bind the Plugin to
  -m, --module=NAME   name of perl module (ex: MyPlugin)
  -p, --plugin        create a simple Plugin instead of an Application Plugin

 Examples:
 
   bedrock-plugin -r -m Foo
 
   bedrock-plugin -r -b foo
 
 Creates the scaffolding for an Application or simple Plugin for
 Bedrock. The files are created in your current working directory.
 
 Creates the files:
 
   MODULE-NAME.pm      => perl module stub
   BINDING-NAME.xml    => application plugin configuration file
   BINDING-NAME.roc    => example test file

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=head1 SEE ALSO

L<Bedrock::Application::Plugin>

=cut
