#!@PERL@

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

BEGIN {
  use lib '@PERL_LIBDIR@';
}

use Bedrock qw(slurp_file);
use Bedrock::Hash;
use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use Getopt::Long;
use IPC::Shareable;
use JSON::PP;

our %BEDROCK_CONFIG_CACHE;
our $VERSION = '@PACKAGE_VERSION@';

########################################################################
sub usage {
########################################################################
  print {*STDOUT} <<'END_OF_USAGE';
usage: bedrock-cache.pl options

 Options
 -------

  --create, -c   create the cache
  --delete, -d   delete the cache
  --file, -f     filename of a file to cache (experimental)
  --list, -l     list the contents of the cache
  --help, -h     this
  --reset, -r    clear the cache
  --size, -s     size of the cache in MB (default: 256)
  --version, -v  version

See man bedrock-cache.pl for more details.

END_OF_USAGE

  version();

  return;
}

########################################################################
sub version {
########################################################################
  print {*STDOUT} <<"END_OF_VERSION";
(c) Copyright 2024 - TBC Development Group, LLC
Version: $VERSION
All rights reserved
END_OF_VERSION

  return;
}

########################################################################
sub create_cache {
########################################################################
  my ( $create, $size ) = @_;

  my $cache = eval {
    local $SIG{__WARN__} = sub { };

    ## no critic (ProhibitTies)
    tie %BEDROCK_CONFIG_CACHE, 'IPC::Shareable',
      {
      key     => 'BCFG',
      create  => $create,
      destroy => 0,
      size    => 1024 * $size
      };
  };

  return $cache;
}

########################################################################
sub main {
########################################################################
  my %options;

  my @option_specs = qw(
    list
    create
    delete
    size=s
    help|?
    reset
    file=s
    version|v
  );

  GetOptions( \%options, @option_specs );

  if ( !$options{size} ) {
    $options{size} //= $ENV{BEDROCK_CACHE_CONFIG_SIZE} || 256;
  }

  my $cache = create_cache( 0, $options{size} );

  my %commands = (
    list => sub {
      my $str
        = eval { JSON::PP->new->pretty->allow_blessed->convert_blessed->encode( \%BEDROCK_CONFIG_CACHE ); };

      return print {*STDOUT} $str // $EVAL_ERROR;
    },

    delete => sub {
      if ($cache) {
        $cache->remove;
      }

      return 0;
    },
    version => sub {
      version();
      return 0;
    },
    reset => sub {
      %BEDROCK_CONFIG_CACHE = ();
    },

    file => sub {
      croak sprintf 'file (%s) not found or empty', $options{file}
        if !-e $options{file} || !-s $options{file};

      $BEDROCK_CONFIG_CACHE{ $options{file} } = slurp_file( $options{file} );

      return 0;
    },

    create => sub {
      if ($cache) {
        $cache->remove;
      }

      create_cache( 1, $options{size} );
      return 0;
    },

    help => sub {
      usage();

      return 0;
    },

    default => sub {
      usage();

      return 0;
    },
  );

  my $command = shift @ARGV;

  $command //= 'default';

  foreach (qw( list delete reset file help create version )) {
    next if !$options{$_};

    $command = $_;
    last;
  }

  return $commands{$command}->();
}

exit main();

__END__

=pod

=head1 NAME

bedrock-cache.pl

=head1 SYNOPSIS

Create the cache...

 bedrock-cache.pl create

List cache contents...

 bedrock-cache.pl list

Delete the cache...

 bedrock-cache.pl delete

=head1 DESCRIPTION

The Bedrock I<cache> is used to cache the Bedrock configuration
objects created by Bedrock when a Bedrock page is accessed on an
Apache virtual host.  Caching of the configuration is optionally done
when the Bedrock Apache handler begins to process a page.

The I<cache> is implemented as shared memory using Perl's
C<IPC::Shareable> module.

Because the configuration object is created from potentially several
different XML-based configuration files that are merged together to
create the final object startup time for the page can be negatively
impacted.  One way to mitigate startup time is to cache the
configuration object since configuration files are unlikely to change
very often for production applications.

Bedrock will automatically use the cache if it has been created (with
this utility for example) and the environment variable
C<BEDROCK_CACHE_CONFIG> has a value of "On".  This value is typically
set in the Apache virtual host configuration file using the C<SetEnv>
directive. 

 SetEnv BEDROCK_CACHE_CONFIG On

Prior to starting the Apache server you should initialize the cache.

 bedrock-cache.pl create
 apachectl start

=head1 NOTES

For more gory details regarding Bedrock configuration file caching,
see the I<perldocs> for C<Bedrock::Handler>.

=head1 USAGE

 bedrock-cache.pl [options] command

=head2 Commands

=over 5

=item delete

Deletes the shared memory object and removes the cache.

=item file

Caches a file.  The key is the fully qualified path name of the file.
This is experimental and Bedrock does not currently use this in any
way shape or form.  It has been added to this utility for potential
future usage.

=item list

Dumps the contents of the cache in JSON format. Note that the cache
may include sensitive information.  You have been warned.

=item reset

Clears the cache, but does not delete it.

=back

=head2 Options

=over 5

=item --help

Usage notes.

=item --size

Sets the size of the cache.

=item version

Prints the program version. This will always be the same version as
Bedrock itself.

=back

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

L<IPC::Shareable>, L<Bedrock::Handler>

=cut
