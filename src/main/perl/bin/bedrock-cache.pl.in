#!@PERL@

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2023, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock qw(slurp_file);
use Bedrock::Hash;
use Carp;
use Data::Dumper;
use English qw{-no_match_vars};
use Getopt::Long;
use IPC::Shareable;
use JSON::PP;

our %BEDROCK_CONFIG_CACHE;

########################################################################
sub usage {
########################################################################
  print {*STDOUT} <<'END_OF_USAGE';
usage: bedrock-cache.pl options

 Options:

   --create = create the cache
   --delete = delete the cache
   --file   = filename of a file to cache (experimental)
   --list   = list the contents of the cache
   --help   = this
   --reset  = clear the cache
   --size   = size of the cache in MB (default: 256)
END_OF_USAGE

  return;
}

########################################################################
sub main {
########################################################################

  my %options;

  my @option_specs = qw(
    list
    create
    delete
    size=s
    help|?
    reset
    file=s
  );

  GetOptions( \%options, @option_specs );

  if ( !$options{size} ) {
    $options{size} //= $ENV{BEDROCK_CACHE_CONFIG_SIZE} || 256;
  }

  # see if we have a cache defined
  {
    local $SIG{__WARN__} = sub { };

    ## no critic (ProhibitTies)
    tie %BEDROCK_CONFIG_CACHE, 'IPC::Shareable',
      {
      key     => 'BCFG',
      create  => $options{create} ? 1 : 0,
      destroy => 0,
      size    => 1024 * $options{size}
      };
  }

  my %commands = (
    list => sub {
      my $str
        = eval { JSON::PP->new->pretty->allow_blessed->convert_blessed->encode( \%BEDROCK_CONFIG_CACHE ); };

      return print {*STDOUT} $str // $EVAL_ERROR;
    },

    delete => sub {
      ( tied %BEDROCK_CONFIG_CACHE )->remove;
      return 0;
    },

    reset => sub {
      %BEDROCK_CONFIG_CACHE = ();
    },

    file => sub {
      croak sprintf 'file (%s) not found or empty', $options{file}
        if !-e $options{file} || !-s $options{file};

      $BEDROCK_CONFIG_CACHE{ $options{file} } = slurp_file( $options{file} );

      return 0;
    },

    create => sub {
      return 0;
    },

    help => sub {
      usage();

      return 0;
    },

    default => sub {
      usage();

      return 0;
    },
  );

  my $command = 'default';

  foreach (qw( list delete reset file help create )) {
    next if !$options{$_};

    $command = $_;
    last;
  }

  return $commands{$command}->();
}

exit main();

__END__

=pod

=head1 NAME

bedrock-cache.pl

=head1 SYNOPSIS

Create the cache...

 $ bedrock-cache.pl -c

List cache contents...

 $ bedrock-cache.pl -l

Delete the cache...

 $ bedrock-cache.pl -d

=head1 DESCRIPTION

The Bedrock I<cache> is currently used to cache the Bedrock
configuration objects created by Bedrock when a Bedrock page is
accessed on an Apache virtual host.  Caching of the configuration is
optionally done when the Bedrock Apache handler begins to process a
page.

The I<cache> is implemented as shared memory using Perl's
C<IPC::Shareable> module.

Because the configuration object is created from potentially several
different XML-based configuration files that are merged together to
create the final object startup time for the page can be negatively
impacted.  One way to mitigate startup time is to cache the
configuration object since configuration files are unlikely to change
very often for production applications.

Bedrock will automatically use the cache if it has been created (with
this utility for example) and the environment variable
C<BEDROCK_CACHE_CONFIG> has a value of "On".  This value is typically
set in the Apache virtual host configuration file using the C<SetEnv>
directive. 

 SetEnv BEDROCK_CACHE_CONFIG On

Prior to starting the Apache server you should initialize the cache.

 bedrock-cache.pl --create
 apachectl start

=head1 NOTES

For more gory details regarding Bedrock configuration file caching,
see the I<perldocs> for C<Bedrock::Handler>.

=head1 OPTIONS

=over 5

=item --delete

Deletes the shared memory object and removes the cache.

=item --file

Caches a file.  The key is the fully qualified path name of the file.
This is experimental and Bedrock does not currently use this in any
way shape or form.  It has been added to this utility for potential
future usage.

=item --list

Dumps the contents of the cache in JSON format. Note that the cache
may include sensitive information.  You have been warned.

=item --help

Usage notes.

=item --reset

Clears the cache, but does not delete it.

=item --size

Sets the size of the cache.  Only valid when used with the C<--create> option.

=back

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

L<IPC::Shareable>, L<Bedrock::Handler>

=cut
