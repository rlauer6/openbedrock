#!/usr/bin/env perl
# -*- mode: perl; -*-

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# @configure_input@

use strict;
use warnings;

use Carp;

BEGIN {
  use Bedrock::Constants qw($DEFAULT_BEDROCK_CONFIG_PATH $DEFAULT_BEDROCK_PERL5LIBDIR);
  use English qw(-no_match_vars);
  use File::ShareDir qw(dist_dir);

  if ( !$COMPILING ) {
    my $config_path = $ENV{BEDROCK_CONFIG_PATH};

    if ( !defined $config_path ) {
      ($config_path) = grep {defined} $DEFAULT_BEDROCK_CONFIG_PATH, sprintf '%s/config', dist_dir('Bedrock');
    }

    $ENV{BEDROCK_CONFIG_PATH} //= $DEFAULT_BEDROCK_CONFIG_PATH;
    push @INC, "$DEFAULT_BEDROCK_PERL5LIBDIR/Bedrock";

    if ( $ENV{DEBUG} ) {
      $ENV{LogLevel} //= 'debug';
    }
  }
}

require Apache::Bedrock;
require Apache::Request::Shell;

my $r = Apache::Request::Shell->new( loglevel => $ENV{LogLevel} );

local $SIG{TERM}     = \&confess;
local $SIG{__WARN__} = \&Carp::cluck;

my $code = Apache::Bedrock::handler($r);

die "Bedrock handler returned code: $code"
  if $code;

exit 0;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

bedrock - Command line interface for Bedrock templating

=head1 SYNOPSIS

 cat >foo.roc
 <var $input.this>
 ^D

 bedrock foo.roc this=that

 echo '<trace --output $env> | bedrock

 cat >foo.roc
 <var $input.POSTDATA>
 ^D

 echo '{ "foo" : "bar" }' | bedrock foo.roc

=head1 DESCRIPTION

Bedrock is a templating and scripting engine. The command line
version of Bedrock, dubbed B<Bedrock Shell>, can be used in much the
same way as the web development environment known as Bedrock.

Using Bedrock Shell you can:

=over 5

=item * 

Glue together data from databases and templates

=item *

Glue together data from files and templates

=item *

Test Bedrock Plugins

=item *

Process input data

=item *

Learn about Bedrock

=back

=head1 OPTIONS

=head2 --config

 --config=DIR

Specify an alternate directory where the Bedrock configuration files
are to be found. You can also set the C<CONFIG_PATH> environment
variable to indicate the path to these files.

 CONFIG_PATH=/var/www/vhosts/myhost.mydomain.com/config bedrock foo.roc
 bedrock -c /var/www/vhosts/myhost.mydomain.com/config foo.roc

If you've installed Bedrock from CPAN distriution file you'll find the
configuration files here:

 perl -MFile::ShareDir=dist_dir -e 'print dist_dir("Bedrock") . "/config";'

If you've installed Bedrock from the distribution tarball you'll find
the configuration files here:

 @configdir@

=head2 --db

  --db=DBNAME

Sets the default database connection to the name of a configuration
section found in F<.bedrock_rc>.

default: I<database>

=head2 --disable-tag

Disables one or more Bedrock tags. This may be useful for example,
when using a template that has tags that might look like Bedrock
tags. A typical use case might be when you are templating an Bedrock
XML file.  The C<array> tag is used by both Bedrock and as an child
element in a Bedrock XML file. Bedrock would normally attempt to
process the C<array> tag as a constructor of an array object.

 cat >foo.roc
 <object>
  <array name="foo>
    <scalar name="foo"><var $foo></scalar>
  </array>
 </object>
 ^D

 bedrock foo.roc --disable-tag array foo=bar

You can use more that one C<--disable-tag> option.

=head2 --env

Name of a file that contains key/value pairs that represent values to
inject into the environment and subsequently into the C<$env> object.

Example:

 cat >prod.env
 FOO=bar
 ^D

 cat >foo.roc
 <var $env.FOO>
 ^D

 bedrock --env=prod.env foo.roc
 bar

=head2 --help

Show helpful information.

=head2 --logfile

 --logfile=FILE

Filename where Bedrock Shell should output log messages.  This is not
the same as the Bedrock log or Bedrock's page log.

default: I</tmp/bedrock-shell.log>

=head2 --loglevel

 --loglevel=LEVEL

Specify the verbosity level of logging.  Possible vallues are B<debug>,
B<info>, B<warn>, and B<error>.

=head2 --rc

 --rc=FILE

Specify the name of the Bedrock Shell configuration file.  The default
is F<$HOME/.bedrock_rc>.  See L<CONFIGURING BEDROCK AND BEDROCK SHELL>.

=head2 --version

Report Bedrock version and build date.

=head1 CONFIGURING BEDROCK AND BEDROCK SHELL

See L<Bedrock::BedrockConfig> for details regarding the Bedrock
configuration files.

The Bedrock Shell program has some unique configuration options you
can set to control various aspects of its behavior.

=head2 .bedrock_rc

Bedrock Shell will look for the local configuration file
(F<$HOME/.bedrock_rc>).  This configuration file allows you to set
defaults for the options that you can also set on the command line.  The
options are described below.

  logfile = bedrock-shell.log
  loglevel = debug
  tempdir = .
  cleanup on
  [database]
  db = dbi:mysql:bedrock
  username = fred
  password = flintstone

=head2 cleanup

Determines whether or not Bedrock Shell should clean up temporary
files.  If you pipe data to C<bedrock> to be executed as a script,
Bedrock Shell will create a temporary file that contains your
script. The temporary file will be named using the template
F<bedrock-shell-XXXXX.roc>.  If you set C<cleanup on> this file will be
removed when Bedrock has completed processing the input stream.

ItE<039>s a good idea to C<cleanup> off in the event you might want to
save the file you just created.

default: I<off>

Example:

 cleanup on 

=head2 logfile

Bedrock Shell logs information in addition to the normal logs produced
by Bedrock. Use this option to specify the location and name for the
log file.

default: I</tmp/bedrock-shell.log>

Example:

  logfile = bedrock.log

=head2 loglevel

You can control the verbosity of the Bedrock logs by supplying a log
level in the configuration file. Possible values are:

 debug
 info
 warn
 error

Example:

 loglevel = debug

=head2 tempdir

Sets the directory path that Bedrock Shell will use to store temporary
files. Specifically, when you invoke Bedrock Shell without a file,
Bedrock Shell will attempt to read the template from STDIN. This input
is saved in a temporary file for you in the default temp
directory. The format of the saved file will be:

 bedrock-shell-xxxxx.roc

default: I</tmp>

Example:

 tempdir = $HOME/temp

=head2 database

Bedrock shell can automatically connect to a database for you so that
you can immediately use <sqlselect> for <sql> statements. If you
supply a C<database> section as shown below, Bedrock Shell will open
the connection as specified.

Example:

 [database]
 db = dbi:mysql:sales
 username = lotsa
 password = money

=head2 NAMED DATABASES

You can create your own named sections in the configuration file that
correspond to database connections you'd like to have opened
automatically when you invoke Bedrock Shell.

Use the C<--db> option on the command line when invoking Bedrock Shell to
open that database.

Examples:

 [customer]
 db = dbi:mysql:customer
 username = foo
 password = bar
 
 [sales]
 db = dbi:mysql:sales
 username = lotsa
 password = money

 bedrock --db=sales date=01/25 report.roc

=head1 PROCESSING BEDROCK TEMPLATES

You can create Bedrock shell scripts in much the same way that you
create C<bash> scripts. Create a Bedrock file, placing a shebang and the
path to Bedrock Shell on the first line of the script.

 cat >mike-report.roc
 #!/bin/bedrock --db=name
 <sqlselect --define-var="mike" "select * from custmr where sales_rep = 2">
 </sqlselect->
 <foreach $mike>
 <var $_.ACCT.format("%09d")> <var $_.PHONE> <var $_.NAME>
 </foreach->
 ^D

 chmod +x mike-report.roc
 ./mike-report.roc

=head1 PASSING PARAMETERS TO BEDROCK

Bedrock Shell process arguments via the C<$input> object is much the
same way that Bedrock in the web environment does.  Parameters that
are passed on the command line as C<key=value> pairs are available via
the C<$input> object.

Example:

 bedrock foo=bar
 <var $input.foo>
 ^D
 bar
 

=head1 READING STDIN

The first argument to Bedrock Shell is the name of a Bedrock template,
optionally followed by a set to CGI style input varialbes as described
above.

If no input file is specified, Bedrock Shell will read STDIN and
assume that the input represents your Bedrock page.  For example:

 echo '<trace --output $env>' | bedrock

However, if you specifiy an input file and there is also data on
STDIN, Bedrock Shell will read STDIN and set C<POSTDATA> in the
C<$input> object.

Example: Suppose an input stream contains JSON data and we want to
read that data into a Bedrock object.

 cat > json.roc
<null:foo  --json $input.POSTDATA>
<trace --output $foo>
^D
 $ echo '{ "foo" : "bar"}' | bedrock json.roc

{
 foo => (bar)
 }

=head1 ERROR HANDLING

Errors are handled a little differently in Bedrock Shell than they are
when running Bedrock in the Apache environment.

When errors occur in the Apache environment, Bedrock presents a page
listing with the error message and the line number highlighted.

In the shell environment, errors are displayed on STDERR with the line number displayed.

 $ cat | bedrock
 <trace --output ">">
 Error on line [1] (bedrock-shellzar7o.roc) - Could not find string terminator: 
 [1] <trace --output ">">

The <try>/<catch> construct works exactly the same way in Bedrock
Shell as it does in the Apache environment. You can <raise> errors to
be trapped or to signal the shell environment. 

Untrapped errors will exit Bedrock Shell with the error message as
described above sent to STDERR. Additionally, the return code will be
false allowing shell scripts to do things like:

 $ bedrock test.roc 2>/dev/null && echo "True"

 $ bedrock test.roc 2>/dev/null || echo "False"

=head1 BUGS

Report bugs at L<https://github.com/rlauer6/openbedrock.git>

=head1 SEE ALSO

 bedrock --help

L<http://twiki .openbedrock.net>

=head1 AUTHORS

Jay Sridhar, Rob Lauer <rclauer@gmail.com>

=cut
