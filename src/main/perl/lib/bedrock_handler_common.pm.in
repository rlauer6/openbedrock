package bedrock_handler_common;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

our @EXPORT = qw{ get_loglevel init_bedrock_handler};

use parent qw{ Exporter };

use Bedrock::Constants qw{:chars :booleans};
use English qw{-no_match_vars};

########################################################################
sub get_loglevel {
########################################################################
  my ($r) = @_;

  if ( $ENV{MOD_PERL} ) {
    return $r->server->loglevel();
  }
  else {
    return $r->get_loglevel_str();
  }
}

########################################################################
sub init_bedrock_handler {
########################################################################
  my ($r) = @_;

  my ( undef, undef, undef, $caller ) = caller 0;

  $r->log->info( sprintf '%s: loglevel: %s', $caller, get_loglevel($r) );

  my $bedrock_handler = eval { return Bedrock::Handler->new($r); };

  if ($EVAL_ERROR) {
    $r->log->error("Could not read config file. $EVAL_ERROR");

    if ( ref($r) !~ /shell/xsmi ) {

      $r->content_type('text/html');
      $r->send_http_header;

      print <<"END_OF_HTML";
<html>
  <head>
    <title>Bedrock Configuration Error</title>
  </head>
  <body>
    <div style="color:red;">
      An error was encountered while trying to read Bedrock&#39; configuration file:
    </div>

    <pre>
You most likely have a malformed .xml file somewhere in your configuration path.
While reading the configuration directories, Bedrock has thrown the following exception:

$EVAL_ERROR

Check the log file for more information.
    </pre>
  </body>
</html>
END_OF_HTML
      return;
    }
    else {
      print <<"END_OF_MESSAGE";

Bedrock shell could not process one or more of your configuration files.

You most likely have a malformed .xml file somewhere in your configuration path.
While reading the configuration directories, Bedrock has thrown the following exception:

$EVAL_ERROR

Check the log file for more information.
END_OF_MESSAGE

      return;
    }
  }

  return $bedrock_handler;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<bedrock_handler_common>

=head1 SYNOPSIS

=head1 DESCRIPTION

=head2 get_loglevel

Returns the current logging level for the handler.

Note that there are two separate loggers for Apache and for Bedrock
itself. This method returns the logging level for the Apache handler.

Under the CGI (non-mod-perl) version of Bedrock, the request object
does not have access to the Apache log level.  We fake it by looking
for an environment variable named I<BedrockLogLevel>. I<LOGLEVEL>, set
in F<tagx.xml>, is used to tell Bedrock how verbose to be during page
processing, while I<BedrockLogLevel> is used to alter the logging
level of the initialization phase of Bedrock.

To reiterate:

=over 5

=item BedrockLogLevel

This is a proxy for Apache's LogLevel when running Bedrock in a
non-mod-perl environment.

=item LOGLEVEL

Logging level for Bedrock's tag processor.

=back

The Apache handler will log at the level returned by this method and
to the log files configured in your Apache configuration file.  The
handler will then invoke C<$tx->options()>, setting the logging
parameters for Bedrock. After that point, logging is done to Bedrock's
log files (or STDERR if streaming logs).

Note that th config object is a merged version of F<tagx.xml> and
other configuration files found during initialization.  This means
that other configuration files could possibly override values set in
F<tagx.xml>. I<This is by design.>

=head2 init_bedrock_handler

 init_bedrock_handler(handler)

Initializes Bedrock's handler.  The handler's job is to read Bedrock's
configuration files and prepare Bedrock's environment which includes
preparing BLMs for execution during page processing.

=head1 AUTHOR

Rob Lauer - <rclauer@gmail.com>

=cut
