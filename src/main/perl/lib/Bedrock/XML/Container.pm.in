#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package Bedrock::XML::Container;

use strict;

# construct a new generic container. Subclasses can use this
# method to construct themselves and do whatever additional stuff needed
# Arguments: $class, $parser, <Any additional options>
# Returns: Container object
sub new
{
    my $class = shift;
    my $p = shift;
    my $self = bless {}, $class;
    return $self unless @_ > 0;
    my %args = @_;
    my ($k, $v);
    while (($k, $v) = each %args) {
	next unless $k =~ /^(name|index|export_env)$/i;
	$self->{$k} = $v;
    }
    $p->xpcroak("either one of `name' or `index' should be used here")
	if exists $self->{'name'} and exists $self->{'index'};
    $p->xpcroak("must define `name' when using `export_env'")
	if exists $self->{'export_env'} and $self->{'export_env'} =~ /yes/i and not exists $self->{'name'};
    $self;
}

# Upon ending current object, we just return parent
sub end_body
{
    my $self = shift;
    $self->parent;
}

# Generic container just discards text
sub text
{
}

# generic parent method stores the argument if any as the property `parent'
# of the object which is presumed to be a hash. You need to override this method
# if you want to do something else with the parent
# Arguments: $self, [$parent]
# Returns: $parent
sub parent
{
    my $self = shift;
    $self->{'parent'} = shift if @_ == 1;
    $self->{'parent'};
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/11/01 18:37:49  sridhar
# Adding XML capability to Bedrock. Basically we have a class here which
# can read and write arbitrary perl data structures in XML format.
#
#
