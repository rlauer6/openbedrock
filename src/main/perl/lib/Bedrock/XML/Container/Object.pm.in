#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package Bedrock::XML::Container::Object;

use strict;
use Bedrock::XML::Container;

@Bedrock::XML::Container::Object::ISA = qw(Bedrock::XML::Container);

# construct a new object -- takes no options
# Arguments: $class, $parser, <Any additional options>
# Returns: new object
sub new
{
    my $class = shift;
    my $p = shift;
    my $self = bless Bedrock::XML::Container->new($p, @_), $class;
    $self->{'object'} = {};

    # Parse additional args here if needed
    $self;
}

# Add a new sub-object (generic object: could be an `object', `array' or `scalar') into the object.
# It is an error for the `name' property not to be set in the sub-object
# Arguments: $self, $parser, $obj_type, $object
# returns: the stored sub-object
sub new_child
{
    my $self = shift;
    my $p = shift;
    my $e = shift;
    my $item = shift;
    my $name = $item->{'name'};
    $p->xpcroak("option `name' must be specified for sub-object under <object>")
	unless defined($name);
    $self->{'object'}->{$name} = $item;
    $item->parent($self);
    $item;
}

# Add a new scalar into the object.
# Arguments: $self, $parser, `scalar', $scalar
# returns: the stored scalar
sub new_scalar
{
    my $self = shift;
    $self->new_child(@_);
}

# Add a new object into the object. It is an error for the `name' property
# not to be set in the new object
# Arguments: $self, $parser, `object', $object
# returns: the stored object
sub new_object
{
    my $self = shift;
    $self->new_child(@_);
}

# Add a new array into the object. It is an error for the `name' property
# not to be set in the new array
# Arguments: $self, $parser, `array', $newarray
# returns: the stored array
sub new_array
{
    my $self = shift;
    $self->new_child(@_);
}

sub finalize
{
    my $self = shift;
    for my $key (keys %{$self->{'object'}}) {
	$self->{'object'}->{$key} = $self->{'object'}->{$key}->finalize;
    }
    $self->export_env if $self->{'export_env'};
    delete $self->{'object'};
}

my $flatten = sub
{
    my ($ref, $prefix, $flat) = @_;
    return undef unless &UNIVERSAL::isa($ref, 'HASH');
    if ( defined($prefix) ) {
	$prefix .= '_';
    } else {
	$prefix = '';
    }

    $flat = {} unless defined($flat);
    for my $key (keys %{$ref}) {
	my $value = $ref->{$key};
	if ( ref($value) ) {
	    &flatten( $value, $prefix . $key, $flat );
	} else {
	    $flat->{$prefix . $key} = $ref->{$key};
	}
    }
    $flat;
};

sub export_env
{
    my $self = shift;
    my $ref = $flatten->($self->{'object'}, $self->{'name'});
    for my $key (keys %{$ref}) {
	$ENV{$key} = $ref->{$key};
    }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/11/01 18:37:49  sridhar
# Adding XML capability to Bedrock. Basically we have a class here which
# can read and write arbitrary perl data structures in XML format.
#
#
