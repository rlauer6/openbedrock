#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::XML::Container::Object;

use strict;
use Bedrock::Hash;
use Bedrock::XML::Container;

@Bedrock::XML::Container::Object::ISA = qw(Bedrock::XML::Container);

# construct a new object -- takes no options
# Arguments: $class, $parser, <Any additional options>
# Returns: new object
sub new {
  my $class = shift;
  my $p     = shift;
  my $self  = bless Bedrock::XML::Container->new( $p, @_ ), $class;
  $self->{'object'} = {};

  # Parse additional args here if needed
  $self;
}

# Add a new sub-object (generic object: could be an `object', `array' or `scalar') into the object.
# It is an error for the `name' property not to be set in the sub-object
# Arguments: $self, $parser, $obj_type, $object
# returns: the stored sub-object
sub new_child {
  my $self = shift;
  my $p    = shift;
  my $e    = shift;
  my $item = shift;
  my $name = $item->{'name'};
  $p->xpcroak("option `name' must be specified for sub-object under <object>")
  unless defined($name);
  $self->{'object'}->{$name} = $item;
  $item->parent($self);
  $item;
}

# Add a new scalar into the object.
# Arguments: $self, $parser, `scalar', $scalar
# returns: the stored scalar
sub new_scalar {
  my $self = shift;
  $self->new_child(@_);
}

# Add a new object into the object. It is an error for the `name' property
# not to be set in the new object
# Arguments: $self, $parser, `object', $object
# returns: the stored object
sub new_object {
  my $self = shift;
  $self->new_child(@_);
}

# Add a new array into the object. It is an error for the `name' property
# not to be set in the new array
# Arguments: $self, $parser, `array', $newarray
# returns: the stored array
sub new_array {
  my $self = shift;
  $self->new_child(@_);
}

sub finalize {
  my $self = shift;
  for my $key ( keys %{ $self->{'object'} } ) {
    $self->{'object'}->{$key} = $self->{'object'}->{$key}->finalize;
  }
  $self->export_env if $self->{'export_env'};
  my $o = delete $self->{'object'};
  delete $self->{'parent'};
  return $o ? Bedrock::Hash->new( %{$o} ) : $o;
}

my $flatten = sub {
  my ( $ref, $prefix, $flat ) = @_;
  return undef unless &UNIVERSAL::isa( $ref, 'HASH' );
  if ( defined($prefix) ) {
    $prefix .= '_';
  }
  else {
    $prefix = '';
  }

  $flat = {} unless defined($flat);
  for my $key ( keys %{$ref} ) {
    my $value = $ref->{$key};
    if ( ref($value) ) {
      &flatten( $value, $prefix . $key, $flat );
    }
    else {
      $flat->{ $prefix . $key } = $ref->{$key};
    }
  }
  $flat;
};

sub export_env {
  my $self = shift;
  my $ref = $flatten->( $self->{'object'}, $self->{'name'} );
  for my $key ( keys %{$ref} ) {
    $ENV{$key} = $ref->{$key};
  }
}

1;

#
# Revision 1.8  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.7  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.6  2010/11/29 15:57:55  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.5  2009/12/28 20:31:35  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.4  2001/02/14 15:35:51  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2000/11/07 21:14:33  sridhar
# Deleting parent from each object on finalization since that leaves the
# objects in a circular list.
#
# Revision 1.2  2000/11/07 13:49:13  sridhar
# Returns SIS::Hash on finalize().
#
# Revision 1.1  2000/11/01 18:37:49  sridhar
# Adding XML capability to Bedrock. Basically we have a class here which
# can read and write arbitrary perl data structures in XML format.
#
#
