#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::XML::Container::Array;

use strict;
use Bedrock::Array;
use Bedrock::XML::Container;

@Bedrock::XML::Container::Array::ISA = qw(Bedrock::XML::Container);

# construct a new array (actually a hash, but containing the underlying array)
# takes no options
# Arguments: $class, $parser, <Any additional options>
# Returns: array object
sub new
{
    my $class = shift;
    my $p = shift;
    my $self = bless Bedrock::XML::Container->new($p, @_), $class;
    $self->{'array'} = [];

    # Parse additional args here if needed
    $self;
}

# Add a new sub-object into the array. If `index' property is set in the
# sub-object, the sub-object sits on that index in the array. Else the sub-object
# is pushed at the end of the array
# Arguments: $self, $parser, $obj_type, $object 
# returns: the stored object
sub new_child
{
    my $self = shift;
    my $p = shift;
    my $e = shift;
    my $item = shift;
    my $index = $item->{'index'};
    if ( defined( $index ) ) {
	$self->{'array'}->[$index] = $item;
    } else {
	push @{$self->{'array'}}, $item;
    }
    $item->parent($self);
    $item;
}

# Add a new scalar into the array. 
# Arguments: $self, $parser, `object', $object
# returns: the stored object
sub new_scalar
{
    my $self = shift;
    $self->new_child(@_);
}

# Add a new object into the array. 
# Arguments: $self, $parser, `object', $object
# returns: the stored object
sub new_object
{
    my $self = shift;
    $self->new_child(@_);
}

# Add a new array into the array. If `index' property is set in the
# new array, the new array sits on that index in the current array. Else the
# new array is pushed at the end of the current array
# Arguments: $self, $parser, `array', $newarray
# returns: the stored array
sub new_array
{
    my $self = shift;
    $self->new_child(@_);
}

# Invoked to return your data
# You should assemble data from your items and return it in raw form
sub finalize
{
    my $self = shift;
    for (@{$self->{'array'}}) {
	$_ = $_->finalize if defined($_);
    }
    my $a = delete $self->{'array'};
    delete $self->{'parent'};
    return ( $a ? Bedrock::Array->new(@{$a}) : $a );
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.7  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.6  2010/11/29 15:57:55  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.5  2009/12/28 20:31:35  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.4  2001/02/14 15:35:51  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2000/11/07 21:14:33  sridhar
# Deleting parent from each object on finalization since that leaves the
# objects in a circular list.
#
# Revision 1.2  2000/11/07 13:48:49  sridhar
# Returns SIS::Array on finalize()
#
# Revision 1.1  2000/11/01 18:37:49  sridhar
# Adding XML capability to Bedrock. Basically we have a class here which
# can read and write arbitrary perl data structures in XML format.
#
#
