package Bedrock::Dumper;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2023, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Role::Tiny;

use Bedrock qw(:booleans);
use Bedrock::Constants qw(:chars :booleans);

use English qw(-no_match_vars);
use List::Util qw(any);
use Scalar::Util qw(refaddr);

use parent qw(Exporter);

our @EXPORT_OK = qw(dumper);

########################################################################
sub htmlencode {
########################################################################

  for (@_) {
    s/\&/\&amp;/xsmg;
    s/\</\&lt;/xsmg;
    s/\>/\&gt;/xsmg;
    s/\"/\&quot;/xsmg;    # &quot;
    s/\x27/\&\#39;/xsmg;  # &apos;
    s/\`/\&\#96;/xsmg;    # &grave;
  }

  return;
}

########################################################################
sub compact {
########################################################################
  my ( $ref, $prefix, $string, $encode, $stack ) = @_;

  $stack //= [];

  # prefix -- what prints on a line before the current item's key and value
  $prefix //= $EMPTY;

  # What has been printed so far
  $string //= $EMPTY;

  if ( is_hash($ref) ) {

    # need to keep track of empty hashes
    my $i = 0;

    for my $key ( keys %{$ref} ) {
      my $value = $ref->{$key};

      if ( ref $value ) {

        # $p is the prefix for the recursive call to compact()
        # Need to have this since we want $prefix unchanged after the
        # recursive call
        my $p = $i ? $SPACE x length $prefix : $prefix;

        # Append the key to the current item
        if ( length $p ) {
          $p .= ".$key";
        }
        else {
          $p = $key;
        }

        # And invoke compact()
        # recursive invocation if value is a reference
        return
          if any { refaddr($value) == $_ } @{$stack};

        push @{$stack}, refaddr($value);

        $string = compact( $value, $p, $string, $encode, $stack );
      }
      else {
        $string .= $i ? $SPACE x length $prefix : $prefix;

        if ( length $prefix ) {
          $string .= $DOT;
        }

        if ($encode) {
          $value = htmlencode($value);
        }

        $string .= "$key = ($value)\n";
      }

      $i++;
    }

    # Need this to mark empty hashes
    if ( !$i ) {
      $string .= "$prefix = (*** Empty Hash ***)\n";
    }
  }
  elsif ( is_array($ref) ) {

    # To keep track of empty arrays
    my $i = 0;

    for ( ; $i < @{$ref}; $i++ ) {
      my $value = $ref->[$i];

      if ( ref $value ) {

        # $p is the prefix for the recursive call to compact()
        # Need to have this since we want $prefix unchanged after the
        # recursive call
        my $p = $i ? $SPACE x length $prefix : $prefix;

        # Append current item index
        $p .= ".[$i]";

        return
          if any { refaddr($value) == $_ } @{$stack};

        push @{$stack}, refaddr($value);

        $string = compact( $value, $p, $string, $encode, $stack );
      }
      else {
        $string .= $i ? $SPACE x length $prefix : $prefix;

        if ($encode) {
          $value = htmlencode($value);
        }

        $string .= ".[$i] = ($value)\n";
      }
    }

    # To mark empty arrays
    if ( !$i ) {
      $string .= "$prefix = (*** Empty Array ***)\n";
    }
  }
  else {
    if ($encode) {
      $ref = htmlencode($ref);
    }

    $string .= "$prefix = ($ref)\n";
  }

  return $string;
}

########################################################################
sub regular {
########################################################################
  my ( $ref, $nspaces, $string, $encode, $stack ) = @_;

  $stack //= [];

  $nspaces ||= 2;
  $string //= $EMPTY;

  if ( is_hash($ref) ) {
    $string .= "{\n";

    for my $key ( keys %{$ref} ) {
      my $value = $ref->{$key};

      $string .= $SPACE x $nspaces . "$key => ";

      if ( ref $value ) {
        return
          if any { refaddr($value) == $_ } @{$stack};

        push @{$stack}, refaddr($value);

        $string = regular( $value, $nspaces + 2, $string, $encode, $stack );
      }
      else {
        if ( $encode && defined $value ) {
          $value = htmlencode($value);
        }

        $string .= defined $value ? "($value)\n" : "*** Undefined ***\n";
      }
    }

    $string .= $SPACE x $nspaces . "}\n";
  }
  elsif ( is_array($ref) ) {
    $string .= "[\n";

    my ( $i, $value );

    for ( $i = 0; $i < @{$ref}; $i++ ) {
      $value = $ref->[$i];

      $string .= $SPACE x $nspaces . "[$i] .. ";

      if ( ref $value ) {
        return
          if any { refaddr($value) == $_ } @{$stack};

        push @{$stack}, refaddr($value);

        $string = &regular( $value, $nspaces + 2, $string, $encode, $stack );
      }
      else {
        if ($encode) {
          $value = _Htmlencode($value);
        }

        $value //= $EMPTY;

        $string .= "($value)\n";
      }
    }
    $string .= $SPACE x $nspaces . "]\n";
  }
  else {
    if ($encode) {
      $ref = _Htmlencode($ref);
    }

    $ref //= $EMPTY;
    $string .= "($ref)\n";
  }

  return $string;
}

########################################################################
sub _regular_dump {
########################################################################
  goto &Bedrock::Dumper::regular;
}

########################################################################
sub _compact_dump {
########################################################################
  goto &Bedrock::Dumper::compact;
}

########################################################################
sub dumper {
########################################################################
  my ( $self, %args ) = @_;

  my ( $type, $file, $encode ) = @args{qw{type file encode}};

  $type //= $EMPTY;
  $file //= $EMPTY;

  return $type ne 'compact'
    ? Bedrock::Dumper::print( $self, $file, $encode )
    : print_compact( $self, $file, $encode );
}

########################################################################
sub print {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $file, $encode ) = @_;

  my $str = regular( $self, $EMPTY, $EMPTY, $encode );

  return $file ? _print( $file, $str ) : $str;
}

########################################################################
sub print_compact {
########################################################################
  my ( $self, $file, $encode ) = @_;

  my $str = compact( $self, $EMPTY, $EMPTY, $encode );

  return $file ? _print( $file, $str ) : $str;
}

########################################################################
sub _print {
########################################################################
  my ( $file, $str ) = @_;

  open my $fh, '>', $file
    or die "Could not create $file: $OS_ERROR";

  print {$fh} $str;

  close $fh;

  return $str;
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 NAME

Bedrock::Dumper - Bedrock's Data::Dumper

=head1 SYNOPSIS

 use Bedrock::Dumper qw(dumper);

 dumper($obj, type => 'compact', file => 'foo.out', encode => 1);

=head1 DESCRIPTION

A data dumper, ostensibly used to avoid using C<Data::Dumper>.

=head1 METHODS AND SUBROUTINES

L<Bedrock::Dumper> does not export any methods by default. Only C<dumper()> can be imported.

=head2 dumper

 dumper(object, options)

Returns a string representing a serialized version of the
object. Optionally writes the string to a file.

=over 5

=item type

One of:

 compact
 regular

default: regular

=back

=head2 print

 Bedrock::Dumper::print(object, [file, encode])

Returns the 'regular' serialized object.

=over 5

=item file

 optional name of a file to write the serialized object to

=item encode

boolean used to indicate the string should be HTML encoded

=back

=head2 print_compact

 print_compact(object, [file, encode])

Same as L</print> but object representation is a bit terser.

=head1 AUTHOR

J. Sridhar

=head1 SEE ALSO

L<Bedrock::Dump>

=cut
