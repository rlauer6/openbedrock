package Bedrock::Serializer;

use strict;
use warnings;

use Bedrock qw{:booleans};
use Bedrock::Constants qw{:booleans};

use Data::Dumper;
use English qw{-no_match_vars};
use Role::Tiny;

use parent qw{Exporter};

our @EXPORT_OK = qw/evolve devolve/;

########################################################################
sub new {
########################################################################
  my ( $class, $config ) = @_;

  my $self = bless {}, ref($class) || $class;

  $self->{_config} = $config || {};

  return $self;
}

########################################################################
sub config {
########################################################################
  my ($self) = @_;

  return $self->{_config};
}

########################################################################
sub options {
########################################################################
  my ( $self, $config, $options ) = @_;

  if ($config) {
    if ($options) {
      $self->{_options} = $options;
    }
    elsif ( ref( $self->config ) && $self->config->{$config} ) {
      if ( $self->config->{$config}->can('devolve') ) {
        $self->{_options} = $self->config->{$config}->devolve;
      }
      else {
        $self->{_options} = $self->config->{$config};
      }
    }
    else {
      $self->{_options} = {};
    }
  }

  return $self->{_options};
}

########################################################################
before serialize => sub {
########################################################################
  my ( $orig, $data, $this ) = @_;

  return $orig->options( 'in', $this );
};

########################################################################
before deserialize => sub {
########################################################################
  my ( $orig, $data, $this ) = @_;

  return $orig->options( 'out', $this );
};

# convert Bedrock objects -> regular Perl objects
########################################################################
sub devolve {
########################################################################
  my ($this) = @_;

  if ( is_hash($this) ) {
    my $that = {};

    foreach ( keys %{$this} ) {
      $that->{$_} = devolve( $this->{$_} );
    }

    return $that;
  }
  elsif ( is_array($this) ) {
    my $that = [];

    foreach ( @{$this} ) {
      push @{$that}, devolve($_);
    }

    return $that;
  }
  elsif ( ref $this ) {
    die "invalid object\n";
  }
  else {
    return $this;
  }
}

# promote regular perl objects -> Bedrock objects
########################################################################
sub evolve {
########################################################################
  my ($this) = @_;

  if ( is_hash($this) ) {  ## no critic (ProhibitCascadingIfElse)
    bless $this, 'Bedrock::Hash';

    foreach ( keys %{$this} ) {
      $this->{$_} = evolve( $this->{$_} );
    }

    return $this;
  }
  elsif ( is_array($this) ) {
    bless $this, 'Bedrock::Array';

    for my $idx ( 0 .. $#{$this} ) {
      $this->[$idx] = evolve( $this->[$idx] );
    }

    return $this;
  }
  elsif ( ref($this) =~ /boolean/xsmi ) {
    return ($this) ? $TRUE : $FALSE;
  }
  elsif ( ref $this ) {
    return $this;
  }
  else {
    return $this;
  }
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 NAME

Bedrock::Serializer - role used when creating Bedrock serializers

=head1 SYNOPSIS

 package Bedrock::Serializer::JSON;

 use Role::Tiny::With;
 with 'Bedrock::Serializer';

 sub deserialize {
   my ($self, $data) = @_;
  
   return Bedrock::JSON::decode($data);
 }

 sub serialize {
   my ($self, $data) = @_;

   return Bedrock::JSON::encode($data, $self->options->{pretty} || 0);
 }

 1;

=head1 DESCRIPTION

This class is used internally by Bedrock as a base class for creating
serializers used by the C<&lt;var&gt; tag>.

 <var --json $foo>

=head1 METHODS AND SUBROUTINES

Provides two subroutines that are used to promote or demote objects to
Bedrock objects after or before serialization.

=head2 devolve

 use Bedrock::Serializer qw{devolve}

 my $new_obj = >devolve;

=head2 evolve

 use Bedrock::Serializer qw{devolve}

 my $new_obj = evolve($obj);

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=head1 SEE OTHER

=cut
