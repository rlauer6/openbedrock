#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

package Faux::ApacheHandler;

########################################################################
sub new {
########################################################################
  return bless {}, shift;
}

sub AUTOLOAD { }  ## no critic (ProhibitAutoLoading)

########################################################################
sub log {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  return $self;
}

########################################################################
package Faux::Context;

use Bedrock;
use Bedrock::Context qw{init_log4perl_logger};

use Data::Dumper;

use English qw{-no_match_vars};

# we need to provide Text::TagX with a context object if we want
# certain behaviors in Bedrock.
########################################################################
sub new {
########################################################################
  my ( $class, $outhandle, %options ) = @_;

  # everything else should be a hash of option
  $options{outhandle} = $outhandle;

  my $self = bless \%options, $class;

  $self->request( Faux::ApacheHandler->new );

  # you do know that $log4perl_conf if undef ?
  my ( $log_level, $log4perl_conf )
    = @{ $options{CONFIG} }{qw{ LogLevel}};

  init_log4perl_logger($log4perl_conf);

  return $self;
}

########################################################################
sub cgi_header_in {
########################################################################
}

########################################################################
sub send_http_header {
########################################################################
}

########################################################################
sub getCookieValue {
########################################################################
}

########################################################################
sub cgi_header_out {
########################################################################
}

{
  ## no critic (RequireArgUnpacking, ProhibitNoStrict)
  no strict 'refs';

  my @var_list = qw{
    OUTPUT_HANDLER APACHE_HANDLER REQUEST_HANDLER SESSION CONFIG HEADER
    output_vars _request _response
  };

  foreach my $var (@var_list) {
    *{ 'Faux::Context::' . lc $var } = sub { _set( @_, $var ) };
  }
}

########################################################################
sub request { return _set( @_, 'request' ) };  ## no critic (RequireArgUnpacking)
########################################################################

########################################################################
sub _set {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 1 ) {
    return $self->{ $args[1] } = $args[0];
  }
  else {
    return $self->{ $args[0] };
  }
}

########################################################################
sub print {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  return $self->{outhandle}->print(@args);
}

########################################################################
sub close {  ## no critic (ProhibitBuiltinHomonyms, ProhibitAmbiguousNames)
########################################################################
  my ( $self, @args ) = @_;

  return $self->{outhandle}->close(@args);
}

########################################################################
package Bedrock::Test;

use parent qw(Exporter);

use Bedrock::BedrockConfig;
use Bedrock::Constants qw(:chars :booleans :defaults);
use Bedrock::Handler;
use Bedrock::Test::Utils qw(create_temp_file);
use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use File::Temp qw( tempfile );
use IO::Scalar;
use JSON;
use List::Util qw( any none);
use Scalar::Util qw(reftype);
use Symbol;
use Test::More;
use YAML qw/LoadFile/;

our @EXPORT_OK = qw/load run config bedrock/;

# interprets and runs the test configurations
########################################################################
sub run {
########################################################################
  my ( $tests, %options ) = @_;

  my $name   = $options{name};
  my $config = $options{config} || config();

  if ( !ref $tests ) {
    $tests = load( $tests, %options );

    die "could not load [$tests]\n"
      if !ref $tests;
  }

  if ( !ref $tests || reftype($tests) ne 'ARRAY' ) {
    die "test object is not an array\n";
  }

  plan tests => exists $options{plan} ? $options{plan} : scalar @{$tests};

  foreach my $t ( @{$tests} ) {
    check_test($t);

    my $tempfile
      = $t->{tempfile} ? create_temp_file( %{ $t->{tempfile} } ) : $EMPTY;

    # override configuration values if config section present
    if ( $t->{config} ) {
      for ( keys %{ $t->{config} } ) {
        $config->{$_} = $t->{config}->{$_};
      }
    }

    local %ENV = %ENV;
    my $env = \%ENV;

    if ( $t->{env} ) {
      for ( keys %{ $t->{env} } ) {
        $env->{$_} = $t->{env}->{$_};
      }
    }

    my %r = bedrock(
      $t->{test},
      name     => $name,
      env      => $env,
      param    => $t->{param},
      config   => $config,
      tempfile => $tempfile,
    );

    if ( $tempfile && $t->{tempfile}->{cleanup} ) {
      unlink $tempfile;
    }

    # are we looking for an error?
    if ( $t->{error} ) {
      $r{output} = $r{error};

      # unless op is set, assume we match on regexp
      if ( !$t->{op} ) {

        # make it a regexp if it was a bare word
        if ( $t->{error} !~ /^\/.*?\//xsm ) {
          $t->{result} = sprintf '/%s/', $t->{error};
        }
        else {
          $t->{result} = $t->{error};
        }

        $t->{op} = 'like';
      }
      else {
        $t->{result} = $t->{error};
      }
    }

    # default for all results is equal to
    my $op = $t->{op} || 'is';

    if ( $t->{trim} ) {
      my $result = $r{output};

      $result =~ s/\A\s*(.*?)\z/$1/xsm;

      $r{output} = $result;
    }

    if ( $t->{chomp} ) {

      my $result = $r{output};

      $result =~ s/\n*\z//xsm;

      if ( $t->{chomp} == 2 ) {
        $result =~ s/\A\n*//xsm;
      }

      $r{output} = $result;
    }

    if ( ref $op ) {
      $op = 'cmp_ok';
    }

    my %op_subs = (
      is => sub {
        return is( $r{output}, $t->{result}, $t->{name} );
      },

      isnt => sub {
        return isnt( $r{output}, $t->{result}, $t->{name} );
      },

      like => sub {
        return like( $r{output}, $t->{result}, $t->{name} );
      },

      unlike => sub {
        return unlike( $r{output}, $t->{result}, $t->{name} );
      },

      cmp_ok => sub {
        return cmp_ok( $r{output}, $t->{op}->{cmp_ok}, $t->{result},
          $t->{name} );
      },
      isa_ok => sub {
        return isa_ok( $r{output}, $t->{result}, $t->{name} );
      },
    );

    my $success = $op_subs{$op}->();

    if ( !$success ) {
      if ( $r{error} ) {
        diag( sprintf "[%s]:[%s]:[%s]\n", @r{qw/input output/}, $r{error} );
      }
      else {
        if ( defined $t->{comment} ) {
          note( sprintf '%s', $t->{comment} );
        }

        note( sprintf "[%s]:[%s]\n", @r{qw/input output/} );
      }
    }
  }

  return;
}

########################################################################
sub config {
########################################################################
  my ($bedrock_config_path) = @_;

  $bedrock_config_path //= $DEFAULT_BEDROCK_CONFIG_PATH;

  $ENV{BEDROCK_CONFIG_PATH} //= $bedrock_config_path;

  return Bedrock::Handler->new( Faux::ApacheHandler->new )->config;
}

# loads the t/{file}.txt file
########################################################################
sub load {
########################################################################
  my ( $file, %options ) = @_;

  if ( $file =~ /[.]ya?ml$/xsm ) {
    $options{yaml} = $TRUE;
  }

  my $tests = eval {
    if ( exists $options{yaml} && $options{yaml} ) {
      return [ LoadFile($file) ];
    }
    else {

      local $RS = undef;

      open my $fh, '<', $file
        or croak "could not open $file";

      my $tests = <$fh>;

      close $fh
        or croak "could not close $file";

      return JSON::PP->new->utf8->relax->decode($tests);
    }
  };

  die "unable to load test file [$file]: $EVAL_ERROR"
    if $EVAL_ERROR;

  return $tests;
}

########################################################################
sub bedrock {
########################################################################
  my ( $text, %options ) = @_;

  my %param = $options{param} ? %{ $options{param} } : ();

  require Text::TagX;

  my $output = $EMPTY;

  my $ctx = Faux::Context->new( IO::Scalar->new( \$output ),
    CONFIG => $options{config}, );

  my $tx = Text::TagX->new( IO::Scalar->new( \$text ), $ctx );

  $tx->options( ALLOW_SNIPPET_TAG => 'yes' );

  $tx->param( %param, config => $options{config} );

  load_startup_modules(
    $tx,
    CONFIG          => $options{config},
    CONTEXT         => $ctx,
    EXCLUDE_MODULES => [q/BLM::Startup::UserSession/]
  );

  my $e = eval {
    my %faux_env = %ENV;

    if ( $options{env} && reftype( $options{env} ) eq 'HASH' ) {

      foreach my $var ( %{ $options{env} } ) {
        next if !$var;
        $faux_env{$var} = $options{env}->{$var};
      }
    }

    local %ENV = %faux_env;

    $tx->output;
  };

  return (
    input  => $text,
    error  => $EVAL_ERROR,
    output => $output
  );
}

########################################################################
sub check_test {
########################################################################
  my ($test) = @_;

  die "no test key found in test\n"
    if !exists $test->{test};

  die "no result or error key found in test\n"
    if !exists $test->{result} && !exists $test->{error};

  return $TRUE;
}

########################################################################
sub require_module {
########################################################################
  my ($modfile) = @_;

  $modfile =~ s/::/\//xsmg;

  if ( $modfile !~ /[.]pm\z/xsm ) {
    $modfile =~ s/\z/.pm/xsm;
  }

  return require $modfile;
}

########################################################################
sub bind_module {
########################################################################
  my %options = @_;

  require_module( $options{module} );

  my $obj;

  ## no critic (ProhibitTies)

  if ( $options{type} eq 'hash' or $options{type} eq 'object' ) {
    $obj = bless {}, $options{module};

    tie %{$obj}, $options{module}, $options{context}, $options{config};
  }
  elsif ( $options{type} eq 'array' ) {
    $obj = bless [], $options{module};
    tie @{$obj}, $options{module}, $options{context}, $options{config};
  }
  elsif ( $options{type} eq 'handle' ) {
    $obj = bless gensym, $options{module};
    tie *{$obj}, $options{module}, $options{context}, $options{config};
  }

  my $func = tied %{$obj};

  if ( $func->can('init_plugin') ) {
    $func->init_plugin( $options{context}, $options{config} );
  }

  return $obj;
}

# load_startup_modules($tx, CONFIG => $config, CONTEXT => $ctx, EXCLUDE_MODULES => [])
# loads startup BLMs, excluding those in EXCLUDE_MODULES list
########################################################################
sub load_startup_modules {
########################################################################
  my ( $tx, %options ) = @_;

  my $config = $options{CONFIG};
  my $ctx    = $options{CONTEXT};

  my @exclude_modules = @{ $options{EXCLUDE_MODULES} || [] };

  # load generic startup BLMs
  my $modules = $config->{'MODULES'};

  return
    if !ref $modules || reftype($modules) ne 'ARRAY';

  # add plugin PATHs
  if ( $config->{PLUGIN_PATH} ) {
    my @plugin_inc = split /:/xsm, $config->{PLUGIN_PATH};

    foreach my $path (@plugin_inc) {
      next if any { $_ eq $path } @INC;

      push @INC, $path;
    }
  }

  foreach my $modconf ( @{$modules} ) {
    my $module = $modconf->{module};
    next if any { $_ eq $module } @exclude_modules;

    # no binding?
    next if !defined $modconf->{'binding'};

    my $pre_bound_binding;

    # only for HEADER/SESSION objects
    if ( exists $modconf->{header} && $modconf->{header} =~ /^y/xsmi ) {
      $pre_bound_binding = 'HEADER';
    }
    elsif ( exists $modconf->{session} && $modconf->{session} =~ /y/xsmi ) {
      $pre_bound_binding = 'SESSION';
    }

    if ($pre_bound_binding) {

      # Bind the module
      my $obj = bind_module(
        module  => $module,
        type    => $modconf->{'type'} || 'hash',
        context => $ctx,
        config  => $modconf->{'config'}
      );

      # add the object to Bedrock' top frame (symbol table)
      $tx->param( $modconf->{'binding'} => $obj );

      # tagX wants to know who the header and session object are
      $tx->options( $pre_bound_binding => $obj );

      # ...so does the context object which can be used by Bedrock::CGI
      $ctx->{$pre_bound_binding} = $obj;
    }
    else {
      # bind a subroutine to the binding name so the constructor gets
      # invoked ONLY if the variable is accessed from the script.
      $tx->param(
        $modconf->{'binding'},
        sub {
          my $obj;

          my $modfile = $modconf->{'module'};

          $modfile =~ s/::/\//gxsm;

          if ( $modfile !~ /[.]pm$/xsm ) {
            $modfile =~ s/\z$/.pm/xsm;
          }

          require $modfile;

          my $type = $modconf->{'type'} || 'hash';

          ## no critic (ProhibitTies)
          if ( $type eq 'hash' or $type eq 'object' ) {
            $obj = bless {}, $modconf->{'module'};
            tie %{$obj}, $modconf->{'module'}, $ctx, $modconf->{'config'};
          }
          elsif ( $type eq 'array' ) {
            $obj = bless [], $modconf->{'module'};
            tie @{$obj}, $modconf->{'module'}, $ctx, $modconf->{'config'};
          }
          elsif ( $type eq 'handle' ) {
            $obj = bless gensym, $modconf->{'module'};
            tie *{$obj}, $modconf->{'module'}, $ctx, $modconf->{'config'};
          }

          $obj;
        }
      );
    }
  }

  return;
}

1;

__END__

=pod

=head1 NAME

Bedrock::Test - unit test framework for Bedrock

=head1 SYNOPSIS

 use Bedrock::Test qw/run config load/;

=head1 DESCRIPTION

C<Bedrock::Test> implements a testing framework built using Bedrock
templating and C<Test::More>.  C<Bedrock::Test> can be use to create
unit tests for just about anything, it is not just a framework for
testing Bedrock applications.  Think of C<Bedrock::Test> as a
templating language's attempt to create a testing language, driven by
configuration files.

Create a file in YAML format.  Define at least a key named C<test> and
one named C<result>.

 $ cat > foo-test-yml
 ---
 test: <null:foo 1><var $foo>
 result: 1

Create a test harness...

 $ cat > foo-test.t
 use strict;
 use warnings;
 
 use lib '/usr/lib/bedrock/perl5';

 use Bedrock::Test qw/run/;
 
 run 'foo-test.yaml';
 ^D

Run the test...

 $ prove foo-test.t

=head1 METHODS AND SUBROUTINES

C<Bedrock::Test> can export three subroutines described below.  In
most cases, you may only need to import the C<run> subroutine.

=head2 run

 run( tests, [options] )

Executes a set of tests within the C<Test::More> framework, comparing
the expected result with the output from the Bedrock snippet.

=over 5

=item tests

C<tests> can be the name of a test file or a reference to an array of
hashes that represent a test.  See explanation below.

=item options

=over 10

=item name

Name that will be used as part of the log file for this snippet.
You'll typically want to pass the name portion of the YAML file that
contains the snippet, although this name is up to you.  If you do not
pass a name, the a name will be fabricated by using the template:
C<bedrock-test_{PID}>.

=item config

Your own configuration file (typically your incarnation of
F<tagx.xml>).  Defaults to the Bedrock configuration file.  You can
load your own configuration file and any additional Bedrock XML files
that represent valid configuration objects by specifying the
C<BEDROCK_CONFIG_PATH> in the environment prior to running your tests.

 $ BEDROCK_CONFIG_PATH=/var/www/vhosts/config prove foo-test.pl

=item logdir

Specifies the directory for the test log.  Defaults to F</tmp>.  The
test log file will be file named using the template:

 {logdir}/bedrock-test_{name}.log

=item plan

Total number of tests in your plan.  Defaults to the number of tests
in the array or file.

=back

=back

A test is represented by a hash that contains at least a C<test> and C<result> key.  Example:

 {
   test => '<null:foo 1><var $foo>',
   result => 1
 }

=over 5

=item name

The name of the test. This will be reported on the TAP output.

=item tempfile

A hash of parameters for creating a temporary directory and possibly a
subdirectory and file.

=over 10

=item cleanup

Boolean that determines if the temporary file should be removed after
the test completes.

=item dir

Name of a subdirectory to create. If you include this value, the file
will be moved to this directory.

=item name

Name of a file to create in the temporary or subdirectory.

=item content

Contents of the file.

=back

Example:

 tempfile:
   name: foo.peb
   dir: t
   cleanup: 1
   content: |
     <var $ARGV.join(",")>

The file F<foo.peb> will be created and moved to the F<t> directory
relative to the current working directory.

=item test

The Bedrock snippet to execute.

=item result

The output that should be expected by executing the Bedrock snippet.
For the C<like> or C<unlike> operations, you can use a regular
expression as the result to compare.  Example:

 /hello world/i
 /^\s*hello world\s*$/si

=item chomp

Flag indicating that the result should have new lines removed.
C<chomp> value of 1 indicates chomping at end only. C<chomp> value of
2 will remove new lines from both ends of result.

=item trim

Boolean that indicates if whitespace should be removed from front and end of result.

=item op

The C<Test::More> operation to use for comparing the ouput of the
snippet to the result.  Valid values are:

=over 10

=item is

=item isa_ok

=item isnt

=item like

=item unlike

=back

=item error

If the C<error> key is set instead of the C<result> key, the test will
use the exception thrown by Bedrock as the result to compare against
the C<error> key.

Note that all errors are matched as regular expressions unless you
specifically set the C<op> value.

Example:

  error: Unable

  error: /^Unable/

=item comment

A comment regarding the test.  Not currently used, but may be helpful
in documenting your tests.

=back

Tests are typically stored in a YAML file as an array of tests.  Here's an example:

 ---
 name: <plugin>
 comment: test to see if the plugin tag instantiates a Bedrock object of the proper class
 test: |-
   <plugin:MIME::Lite><if $MIMELite --ref "MIME::Lite">1<else>0</if>
 result: 1
 ---
 name: '<plugin --define-var="name">'
 comment: test to see if the plugin can be named
 test: |-
   <plugin:MIME::Lite --define-var="mime_lite">
   <if $mime_lite --ref "MIME::Lite">1<else>0</if>
 result: 1

=item env

If you want to inject or override an enviroment variable you can
create a hash of key/value pairs that will replace or add to the
existing environment. For example, some tests in your file might
require environment variables that you've passed on the command line:

 DBI_HOST=localhost prove -v t/00-some-test.t

...but in the same test file you later need to use a different value
for the environment variable. Add an C<env> section to the test and
add the new values. These will be injected into the environment for
just that test.

 env:
   DBI_HOST: my-server
   DBI_PASS: flintstone
   DBI_USER: fred

=head2 config

 config( path )

Returns Bedrock's configuration object.  Pass the path to the
configuration directory which contains your F<tagx.xml>, and possibly
other Bedrock XML configuration files.  If the directory contains a
F<config.d>, F<startup>, or F<plugin> directory then these will be
recursed into as well to create the final merged Bedrock configuration
object.

The default configuration path is F<@libdir@/bedrock/config>.

Note that your snippets I<can in fact> use your Application Plugins
(BLMs)! As long as they are properly configured and you
provide the path to your configuration files, the test harness will
create I<a Bedrock environment suitable for executing your BLMs>. 

=head2 load

 load( file, [options] )

Loads the tests from either a YAML or JSON formatted file. See
L</run_tests> documentation for a description of the what a test
object should like.

=over 5

=item file

Fully qualifed path to the YAML or JSON file to load.  If the file's
extension is C<.yml> or C<.yaml> it will be considered to be a YAML
file.

=item options

Options to pass to the C<load> subroutine.

=over 10

=item yaml

Boolean that indicates the file is in YAML format.

=back

=back

=head2 bedrock

 bedrock(snippet, options)

I<This method is run internally by C<run_tests> and you should
normally not need to execute this directly.>

Executes a Bedrock snippet. C<options> is hash of options described
below.

=over 5

=item param

Hash of parameters to pass to Bedrock for use when it executes your
snippet.

=item name

Name that will be used as part of the log file for this snippet.  You
typically want to pass the name portion of the YAML file that contains
the snippet, although this name is up to you.  If you do not pass a
name, the a name will be fabricated as using the template:
C<bedrock-test_{PID}>.

=item config

Your own configuration file (typically your incarnation of
F<tagx.xml>).  Defaults to the Bedrock configuration file.  You can
load your own configuration file and any additional Bedrock XML files
that represent configuration files by specifying the
C<BEDROCK_CONFIG_PATH> in the environment prior to running your tests.

 $ BEDROCK_CONFIG_PATH=/var/www/vhosts/config prove foo-test.pl

=item logdir

Speficies the directory for the tests logs.  Defaults to F</tmp>.

=back

Returns a hash containing:

=over 5

=item input

The Bedrock snippet to execute.

=item output

The output after the Bedrock snippet has been parsed.

=item error

Bedrock's error object.

=back

=head1 TESTING TRICKS

The test framework give you access to Bedrock's configuration object
as well as the shell enviroment via the C<$config> and C<$env>
objects.  Accordingly, you can use these to modify test behaviors
when they are executed.

 $ DBI_DSN=dbi:Oracle:NAME_TEST prove foo-test.t

=head1 SEE OTHER

C<Text::TagX>, C<Test::More>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
