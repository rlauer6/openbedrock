#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Iterator;

use JSON;
use XML::Simple;

sub new
{
    my $proto = shift;
    my $class = ref($proto) || $proto;
    my $array = shift;
    my $self = bless {'array' => $array, 'cur' => 0}, $class;
    $self;
}

sub xml {
  my $self = shift;
  my %options = @_;
  
  return XMLout($self->{'array'}, %options);
}

sub pos
{
    my $self = shift;
    $self->{'cur'} = @{$self->{'array'}} if $self->{'cur'} > @{$self->{'array'}};
    $self->{'cur'};
}

sub begin
{
    $_[0]->{'cur'} = 0;
}

sub end
{
    my $self = shift;
    $self->{'cur'} = @{$self->{'array'}};
}

sub curr
{
    my $self = shift;
    $self->{'array'}->[$self->{'cur'}];
}

sub next
{
    my $self = shift;
    $self->{'array'}->[$self->{'cur'}++];
}

sub prev
{
    my $self = shift;
    $self->{'array'}->[--$self->{'cur'}];
}

sub valid
{
    my $self = shift;
    my $cur = $self->{'cur'};
    return $cur >= 0 && $cur < @{$self->{'array'}} ? 1 : 0;
}

1;


package Bedrock::Array;

use strict;
use Tie::Array;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.08;
    @ISA	= qw (Tie::StdArray);
}

sub TIEARRAY
{
    my $class = shift;
    my $self = bless [], $class;
    push @{$self}, @_ if @_ > 0;
    $self;
}

sub new
{
    my $proto = shift;
    my $class = ref ($proto) || $proto;
    my $self = bless [], $class;
    tie @{$self}, $class, @_;
    $self;
}

sub sort {
  my $self = shift;
  my ($sort_dir, $sort_type) = @_;

  $sort_dir = $sort_dir || 'asc';
  $sort_type = $sort_type || 'alpha';

  my @unsorted;
  
  if (($sort_dir eq 'asc') && ($sort_type =~/^alpha/)) {
    @unsorted = sort { $a cmp $b } @{$self};
  }
  elsif (($sort_dir eq 'desc') && ($sort_type =~/^alpha/)) {
    @unsorted = sort { $b cmp $a} @{$self};
  }
  elsif  (($sort_dir eq 'asc') && ($sort_type =~/^num/)) {  
    @unsorted = sort { $a <=> $b} @{$self};
  }
  elsif (($sort_dir eq 'desc') && ($sort_type =~/^num/)){
    @unsorted = sort { $b <=> $a} @{$self};
  }

  return Bedrock::Array->new(@unsorted);
}

sub map {
  my $self = shift;
  my $fmt_str = shift;

  my @parms = @_;

  @parms = qw(value index) unless @parms;
  my @out;

  my $index = 1;
  foreach (@$self) {
    push @out, sprintf($fmt_str, @{{value => $_, index => $index++}}{@parms});
  }

  return wantarray ? Bedrock::Array->new(@out) : join('', @out);
}

sub set
{
    my $self = shift;
    my ($index, $value) = @_;
    my $old = $self->[$index];
    $self->[$index] = $value;
    $old;
}

sub get { $_[0]->[$_[1]+0]; }

sub length {scalar(@{$_[0]})}

sub pop {
    my $a = shift;
    if ( @_ > 0 ) {
	my $count = shift; $count--;
	my @a;
	for (0..$count) {
	  unshift @a, CORE::pop @{$a};
	}
	return Bedrock::Array->new( @a );
    } else {
        return CORE::pop @{$a};
    }
}

sub unshift {
  my $self = CORE::shift; 

  unshift @{$self}, @_;
}

sub splice
{
    my $self = shift;
    my $offset = shift || 0;

    # Passing args to splice as splice @{$self}, @_ wouldn't work
    # Need to shift the offset and length out of the args and then invoke
    # splice() with explicit args as show below

    if ( @_ == 0 ) {
	return Bedrock::Array->new( splice @{$self}, $offset );
    } elsif ( @_ == 1 ) {
	my $length = shift;
	return Bedrock::Array->new( splice @{$self}, $offset, $length );
    } else {
	my $length = shift;
	return Bedrock::Array->new( splice @{$self}, $offset, $length, @_ );
    }
}

sub join	{join($_[1] || '', @{$_[0]})}

sub isEmpty	{@{$_[0]} > 0 ? 0 : 1}

sub iterator	{Bedrock::Iterator->new($_[0])}

sub grep {
  my $self = shift;
  my $pattern = shift;
  my $re = $pattern =~/^qr/ ? eval $pattern : $pattern;

  die "Invalid pattern - $@ " 
    if $@;

  my @found = grep /$re/, @$self;
  return @found ? Bedrock::Array->new(@found) : undef;
}

sub devolve {
  my $this = shift;

  if (ref($this) =~/^(HASH|ARRAY)$/) {
    return $this;
  }
  elsif (ref($this) =~/Bedrock::Hash/) {
    my $that = {};
    foreach (keys %$this) {
      $that->{$_} = devolve($this->{$_});
    }
    return $that;
  }
  elsif (ref($this) =~/Bedrock::Array/) {
    my $that = [];
    foreach (@$this) {
      push @$that, devolve($_);
    }
    return $that;
  }
  else {
    return $this;
  }
}

sub json {
  my $self = shift;

  return Bedrock::JSON::encode($self->devolve);
}

sub push     {my $a = shift; CORE::push @{$a}, @_}

sub shift
{
    my $a = shift;
    if ( @_ > 0 ) {
	my $count = CORE::shift; $count--;
	my @a;
	for (0..$count) {
	    CORE::push @a, CORE::shift @{$a};
	}
	return Bedrock::Array->new( @a );
    } else {
	return CORE::shift @{$a};
    }

}

1;

package Bedrock::Array::Reference;

our @ISA = qw(Bedrock::Array);

sub TIEARRAY
{
    return shift;
}

sub new
{
    my $proto = shift;
    my $class = ref ($proto) || $proto;
    my $ref = shift;

    die "Not an ARRAY reference - ". ref($ref)
      unless UNIVERSAL::isa($ref, 'ARRAY');

    my $self = bless $ref, $class;
    tie @{$self}, $class;

    $self;
}

1;


=head1 NAME

C<Bedrock::Array> - Implements an array object.

=head1 DESCRIPTION

Implements a Bedrock array object with many interesting methods.

=head1 SYNOPSIS

 <null --define-array="array" a b c d e f >

=head1 METHODS

=head2 get

=head2 grep

=head2 join

=head2 json

=head2 isEmpty

=head2 length

=head2 pop

=head2 push

=head2 set

=head2 sort

=head2 splice

=head2 unshift

=head2 map


=head2 xml

=head1 CHANGELOG

$Log$
Revision 1.11  2010/11/30 22:14:04  rlauer
- get(n) did not work because we were using $_[1] as an index (undefined)

Revision 1.10  2010/11/29 15:57:52  rlauer
- change openbedrock.org to openbedrock.net

Revision 1.9  2010/09/15 16:38:41  rlauer
bump version

Revision 1.8  2010/09/15 16:18:25  rlauer
- added Bedrock::Array::Reference to create Bedrock::Array objects from
  references.  Can potentially speedup some operations if utilized more
  widespread throughtout Bedrock and applications themselves.

Revision 1.7  2010/01/09 14:45:26  rlauer
rearranged order of subroutines to avoid some warnings

Revision 1.6  2010/01/04 02:26:23  rlauer
add method xml()

Revision 1.5  2009/12/31 18:32:50  rlauer
sorting with direction and type, use the Bedrock::JSON package

Revision 1.4  2009/12/31 00:03:31  rlauer
allow grep to use regexps or arbitrary strings

Revision 1.3  2009/12/30 12:42:48  rlauer
add grep(), map()

Revision 1.2  2009/12/28 20:31:33  rlauer
move SIS:: up to Bedrock::

Revision 1.1  2009/12/28 19:30:15  rlauer
removing SIS:stuff, moving to Bedrock::stuff

Revision 1.10  2009/12/08 21:21:19  rlauer
adding some pod


=head1 AUTHOR

J. Sridhar

=head1 CREDITS

=cut


#
# Name of Release: $Name$
# $Log$
# Revision 1.11  2010/11/30 22:14:04  rlauer
# - get(n) did not work because we were using $_[1] as an index (undefined)
#
# Revision 1.10  2010/11/29 15:57:52  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.9  2010/09/15 16:38:41  rlauer
# bump version
#
# Revision 1.8  2010/09/15 16:18:25  rlauer
# - added Bedrock::Array::Reference to create Bedrock::Array objects from
#   references.  Can potentially speedup some operations if utilized more
#   widespread throughtout Bedrock and applications themselves.
#
# Revision 1.7  2010/01/09 14:45:26  rlauer
# rearranged order of subroutines to avoid some warnings
#
# Revision 1.6  2010/01/04 02:26:23  rlauer
# add method xml()
#
# Revision 1.5  2009/12/31 18:32:50  rlauer
# sorting with direction and type, use the Bedrock::JSON package
#
# Revision 1.4  2009/12/31 00:03:31  rlauer
# allow grep to use regexps or arbitrary strings
#
# Revision 1.3  2009/12/30 12:42:48  rlauer
# add grep(), map()
#
# Revision 1.2  2009/12/28 20:31:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.1  2009/12/28 19:30:15  rlauer
# removing SIS:stuff, moving to Bedrock::stuff
#
# Revision 1.10  2009/12/08 21:21:19  rlauer
# adding some pod
#
# Revision 1.9  2009/12/06 23:56:45  rlauer
# JSON support
#
# Revision 1.8  2008/12/23 13:36:12  rlauer
# - added sort method
#
# Revision 1.7  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.6  2008/02/28 18:14:40  rlauer
# Applying Rob's patches to make Bedrock work on Apache 2.x
# (plus a few other obvious bug fixes).
#
# Revision 1.5  2001/02/14 15:35:47  sridhar
# Added copyright and GPL notice
#
# Revision 1.4  2001/02/14 14:04:56  sridhar
# 1. Methods pop() and shift() take an optional argument which is the number of items
# to pop/shift from array. The elements removed are returned as an Array
# 2. Method splice() returns an array of elements removed.
#
# Revision 1.3  2001/01/16 17:49:28  sridhar
# 1. Array has an `iterator()' method which returns an iterator which
# can be used for stepping forward and back in the array.
# 2. Fixed method `splice()' -- perl's splice function requires offset
# and length to be passed explicitly and not as an array.
#
# Revision 1.2  2000/11/29 20:51:07  sridhar
# Added isEmpty() method.
#
# Revision 1.1  2000/09/18 14:20:26  sridhar
# Moved some generally useful modules under Perl/SIS to Perl/Bedrock/SIS.
#
# Revision 1.3  2000/09/11 17:44:00  sridhar
# Added methods which were formerly under BLM::Array -- specifically,
# push(), pop(), shift(), unshift(), splice() and join().
#
# Revision 1.2  2000/08/11 13:37:12  sridhar
# Added a couple of methods: set() for setting a particular array item,
# get() for fetching a particular array item, and length() for getting
# the length of the array.
#
# Revision 1.1  2000/06/06 19:37:32  sridhar
# Tied module for array manipulation
#
#
