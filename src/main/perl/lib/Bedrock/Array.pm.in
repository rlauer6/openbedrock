#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

########################################################################
package Bedrock::Iterator;
########################################################################

use strict;
use warnings;

use Bedrock::Constants qw{:booleans};
use Data::Dumper;

########################################################################
sub new {
########################################################################
  my ( $class, $array ) = @_;

  $class = ref $class || $class;

  my $self = {
    'array' => $array,
    'cur'   => 0,
  };

  return bless $self, $class;
}

########################################################################
sub pos {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  if ( $self->{'cur'} > @{ $self->{'array'} } ) {
    $self->{'cur'} = @{ $self->{'array'} };
  }

  return $self->{'cur'};
}

########################################################################
sub begin {
########################################################################
  my ($self) = @_;

  return $self->{'cur'} = 0;
}

########################################################################
sub end {
########################################################################
  my ($self) = @_;

  return $self->{'cur'} = @{ $self->{'array'} };
}

########################################################################
sub curr {
########################################################################
  my ($self) = @_;

  return $self->{'array'}->[ $self->{'cur'} ];
}

########################################################################
sub next {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  return $self->{'array'}->[ $self->{'cur'}++ ];
}

########################################################################
sub prev {
########################################################################
  my ($self) = @_;

  return $self->{'array'}->[ --$self->{'cur'} ];
}

########################################################################
sub valid {
########################################################################
  my ($self) = @_;

  my $cur = $self->{'cur'};

  return $cur >= 0 && $cur < @{ $self->{'array'} } ? $TRUE : $FALSE;
}

########################################################################
package Bedrock::Array;
########################################################################

use strict;
use warnings;

use Bedrock::BedrockJSON;
use Bedrock::Constants qw{ :chars :booleans};

use Data::Dumper;

use English qw{-no_match_vars};

use Scalar::Util qw/reftype/;
use Tie::Array;
use XML::Simple;
use List::Util qw/any none/;

use Bedrock qw{:utils};

use Role::Tiny::With;
with 'Bedrock::Dumper';

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolationOfMetachars)

BEGIN {
  use Exporter ();
  use vars qw (@ISA);
  @ISA = qw (Tie::StdArray);        ## no critic (ProhibitExplicitISA)
}

########################################################################
sub TIEARRAY {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless [@args], $class;

  return $self;
}

########################################################################
sub bedrock_xml {
########################################################################
  my ( $self, $name ) = @_;

  require Bedrock::XML;
  if ($name) {
    return Bedrock::XML::writeXML( { $name => $self } );
  }
  else {
    return Bedrock::XML::writeXML($self);
  }
}

########################################################################
sub devolve {
########################################################################
  my ($this) = @_;

  if ( ref($this) =~ /^HASH|ARRAY$/xsm ) {
    return $this;
  }
  elsif ( ref($this) =~ /Bedrock::Hash/xsm ) {
    my %that = map { $_ => devolve( $this->{$_} ) } keys %{$this};
    return \%that;
  }
  elsif ( ref($this) =~ /Bedrock::Array/xsm ) {
    return [ map { devolve($_) } @{$this} ];
  }
  else {
    return $this;
  }
}

########################################################################
sub get {
########################################################################
  my ( $self, $index ) = @_;

  die "index must be integer\n"
    if $index =~ /\D/xsm;

  return $self->[ $index + 0 ];
}

########################################################################
sub grep {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $pattern ) = @_;

  ## no critic (ProhibitStringyEval, ProhibitInterpolationOfLiterals)
  my $re = $pattern =~ /^qr/xsm ? eval $pattern : eval "qr/\$pattern/";

  die "Invalid pattern - $EVAL_ERROR "
    if $EVAL_ERROR;

  my @found = grep { $_ =~ $re } @{$self};

  return Bedrock::Array->new(@found);
}

########################################################################
sub isEmpty {  ## no critic (Capitalization)
########################################################################
  my ($self) = @_;

  return !@{$self};
}

########################################################################
sub iterator {
########################################################################
  my ($self) = @_;

  return Bedrock::Iterator->new($self);
}

########################################################################
sub join {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $str ) = @_;

  $str //= $EMPTY;

  return CORE::join $str, @{$self};
}

########################################################################
sub json {
########################################################################
  my $self = CORE::shift;

  return Bedrock::JSON::encode( $self->devolve );
}

########################################################################
sub length {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  return scalar @{$self};
}

########################################################################
sub list {
########################################################################
  my ( $self, $array ) = @_;

  $array //= $self;

  die "not an an array ref\n"
    if !is_array($array);

  return @{$array};
}

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  $class = ref $class || $class;

  my $self = bless [], $class;

  tie @{$self}, $class, @args;  ## no critic (ProhibitTies)

  return $self;
}

########################################################################
sub map {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $fmt_str, @parms ) = @_;

  if ( !@parms ) {
    @parms = qw(value index);
  }

  my @out;

  my $index = 1;

  foreach my $value ( @{$self} ) {
    no warnings;  ## no critic

    push @out,
      sprintf $fmt_str, @{ { value => $value, index => $index++ } }{@parms};
  }

  return wantarray ? Bedrock::Array->new(@out) : CORE::join( $EMPTY, @out );
}

########################################################################
sub matches {
########################################################################
  my ( $self, $str, $flags ) = @_;

  die "invalid flags: only i,m,g or s\n"
    if $flags && $flags !~ /^[imgs]+$/xsm;

  my $g = $flags && $flags =~ s/g//xsm;

  my $re;

  my $regexp = sprintf '%s = qr/%s/%s', q{$} . 're', $str, $flags // $EMPTY;

  eval $regexp;  ## no critic (ProhibitStringyEval);

  die "invalid regexp: $str\n$EVAL_ERROR\n"
    if $EVAL_ERROR || !$re;

  my @result;

  if ($g) {
    foreach my $str ( @{$self} ) {
      push @result, $str =~ /$re/g;  ## no critic
    }
  }
  else {
    @result = CORE::grep { $_ =~ $re } @{$self};
  }

  return Bedrock::Array->new(@result);
}

########################################################################
sub pop {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 0 ) {
    my $offset = @{$self};
    $offset -= $args[0];

    my @new_array = splice @{$self}, $offset, $args[0];

    return Bedrock::Array->new(@new_array);
  }
  else {
    return CORE::pop @{$self};
  }
}

########################################################################
sub push {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  return CORE::push @{$self}, @args;
}

########################################################################
sub set {  ## no critic (ProhibitAmbiguousNames)
########################################################################
  my ( $self, $index, $value ) = @_;

  die "index must be integer\n"
    if $index =~ /\D/xsm;

  my $old = $self->[$index];
  $self->[$index] = $value;

  return $old;
}

########################################################################
sub recordset {
########################################################################
  my ($self) = @_;

  return Bedrock::RecordSet->new($self);
}

########################################################################
sub reverse {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  return Bedrock::Array->new( CORE::reverse @{$self} );
}

########################################################################
sub shift {  ## no critic  (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 0 ) {
    my $count = CORE::shift @args;
    $count--;

    my @new_array;

    for ( 0 .. $count ) {
      CORE::push @new_array, CORE::shift @{$self};
    }

    return Bedrock::Array->new(@new_array);
  }
  else {
    return CORE::shift @{$self};
  }
}

########################################################################
sub sort {  ## no critic  (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  my ( $sort_dir, $sort_type ) = @args;

  $sort_dir = {
    $PLUS_SIGN  => 'asc',
    $MINUS_SIGN => 'desc',
    'asc'       => 'asc',
    'desc'      => 'desc',
  }->{ $sort_dir // $EMPTY };

  $sort_dir  //= 'asc';
  $sort_type //= 'alpha';

  my @sorted_list;

  ## no critic (ProhibitCascadingIfElse)
  if ( ( $sort_dir eq 'asc' ) && ( $sort_type =~ /^alpha/xsm ) ) {
    @sorted_list = sort { $a cmp $b } @{$self};
  }
  elsif ( ( $sort_dir eq 'desc' ) && ( $sort_type =~ /^alpha/xsm ) ) {
    @sorted_list = CORE::reverse sort { $a cmp $b } @{$self};
  }
  elsif ( ( $sort_dir eq 'asc' ) && ( $sort_type =~ /^num/xsm ) ) {
    @sorted_list = sort { $a <=> $b } @{$self};
  }
  elsif ( ( $sort_dir eq 'desc' ) && ( $sort_type =~ /^num/xsm ) ) {
    @sorted_list = CORE::reverse sort { $a <=> $b } @{$self};
  }

  return Bedrock::Array->new(@sorted_list);
}

########################################################################
sub splice {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $offset, @args ) = @_;

  $offset //= 0;

  my @new_array = @{$self};

  if ( @args == 0 ) {
    CORE::splice @new_array, $offset;
  }
  elsif ( @args == 1 ) {
    my $length = CORE::shift @args;

    CORE::splice @new_array, $offset, $length;

  }
  else {
    my $length = CORE::shift @args;
    CORE::splice @new_array, $offset, $length, @args;
  }

  return $self->new(@new_array);
}

########################################################################
sub unshift {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  return CORE::unshift @{$self}, is_array( $args[0] ) ? @{ $args[0] } : @args;
}

########################################################################
sub xml {
########################################################################
  my ( $self, %options ) = @_;

  return XMLout( $self, %options );
}

########################################################################
package Bedrock::Array::Reference;
########################################################################

use Scalar::Util qw{reftype};
use Bedrock qw{:utils};

use vars qw{@ISA};

@ISA = qw(Bedrock::Array);  ## no critic (ProhibitExplicitISA)

########################################################################
sub TIEARRAY {
########################################################################
  my ( $class, $array ) = @_;

  $array //= [];

  return bless $array, $class;
}

########################################################################
sub new {
########################################################################
  my ( $proto, $ref ) = @_;

  my $class = ref $proto || $proto;

  die 'Not an ARRAY reference - ' . ref $ref
    if !is_array($ref);

  my $self = [];

  return tie @{$self}, $class, $ref;  ## no critic (ProhibitTies)
}

########################################################################
package Bedrock::RecordSet;
########################################################################

use vars qw{@ISA};

@ISA = qw(Bedrock::Array::Reference);  ## no critic (ProhibitExplicitISA)

use Bedrock qw{:utils};
use Bedrock::Constants qw{:chars};

use Scalar::Util qw/reftype/;
use Data::Dumper;

use English qw{-no_match_vars};

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  $class = ref $class || $class;

  my $ref = force_array(@args);

  my $members;

  my $record_idx = 0;

  foreach ( @{$ref} ) {
    die "invalid element type: must be hash reference - not [$_]\n"
      if !is_hash($_);

    if ( defined $members ) {
      die sprintf "record %d is not a valid record of this set\n", $record_idx
        if !keys %{$_} || $members ne join $COMMA, sort keys %{$_};
    }
    else {
      die "elements of recordsets should have keys\n"
        if !keys %{$_};

      $members = join $COMMA, sort keys %{$_};
    }

    $record_idx++;
  }

  my $self = [];

  return tie @{$self}, $class, $ref;  ## no critic (ProhibitTies)
}

########################################################################
# sort(array, field, order, type)
########################################################################
sub sort {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $array, @args ) = @_;

  if ( @args == 1 ) {  # default
    push @args, 'asc', 'alpha';
  }

  die "invalid number of arguments\n"
    if @args % 3;

  ## no critic (RequireInterpolatinOfMetachars)
  my @sort_string;

  while (@args) {

    my $field = shift @args;
    my $order = shift @args;
    my $type  = shift @args;

    die "invalid order\n"
      if $order !~ /^asc|desc$/xsm;

    die "invalid type\n"
      if $type !~ /^num|alpha$/xsm;

    push @sort_string, sprintf q($%s->{%s} %s $%s->{%s}),  ## no critic (RequireInterpolationOfMetachars)
      ( $order =~ /^asc/ixsm ) ? 'a' : 'b',
      $field,
      ( $type  =~ /^num/ixsm ) ? '<=>' : 'cmp',
      ( $order =~ /^asc/ixsm ) ? 'b'   : 'a',
      $field;
  }

  my @sorted_array;

  my $sort_cmd
    = '@sorted_array = sort { '
    . ( CORE::join q{||}, @sort_string )
    . ' } @{$array};';

  eval "$sort_cmd";  ## no critic (ProhibitStringyEval)

  die "error sorting: $EVAL_ERROR\n"
    if $EVAL_ERROR;

  return Bedrock::RecordSet->new( \@sorted_array );
}

########################################################################
sub STORE {
########################################################################
  my ( $obj, $key, $value ) = @_;

  die "invalid element type: must be hash reference\n"
    if !is_hash($value);

  my $self = tied @{$obj};

  return $self->SUPER::STORE( $key, $value );
}

########################################################################
sub PUSH {
########################################################################
  my ( $obj, @args ) = @_;

  foreach (@args) {
    die "invalid element type: must be hash reference"
      if !is_hash($_);
  }

  my $self = tied @{$obj};

  return $self->SUPER::PUSH(@args);
}

########################################################################
sub push {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  if ( is_array( $args[0] ) ) {
    foreach ( @{ $args[0] } ) {
      $self->SUPER::push($_);
    }
  }
  elsif ( is_hash( $args[0] ) ) {
    $self->SUPER::push( Bedrock::Hash->new( %{ $args[0] } ) );
  }
  else {
    $self->SUPER::push( Bedrock::Hash->new(@args) );
  }

  return $self;
}

########################################################################
sub grep {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $key, $pattern ) = @_;

  my $re = $pattern =~ /^qr/ ? eval $pattern : eval "qr/\$pattern/";

  die "Invalid pattern - $EVAL_ERROR "
    if $EVAL_ERROR;

  return Bedrock::RecordSet->new( map { $_->{$key} =~ $re ? $_ : () }
      @{$self} );
}

########################################################################
package Bedrock::List;
########################################################################

use vars qw{@ISA};

@ISA = qw(Bedrock::Array);  ## no critic (ProhibitExplicitISA)

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

C<Bedrock::Array> - Implements an array object.

=head1 DESCRIPTION

Implements a Bedrock array object with many interesting methods.

=head1 SYNOPSIS

 my $array = new Bedrock::Array( qw/a b c d e f/ );

 <null --define-array="array" a b c d e f >

=head1 METHODS AND SUBROUTINES

=head2 get

=head2 grep

=head2 join

=head2 json

=head2 isEmpty

=head2 length

=head2 list

=head2 pop

=head2 push

=head2 set

=head2 sort

=head2 splice

=head2 unshift

=head2 map

=head2 bedrock_xml

=head2 xml

=head1 AUTHOR

J. Sridhar

=head1 SEE OTHER

E<lt>arrayE<gt>

=cut
