package Bedrock::RegExp;

use strict;
use warnings;

use version;
use English qw(-no_match_vars);

use Bedrock qw(:booleans);
use Bedrock::Constants qw(:chars :booleans);
use Data::Dumper;

use Scalar::Util qw(blessed reftype);

use Log::Log4perl;
use Log::Log4perl::Level;

use parent qw(Exporter);

our @EXPORT = (qw(regexp_compile regexp_capture_group regexp_evaluate));

########################################################################
sub get_logger {
########################################################################
  my ($self) = @_;

  if ( blessed($self) && $self->can('get_logger') ) {
    return $self->get_logger;
  }

  if ( !Log::Log4perl->initialized() ) {
    Log::Log4perl->easy_init( $ENV{DEBUG} ? $DEBUG : $ERROR );
  }

  return Log::Log4perl->get_logger;
}

########################################################################
sub regexp_evaluate {
########################################################################
  my ( $str, $regexp, $all ) = @_;

  my $re = regexp_compile($regexp);

  my %capture_group;

  if ($all) {
    while ( $str =~ /$re/g ) {  ## no critic (RequireExtendedFormatting,RequireDotMatchAnything,RequireLineBoundaryMatching)
      my $cg = regexp_capture_group();

      for ( keys %{$cg} ) {
        if ( $capture_group{$_} ) {
          if ( !is_array( $capture_group{$_} ) ) {
            $capture_group{$_} = [ $capture_group{$_} ];
          }
          push @{ $capture_group{$_} }, $cg->{$_};
        }
        else {
          $capture_group{$_} = $cg->{$_};
        }
      }

    }
  }
  else {
    $str =~ $re;
    %capture_group = %{ regexp_capture_group() };
  }

  return wantarray ? %capture_group : \%capture_group;
}

########################################################################
# Usage      : regexp_capture_group
# Purpose    : returns a key/value pairs representing the matched
#            : capture groups for a regexp
# Parameters : blessed ref that can('get_logger') or none
# Returns    : hash of key/vaues
# Errors     : none
########################################################################
sub regexp_capture_group {
########################################################################
  my ($self) = @_;

  ## no critic (ProhibitPunctuationVars)

  my $logger = get_logger($self);

  # named captured group
  my %capture_group = %LAST_PAREN_MATCH;

  $logger->trace(
    sprintf "CAPTURE:\n%s\nLAST_MATCH_START:\n%s\nVERSION:\n%s",
    Dumper( \@{^CAPTURE} ),
    Dumper( \@LAST_MATCH_START ),
    $PERL_VERSION,
  );

  # create $_1, .. $_n
  # introduced after perl 5.25.7
  if ( version->parse($PERL_VERSION) >= version->parse('v5.27') ) {

    $logger->trace( 'result: ', Dumper( \@{^CAPTURE} ) );

    if ( @{^CAPTURE} ) {
      foreach ( 1 .. @{^CAPTURE} ) {
        $capture_group{ $UNDERSCORE . $_ } = ${^CAPTURE}[ $_ - 1 ];
      }
    }
  }
  else {
    if ($#+) {
      foreach ( 1 .. $#+ ) {
        ## no critic (ProhibitStringyEval, RequireInterpolationOfMetachars
        $capture_group{ $UNDERSCORE . $_ } = eval sprintf '$%d', $_;
      }
    }
  }

  $logger->trace( 'capture group: ', Dumper( \%capture_group ) );

  return \%capture_group;
}

########################################################################
# Usage      : regexp_compile(regexp|string)
# Purpose    : returns a regular expression the argument if the
#            : argument does not look like a regexp
# Parameters : a regular expression of the form qr/.../ or /.../
# Returns    : Regexp or original string if it doesn's smell like a regexp
# Errors     : throws an exception if evaluation of regexp fails
########################################################################
sub regexp_compile {
########################################################################
  my ($arg) = @_;

  return $arg
    if is_regexp($arg);

  my $regexp;

  if ( ( $arg =~ /\Aqr/xsm ) || $arg =~ /\A\/([^\/]+)\/[xsmi]?$/xsm ) {
    ## no critic (ProhibitStringyEval, RequireInterpolationOfMetachars))

    $regexp = eval { $1 ? eval q{qr/$1/} : eval $arg; };

    die "$arg doesn't look like a regular expression\n"
      if !$regexp;

    return $regexp;
  }

  return $arg;
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 NAME

Bedrock::RegExp - support for compiling regular expressions

=head1 SYNOPSIS

 use Bedrock::RegExp;

 my $re = regexp_compile($regexp_str);

 $str =~ $re;

 my $capture_group = regexp_capture_group();

=head1 DESCRIPTION

Provides support for compiling regular expressions and retrieving the
capture group of a matched regular expression. These methods are used
by tags like C<E<lt>ifE<gt>> and C<E<lt>catchE<gt>>.

This class exports two methods - C<regexp_compile()> and C<regexp_capture_group()>.

=head1 METHODS AND SUBROUTINES

=head2 regexp_compile

 regexp_compiled(regexp)

Returns a compiled regular expression from a string or regexp that is
passed.  If a regexp is passed it simply gets returned.

A regular expression is considered anything that begins with C<qr> or
if the string matches the regular expression C</\/([^\/]+)\//>. In
other words, a string between two C</> charaters.

Throws an exception if the regular expression cannot be compiled.

=head2 regexp_capture_group

 regexp_capture_group()

Returns a hash reference to a hash of key/value pairs that represent
the matched capture groups (if any). Named capture groups are returned
in addition to the matched groups C<$1>..C<$n> which are return as the
keys C<_1>..C<_n>.

=head2 regexp_evaluate

 regexp_evaluate(str, regexp, all)

Compiles and evaluates a regular expression.  In list context returns
a hash representing the capture groups. In scalar context, returns a
hash reference.  Set C<all> to a true value to return all matches. The
returned value of each hash key will either be a scalar or possibly an
array reference if you have set the C<all> flag and there are multiple
matches.

The keys for the capture groups will contain both named capture groups
and the keys C<_1> through C<_n> representing Perl's C<$1> through
C<$n> for matches

 my $capture_groups = regexp_evaluate("foobar bar buzbaz", qr/(.z)/, 1);

 print Dumper($capture_groups);
 $VAR1 = {
           '_1' => [
                     'uz',
                     'az'
                   ]
         };

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=cut
