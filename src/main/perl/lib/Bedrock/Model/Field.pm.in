package Bedrock::Model::Field;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use parent qw/Class::Accessor::Fast/;

use Scalar::Util qw/reftype/;
use Data::Dumper;

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw/field null extra default type key/);

sub as_string {
  my $self = shift;

  my @options;

  if ( $self->get_null() && lc($self->get_null()) eq 'yes') {
    push @options, 'NULL';
  }
  elsif ( $self->get_null() && lc($self->get_null()) eq 'no') {
    push @options, 'NOT NULL';
  }
  else {
    push @options, 'NULL';
  }
  
  push @options, $self->get_extra() if $self->get_extra();
  
  if ( defined $self->get_default() ) {
    if ( $self->get_type() =~/enum/i ) {
      # quote enum default 'contact', e.g.
      push @options, 'DEFAULT ' . "'" . $self->get_default() . "'";
    }
    else {
      push @options, 'DEFAULT ' . $self->get_default();
    }
  }
  
  if ( $self->get_key() ) {
    if ( lc($self->get_key()) eq 'pri' ) {
      push @options, 'primary key'
    }
    elsif ( lc($self->get_key()) eq 'uni' ) {
      push @options, 'unique key';
    }
    else {
      push @options, $self->get_key();
    }
  }
  
  lc sprintf("%s %s %s", $self->get_field(), $self->get_type(), join(" ", @options));
}

1;
