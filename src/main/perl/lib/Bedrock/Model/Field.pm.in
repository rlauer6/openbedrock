package Bedrock::Model::Field;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use parent qw/Class::Accessor::Fast/;

use Scalar::Util qw/reftype/;
use Data::Dumper;
use Carp;

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw/field null extra default type key ignore_unknown_keys/);

=pod

=head1 NAME

=head1 SYNOPSIS

=head1 DESCRIPTION

=head2 Pre-defined fields and field sets

Use the pre-defined fields to create consistent schema definitions
across tables and applications.

 our $MODEL = new Bedrock::Hash(
                                %Bedrock::Model::Field::Id,
                                %Bedrock::Model::Field::Email,
                                %Bedrock::Model::Field::Address,
                                %Bedrock::Model::Field::Phone
                              );

=over 5

=item * %Bedrock::Model::Field::Id

Auto_increment field named 'id'.

=item * %Bedrock::Model::Field::Email

varchar(64) field named 'email'.

=item * %Bedrock::Model::Field::State

varchar(2) field named 'state'.

=item * %Bedrock::Model::Field::Zip

varchar(10) field named 'zip'.  Setter will remove non-numeric digits.
Getter will format zip as xxxxx-xxxx if their are 9 numeric digits in
the zip code.

=item * %Bedrock::Model::Field::City

=item * %Bedrock::Model::Field::Address

=item * %Bedrock::Model::Field::Phone

=back

=head1 METHODS

=head2 as_string

=cut

sub new {
  my $class = shift;
  my $self = $class->SUPER::new(@_);

  foreach ('field', 'type') {
    croak "$_ is required\n"
      unless $self->get($_);
  }
  
  return $self;
}

  
sub as_string {
  my $self = shift;

  my @options;

  if ( $self->get_null() && lc($self->get_null()) eq 'yes') {
    push @options, 'NULL';
  }
  elsif ( $self->get_null() && lc($self->get_null()) eq 'no') {
    push @options, 'NOT NULL';
  }
  else {
    push @options, 'NULL';
  }
  
  push @options, $self->get_extra() if $self->get_extra();
  
  if ( defined $self->get_default() ) {
    if ( $self->get_type() =~/enum/i ) {
      # quote enum default 'contact', e.g.
      push @options, 'DEFAULT ' . "'" . $self->get_default() . "'";
    }
    else {
      if ( length($self->get_default()) ) {
	push @options, 'DEFAULT ' . $self->get_default();
      }
      else {
	push @options, 'DEFAULT ' . "''";
      }
    }
  }
  
  if ( $self->get_key() ) {
    if ( lc($self->get_key()) eq 'pri' ) {
      push @options, 'primary key'
    }
    elsif ( lc($self->get_key()) eq 'uni' ) {
      push @options, 'unique key';
    }
    else {
      # we do this because the table state will tell us of a multi
      # field index, but the model has no way (yet) to indicate that
      # the field is indexed thusly.  Hence for comparisons ignore key
      # differences for these indices.
      push @options, $self->get_key()
	unless $self->get_ignore_unknown_keys();
    }
  }
  
  lc sprintf("%s %s %s", $self->get_field(), $self->get_type(), join(" ", @options));
}

# ready made fields and field sets

our %City = (
	     city => new Bedrock::Model::Field({
						field => 'city',
						type => 'varchar(64)',
						null => 'yes'
					       })
	    );

our %State = (
	      state => new Bedrock::Model::Field({
						  field => 'state',
						  type => 'varchar(2)',
						  null => 'yes'
						 })
	     );
				   
our %Zip = (
	    zip => new Bedrock::Model::Field({
					      field => 'zip',
					      type => 'varchar(9)',
					      null => 'yes',
					      set => sub {
						my ($f,$v) = @_;
						
						$v =~s/[^0-9]//g;
						$v;
					      },
					      get => sub {
						my ($f,$v) = @_;
						my $z = $v;
						$z =~s/[^0-9]//g;
						if ( length($z) == 9 ) {
						  $v = sprintf("%s-%s", unpack 'a5a4', $z);
						}
						$v;
					      }
					 })
	   );

our %Id = (
	   id => new 
	   Bedrock::Model::Field({
				  field => 'id',
				  type => 'int(11)',
				  extra => 'auto_increment',
				  key => 'pri',
				  null => 'no'
				 })
	  );

our %Email = (
	      email => new
	      Bedrock::Model::Field({
				     field => 'email',
				     type => 'varchar(64)',
				     null => 'no'
				    })
	     );

our %Phone = (
	      phone => new
	      Bedrock::Model::Field({
				     field => 'phone',
				     type => 'varchar(10)',
				     null => 'yes',
				     set => sub {
				       my ($f,$v) = @_;
				       
				       $v && $v =~s/[^0-9]//g;
				       $v;
				     }
				    }
				   )
	     );

our %Address = (
		street_address_1 => new
		Bedrock::Model::Field({
				       field => 'street_address_1',
				       type => 'varchar(64)',
				       null => 'yes'
				      }),
		street_address_2 => new
		Bedrock::Model::Field({
				       field => 'street_address_2',
				       type => 'varchar(64)',
				       null => 'yes'
				      }),
		%City,
		%Zip
	       );

our %Timestampable = (
		      last_updated_by => new
		      Bedrock::Model::Field({
					     field => 'last_updated_by',
					     type => 'varchar(64)',
					     null => 'yes'
					    }),
		      last_updated => new
		      Bedrock::Model::Field({
					     field => 'last_updated',
					     type => 'timestamp',
					     default => 'current_timestamp',
					     extra => 'on update current_timestamp'
					    })
		     );

=pod

=head2 phone_field

  phone_field(name)

=head2 email_field

 email_field(name)

=head2 zip_field

 zip_field(name)

=head2 state_field

 state_field(name)

Class methods that provide an alternate way of declaring a
pre-defined field by giving it a name other than the default name

Example: Bedrock::Model::Field::phone_field('cell_phone');

=cut

sub phone_field {
  my %phone = %Phone;
  $phone{field} = shift;
  
  %phone;
}

sub email_field {
  my %email = %Email;
  $email{field} = shift;
  
  %email;
}

sub id_field {
  my %id = %Id;
  $id{field} = shift;
  
  %id;
}

1;
