package Bedrock::Model::Field;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2023, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Constants qw(:chars);
use Data::Dumper;
use Carp;
use Scalar::Util qw(reftype);

use parent qw(Exporter Class::Accessor::Fast);

our @EXPORT_OK = qw(
  auto_increment_field
  create_field_type
  date_field
  date_inserted_field
  datenow_field
  decimal_field
  enum_field
  email_field
  id_field
  int_field
  json_field
  last_updated_field
  money_field
  text_field
  time_field
  timenow_field
  varchar_field
  zip_field
);

our %EXPORT_TAGS = ( all => [@EXPORT_OK] );

our $RETURN_FIELDS;

sub _return_fields {
  my ( $class, $return_fields ) = @_;

  return $RETURN_FIELDS = $return_fields;
}

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw(field null extra default type key ignore_unknown_keys));

## no critic (ProhibitPackageVars)

# ready made fields and field sets

our %City = (
  city => Bedrock::Model::Field->new(
    { field => 'city',
      type  => 'varchar(64)',
      null  => 'yes'
    }
  )
);

our %State = (
  state => Bedrock::Model::Field->new(
    { field => 'state',
      type  => 'varchar(2)',
      null  => 'yes'
    }
  )
);

our %Zip = (
  zip => Bedrock::Model::Field->new(
    { field   => 'zip',
      type    => 'varchar(9)',
      null    => 'yes',
      default => $EMPTY,
      set     => sub {
        my ( $f, $v ) = @_;
        $v //= $EMPTY;
        $v =~ s/[^[:digit:]]//xsmg;

        return $v;
      },
      get => sub {
        my ( $f, $v ) = @_;

        return q{}
          if !$v;

        my $z = $v;

        $z =~ s/[^[:digit:]]//xsmg;

        if ( length $z == 9 ) {
          $v = sprintf '%s-%s', unpack 'a5a4', $z;
        }

        return $v;
      }
    }
  )
);

our %Id = (
  id => Bedrock::Model::Field->new(
    { field => 'id',
      type  => 'int(11)',
      extra => 'auto_increment',
      key   => 'pri',
      null  => 'no'
    }
  )
);

our %Email = (
  email => Bedrock::Model::Field->new(
    { field => 'email',
      type  => 'varchar(64)',
      null  => 'no'
    }
  )
);

our %Phone = (
  phone => Bedrock::Model::Field->new(
    { field => 'phone',
      type  => 'varchar(10)',
      null  => 'yes',
      set   => sub {
        my ( $f, $v ) = @_;

        $v && $v =~ s/[^[:digit:]]//xsmg;

        return $v;
      }
    }
  )
);

our %Address = (
  street_address_1 => Bedrock::Model::Field->new(
    { field => 'street_address_1',
      type  => 'varchar(64)',
      null  => 'yes'
    }
  ),
  street_address_2 => Bedrock::Model::Field->new(
    { field => 'street_address_2',
      type  => 'varchar(64)',
      null  => 'yes'
    }
  ),
  %City,
  %Zip,
);

our %Timestampable = (
  last_updated_by => Bedrock::Model::Field->new(
    { field => 'last_updated_by',
      type  => 'varchar(64)',
      null  => 'yes'
    }
  ),
  last_updated => Bedrock::Model::Field->new(
    { field   => 'last_updated',
      type    => 'timestamp',
      default => 'current_timestamp',
      extra   => 'on update current_timestamp'
    }
  )
);

# logical field types:
# money => decimal(10,2);
########################################################################
sub money_field {
########################################################################
  my ( $name, $length, $null ) = @_;

  return decimal_field( name => $name, type => 'money', length => $length, null => $null );
}

########################################################################
sub text_field {
########################################################################
  my ( $name, $null ) = @_;

  return create_field_type( name => $name, type => 'text', null => $null );
}

########################################################################
sub json_field {
########################################################################
  my ( $name, $null ) = @_;

  local $RETURN_FIELDS = 1;  ## no critic (ProhibitLocalVars)

  my $field = text_field( $name, $null );

  $field->{set} = sub {
    my ( $f, $v ) = @_;

    return $v
      if !ref $v;

    return JSON->new->encode($v);
  };

  $field->{get} = sub {
    my ( $f, $v ) = @_;

    return
      if !$f || !$v;

    return JSON->new->decode($v);
  };

  return $field;
}

########################################################################
sub enum_field {
########################################################################
  my ( $name, $values ) = @_;

  return create_field_type(
    name => $name,
    type => $values
  );
}

########################################################################
sub boolean {
########################################################################
  my ( $name, $null ) = @_;

  return create_field_type(
    name => $name,
    type => 'tinyint',
    null => $null
  );
}

########################################################################
sub decimal_field {
########################################################################
  my ( $name, $length, $null ) = @_;

  return create_field_type(
    name   => $name,
    type   => 'decimal',
    length => $length,
    null   => $null
  );
}

########################################################################
sub varchar_field {
########################################################################
  my ( $name, $length, $null ) = @_;

  return create_field_type(
    name   => $name,
    type   => 'varchar',
    length => $length,
    null   => $null
  );
}

########################################################################
sub int_field {
########################################################################
  my ( $name, $length, $null ) = @_;

  $length //= 11;

  return create_field_type(
    name   => $name,
    type   => 'int',
    length => $length,
    null   => $null
  );
}

########################################################################
sub bigint_field {
########################################################################
  my ( $name, $length, $null ) = @_;

  $length //= 11;

  return create_field_type(
    name   => $name,
    type   => 'bigint',
    length => $length,
    null   => $null
  );
}

########################################################################
sub date_field {
########################################################################
  my ( $name, $null ) = @_;

  return create_field_type(
    name => $name,
    type => 'date',
    null => $null
  );
}

########################################################################
sub datenow_field {
########################################################################
  my ( $name, $null ) = @_;

  return create_field_type(
    name    => $name,
    type    => 'date',
    null    => $null,
    default => 'current_timestamp'
  );
}

########################################################################
sub time_field {
########################################################################
  my ( $name, $null ) = @_;

  return create_field_type(
    name => $name,
    type => 'time',
    null => $null,
  );
}

########################################################################
sub timenow_field {
########################################################################
  my ( $name, $null ) = @_;

  return create_field_type(
    name    => $name,
    type    => 'timestamp',
    null    => $null,
    default => 'current_timestamp',
  );
}

########################################################################
sub last_updated_field {
########################################################################
  return create_field_type(
    name    => 'last_updated',
    type    => 'timestamp',
    null    => 'no',
    default => 'current_timestamp',
    extra   => 'on update current_timestamp',
  );
}

########################################################################
sub date_inserted_field {
########################################################################
  return create_field_type(
    name    => 'date_inserted',
    type    => 'timestamp',
    null    => 'no',
    default => 'current_timestamp',
  );
}

########################################################################
sub create_field_type {
########################################################################
  my (%args) = @_;

  my ( $name, $length, $extra, $type, $default, $null, $key )
    = @args{qw(name length extra type default null)};

  if ( $type eq 'money' ) {
    $type = 'decimal';
  }

  if ( $type eq 'decimal' && !$length ) {
    $length = '10.2';
  }

  if ( $type eq 'int' ) {
    $length //= 11;
  }

  if ($length) {
    if ( $type eq 'decimal' ) {
      $type = sprintf 'decimal(%d,%d)', split /[.]/xsm, $length;
    }
    else {
      $type = sprintf '%s(%d)', $type, $length;
    }
  }

  if ( ref $type ) {
    $type = sprintf q{enum(%s)}, join $COMMA, map { sprintf q{'%s'}, $_ } @{$type};
  }

  my $field = Bedrock::Model::Field->new(
    { field => $name,
      type  => $type,
      defined $key     ? ( key     => $key )     : (),
      defined $extra   ? ( extra   => $extra )   : (),
      defined $default ? ( default => $default ) : (),
      defined $null    ? ( null    => $null )    : (),
    }
  );

  return $RETURN_FIELDS ? $field : ( $name => $field );
}

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $self = $class->SUPER::new(@args);

  foreach (qw( field type)) {
    croak "$_ is required\n"
      if !$self->get($_);
  }

  return $self;
}

########################################################################
sub as_string {
########################################################################
  my ($self) = @_;

  my @options;

  if ( $self->get_null() && lc $self->get_null() eq 'yes' ) {
    push @options, 'NULL';
  }
  elsif ( $self->get_null() && lc $self->get_null() eq 'no' ) {
    push @options, 'NOT NULL';
  }
  else {
    push @options, 'NULL';
  }

  if ( $self->get_extra() ) {
    push @options, $self->get_extra();
  }

  if ( defined $self->get_default() ) {

    if ( $self->get_type() =~ /enum/ixsm ) {
      # quote enum default 'contact', e.g.
      push @options, 'DEFAULT ' . q{'} . $self->get_default() . q{'};
    }
    else {

      if ( length $self->get_default() ) {
        push @options, 'DEFAULT ' . $self->get_default();
      }
      else {
        push @options, 'DEFAULT ' . q{''};
      }
    }
  }

  if ( $self->get_key() ) {
    if ( lc $self->get_key() eq 'pri' ) {
      push @options, 'primary key';
    }
    elsif ( lc $self->get_key() eq 'uni' ) {
      push @options, 'unique key';
    }
    else {
      # we do this because the table state will tell us of a multi
      # field index, but the model has no way (yet) to indicate that
      # the field is indexed thusly.  Hence for comparisons ignore key
      # differences for these indices.

      if ( !$self->get_ignore_unknown_keys() ) {
        push @options, $self->get_key();
      }
    }
  }

  my $type = $self->get_type();

  if ( $self->get_type() =~ /^int/xsm ) {
    $type = 'int';
  }

  return lc sprintf '%s %s %s', $self->get_field(), $type, join q{ }, @options;
}

########################################################################
sub phone_field {
########################################################################
  my ($phone_field) = @_;

  my %phone = %Phone;

  $phone{field} = $phone_field;

  return %phone;
}

########################################################################
sub email_field {
########################################################################
  my ($email_field) = @_;

  my %email = %Email;
  $email{field} = $email_field;

  return %email;
}

########################################################################
sub auto_increment_field {
########################################################################
  my ($name) = @_;

  return id_field($name);
}

########################################################################
sub zip_field {
########################################################################
  my ($name) = @_;

  return _field( $name, 'zip' );
}

########################################################################
sub _field {
########################################################################
  my ( $name, $type ) = @_;

  my %model;
  my $field;

  {
    no strict 'refs';  ## no critic (ProhibitNoStrict ProhibitProlongedStrictureOverride)

    my $model_field = *{ 'Bedrock::Model::Field::' . ucfirst $type };

    $name //= lc $type;

    return ( $name => $model_field->{ lc $type } )
      if !$RETURN_FIELDS;

    $field = $model_field->{ lc $type };
  }

  $field->{field} = $name;

  return $field;
}

########################################################################
sub id_field {
########################################################################
  my ($id_field) = @_;

  $id_field //= 'id';

  return ( $id_field, $Id{id} )
    if !$RETURN_FIELDS;

  my $field = $Id{id};

  $field->{field} = $id_field;

  return $field;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

Bedrock::Model::Field - field specfication class for Bedrock's ORM

=head1 SYNOPSIS

 my $field = Bedrock::Model::Field->new(
   { field => $field_name,
     type  => $type
   }
 );

=head1 DESCRIPTION

Class used to define the table columns when you create a
L<Bedrock::Model> object. A model is a collection of
C<Bedrock::Model::Fields> that define a MySQL table.

To define a L<Bedrock::Model::Field> you set the following keys:

=over 5

=item field (required)

Name of the column

=item type (required)

Type of the column

=item extra

Optional expression 

Example:

 default => 'current_timestamp',
 extra   => 'on update current_timestamp'

=item default

Default value (literal) or expression.

Example:

 default => 'current_timestamp'

=item key

Currently should be set to 'pri' or 'uni'.

=item null

Whether column can contain null. Value should be 'yes' or 'no'.

=item set

Code reference or name of a function that will invoked when setting a
column's value.

=item get

Code reference or name of a function that will be invoked for
retrieving a column's value.

=back

=head1 PRE-DEFINED FIELDS

Use the pre-defined fields to create consistent schema definitions
across tables and applications.

 our $MODEL = Bedrock::Hash->(
   %Bedrock::Model::Field::Id,
   %Bedrock::Model::Field::Email,
   %Bedrock::Model::Field::Address,
   %Bedrock::Model::Field::Phone
  );

There are also convenience methods for create fields of various types.

See L</CONVENIENCE METHODS>

=over 5

=item * %Bedrock::Model::Field::Id

Auto_increment field named 'id'.

=item * %Bedrock::Model::Field::Email

varchar(64) field named 'email'.

=item * %Bedrock::Model::Field::State

varchar(2) field named 'state'.

=item * %Bedrock::Model::Field::Zip

varchar(10) field named 'zip'.  Setter will remove non-numeric digits.
Getter will format zip as xxxxx-xxxx if their are 9 numeric digits in
the zip code.

=item * %Bedrock::Model::Field::City

=item * %Bedrock::Model::Field::Address

=item * %Bedrock::Model::Field::Phone

=back

=head1 METHODS AND SUBROUTINES

=head2 as_string

Returns the field definition as a string;

=head1 CONVENIENCE METHODS

These convenience methods will create a field definition for the
desired type.  In many cases these are not just a convenient way to
create a standard MySQL column, but rather they add a setter or getter
that will help format a column before storing it or after retrieving
it.

Typical usage of these is to create a C<Bedrock::Model> object like this:

 my @fields = eval {
   local $Bedrock::Model::Field::RETURN_FIELDS = 1;
 
   return (
     id_field(),
     varchar_field( 'name',    32 ),
     varchar_field( 'address', 64 ),
     zip_field('zip'),
     enum_field( 'position', [ 'president', 'vice-president', 'cabinet', ] ),
     json_field('json'),
     date_inserted_field(),
     last_updated_field(),
   );
 };
 
 my $model = Bedrock::Model->create(
   $dbi,
   model => \@fields,
   table => 'users'
 );

...and subsequently create a subclass of C<Bedrock::Model::Hanlder>

 open my $fh, '>', 'US/President.pm';

 print {*STDOUT} Bedrock::Model::Maker->new( model => $model )->tidy->as_string;

...and then

 use US::President qw(easy_connect);
 
 my $dbi = easy_connect();
 
 my $foo = Foo::Bar->new($dbi);

 $foo->set(
   name     => 'Abraham Lincoln',
   address  => '1600 Pennsylvania Avenue, Washington DC',
   zip      => '20500',
   position => 'president',
 );
 
 $foo->save();

=head2 auto_increment_field

=head2 bigint_field

=head2 boolean_field

=head2 create_field_type

 create_field_type(options)

  my ( $name, $length, $extra, $type, $default, $null, $key )
    = @args{qw(name length extra type default null)};

Generic method to create a C<Bedrock::Model::Field>.

=over 5

=item name

Name of the column.

=item length

Length of the column if the type supports a length.

=item extra

Additional parameters on the ADD COLUMN statement.

Example:

 default => 'current_timestamp',
 extra   => 'on update current_timestamp'

=item type

The column type.

=item default

Default value for the column.

=item null

Whether null's are allowed. Valid values are 'yes' or 'no'.

=item key

Key type.  Valid values are 'pri' or 'uniq'.

=back

=head2 date_field

 date_field(name)

Creates a C<date> field.

=head2 date_inserted_field

 date_inserted_field(name)

Creates a C<date> field that is updated with the current time
when the record is created.

=head2 datenow_field

 datenow_field(name)

Creates a C<date> field that is update with the current date as the
default value.

=head2 decimal_field

 decimal_field(name, length)

Creates a C<decimal> field.

=head2 email_field

 email_field(name)

Creates an email type field.

=head2 enum_field

 enum_field(name, choices)

 Creates an enum field.

Choices is an array reference of values.

=head2 id_field

Creates a field that is used as the auto incremented primary key.

=head2 int_field

 int_field(name, length)

Creates an integer field.

=head2 json_field

 json_field(name)

Creates a field that will store an encode JSON string.  You set the
value of the field to a either a valid JSON string or a Perl
object. When the value is stored it will be encoded as a JSON string.
When decoded it will be deserialized into a Perl object.

=head2 last_updated_field

 last_updated_field(name)

Creates a C<timestamp> field that is updated with the last update date
whenever the row is updated.

=head2 money_field

 money_field(name)

Creates a field suitable for holding monetary amounts. This is
essentially a decimal field with two digits of precision.


=head2 phone_field

  phone_field(name)

Creates a phone number type field.

=head2 state_field

 state_field(name)

=head2 text_field

 text_field(name, length)

Creates a C<text> field of the given length.

=head2 time_field

 time_field(name)

Creates a timestamp field.

=head2 timenow_field

 timenow_field(name)

Create a timestamp field that is updated to the current time as the default value.

=head2 varchar_field

 varchar_field(name, length)

Creates a C<varchar> field of the given length.

=head2 zip_field

 zip_field(name)

Creates a zip code field.

=cut
