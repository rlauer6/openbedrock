package Bedrock::Model::Migration;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock            qw(:booleans force_hash);
use Bedrock::Constants qw(:booleans);
use English            qw(-no_match_vars);
use Data::Dumper;
use Scalar::Util qw(reftype blessed);

use parent qw(Class::Accessor::Fast);

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw(
    model
    dry_run
    migration
    debug
    ignore_unknown_keys
  )
);

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = force_hash(@args);

  my $self = $class->SUPER::new($options);

  $self->set_debug( $options->{debug} // $self->get_model->get_debug );

  $self->migrate();

  return $self;
}

########################################################################
sub migrate {
########################################################################
  my ($self) = @_;

  my $model = $self->get_model();  # model class

  die "usage: Bedrock::Model::Migration->new({ model => Bedrock::Model->new(...) })\n"
    if !blessed($model) || !$model->isa('Bedrock::Model');

  die "no model defined\n"
    if !$model->get_model() || reftype( $model->get_model ) ne 'HASH';

  # the actual model (code defined target state)
  my %target_model = %{ $model->get_model() };

  # database defined table (current state)
  my %table_state = %{ $model->fetch_model };

  my @modify_these;
  my @add_these;
  my @drop_these;

  # How can we tell if the table definition has changed?

  # There are problaby cleverer ways to accomplish this but they would
  # involve saving some stateful information about the table. Short of
  # that we have the serialization method. The technique below simply
  # tries to transform the database state into a representation that
  # is consistent with the representation in the class or to be more
  # accurate a transformation of the class model.
  #
  # given that x = g(x')...
  #
  # where x is the internal class representation potentially updated
  # by the developer and persisted in code...  and g(x) is the
  # internal representation of the table
  #
  # ...we serialize both...using serialization function f() and compare.
  #
  # y=f(x) <=> y'=f(g(x'))
  #
  # in other words we are hoping that applying the same function to
  # two different inputs, one from the class and one a transformation
  # from the database to what is hoped to be equal to the class
  # representation of the table results in the same serialized
  # representation which can be compared to detect table changes.  We
  # are again hoping that g(x') produces x consistently (and uniquely).

  # This breaks down if a) our function() is not actually a function
  # and can produce the same output given two different inputs (note
  # that the serialized output may be considered equivalent based on
  # something other than 'eq' - e.g. lc(f(x)) eq lc(f(g(x)).  b) if
  # the serialization function is incomplete which could either lead
  # to false positives or false negatives (failing to detect a
  # change).

  # Again, the most accurate way (but not foolproof) way is to create
  # a stateful system that records an indication that the schema has
  # been updated outside the context of the model system.  This should
  # probably be a separate table that holds metadata regarding the
  # state of the table.

  # 1. table name
  # 2. date changed
  # 3. unique token based on the table definition that is consistently
  #    reproducible
  # 4. number of fields

  # Our third requirement demands that we have control over the
  # uniqueness of the token, so we would most likely need to again
  # create a transformation function from the table definition as
  # represented by the database engine as a starting point. If that
  # transformation changes over time (version to version) then false
  # positives may again be introduced.  Therefore, it may be the fact
  # that a stateful approach and a dynamic approach, both suffer from
  # error terms that are not under the control of this model
  # system. This is especially true the farther away from the database
  # definition language the model allows the devloper.

  # One technique might be at least consistent within a version of the
  # database engine assuming again that we can rely on conistent
  # informtation from the database engine.

  # - create a temporary table foo using the class model
  # - compare the tables using the database engine's serialization or
  # internal representation of the table

  # This may give us an accurate indication of change, but what
  # changed? and how do we create our own function to transform the
  # database to the new state? So it seems we have no choice but to
  # engage in writing a serializer as imperfect as it will be...

  # There's no free lunch, but the good news is that we can:
  # - accurately detect new columns
  # - accurately detect dropped columns

  # ...the bad news is that a name change of a column is a bad thing
  # as it will be seen as an add and delete. Short of giving the
  # migration script/class a clue it would result in lost data.

  foreach my $field ( keys %table_state ) {
    if ( $self->get_debug ) {
      print {*STDERR} Dumper(
        [ field => $field,
          model => { %{ $target_model{$field} } },
          table => { %{ $table_state{$field} } },
        ]
      );
    }

    if ( exists $target_model{$field} ) {
      my $target_model_field = $target_model{$field};
      my $table_state_field  = $table_state{$field};

      # synonym boolean <=> tinyint(1)
      if ( $target_model_field->get_type() eq 'boolean' ) {
        $target_model_field->set_type('tinyint(1)');
      }

      $table_state_field->set_ignore_unknown_keys( $self->get_ignore_unknown_keys() );

      # let's assume ALL case/whitespace is meaningless ????
      my $ts_as_string = lc( $table_state_field->as_string );
      $ts_as_string =~ s/\s//gxsm;

      my $tmf_as_string = lc( $target_model_field->as_string );
      $tmf_as_string =~ s/\s//gxsm;

      if ( $ts_as_string ne $tmf_as_string ) {
        ## no critic (ProhibitPostfixControls)

        print {*STDERR} lc( $table_state_field->as_string ), "\t"
          if $self->get_debug;

        print {*STDERR} lc( $target_model_field->as_string ), "\n"
          if $self->get_debug;

        push @modify_these, $field;
      }

      delete $target_model{$field};
      delete $table_state{$field};
    }
  }

  if ( keys %table_state ) {
    push @drop_these, keys %table_state;
  }

  if ( keys %target_model ) {
    push @add_these, keys %target_model;
  }

  my %migration;

  my $table = $self->get_model->get_table;

  foreach (@modify_these) {
    $migration{$_} = sprintf 'alter table %s modify %s;', $table,
      $model->get_model->{$_}->as_string;
  }

  foreach (@add_these) {
    $migration{$_} = sprintf 'alter table %s add %s;', $table, $model->get_model->{$_}->as_string;
  }

  foreach (@drop_these) {
    $migration{$_} = sprintf 'alter table %s drop %s;', $table, $_;
  }

  $self->set_migration( \%migration );

  return \%migration;
}

########################################################################
sub should_migrate {
########################################################################
  my ($self) = @_;

  my $migration = $self->get_migration;

  return $FALSE
    if !is_hash($migration);

  return keys %{$migration} ? $TRUE : $FALSE;
}

########################################################################
sub execute {
########################################################################
  my ($self) = @_;

  my $dbi       = $self->get_model->get_dbi;
  my $migration = $self->get_migration;

  my @sql_statements;

  if ( $self->should_migrate() ) {
    @sql_statements = values %{$migration};
  }

  if ( !$self->get_dry_run ) {
    foreach my $stmnt (@sql_statements) {
      eval { $dbi->do($stmnt); };

      my $err = $EVAL_ERROR;

      if ($err) {
        $dbi->rollback unless $dbi->{AutoCommit};
        die "[$err] $EVAL_ERROR";
      }
    }

    if ( !$dbi->{AutoCommit} ) {
      $dbi->commit;
    }
  }

  return \@sql_statements;
}

########################################################################
sub rename_field {
########################################################################
  my ( $self, $old_field, $new_field ) = @_;

  my $current_model = $self->get_model->fetch_model;

  die "no column '$old_field' exists\n"
    if !$current_model->{$old_field};

  die "column with that name exists\n"
    if exists $current_model->{$new_field};

  my $migration = $self->get_migration || {};

  my $field = $self->get_model->get_model->{$old_field};

  if ( !$field ) {
    $field = $self->get_model->get_model->{$new_field};

    die "no field named '$old_field' or '$new_field' in model\n"
      if !$field;
  }
  else {
    $field->{field} = $new_field;
  }

  $migration->{$old_field} = sprintf 'alter table %s change %s %s', $self->get_model->get_table,
    $old_field,
    $field->as_string;

  delete $migration->{$new_field};

  $self->set_migration($migration);

  return $self;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

Bedrock::Model::Migration

=head1 SYNOPSIS

 package MyApp::Users;

 use Bedrock::Model::Migration;

 use parent qw(Bedrock::Model);
 
 my $migration = Bedrock::Model::Migration->new(model => $self);

 if ( $migration->should_migrate) {
   $migration->execute;
 }

=head1 DESCRIPTION

A class that provides methods for updating table schemas. Typically
you don't need to create this object since it is created for you when
you instantiate a L<Bedrock::Model> object.

=head2 new

  new(model => model, dry_run => 0/1) ;

Compares the currently defined model and the state of the table to
produce a set of SQL statements to apply in order to migrate a table.
Set C<dry_run> to 1 to disable execution of the statements.

Returns a Bedrock::Model::Migration object that can then be used to
apply the migration by calling the C<execute()> method.

=over 5

=item model

A L<Bedrock::Model> object.

=item dry_run

Boolean indicating whether C<execute()> should actually apply migration.

=back

=head2 should_migrate

 should_migrate()

Returns the number of statements needed for migrating table.

=head2 execute

 execute()

=head2 rename_field

 rename_field(old-field, new-field)

Renaming a field can be done as an atomic operation or after you have
altered the model definition and instantiated a migration object.

 my $migration = Bedrock::Model::Migration->new({ model => $model });
 $migration->rename_field(last_updated => 'last_updated_date');

=cut
