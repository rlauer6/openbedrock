package Bedrock::Model::Serializer::MySQL;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2023, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use parent qw(Class::Accessor::Fast);

__PACKAGE__->follow_best_practice();
__PACKAGE__->mk_accessors(qw(dbi table));

use Bedrock::Model::Field;
use Carp;
use Data::Dumper;
use Scalar::Util qw(reftype);

########################################################################
sub describe_table {
########################################################################
  my ( $self, $dbi, $table ) = @_;

  $dbi   //= $self->get_dbi;
  $table //= $self->get_table;

  croak sprintf 'usage: %s->describe_table($dbi, $table)', __PACKAGE__
    if !$dbi || !$table;

  my $sth = $dbi->prepare("describe $table");
  $sth->execute;

  my %table_def;

  while ( my $r = $sth->fetchrow_hashref ) {
    my $field_name = $r->{Field};

    my $field_spec = { map { ( lc $_, $r->{$_} ) } keys %{$r} };

    my $field = Bedrock::Model::Field->new($field_spec);

    $table_def{$field_name} = $field;
  }

  return \%table_def;
}

########################################################################
sub as_string {
########################################################################
  my ( $self, $model ) = @_;

  $model = $model || $self->fetch_model();

  my $model_as_string = "our \$MODEL = Bedrock::Hash->new(\n%s\n);";

  my $field_template = "%s => Bedrock::Model::Field->new({\n%s\n})";

  chomp $field_template;

  my @columns;

  foreach my $field_name ( keys %{$model} ) {
    my $field = $model->{$field_name};

    croak Dumper( [ field => $field ] )
      if !ref($field) || ref($field) ne 'Bedrock::Model::Field';

    $field->set_null( defined $field->get_null() ? lc( $field->get_null() ) : 'yes' );
    $field->set_key( defined $field->get_key()   ? lc( $field->get_key() )  : undef );
    my @column_defs;

    push @column_defs, sprintf q{ field => '%s'}, $field->get_field;
    push @column_defs, sprintf q{ type => "%s"},  $field->get_type();
    push @column_defs, sprintf q{ null => '%s'},  $field->get_null();

    if ( $field->get_extra ) {
      push @column_defs, sprintf q{ extra => '%s'}, $field->get_extra;
    }

    if ( $field->get_key ) {
      push @column_defs, sprintf q{ key => '%s'}, $field->get_key;
    }

    if ( $field->get_default ) {
      push @column_defs, sprintf q{ default => '%s'}, $field->get_default;
    }

    if ( $field_name =~ /^\d/xsm ) {
      $field_name = "'$field_name'";
    }

    push @columns, sprintf $field_template, $field_name, join ",\n", @column_defs;
  }

  return sprintf $model_as_string, join ",\n\n", @columns;
}

########################################################################
sub fetch_model {
########################################################################
  my ($self) = @_;

  return $self->describe_table;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

Bedrock::Model::Serializer::MySQL - Migration serializer for MySQL

=head1 SYNOPSIS

=head1 METHODS AND SUBROUTINES

=head2 describe_table

=head2 fetch_model

 describe_table( dbi, table-name );

Returns a hash containing a hash of Bedrock::Model::Field objects.
Keys are the names of the columns in the table.

See L<Bedrock::Model::Field>

=head2 as_string

 as_string( [ model ] ); 

Creates a serialized array representation of column definitions
from an existing MySQL table.

  print $model_serializer->as_string($model);

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
