package Bedrock::Model::ReservedWords;

use strict;
use warnings;

use parent qw/Class::Accessor::Fast/;

use Carp;

use vars qw/$OS_ERROR/;

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw/reserved_words engine count/);

sub new {
  my ($class, $fh, %args) = @_;
  
  my $self = $class->SUPER::new(\%args);

  $self->set_reserved_words($self->read_reserved_words($fh));
  
  return $self;
}

sub is_reserved {
  my ($self, $word) = @_;

  if ( $self->get_reserved_words && keys %{$self->get_reserved_words} ) {
    return exists $self->get_reserved_words->{$word};
  }
  else {
    croak "no reserved words in list";
  }
}

sub read_reserved_words {
  my ($self, $fh) = @_;
  
  my %reserved_words;

  if ( $fh ) {
    if (! ref($fh) ) {
      open($fh, '<', $fh)
        or croak "could not open $fh for reading - $OS_ERROR\n";
      }
  }
  else {
    $fh = eval '*' . ref($self) . '::DATA';
  }
  
  my $count = 0;
  
  while ( my $line = <$fh> ) {
    chomp $line;
    my ( $word, $is_reserved ) = split /\s+/, $line;
    $is_reserved = $is_reserved // '';

    if ( $is_reserved =~ /\(R\)/ ) {
      $reserved_words{ lc $word } = undef;
      $count++;
    }
  }
  
  $self->set_count($count);
  
  return \%reserved_words;
}

1;
