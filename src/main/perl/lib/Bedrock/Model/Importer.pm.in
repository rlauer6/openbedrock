package Bedrock::Model::Importer;

use strict;
use warnings;

use 5.010;

BEGIN {
  use lib '@perl5_pkglibdir@';
}

use Bedrock::Model;
use Bedrock::Model::Field;
use Bedrock::Model::Handler;
use Bedrock::Model::ReservedWords::MySQL;

use Carp;
use DBI;
use Data::Dumper;
use English qw(-no_match_vars);
use IO::Handle;
use JSON qw(decode_json);
use Number::Format qw(format_number);
use Scalar::Util qw(looks_like_number reftype);
use Term::ANSIColor;
use Text::ASCIITable;
use Text::CSV_XS;

use constant {  ## no critic (ValuesAndExpressions::ProhibitConstantPragma)
  PADDING_THRESHOLD => 6,         # power of 2 (64)
  TEXT_THRESHOLD    => 64,
  ENUM_THRESHOLD    => 50,
  DECIMAL_THRESHOLD => 1_000_000,
  TRUE              => 1,
  FALSE             => 0,
  EMPTY             => q{},
  MAX_KEYS          => 5,
  RIGHT_BRACKET     => q{]},
  LEFT_BRACKET      => q{[},
};

use parent qw{ Class::Accessor::Fast};

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw{
    allow-keywords
    clear
    csv
    database
    dbi
    decimal_threshold
    drop
    enum_threshold
    format
    headings
    host
    infile
    length
    limit
    model
    model-file
    model_definition
    padding_threshold
    password
    rename
    reserved_words
    statistics-file
    stats
    table
    text_threshold
    type
    user
    verbose
  },
);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

caller or __PACKAGE__->main(@ARGV);

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $self = $class->SUPER::new(@args);

  $self->set_reserved_words( Bedrock::Model::ReservedWords::MySQL->new );

  return $self;
}

########################################################################
sub create_model {
########################################################################
  my ($self) = @_;

  if ( $self->get_model_definition ) {
    $self->set_model( Bedrock::Model->new( { model => $self->get_model_definition } ) );
  }
  else {
    croak 'no model definition';
  }

  return $self;
}

########################################################################
sub dbconnect {
########################################################################
  my ($self) = @_;

  my $dbi = _dbconnect(
    { database => $self->get_database,
      user     => $self->get_user,
      password => $self->get_password,
      host     => $self->get_host,
    },
  );

  $self->set_dbi($dbi);

  return $self;
}

########################################################################
sub create_table {
########################################################################
  my ($self) = @_;

  my $dbi = $self->dbconnect->get_dbi;

  if ( $self->get_drop ) {
    $dbi->do( 'drop table if exists ' . $self->get_table );
  }

  my $model = Bedrock::Model->new(
    { dbi   => $dbi,
      table => $self->get_table,
      model => $self->get_model_definition,
    },
  );

  $self->set_model($model);

  $model->create_table();

  return $self;
}

########################################################################
sub read_model_definition {
########################################################################
  my ($self) = @_;

  my $model_file = $self->get('model-file');

  if ($model_file) {
    open my $fh, '<', $model_file
      or croak sprintf 'could not open % for reading: ', $model_file,
      $OS_ERROR;

    local $RS = undef;

    my $model_def = <$fh>;

    close $fh
      or croak 'could not close ' . $model_file;

    my $model = eval $model_def;  ## no critic (BuiltinFunctions::ProhibitStringyEval)

    $self->set_model_definition($model);
  }
  else {
    croak 'no model set. use --model to specify model file';
  }

  return $self;
}

########################################################################
sub create_model_definition {
########################################################################
  my ($self) = @_;

  my $stats = $self->get_stats;

  if ( !ref $stats || reftype($stats) ne 'HASH' ) {
    croak 'no stats for creating model';
  }

  ## no critic (Variables::ProhibitPackageVars)
  my %model_def = %Bedrock::Model::Field::Id;

  my $default_types = {
    %Bedrock::Model::Field::Email, %Bedrock::Model::Field::City,  %Bedrock::Model::Field::State,
    %Bedrock::Model::Field::Zip,   %Bedrock::Model::Field::Phone, %Bedrock::Model::Field::Address,
  };

  foreach my $stat ( values %{$stats} ) {
    my $type = $stat->{mysql_type};

    my $column_name = $stat->{mysql_name};
    $column_name =~ s/`//xsmg;

    if ( $stat->{logical_type} ) {
      $model_def{$column_name}
        = $default_types->{ $stat->{logical_type} };
    }
    else {

      my %args = (
        field => $stat->{mysql_name},
        null  => 'yes',
        type  => $stat->{mysql_type},
      );

      my %actions = (
        varchar => sub {
          $args{type} = sprintf 'varchar(%s)', $stat->{mysql_length};
        },
        enum => sub {
          $args{type} = sprintf 'enum(%s)', join ', ',
            map {qq{'$_'}} grep {/./xsm} sort keys %{ $stat->{values} };
        },
        tinyint => sub {
          $args{type} = 'boolean';
        },
        boolean => sub {
          $args{type} = 'boolean';
        },
      );

      if ( defined $actions{type} ) {
        $actions{type}->();
      }

      $model_def{$column_name} = Bedrock::Model::Field->new( \%args );
    }

  }

  $self->set_model_definition( \%model_def );

  return $self;
}

########################################################################
sub read_stats {
########################################################################
  my ($self) = @_;

  my $statfile = $self->get('statistics-file');

  if ($statfile) {
    open my $fh, '<', $statfile
      or croak sprintf 'could not open stat file % for reading: %s',
      $statfile, $OS_ERROR;

    local $RS = undef;

    my $stats = <$fh>;

    close $fh
      or croak 'could not close ' . $statfile;

    $self->set_stats( decode_json $stats);
  }

  return $self;
}

########################################################################
sub print_stats {
########################################################################
  my ($self) = @_;

  my $stats = $self->get_stats;

  if ( !$stats ) {
    croak 'no stats available';
  }

  if ( $self->get_format =~ /json/ixsm ) {
    my $json = JSON->new->utf;
    print {*STDOUT} $json->pretty->encode($stats);
  }
  elsif ( $self->get_format =~ /text/ixsm ) {
    my @columns = sort keys %{$stats};

    my $t = Text::ASCIITable->new(
      { headingText => colored( 'Statistics', 'bold white' ),
        allowANSI   => TRUE,
      },
    );

    $t->setCols( map { colored $_, 'bold white' } qw/Column Type Range Values Length/ );

    foreach my $r ( @{$stats}{@columns} ) {

      # range
      my $range;

      if ( $r->{mysql_type} =~ /^int|dec/xsm ) {
        $range = sprintf '%s - %s', format_number( $r->{min} + 0 ), format_number( $r->{max} + 0 );
      }
      else {
        $range = EMPTY;
      }

      # values
      my $values = $r->{mysql_type} eq 'enum' ? $r->{values} : EMPTY;

      if ( $values && keys %{$values} > MAX_KEYS ) {
        $values = [ sort keys %{$values} ];
        $values = [ @{$values}[ 0 .. 4 ], '...[' . scalar @{$values} . RIGHT_BRACKET ];
      }
      elsif ($values) {
        $values = [ sort keys %{$values} ];
      }

      if ($values) {
        $values = join ', ', grep {/./xsm} @{$values};
      }

      # type (w/colors!)
      my $type = $r->{mysql_type};

      my %color_wheel = (
        int        => 'bold green',
        varchar    => 'bold yellow',
        dec        => 'bold green',
        date       => 'bold red',
        enum       => 'bold cyan',
        boolean    => 'bold magenta',
        'tiny int' => 'bold magenta',
      );

      $type = colored( $type, $color_wheel{$type} // 'white' );

      my @row
        = ( $r->{mysql_name}, $type, $range, $values, $r->{mysql_length} );

      $t->addRow(@row);
    }

    print {*STDOUT} $t;
  }

  return $self;
}

########################################################################
sub _init_csv_reader {
########################################################################
  my ( $fh, $headings ) = @_;

  my $csv = Text::CSV_XS->new();

  my $header;

  if ($headings) {
    $header = [ split /,\s*/xsm, $headings ];
  }
  else {
    $header = $csv->getline($fh);
  }

  my @columns;

  foreach my $s ( @{$header} ) {

    $s =~ s/^\s*(.*?)$/$1/xsm;
    $s =~ s/[^\d[:lower:]]/_/ixsmg;

    push @columns, uc $s;
  }

  my $row = {};
  $csv->bind_columns( \@{$row}{@columns} );

  return ( $csv, $row, @columns );
}

########################################################################
sub load_table {
########################################################################
  my ($self) = @_;

  croak "set table first!\n"
    if !$self->get('table');

  $self->dbconnect;

  if (
    !_table_exists(
      { table => $self->get_table,
        dbi   => $self->get_dbi,
      },
    )
  ) {
    croak sprintf '%s does not exist.', $self->get_table;
  }

  my $fh = $self->_get_input_fh;

  my ( $csv, $line, @columns ) = _init_csv_reader( $fh, $self->get_headings );

  my $model = Bedrock::Model->new(
    { dbi   => $self->get_dbi,
      table => $self->get_table,
    },
  )->fetch_model;

  {
    no warnings 'once';  ## no critic (TestingAndDebugging::ProhibitNoWarnings)
    $Bedrock::Model::Handler::MODEL = $model;
  }

  my $handler = Bedrock::Model::Handler->new( $self->get_dbi, { table_name => $self->get_table } );

  if ( $self->get_clear ) {
    $handler->do( 'delete from ' . $self->get_table );
  }

  my $count = 0;

  while ( $csv->getline($fh) ) {
    ++$count;

    if ( @columns != grep {defined} values %{$line} ) {
      croak "not enough values at line $count";
    }

    last if $self->get_limit && $self->get_limit <= $count;

    foreach my $column ( keys %{$line} ) {
      if ( $self->get_reserved_words->is_reserved($column)
        && !$self->get('allow-keywords') ) {
        croak "column $_ is a keyword...rename column or set --allow-keywords\n";
      }

      $handler->set( 'id',        0 );
      $handler->set( lc($column), $line->{$column} );
    }

    $handler->save;
  }

  $fh->close
    or croak 'could not close input file';

  return;
}

########################################################################
sub analyze {
########################################################################
  my ($self) = @_;

  my $fh = $self->_get_input_fh;

  my ( $csv, $line, @columns ) = _init_csv_reader($fh);

  my %stats;
  $self->set_stats( \%stats );

  foreach my $column (@columns) {
    $stats{$column} = {
      'count'      => 0,
      'type'       => EMPTY,
      'max'        => 0,
      'min'        => 0,
      'values'     => {},
      'max_length' => 0,
      'column'     => $column,
    };
  }

  my $count = 0;

  while ( my $row = $csv->getline($fh) ) {
    $count++;

    if ( @columns != grep {defined} values %{$line} ) {
      croak "not enough values at line $count";
    }

    last if $self->get_limit && $self->get_limit <= $count;

    foreach my $column ( keys %{$line} ) {
      my $stat  = $stats{$column};
      my $value = $line->{$column};

      _length( $stat, $value );
      _type( $stat, $value );
      _range( $stat, $value );
      _count_uniq( $stat, $value );
      _count( $stat, $value );

    }
  }

  $fh->close
    or croak 'could not close input file';

  $self->finalize_stats;

  return $self;
}

# +-----------------+
# | PRIVATE METHODS |
# +-----------------+

########################################################################
sub _table_exists {
########################################################################
  my ($args) = @_;

  my ( $dbi, $table ) = @{$args}{qw/dbi table/};

  my $sth = $dbi->prepare('show tables like ?');
  $sth->execute($table);

  my ($result) = $sth->fetchrow_array;

  return $result && lc($result) eq lc $table;
}

########################################################################
sub _dbconnect {
########################################################################
  my ($args) = @_;

  foreach (qw/database user/) {
    croak "set $_ first!\n"
      if !$args->{$_};
  }

  $args->{host} = $args->{host} || '127.0.0.1';

  my @db = grep {$_} @{$args}{qw/database host user password/};

  my $dsn = sprintf 'dbi:mysql:%s:%s', @{$args}{qw/database host/};

  return DBI->connect( $dsn, @{$args}{qw/user password/}, { RaiseError => TRUE } );
}

########################################################################
sub _max {
########################################################################
  my ( $a, $b ) = @_;

  return ( defined $a && $a > $b ) ? $a : $b;
}

########################################################################
sub _min {
########################################################################
  my ( $a, $b ) = @_;

  return ( defined $a && $a < $b ) ? $a : $b;
}

########################################################################
sub _length {
########################################################################
  my ( $s, $v ) = @_;

  return $s->{max_length} = _max( $s->{max_length}, length $v );
}

########################################################################
sub _type {
########################################################################
  my ( $s, $v ) = @_;

  if ( $v =~ /^\d{5}\-\d{4}$/xsm ) {  ## no critic (ControlStructures::ProhibitCascadingIfElse)
    $s->{type} = 'varchar';           # zip code?
  }
  elsif ( length( $v // EMPTY ) && looks_like_number($v) ) {

    if ( $v =~ /^\d+$/xsm ) {
      $s->{type} = 'int';
    }
    elsif ( $v =~ /^[\d.]+$/xsm ) {
      $v = 'decimal';
    }
  }
  elsif ( $v =~ /^[\d-]+$/xsm && $v =~ /^\d{4}\-\d{2}\-\d{2}$/xsm ) {
    $s->{type} = 'date';
  }
  elsif ( $v =~ /^[\d\/]+$/xsm && $v =~ /^\d{2}\/\d{2}\/\d{2,4}$/xsm ) {
    $s->{type} = 'date';
  }
  elsif ( $v =~ /^[\d\-]+$/xsm
    && $v =~ /^\d{4}\-\d{2}\-\d{2}\s+[\d:]{2}[\d:]{2}[\d:]{2}$/xsm ) {
    $s->{type} = 'datetime';
  }
  elsif ( $v =~ /^[\d\-]+$/xsm
    && $v =~ /^\d{4}\/\d{2}\/\d{2}\s+[\d:]{2}[\d:]{2}[\d:]{2}$/xsm ) {
    $s->{type} = 'datetime';
  }
  elsif ( length($v) && length($v) <= TEXT_THRESHOLD ) {
    $s->{type} = 'varchar';
  }
  elsif ( length($v) && length($v) > TEXT_THRESHOLD ) {
    $s->{type} = 'text';
  }
  else {
    # we don't know yet
  }

  return;
}

########################################################################
sub _count {
########################################################################
  my ( $s, $v ) = @_;

  return $s->{count}++;
}

########################################################################
sub _count_uniq {
########################################################################
  my ( $s, $v ) = @_;

  if ( $s->{values} ) {
    my $count = scalar keys %{ $s->{values} };

    if ( $count > ENUM_THRESHOLD ) {
      $s->{values} = undef;
    }
    else {
      $s->{values}->{$v}++;
    }
  }

  return;
}

########################################################################
sub _range {
########################################################################
  my ( $s, $v ) = @_;

  if ( $s->{type} =~ /int|dec/xsm && looks_like_number($v) ) {
    _range_max( $s, $v );
    _range_min( $s, $v );
  }

  return;
}

########################################################################
sub _range_max {
########################################################################
  my ( $s, $v ) = @_;

  $s->{max} = _max( $s->{max} || 0, $v );

  return;
}

########################################################################
sub _range_min {
########################################################################
  my ( $s, $v ) = @_;

  $s->{min} = _min( $s->{min} || 0, $v );

  return;
}

########################################################################
sub _set_type {
########################################################################
  my ($stat) = @_;

  my $type   = $stat->{type};
  my $max    = $stat->{max};
  my $min    = $stat->{min};
  my $length = $stat->{max_length};

  my @values = $stat->{values} ? keys %{ $stat->{values} } : ();

  if ( $type eq 'varchar' && @values ) {
    $type = 'enum';
  }
  elsif ( $type eq 'varchar' ) {
    # pad to next power of 2...why?...just seems right  ¯\_(ツ)_/¯
    $length = _pad( $length, PADDING_THRESHOLD );
  }

  if ( $type eq 'int' && @values == 2 ) {
    if ( $min == 0 && $max == 1 ) {
      $type = 'tinyint';
    }
    else {
      $type = 'enum';
    }
  }
  elsif ( $type eq 'int' && @values ) {
    $type = 'enum';
  }
  elsif ( $type eq 'int' && $max > DECIMAL_THRESHOLD ) {
    $type = 'decimal';
  }

  $stat->{mysql_type}   = $type;
  $stat->{mysql_length} = $length;

  return $stat;
}

########################################################################
sub _set_logical_type {
########################################################################
  my ($stat) = @_;

  $stat->{logical_type} = EMPTY;

  for ( $stat->{column} ) {
    /^email/ixsm && do {
      $stat->{logical_type} = 'email';
      last;
    };

    /^state$/ixsm && do {
      $stat->{logical_type} = 'state';
      $stat->{type}         = 'varchar';
      last;
    };

    /^zip/ixsm && do {
      $stat->{logical_type} = 'zip';
      last;
    };

    /^city/ixsm && do {
      $stat->{logical_type} = 'city';
      last;
    };
    /^town/ixsm && do {
      $stat->{logical_type} = 'city';
      last;
    };

    /^phone/ixsm && do {
      $stat->{logical_type} = 'phone';
      last;
    };

    /^cell/ixsm && do {
      $stat->{logical_type} = 'phone';
      last;
    };
  }

  return;
}

########################################################################
sub _pad {
########################################################################
  my ( $length, $limit ) = @_;

  my $pad;

  for ( map { 2**$_ } ( 0 .. $limit ) ) {
    if ( $_ > $length ) {
      $pad = $_;
      last;
    }
  }

  if ( !$pad ) {
    $pad = ( $length / 2 + 1 ) * 2;
  }

  return $pad;
}

########################################################################
sub _get_input_fh {
########################################################################
  my ($self) = @_;

  my $fh;

  if ( !$self->get_infile ) {
    $fh = IO::Handle->new();

    if ( !$fh->fdopen( fileno(STDIN), 'r' ) ) {
      croak "could not open STDIN for reading.\n\n";
    }
  }
  else {

    if ( !-e $self->get_infile ) {
      croak sprintf 'no such file %s', $self->get_infile;
    }

    open $fh, '<', $self->get_infile  ## no critic (InputOutput::RequireBriefOpen)
      or croak sprintf 'could not open %s for reading: ', $self->get_infile, $OS_ERROR;
  }

  return $fh;
}

########################################################################
sub _set_column_name {
########################################################################
  my ( $stat, $column, $is_reserved ) = @_;

  $stat->{mysql_name} = $is_reserved ? "`$column`" : $column;

  return $stat->{mysql_name};
}

########################################################################
sub finalize_stats {
########################################################################
  my ($self) = @_;

  my $stats = $self->get_stats;

  foreach my $column ( keys %{$stats} ) {
    my $stat = $stats->{$column};

    $column = lc $column;

    if ( $self->get_rename && $self->get_rename->{$column} ) {
      $column = $self->get_rename->{$column};
    }

    if ( $self->get_reserved_words->is_reserved($column)
      && !$self->get('allow-keywords') ) {
      croak "set --allow-keywords if you want to allow $column as a column name\n";
    }

    _set_column_name( $stat, $column, $self->get_reserved_words->is_reserved($column) );

    _set_logical_type($stat);

    _set_type($stat);

    # overrides
    if ( $self->get_type && $self->get_type->{$column} ) {
      my $type = $self->get_type->{$column};

      if ( !any {/^$type$/xsm} qw{int tinyint boolean date datetime timestamp enum varchar} ) {
        croak "invalid type: [$type]";
      }

      $stat->{mysql_type} = $self->get_type->{$column};
    }

    if ( $self->get_length && $self->get_length->{$column} ) {
      $stat->{mysql_length} = $self->get_length->{$column};
    }
  }

  return $self;
}

########################################################################
sub help {
########################################################################
  print {*STDOUT} <<"EOT";
Usage: $PROGRAM_NAME options command

Utility for creating MySQL tables from .csv files.

Options
-------
allow-keywords        allow MySQL keywords as column names
clear                 clear table before loading
database              name of the MySQL database
drop                  drop the table and re-create
format                output format for stats (text, json, default: text)
help|h                this
host                  MySQL host name
infile                name of the input file
limit                 max records to read
model-file            name of a Bedrock model file
password              MySQL password
rename                rename one or more columns (oldname=newname oldname=newname...)
statistics-file       name of the JSON statistics to use for creating a model
table|t               MySQL table name
user                  MySQL user name

Commands
--------
analzye               Analzye the .csv file and create a report
create                Create the MySQL table
load                  Load the MySQL table
print                 Print the stats

Recipes
-------
1. Analzyze a .csv file and create a report

   bedrock-model-importer analyze < some-file.csv

   bedrock-model-importer --infile some-file.csv analyze

2. Analyze the .csv file and create a MySQL table based on the .csv
   file contents

   bedrock-model-importer --table mysql-table \
       --user foo --password boo --host mysql-host --port 3306 --database mysql-database \
       create < some-file.csv

3. Analyze the file .csv file and create a statistics file to be used
   when creating the table.

   bedrock-model-importer --format json analyze < some-file.csv >some-file.json

   bedrock-model-importer --statfile some-file.json --table mysql-table
       --user foo --password boo --host mysql-host --port 3306 --database mysql-database \
       create < some-file.csv

4. Analyze the .csv file and create a model file. You can then modify
   any of the column attributes.  If you use the .mdl extension for
   the model, you can use this file with the Bedrock::Model::Handler class.

   bedrock-model-importer create model < some-file.csv >some-file.mdl

5. Use a .mdl file to create a table...

   bedrock-model-importer --model some-file.mdl --table mysql-table
       --user foo --password boo --host mysql-host --port 3306 --database mysql-database \
       create

EOT

  return 1;
}

# +--------------------------+
# | MAIN PROGRAM STARTS HERE |
# +--------------------------+

########################################################################
sub main {
########################################################################
  my ( $package, @args ) = @_;

  my %options;

  require Getopt::Long;

  Getopt::Long->import(qw/GetOptionsFromArray/);

  GetOptionsFromArray(
    \@args,              \%options,      'allow-keywords', 'clear',
    'database=s',        'drop',         'format=s',       'headings=s',
    'help|h',            'host=s',       'infile|i=s',     'length=s%',
    'limit=i',           'model-file=s', 'password=s',     'rename=s%',
    'statistics-file=s', 'table|t=s',    'type=s%',        'user=s',
  );

  if ( $options{help} ) {
    help();
    return 1;
  }

  # set defaults from options or environment
  $options{host}     = $options{host}     || $ENV{MYSQL_HOST};
  $options{password} = $options{password} || $ENV{MYSQL_PASSWORD};
  $options{user}     = $options{user}     || $ENV{MYSQL_USER};
  $options{database} = $options{database} || $ENV{MYSQL_DATABASE};
  $options{format}   = $options{format}   || 'text';

  my $importer = __PACKAGE__->new( \%options );

  my $command = shift @args;
  my $arg     = shift @args // EMPTY;

  $command //= 'help';

  for ($command) {
    /help/xsm && do {
      help();
      last;
    };

    # equivalent to 'print stats'
    /^analyze/xsm && do {
      $importer->analyze->print_stats;
      last;
    };

    /create/xsm && do {
      if ( $importer->get('model-file') ) {
        $importer->read_model_definition->create_table;
      }
      elsif ( $importer->get('statistics-file') ) {
        $importer->read_stats->create_model_definition->create_table;
      }
      else {
        $importer->analyze->create_model_definition->create_table;
      }

      last;
    };

    /load/xsm && do {
      $importer->load_table();

      last;
    };

    /print/xsm && do {
      if ( $importer->get('statistics-file') ) {
        $importer->read_stats;
      }
      else {
        $importer->analyze;
      }

      if ( $arg eq 'model' ) {
        $importer->create_model_definition;
        $importer->create_model;

        print {*STDOUT} $importer->get_model->as_string;
      }
      elsif ( $arg eq 'stats' ) {
        $importer->read_stats->print_stats;
      }
      else {
        croak "usage: $PROGRAM_NAME print stats|json\n";
      }

      last;
    };

    croak "unknown command $command\n";
  }

  return 0;
}

1;

__END__
