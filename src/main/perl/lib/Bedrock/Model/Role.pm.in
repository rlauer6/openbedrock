package Bedrock::Model::Role;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Model;
use Carp;
use Data::Dumper;
use English qw{-no_match_vars};

use Role::Tiny;

########################################################################
sub _create_model {
########################################################################
  my ( $self, @args ) = @_;

  return $self->_model(@args)->create_table();
}

########################################################################
sub _migrate_model {
########################################################################
  my ( $self, @args ) = @_;

  return $self->_model(@args)->migrate_model;
}

########################################################################
sub _verify_model {
########################################################################
  my ( $self, @args ) = @_;
  return $self->_model(@args)->verify_model;
}

########################################################################
sub _rename_field {
########################################################################
  my ( $self, $dbi, @args ) = @_;

  return $self->_model($dbi)->rename_field(@args);
}

########################################################################
sub _add_field {
########################################################################
  my ( $self, $dbi, @args ) = @_;

  return $self->_model($dbi)->add_field(@args);
}

########################################################################
sub _model_def {
########################################################################
  my ( $class, %args ) = @_;

  $class = ref($class) || $class;

  # if there is no $MODEL defined in the current namespace, see if
  # there is a model (.mdl) file we can require
  if ( $args{verbose} ) {
    print {*STDERR} "checking if ${class}" . "::MODEL exist...\n";
  }

  my $model;

  {
    no strict 'refs';  ## no critic (ProhibitNoStrict)

    $model = ${ $class . '::MODEL' };

    if ( $args{verbose} ) {
      print {*STDERR} Dumper ${ $class . '::MODEL' }, "\n";
    }

    if ( !$model ) {
      $model = eval { require lc $class->__table_name . '.mdl'; };

      if ( $EVAL_ERROR && $args{verbose} ) {
        print {*STDERR} "$EVAL_ERROR";
      }

      if ($model) {
        ${ $class . '::MODEL' } = $model;
      }
    }
  }

  return $model;
}

########################################################################
sub _model {
########################################################################
  my ( $class, $dbi, %args ) = @_;

  $class = ref($class) || $class;

  my $model;

  if ( $class->_model_def ) {
    $model = Bedrock::Model->new(
      { table => $class->__table_name,
        model => $class->_model_def,
        dbi   => $dbi,
        keys %args ? %args : ()
      }
    );
  }
  else {
    die 'no model!';
  }

  return $model;
}

########################################################################
sub __table_name {
########################################################################
  my ($class) = @_;

  $class = ref($class) || $class;

  return $class =~ /(::)?([^:]+)$/xsm ? lc $2 : undef;
}

1;
