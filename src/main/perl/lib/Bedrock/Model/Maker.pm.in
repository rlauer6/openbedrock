package Bedrock::Model::Maker;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use English qw(-no_match_vars);
use Bedrock::Model;
use Bedrock::Model::Handler qw(easy_connect);

use parent qw(Class::Accessor::Fast);

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw(dbi database table model package_name _tidy author));

our $TEMPLATE;

{
  local $RS = undef;

  $TEMPLATE = <DATA>;

  # we added a space before the pod lines to prevent perldoc from
  # getting confused, so remove them
  if ( $TEMPLATE =~ /([ ]=pod.*?=cut)/xsm ) {
    my $pod = $1;

    while ( $pod =~ s/^[ ]//xsmg ) { }

    $TEMPLATE =~ s/([ ]=pod.*?=cut)/$pod/xsm;
  }
}

caller or __PACKAGE__->main();

## no  critic (RequirePodAtEnd)

=pod

=head1 NAME

Bedrock::Model::Maker - create model definitions from specs or table

=head1 SYNOPSIS

 Bedrock::Model::Field qw(:all);

 my %fields = (
   id_field(),
   varchar_field( 'fname',    32 ),
   varchar_field( 'lname', 32 ),
   email_field(),
   varchar_field( 'address1', 64 ),
   varchar_field( 'address2', 64 ),
   varchar_field( 'city', 32),
   zip_field(),
   date_field( 'start_date'),
   date_field( 'end_date'), 
   enum_field( 'position', [ 'president', 'vice-president', 'cabinet', ] ),
   json_field('json'),
   date_inserted_field(),
   last_updated_field(),
 );

 # create a handler class from model definition 
 my $model = Bedrock::Model->new(model => \%fields);

 my $maker = Bedrock::Model::Maker->new(model => $model);

 print {*STDOUT} $maker->tidy->as_string('US::President');

 # create a hanlder class from an existing table
 my $maker = Berdock::Model::Maker->new( dbi => $dbi, table => 'users');

 my $model = $maker->create_model_def();

 print {*STDOUT} $maker->tidy->as_string('App::Users');

 # from the command line
 DBI_HOST=127.0.0.1 \
 DBI_USER=fred \
 DBI_PASS=flintstone \
 DBI_DB=bedrock \
   perl -MBedrock::Model::Maker -e 'Bedrock::Model::Maker::main();' session App::Users

=head1 DESCRIPTION

Creates a L<Bedrock::Model::Handler> class from a model definition
that can be used for interacting with a MySQL table. Can also be used
to create a model from an existing MySQL table.

=head1 METHODS AND SUBROUTINES

=head1 new

Create a new C<Bedrock::Model::Maker> instance.

=over 5

=item author

Name of the module author to use in the AUTHOR section of the pod.

=item table

Name of a MySQL table.

=item dbi

Open handle to a MySQL server.

=item database

Optional name of the database to use.

=item package_name

Name of the package to create.

=item model

A model definition.  Either an array of L<Bedrock::Model::Field>
definitions or a hash of key/value pairs where the key is the field
name and the value is a L<Bedrock::Model::Field> object.

Note that if you use a hash, the order in which fields will be created
in MySQL is non-deterministic. If you want to impose an order to the
columns in the table, use an array.

=back

=head1 as_string

Returns the text of a class based on the model definition.

=head1 create_model_def

Returns an array of L<Bedrock::Model::Field> objects. Note that these
will be in the order in which they are show when you do a DESCRIBE
{table} in MySQL.

=head1 tidy

Enables C<perltidy> to be used when creating the class.

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=head1 SEE OTHER

L<Bedrock::Model>, L<Bedrock::Model::Field>, L<Bedrock::Model::Handler>

=cut

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = ref $args[0] ? $args[0] : {@args};

  my $self = $class->SUPER::new($options);

  my $author = $self->get_author // getpwuid $UID;
  $self->set_author($author);

  if ( $self->get_dbi && $self->get_database ) {
    $self->use_database( $self->get_database );
  }

  return $self;
}

########################################################################
sub as_string {
########################################################################
  my ( $self, $name ) = @_;

  $name //= $self->get_package_name // 'Anonymous::Handler';
  my $model = $self->get_model->model_as_string;

  my $template = $TEMPLATE;

  while ( $template =~ s/[{][{]package_name[}][}]/$name/gxsm ) { }
  $template =~ s/[{][{]model[}][}]/$model/xsm;

  my $timestamp = scalar localtime;
  $template =~ s/[{][{]timestamp[}][}]/$timestamp/xsm;

  my $author = $self->get_author // q{};
  $template =~ s/[{][{]author[}][}]/$author/xsm;

  return $self->get__tidy ? $self->_tidy($template) : $template;
}

########################################################################
sub create_model_def {
########################################################################
  my ( $self, $table_name ) = @_;

  $table_name //= $self->get_table;
  die "usage: create_model_def([table]);\n"
    if !$table_name;

  my $dbi = $self->get_dbi;
  die "set dbi first\n"
    if !$dbi;

  my $ith = BLM::IndexedTableHandler->new( $dbi, { table_name => $table_name } );

  my $table = $ith->_get_table_dir;

  my @model_def;

  foreach my $f ( sort { $a->{idx} <=> $b->{idx} } values %{$table} ) {
    next if $f->{Field} eq 'idx';
    my $field = $f->{Field};

    my @fields = map { lc $_ => $table->{$field}->{$_} } grep { !/idx/xsm }
      keys %{ $table->{$field} };

    push @model_def, Bedrock::Model::Field->new(@fields);
  }

  return @model_def;
}

########################################################################
sub _tidy {
########################################################################
  my ( $self, $source ) = @_;

  my $output = q{};

  require Perl::Tidy;

  Perl::Tidy::perltidy( source => \$source, destination => \$output );

  return $output;
}

########################################################################
sub tidy {
########################################################################
  my ( $self, $tidy ) = @_;

  $tidy //= 1;

  $self->set__tidy($tidy);

  return $self;
}

########################################################################
sub main {
########################################################################
  my $table_name = shift @ARGV;

  die "usage: bedrock-model-maker table-name package-name\n"
    if !$table_name;

  my $package_name = shift @ARGV;
  $package_name //= 'App::' . ucfirst $table_name;

  my $dbi = easy_connect();

  my $maker = Bedrock::Model::Maker->new(
    dbi          => $dbi,
    table        => $table_name,
    package_name => $package_name,
  );

  my @model_def = $maker->create_model_def();
  my $model     = Bedrock::Model->new( model => \@model_def );
  $maker->set_model($model);

  print {*STDOUT} $maker->tidy->as_string;

  return 0;
}

1;

__DATA__
package {{package_name}};

use strict;
use warnings;

use Carp::Always;
use English qw(-no_match_vars);

use Bedrock::Model::Handler qw(easy_connect);

use parent qw(Bedrock::Model::Handler);

{{model}}  

caller or __PACKAGE__->main;

########################################################################
sub main {
########################################################################
  my ( $self, $dbi ) = @_;

  $dbi //= easy_connect();

  my $handler = eval { $self->new($dbi); };

  if ( !$handler ) {
    
    if ( $EVAL_ERROR =~ /does\snot\sexist/ixsm ) {
      $self->create_model($dbi);
      $handler = $self->main( $dbi );
    }
    else {
      print {*STDERR} $EVAL_ERROR;
    }
  }

  return 0;
}

1;

 =pod
 
 =head1 PUBLIC
 
 {{package_name}}
 
 =head1 SYNOPSIS
 
  use {{package_name}};
 
  my $dbi = {{package_name}}->easy_connect();
 
  my $handler = {{package_name}}->new($dbi);
 
 =head1 DESCRIPTION
 
 An ORM for MySQL tables.
 
 =head1 METHODS AND SUBROUTINES
 
 =head1 AUTHOR
 
 {{author}}
 
 Autogenerated on {{timestamp}}
 
 =cut
