package Bedrock::Model::Maker;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use English qw(-no_match_vars);
use Bedrock::Model;

use parent qw(Class::Accessor::Fast);

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw(model package_name _tidy author));

our $TEMPLATE;

{
  local $RS = undef;
  $TEMPLATE = <DATA>;
}

caller or __PACKAGE__->main();

## no  critic (RequirePodAtEnd)

=pod

=head1 PUBLIC

Bedrock::Model::Maker

=head1 SYNOPSIS

 Bedrock::Model::Field qw(:all);

 my %fields = (
   id_field(),
   varchar_field( 'fname',    32 ),
   varchar_field( 'lname', 32 ),
   email_field(),
   varchar_field( 'address1', 64 ),
   varchar_field( 'address2', 64 ),
   varchar_field( 'city', 32),
   zip_field(),
 );

   enum_field( 'position', [ 'president', 'vice-president', 'cabinet', ] ),
   json_field('json'),
   date_inserted_field(),
   last_updated_field(),
 );

 my $maker = Bedrock::Model::Maker->new(model => $model);

 print {*STDOUT} $maker->tidy->as_string('US::President');

=head1 DESCRIPTION

=head1 METHODS AND SUBROUTINES

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=head1 SEE OTHER

=cut

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = ref $args[0] ? $args[0] : {@args};

  return $class->SUPER::new($options);
}

########################################################################
sub as_string {
########################################################################
  my ( $self, $name ) = @_;

  $name //= $self->get_package_name // 'Anonymous::Handler';
  my $model = $self->get_model->model_as_string;

  my $template = $TEMPLATE;

  while ( $template =~ s/[{][{]package_name[}][}]/$name/gxsm ) { }
  $template =~ s/[{][{]model[}][}]/$model/xsm;

  my $timestamp = scalar localtime;
  $template =~ s/[{][{]timestamp[}][}]/$timestamp/xsm;

  my $author = $self->get_author // q{};
  $template =~ s/[{][{]author[}][}]/$author/xsm;

  return $self->get__tidy ? $self->_tidy($template) : $template;
}

########################################################################
sub _tidy {
########################################################################
  my ( $self, $source ) = @_;

  my $output = q{};

  require Perl::Tidy;

  Perl::Tidy::perltidy( source => \$source, destination => \$output );

  return $output;
}

########################################################################
sub tidy {
########################################################################
  my ( $self, $tidy ) = @_;

  $tidy //= 1;

  $self->set__tidy($tidy);

  return $self;
}

########################################################################
sub main {
########################################################################
  return print $TEMPLATE;
}

1;

__DATA__
package {{package_name}};

use strict;
use warnings;

use Carp::Always;
use English qw(-no_match_vars);

use Bedrock::Model::Handler qw(easy_connect);

use parent qw(Bedrock::Model::Handler);

{{model}}  

caller or __PACKAGE__->main;

########################################################################
sub main {
########################################################################
  my ( $self, $dbi ) = @_;

  $dbi //= easy_connect();

  my $handler = eval { $self->new($dbi); };

  if ( !$handler ) {
    
    if ( $EVAL_ERROR =~ /does\snot\sexist/ixsm ) {
      $self->create_model($dbi);
      $handler = $self->main( $dbi );
    }
    else {
      print {*STDERR} $EVAL_ERROR;
    }
  }

  return 0;
}

1;

=pod

=head1 PUBLIC

{{package_name}}

=head1 SYNOPSIS

 use {{package_name}};

 my $dbi = {{package_name}}->easy_connect();

 my $handler = {{package_name}}->new($dbi);

=head1 DESCRIPTION

An ORM for MySQL tables.

=head1 METHODS AND SUBROUTINES

=head1 AUTHOR

{{author}}

Autogenerated on {{timestamp}}

=cut
