package Bedrock::Model::Handler;
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

=pod

=head1 NAME

C<Bedrock::Model::Handler>

Implements an ORM based on C<BLM::IndexedTableHandler> for MySQL
tables.  Extends C<BLM::IndexedTableHandler> to encapsulate the table
definition and maintain consistency between the class that I<handles>
table operations and the database (via migrations).

This class is designed to be the parent class for your table classes.

See C<BLM::IndexedTableHandler> for details regarding the capabilities
of the ORM.

=head1 SYNOPSIS

 package MyApp::Some_Table;

 use parent qw/Bedrock::Model::Handler/;

 our $MODEL = new Bedrock::Hash(
    id => new Bedrock::Model::Field(
           { 
            field => 'id',
            type  => 'int',
            extra => 'auto_increment',
            key  => 'pri'
           },
    foo => new Bedrock::Model::Field(
           { 
            field => 'foo',
            type  => 'varchar(32)',
            null  => 'no',
            default => 'bar'
           }
  );

 1;

...then...

 MyApp::Some_Table->_create_model($dbi);

 my $some_table = new MyApp::Some_Table($dbi);
 my $id = $some_table->save();
 my $new_record = $some_table->new($dbi, $id);

=head1 DESCRIPTION

=head1 METHODS

=head1 AUTHOR

=head1 SEE OTHER

C<BLM::IndexedTableHandler>

=cut

use strict;
use warnings;

use parent qw/BLM::IndexedTableHandler/;
use Data::Dumper;

use Role::Tiny::With;
with 'Bedrock::Model::Role';

sub new {
  my $class = shift;
  $class = ref($class) || $class;
  
  my $model = $class->_model_def;

  die "class must define a model definition\n"
    unless $model;

  $class->SUPER::new(@_);
}

sub _set {
  my $self = shift;
  my ($f, $v) = @_;

  my $model = $self->_model_def;

  if ( exists $model->{$f}->{set} ) {
    $self->{$f} = $model->{$f}->{set}->($f, $v);
  }
  else {
    $self->SUPER::_set(@_);
  }
}

sub _get {
  my $self = shift;
  my $f = shift;

  my $v = $self->{$f};

  my $model = $self->_model_def;

  if ( exists $model->{$f}->{get} ) {
    $model->{$f}->{get}->($f, $v);
  }
  else {
    $self->SUPER::_get($f, @_);
  }
}

1;
