package TagX::TAG;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

# TODO: add pod

use strict;
use warnings;

use Bedrock::BedrockJSON;
use Bedrock::Constants qw(:chars :booleans);
use Data::Dumper;
use English qw(-no_match_vars);
use List::Util qw(any none pairs);
use Log::Log4perl::Level;
use Scalar::Util qw(reftype);
use TagX::Parser;

use Role::Tiny::With;
with 'Bedrock::Logger';

our $PROHIBIT_UNKNOWN_OPTIONS = 1;

########################################################################
sub decode_json_string {
########################################################################
  my (@args) = @_;

  my $json_string = ref $args[0] ? $args[1] : $args[0];

  my $obj = eval { return Bedrock::JSON::decode($json_string); };

  die "possibly invalid JSON string: $EVAL_ERROR\n"
    if $EVAL_ERROR;

  return $obj;
}

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless {}, $class;

  $self->{nobjs}   = 0;
  $self->{subobjs} = [];
  $self->{parent}  = undef;

  my $tx;

  if ( @args == 1 ) {
    $tx = shift @args;
  }

  $self->{TagX} = $tx;

  return $self;
}

# Store the location where the tag definition started in the input
# Invoked with: $file, $line
########################################################################
sub start_location {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 0 ) {
    my ( $file, $line ) = @args;

    $self->{file}             = $file;
    $self->{line}             = $line;
    $self->{__start_location} = "$file($line)";
  }

  return wantarray ? ( @{$self}{qw(file line)} ) : $self->{__start_location};
}

########################################################################
sub name {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args == 1 ) {
    $self->{name} = shift @args;
  }

  return $self->{name};
}

########################################################################
sub parent {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args == 1 ) {
    $self->{parent} = shift @args;
  }

  return $self->{parent};
}

########################################################################
sub __save_option {
########################################################################
  my ( $argv, $optv, $generic, $key, $term ) = @_;

  if ( defined($key) && exists $generic->{$key} ) {
    if ( !defined $term ) {
      $generic->{$key}++;
    }

    return;
  }

  if ( defined($term) && defined $key ) {
    push @{$argv}, $key, $term;

    if ( exists( $optv->{$key} ) ) {
      if ( ref $optv->{$key} ne 'ARRAY' ) {
        $optv->{$key} = [ $optv->{$key} ];
      }

      return push @{ $optv->{$key} }, $term;
    }
    else {
      return $optv->{$key} = $term;
    }
  }
  elsif ( defined $key ) {
    $optv->{$key}++;
    return push @{$argv}, $key;
  }
  else {
    return push @{$argv}, $term;
  }
}

########################################################################
sub tagOptions_as_array {  ## no critic (Capitalization)
########################################################################
  my ( $self, $argref, $option_str, $generic ) = @_;

  my %options;

  if ( $self->can('define_options') ) {
    %options = $self->define_options;

    foreach my $k ( keys %options ) {
      $options{$k} = $k =~ s/=s\s*$//xsm;
    }
  }

  # $option_str =~ s/\n//g;

  local $_ = $option_str;

  my $optref = {};

  $self->{__term_type} = [];

  my $term;

  while (length) {
    s/^\s+// and next;

    # Check for option with value
    if (s/^--([\w-]+)\s*=\s*//oi) {
      my $key = $1;

      __save_option( $argref, $optref, $generic, $key, TagX::Parser::parse_stm );

      if ( defined $options{$key} && !$options{$key} ) {
        die "option --$key does not take an argument\n";
      }

      if ( ( !defined $key ) || !exists $generic->{$key} ) {
        push @{ $self->{__term_type} }, 'term';
        push @{ $self->{__term_type} }, 'term';
      }

      next;
    }

    # Check for flag option -- option without '='
    if (s/^--([\w-]+)//oi) {
      __save_option( $argref, $optref, $generic, $1 );

      if ( ( !defined $1 ) || !exists $generic->{$1} ) {
        push @{ $self->{__term_type} }, 'optional';
      }

      next;
    }

    __save_option( $argref, $optref, $generic, undef, TagX::Parser::parse_stm );

    push @{ $self->{__term_type} }, 'term';
  }

  return $optref;
}

########################################################################
sub options {
########################################################################
  my ( $self, @args ) = @_;

  my $logger = $self->get_logger();

  if ( @args == 1 ) {
    my $optstring = shift @args;

    $self->{__optstring} = $optstring;
    $self->{__argv}      = [];

    my %generic = ( 'verbose' => undef, );

    # parse the options into an array
    $self->{__options} = tagOptions_as_array( $self, $self->{__argv}, $optstring, \%generic );

    foreach my $key ( grep { defined $generic{$_} } keys %generic ) {
      $self->{"__$key"} = $generic{$key};
    }

    my $verbose = defined $self->{__verbose} ? $self->{__verbose} : 0;

    if ( $verbose == 1 ) {
      $logger->level($DEBUG);
    }
    elsif ( $verbose > 1 ) {
      $logger->level($TRACE);
    }
    else {
      $logger->level($ERROR);
    }

    $logger->trace(
      sub {
        my $message = <<'END_OF_MESSAGE';
--------------
Option string:
--------------
%s
------------
Resolved to:
------------
%s
-------------
Option types:
-------------
%s
------------
Options are:
------------
%s
--------------------
Generic options are:
--------------------
%s
END_OF_MESSAGE
        my @options;
        my @generic_options;

        for my $key ( sort keys %generic ) {
          push @generic_options, sprintf '%s => [%s]', $key, $generic{$key} // $EMPTY;
        }

        for my $key ( sort keys %{ $self->{__options} } ) {
          push @options, sprintf '%s => [%s]', $key, $self->{__options}->{$key};
        }

        my @var_list = map { "$_ => " . _resolve($_) } @{ $self->{__argv} };

        my $var_list_str  = join "\n", @var_list, $EMPTY;
        my $term_list_str = join "\n", @{ $self->{__term_type} }, $EMPTY;

        my $options_list_str         = join "\n", @options,         $EMPTY;
        my $generic_options_list_str = join "\n", @generic_options, $EMPTY;

        my $str = sprintf $message, $optstring,
          $var_list_str,             $term_list_str,
          $generic_options_list_str, $options_list_str;

        return $str;
      }
    );

  }

  return $self->{__options};
}

########################################################################
sub _resolve {
########################################################################
  my ($var) = @_;

  if ( ref($var) =~ /::Term/xsm ) {
    return ${$var};
  }
  elsif ( ref($var) =~ /::Expr/xsm ) {
    return join $COMMA, map { _resolve($_) } @{$var};
  }
  else {
    return $var;
  }
}

########################################################################
sub verbose {
########################################################################
  my $self = shift;

  return $self->{__verbose};
}

########################################################################
sub eval_args {
########################################################################
  my ( $self, $optref, @eval_args ) = @_;

  my $verbose = defined $self->{__verbose} ? $self->{__verbose} : 0;

  my $logger = $self->get_logger( ref $self );

  $logger->debug(
    sub {
      sprintf 'Context arguments are: (%s)', Dumper( [ \@eval_args ] );
    }
  );

  # command line has been parsed. Just need to eval arguments and
  # options with appropriate context

  %{$optref} = ();

  foreach my $p ( pairs %{ $self->{__options_to_eval} } ) {
    my ( $key, $value ) = @{$p};

    $logger->trace( sprintf 'option: %s value: %s', $key, $value // '<undef>' );

    my $ref = ref $value;

    if ( $ref eq 'ARRAY' ) {
      # more than one value for this option
      # need to eval all
      my @optvals;

      for my $arg ( @{$value} ) {

        if ( ref $arg ) {
          push @optvals, $arg->eval(@eval_args);

          $self->get_logger->trace( sprintf 'eval returned: [%s]', join $COMMA, @eval_args );
        }
        else {
          push @optvals, $arg;
        }
      }

      $optref->{$key} = \@optvals;
    }
    elsif ($ref) {
      $optref->{$key} = $value->eval(@eval_args);
    }
    else {
      $optref->{$key} = $value;
    }
  }

  # Reset any options to defaults if values for them not specified.
  for my $key ( keys %{ $self->{__option_defaults} } ) {
    next if exists $optref->{$key};

    $optref->{$key} = $self->{__option_defaults}->{$key};
  }

  # Evaluate arguments now
  my @args;

  for my $arg ( @{ $self->{__args_to_eval} } ) {
    $logger->debug( sprintf 'arg: %s', Dumper( [ $arg, $self->{__args_to_eval} ] ) );

    # arguments to the while loop should not be evaluated at this point
    if ( ref $arg && ref($self) !~ /while/xsmi ) {
      my $value = $arg->eval(@eval_args);
      $logger->debug( sprintf 'value: %s', Dumper( [$value] ) );
      push @args, $value;
    }
    else {
      push @args, $arg;
    }
  }

  return @args;
}

# getname(\%options, @argv)
########################################################################
sub get_name {
########################################################################
  my ( $self, $options, @argv ) = @_;

  if ( !defined $options->{'define-var'} ) {
    $options->{'define-var'} = $UNDERSCORE;
  }

  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $tag_opts->{name} ) {
    $options->{'define-var'} = $tag_opts->{name};
    shift @argv;
  }

  return (@argv);
}

########################################################################
sub parse_tag_name {
########################################################################
  my ( $self, $tag ) = @_;

  my $tagtype = { type => $EMPTY, name => $EMPTY };

  return $tagtype
    if !$tag || $tag !~ /^:/xsm;

  if ( $tag =~ /^:\s+/xsm ) {
    die "missing variable name of class after ':'\n";
  }

  # -----------------------
  #   <plugin:class:name>
  #   <plugin:class>
  # -----------------------

  if ( ref($self) =~ /plugin$/xsmi ) {
    if ( $tag =~ /^:(.+[^:]):(\w+)/xsm ) {
      @{$tagtype}{qw/type name/} = ( $1, $2 );
    }
    elsif ( $tag =~ /^:(.*)/xsm ) {
      $tagtype->{name} = $tagtype->{type} = $1;
    }
  }

  # -----------------------
  #   <null:type:name>
  #   <null:name>
  # -----------------------

  elsif ( ref($self) =~ /null$/ixsm ) {

    if ( $tag =~ /^:([^:]+):([^:].+)$/xsm ) {
      my ( $type, $name ) = ( $1, $2 );

      if ( any { $type eq $_ } qw{ hash var object array } ) {
        @{$tagtype}{qw/type name/} = ( $type, $name );
      }
      else {
        die "invalid type ($type)\n";
      }
    }
    else {
      $tagtype->{name} = ( split /:/xsm, $tag )[1];
    }
  }

  # -----------------------
  #   <snippet:name:return-var
  #   <snippet:name>
  # -----------------------

  elsif ( ref($self) =~ /snippet$/ixsm ) {
    my ( undef, $name, $retvar ) = split /:/xsm, $tag;
    $tagtype->{name} = $name;
    $tagtype->{type} = $retvar // q{};
  }

  # -----------------------
  #   <tag:name>
  # -----------------------

  else {
    $tagtype->{name} = ( split /:/xsm, $tag )[1];
  }

  $self->get_logger->trace(
    sub {
      return sprintf 'tag => [%s], 1 => [%s], 2=> [%s]', $tag, @{$tagtype}{qw{type name}};
    }
  );

  return $tagtype;
}

########################################################################
sub dump_tag {
########################################################################
  my ($self) = @_;

  my $tag_guts = $self->{__optstring};
  chomp $tag_guts;

  $tag_guts =~ s/\A([^: ])/ $1/xsm;

  return sprintf '<%s%s>', $self->name(), $tag_guts;
}

# dump_options(\%options)
########################################################################
sub dump_options {
########################################################################
  my ( $self, $options, @args ) = @_;

  my $logger = $self->get_logger;

  return $logger->debug(
    sub {
      my $str = sprintf "%-12s => %s\n", 'Tag:', $self->dump_tag;

      $str .= sprintf "%s\n", 'Options:';

      foreach my $p ( pairs %{$options} ) {
        my ( $key, $value ) = @{$p};

        $str .= sprintf "%-12s => (%s)\n", $key, $value // q{};
      }

      $str .= sprintf '%-12s => %s', 'Arguments:', join $COMMA, grep {defined} @args, $EMPTY;

      return $str;
    }
  );
}

{
  ## no critic (RequireArgUnpacking);
  ######################################################################
  sub parse_options {
    my ( $self, @args ) = @_;

    return $self->eval_args(@args)
      if exists $self->{__args_to_eval};

    my $optref = shift @args;

    # The supported options list is contained in %keys_lc (key is the name
    # of option (in lowercase) and value is the flag specified: `=s' if
    # the option takes an argument) and the defaults specified therein are
    # in %defaults %keys contains lower case options mapped to options
    # with the right case

    my ( %keys, %keys_lc, %defaults );

    for my $option ( keys %{$optref} ) {
      my $default = $optref->{$option};

      if ( $option =~ /^([^=:]+)([:=].*)?$/xsm ) {

        my $lc = lc $1;

        $keys_lc{$lc} = $2;
        $keys{$lc}    = $1;

        if ( defined $optref->{$option} ) {
          $defaults{$lc} = $default;
        }
      }
    }

    # Step thru' the arguments list
    my ( $arg, $arg_lc, @argv, %options );

    my @opt_type = @{ $self->{__term_type} };

    for ( my $i = 0; $i < @{ $self->{__argv} }; $i++ ) {  ## no critic (ProhibitCStyleForLoops)

      # Get the next argument
      $arg = $self->{__argv}->[$i];

      # Is the argument a `Term' or an `Expr'
      if ( ref $arg ) {
        push @argv, $arg;
        next;
      }

      # Argument is not a `Term' or an `Expr'
      # Is the argument an option which requires an argument?
      $arg_lc = lc $arg;

      # consider the case of 'optional' arguments...  when an option
      # like --table is used without an argument but has been defined
      # to accept one, we have a problem, so `tag_Options_as_array'
      # was modifed to to identify each term of a Bedrock tag as
      # 'optional' or 'term' - meaning it is an 'option' with no
      # arguments. That way the code below can interpret the option
      # meta-data and determine if it should grab the next term as an
      # argument or let it be.
      #
      # A better approach is to have more a robust option handler that
      # identifies such types of options ala GetOptions...I suspect
      # Jay regrets that laziness but it worked for a long time.

      if ( ( defined $keys_lc{$arg_lc} || !$PROHIBIT_UNKNOWN_OPTIONS )
        && $opt_type[$i] ne 'optional' ) {

        # Yes, fetch the next argument
        $i++;
        my $optval = $self->{__argv}->[$i];

        # is this option repeated? if so, make an array ref and
        # push the value into the array along with the earlier value
        if ( exists $options{$arg_lc} ) {

          # make an array ref

          if ( ref( $options{$arg_lc} ) ne 'ARRAY' ) {
            $options{$arg_lc} = [ $options{$arg_lc} ];
          }

          push @{ $options{$arg_lc} }, $optval;
        }
        else {
          $options{$arg_lc} = $optval;
        }

        next;
      }

      # Check whether the argument is an option which does not require a
      # value. I so, increment the option value.
      # Note that multiple occurences of such options results in
      # the value being incremented. (--verbose --verbose)

      if ( exists $keys_lc{$arg_lc} ) {
        $options{$arg_lc}++;
        next;
      }

      if ($PROHIBIT_UNKNOWN_OPTIONS) {
        die sprintf "unsupported option [--%s]\n", $arg
          if ref($self) !~ /if|unless|while/ixsm;
      }

      # Bedrock 1 behavior: if not an option, push into args array -- effectively just returns
      # unsupported options to caller.
      push @argv, q{--} . $arg;
    }

    # if we have custom options, add them to the list of available options
    if ( !$PROHIBIT_UNKNOWN_OPTIONS ) {
      foreach ( keys %options ) {
        next if exists $optref->{$_};

        $optref->{$_} = undef;
        $keys{$_} = $_;
      }
    }

    # Remap the case of the options to the required case and save the parsed options
    for my $key ( keys %options ) {
      $self->{__options_to_eval}->{ $keys{$key} } = $options{$key};
    }

    # Save the defaults too
    for my $key ( keys %defaults ) {
      $self->{__option_defaults}->{ $keys{$key} } = $defaults{$key};
    }

    # and save the arguments too
    $self->{__args_to_eval} = \@argv;

    # Leave a trace before doing the eval
    $self->get_logger->trace(
      sub {
        my $str = "Specified options are\n";

        for my $key ( sort keys %{ $self->{__options_to_eval} } ) {
          $str .= "  $key => [" . $self->{__options_to_eval}->{$key} . "]\n";
        }

        $str .= "Defaults are\n";
        for my $key ( sort keys %{ $self->{__option_defaults} } ) {
          $str .= "  $key => [" . $self->{__option_defaults}->{$key} . "]\n";
        }

        $str .= sprintf "Arguments are\n  (%s)", join q{,}, @argv;

        $str;
      }
    );

    return $self->eval_args( $optref, @args );
  }
}

# load an I/0 handler that supports <null>, <sink>, <var>, tags
# <var --xml $foo>
#
# io_handler( $tx, 'XML', 'Bedrock::XML::Handler')
#
########################################################################
sub io_handler {
########################################################################
  my ( $self, $tx, $handler_name, $options ) = @_;

  my $default_handler = 'Bedrock::Serializer::' . $handler_name;

  my $config = $tx->out_handle->{Handle}->{CONFIG};

  my $handler_config = $config->{$handler_name};
  $handler_config //= {};

  if ( ref $options && reftype($options) eq 'HASH' ) {

    foreach my $c (qw/in out/) {
      my $in_or_out = $options->{$c};

      if ($in_or_out) {
        $handler_config->{$c} //= {};

        my $config_in_or_out = $handler_config->{$c};

        foreach ( keys %{$in_or_out} ) {
          $config_in_or_out->{$_} = $in_or_out->{$_};
        }

        $handler_config->{$c} = $config_in_or_out;
      }
    }
  }

  my $handler = $config->{$handler_name}->{handler} || $default_handler;

  eval "require $handler;";  ## no critic (ProhibitStringyEval)

  die "could not load $handler_name: [$handler]\n$EVAL_ERROR\n"
    if $EVAL_ERROR;

  my $io_handler;

  eval "\$io_handler = $handler->new(\$handler_config);";  ## no critic (ProhibitStringyEval)

  die "$EVAL_ERROR\n"
    if $EVAL_ERROR;

  return $io_handler;
}

########################################################################
sub config {
########################################################################
  my ($self) = @_;

  my $tagx = $self;

  my $max_depth = 10;  # can't think of a tag depth this deep

  while ( !$tagx->{TagX} ) {
    $tagx = $tagx->{parent};
    next if --$max_depth;
  }

  return $tagx->{TagX} ? $tagx->{TagX}->config : {};
}

1;
