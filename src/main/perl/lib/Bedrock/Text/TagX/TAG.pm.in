#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG;

use strict;
use warnings;

use TagX::Log;
use TagX::Parser;
use Bedrock::BedrockJSON;
use Data::Dumper;
use Scalar::Util qw/reftype/;

sub decode_json_string {
  shift if ref($_[0]);

  my $json_string = shift;
  my $obj;

  eval {
    $obj = Bedrock::JSON::decode($json_string);
  };

  die "possibly invalid JSON string: $@\n"
    if $@;

  return $obj;
}

sub new {
  my $class = shift;

  my $self = bless {}, $class;

  $self->{'nobjs'}   = 0;
  $self->{'subobjs'} = [];
  $self->{'parent'}  = undef;

  my $tx = shift if @_ == 1;
  $self->{'TagX'} = $tx;

  $self;
}

# Store the location where the tag definition started in the input
# Invoked with: $file, $line
sub start_location {
  my $self = shift;

  if ( @_ > 0 ) {
    my ( $file, $line ) = @_;
    $self->{'file'}             = $file;
    $self->{'line'}             = $line;
    $self->{'__start_location'} = "$file($line)";
  }

  wantarray ? ( @{$self}{qw(file line)} ) : $self->{'__start_location'};
}

sub name {
  my $self = shift;
  $self->{'name'} = shift if @_ == 1;
  $self->{'name'};
}

sub parent {
  my $self = shift;
  $self->{'parent'} = shift if @_ == 1;
  $self->{'parent'};
}

sub __save_option {
  my ( $argv, $optv, $generic, $key, $term ) = @_;

  if ( defined($key) && exists $generic->{$key} ) {
    $generic->{$key}++ unless defined($term);
    return;
  }

  if ( defined($term) && defined($key) ) {
    push @{$argv}, $key, $term;
    if ( exists( $optv->{$key} ) ) {
      $optv->{$key} = [ $optv->{$key} ] unless ref( $optv->{$key} ) eq 'ARRAY';
      push @{ $optv->{$key} }, $term;
    }
    else {
      $optv->{$key} = $term;
    }
  }
  elsif ( defined($key) ) {
    push @{$argv}, $key;
    $optv->{$key}++;
  }
  else {
    push @{$argv}, $term;
  }
}


sub tagOptions_as_array {
  my $self = shift;

  my $args = shift;
  local $_ = shift;
  my $generic = shift;
  my $optref  = {};

  $self->{'__term_type'} = [];

  my $term;
  while (length) {
    s/^\s+// and next;

    # Check for option with value
    if (s/^--([\w-]+)\s*=\s*//oi) {
      my $key = $1;
      &__save_option( $args, $optref, $generic, $key,
                      &TagX::Parser::parse_stm );

      unless ( defined($key) && exists $generic->{$key} ) {
        push @{ $self->{'__term_type'} }, 'term';
        push @{ $self->{'__term_type'} }, 'term';
      }

      next;
    }

    # Check for flag option -- option without '='
    if (s/^--([\w-]+)//oi) {
      &__save_option( $args, $optref, $generic, $1 );
      unless ( defined($1) && exists $generic->{$1} ) {
        push @{ $self->{'__term_type'} }, 'optional';
      }

      next;
    }

    &__save_option( $args, $optref, $generic, undef, &TagX::Parser::parse_stm );

    push @{ $self->{'__term_type'} }, 'term';
  }

  $optref;
}

sub options {

  my $self = shift;

  if ( @_ == 1 ) {
    my $optstring = shift;

    $self->{'__optstring'} = $optstring;
    $self->{'__argv'} = [];

    my %generic = ( 'verbose' => undef );

    # parse the options into an array
    $self->{'__options'} = &tagOptions_as_array( $self, $self->{'__argv'}, $optstring, \%generic );

    map { $self->{ '__' . $_ } = $generic{$_} if defined $generic{$_} } keys %generic;

    my $verbose = defined( $self->{'__verbose'} ) ? $self->{'__verbose'} : 0;

    if ( $verbose > 1 ) {
      my $str = "Option string is\n\t$optstring\n  Resolved to\n\t@{$self->{'__argv'}}\n";
      $str .= " Option types:\n\t@{$self->{'__term_type'}}\n";
      $str .= " Options are\n";

      for my $key ( sort keys %{ $self->{'__options'} } ) {
        $str .= "\t$key => [" . $self->{'__options'}->{$key} . "]\n";
      }

      $str .= "  Generic options are\n";

      for my $key ( sort keys %generic ) {
        $str .= "\t$key => [" . $generic{$key} . "]";
      }

      &log_message( $self, "$str\n" );
    }
  }

  $self->{'__options'};
}

sub verbose {
  my $self = shift;
  $self->{'__verbose'};
}

sub eval_args {
  my $self   = shift;
  my $optref = shift;

  my $verbose = defined( $self->{'__verbose'} ) ? $self->{'__verbose'} : 0;
  &log_message( $self, "Context arguments are\n\t(@_)" ) if $verbose > 1;

  # command line has been parsed. Just need to eval arguments and
  # options with appropriate context
  my ( $key, $value );
  %{$optref} = ();
  while ( ( $key, $value ) = each %{ $self->{'__options_to_eval'} } ) {
    my $ref = ref($value);
    if ( $ref eq 'ARRAY' ) {

      # more than one value for this option
      # need to eval all
      my @optvals;
      for my $arg ( @{$value} ) {
        if ( ref($arg) ) {
          $arg->verbose($verbose) if $verbose;
          push @optvals, $arg->eval(@_);
          $arg->verbose(0) if $verbose;
        }
        else {
          push @optvals, $arg;
        }
      }
      $optref->{$key} = \@optvals;
    }
    elsif ($ref) {
      $value->verbose($verbose) if $verbose;
      $optref->{$key} = $value->eval(@_);
      $value->verbose(0) if $verbose;
    }
    else {
      $optref->{$key} = $value;
    }
  }

  # Reset any options to defaults if values for them not specified.
  for my $key ( keys %{ $self->{'__option_defaults'} } ) {
    next if exists $optref->{$key};
    $optref->{$key} = $self->{'__option_defaults'}->{$key};
  }

  # Evaluate arguments now
  my @args;
  for my $arg ( @{ $self->{'__args_to_eval'} } ) {

    # arguments to the while loop should not be evaluated at this point
    if ( ref($arg) && ref($self) !~ /while/i ) {
      $arg->verbose($verbose) if $verbose;
      push @args, $arg->eval(@_);
      $arg->verbose(0) if $verbose;
    }
    else {
      push @args, $arg;
    }
  }

  @args;
}

# getname(\%options, @argv)

sub get_name {
  my $self    = shift;
  my $options = shift;

  $options->{'define-var'} = '_' unless defined $options->{'define-var'};

  my @argv     = @_;
  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $tag_opts->{name} ) {
    $options->{'define-var'} = $tag_opts->{name};
    shift @argv;
  }

  return (@argv);
}

sub parse_tag_name {
  my $self = shift;
  my $tag = shift;

  my $tagtype = { type=> '', name => '' };

  if ( $tag && $tag =~/^:/ ) {
    if ( $tag =~/^:\s+/ ) {
      die "missing variable name of class after ':'\n";
    }

    # <plugin:class:name>
    # <plugin:class>

    if ( ref($self) =~/plugin$/i ) {
      if ( $tag =~/^:(.+[^:]):(\w+)/ ) {
	@{$tagtype}{qw/type name/} = ($1,$2);
      }
      elsif ( $tag =~/^:(.*)/) {
	$tagtype->{name} = $tagtype->{type} = $1;
      }
    }
    # <null:type:name>
    # <null:name>
    elsif ( ref($self) =~/null$/i ) {
      if ($tag =~/^:([^:]+):([^:].+)$/ ) {
	my ($type, $name) = ($1, $2);
	if ( $type =~/^(hash|var|object|array)$/ ) {
	  @{$tagtype}{qw/type name/} = ($type, $name);
	}
	else {
	  die "invalid type ($type)\n";
	}
      }
      else {
	$tagtype->{name} = (split /:/, $tag)[1];
      }
    }
    # <tag:name>
    else {
      $tagtype->{name} = (split /:/, $tag)[1];
    }
  }

  return $tagtype;
}

# dump_options(\%options)
sub dump_options {
  my $self = shift;

  return unless $self->verbose();

  my $options = shift;
  my ( $key, $value );

  my $str = "$self: Options are\n";

  while ( ( $key, $value ) = each %$options ) {
    $str .= "\t$key .. ($value)\n";
  }

  $str .= "Arguments .. (@_)";

  &log_message( $self, $str );
}

sub parse_options {
  my $self = shift;
  return $self->eval_args(@_) if exists $self->{'__args_to_eval'};
  my $optref = shift;

  my $verbose = defined( $self->{'__verbose'} ) ? $self->{'__verbose'} : 0;

# The supported options list is contained in %keys_lc (key is the name of option (in lowercase)
# and value is the flag specified: `=s' if the option takes an argument)
# and the defaults specified therein are in %defaults
# %keys contains lower case options mapped to options with the right case
  my ( %keys, %keys_lc, %defaults );
  for my $key ( keys %$optref ) {
    next unless $key =~ /^([^=:]+)([:=].*)?$/;
    my $lc = lc($1);
    $keys_lc{$lc}  = $2;
    $keys{$lc}     = $1;
    $defaults{$lc} = $optref->{$key} if defined( $optref->{$key} );
  }

  # Do some logging
  if ( $verbose > 1 ) {
    my ( $key, $value, $str );
    $str =
    "Arguments [@{[scalar(@{$self->{__argv}})]}] are\n\t(@{$self->{__argv}})\n";
    while ( ( $key, $value ) = each %keys_lc ) {
      $str .= "  options{$key} => [";
      $str .= $value if defined($value);
      $str .= "] (default: ";
      $str .= $defaults{$key} if defined( $defaults{$key} );
      $str .= ")\n";
    }
    &log_message( $self, "$str\n" );
  }

  # Step thru' the arguments list
  my ( $arg, $arg_lc, @argv, $i, %options );
  my @opt_type = @{ $self->{'__term_type'} };

  for ( $i = 0 ; $i < @{ $self->{'__argv'} } ; $i++ ) {

    # Get the next argument
    $arg = $self->{'__argv'}->[$i];

    # Is the argument a `Term' or an `Expr'
    if ( ref($arg) ) {
      push @argv, $arg;
      next;
    }

    # Argument is not a `Term' or an `Expr'
    # Is the argument an option which requires an argument?
    $arg_lc = lc($arg);

    # consider the case of 'optional' arguments...  when an option
    # like --table is used without an argument but has been defined
    # to accept one, we have a problem, so `tag_Options_as_array'
    # was modifed to to identify each term of a Bedrock tag as
    # 'optional' or 'term' - meaning it is an 'option' with no
    # arguments. That way the code below can interpret the option
    # meta-data and determine if it should grab the next term as an
    # argument or let it be.
    #
    # A better approach is to have more a robust option handler that
    # identifies such types of options ala GetOptions...I suspect
    # Jay regrets that laziness but it worked for a long time.

    if ( defined( $keys_lc{$arg_lc} ) && $opt_type[$i] ne 'optional' ) {

      # Yes, fetch the next argument
      $i++;
      my $optval = $self->{'__argv'}->[$i];

      # is this option repeated? if so, make an array ref and
      # push the value into the array along with the earlier value
      if ( exists( $options{$arg_lc} ) ) {

        # make an array ref
        $options{$arg_lc} = [ $options{$arg_lc} ]
        unless ref( $options{$arg_lc} ) eq 'ARRAY';
        push @{ $options{$arg_lc} }, $optval;
      }
      else {
        $options{$arg_lc} = $optval;
      }
      next;
    }

    # Check whether the argument is an option which does not require a
    # value
    if ( exists( $keys_lc{$arg_lc} ) ) {

      # if so, increment the option value.
      # note that multiple occurences of such options results in
      # the value being incremented.
      $options{$arg_lc}++;
      next;
    }

    die "unsupported option [--" . $arg . "]\n"
      unless ref($self) =~ /(if|unless|while)/i;

# Bedrock 1 behavior: if not an option, push into args array -- effectively just returns
# unsupported options to caller.
    push @argv, '--' . $arg;
  }

# Remap the case of the options to the required case and save the parsed options
  for my $key ( keys %options ) {
    $self->{'__options_to_eval'}->{ $keys{$key} } = $options{$key};
  }

  # Save the defaults too
  for my $key ( keys %defaults ) {
    $self->{'__option_defaults'}->{ $keys{$key} } = $defaults{$key};
  }

  # and save the arguments too
  $self->{'__args_to_eval'} = \@argv;

  # Leave a trace before doing the eval
  if ( $verbose > 1 ) {
    my $str = "Specified options are\n";
    for my $key ( sort keys %{ $self->{'__options_to_eval'} } ) {
      $str .= "  $key => [" . $self->{'__options_to_eval'}->{$key} . "]\n";
    }

    $str .= "Defaults are\n";
    for my $key ( sort keys %{ $self->{'__option_defaults'} } ) {
      $str .= "  $key => [" . $self->{'__option_defaults'}->{$key} . "]\n";
    }

    $str .= "Arguments are\n  (@argv)";
    &log_message( $self, $str );
  }

  return $self->eval_args( $optref, @_ );
}

# load an I/0 handler that supports <null>, <sink>, <var>, tags
# <var --xml $foo>
#
# io_handler( $tx, 'XML', 'Bedrock::XML::Handler')
#
sub io_handler {
  my $self = shift;
  my $tx = shift;
  my $handler_name = shift;
  my $options = shift;

  my $default_handler = 'Bedrock::Serializer::' . $handler_name;

  my $config = $tx->out_handle->{Handle}->{'CONFIG'};
  my $handler_config = $config->{$handler_name} ? $config->{$handler_name} : {};

  if ( ref($options) && reftype($options) eq 'HASH' ) {

    foreach my $c (qw/in out/) {
      my $in_or_out = $options->{$c};
      if ( $in_or_out ) {
	$handler_config->{$c} = exists $handler_config->{$c} ? $handler_config->{$c} : {};
	my $config_in_or_out = $handler_config->{$c};
	map { $config_in_or_out->{$_} = $in_or_out->{$_}; } keys %$in_or_out;
	$handler_config->{$c} = $config_in_or_out;
      }
    }
  }

  my $handler = $config->{$handler_name}->{handler} || $default_handler;
 
  eval "require $handler;";
  
  die "could not load $handler_name: [$handler]\n$@\n"
    if $@;

  my $io_handler;

  eval "\$io_handler = $handler->new(\$handler_config);";

  die "$@\n" if $@;

  return $io_handler;
}


1;
