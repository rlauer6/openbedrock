#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Func;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.08;
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::Scalar;

my $Verbose;

sub new
{
    my $class = shift;
    my $self = bless [], $class;
    @{$self} = @_;
    $self;
}

sub verbose
{
    my $self = shift;
    if ( @_ ) {
	$Verbose = shift;
    }
    $Verbose;
}

sub eval
{
    my $self = shift;
    &log_message( undef, "$self: begin eval with @{[scalar(@{$self})]} items: (@{$self})" )
	if $Verbose;

    my ($var, $func) = @{$self}[0,1];
    my $obj = $var->eval( @_ );
    &log_message( undef, "$self: $var evaluated to [$obj]" ) if $Verbose;

    # Create a scalar object if we do have a scalar
    unless ( ref( $obj ) ) {
	$obj = TagX::Scalar->new( $obj );
	&log_message( undef, "$self: Created object with scalar: [$obj]" ) if $Verbose;
    }
    my $ref = ref( $obj );

    if ( $ref eq 'HASH' ) {
	&log_message( undef, "$self: unsupported function ($func)" );
	return;
    } elsif ( $ref eq 'ARRAY' ) {
	&log_message( undef, "$self: unsupported function ($func)" );
	return;
    } elsif ( $ref ) {
	my $funcref = $obj->can( $func );
	unless ( $funcref ) {
	    &log_message( undef, "$self: unsupported function ($func)" );
	    return;
	}
	my @args = @{$self};
	shift @args; shift @args;
	&log_message( undef, "$self: Arguments to $func() are (@args)" ) if $Verbose;
	for (@args) {
	    if ( $Verbose ) {
		$_->verbose($Verbose);
		my $value = $_->eval( @_ );
		$_->verbose(0);
		$_ = $value;
	    } else {
		$_ = $_->eval( @_ );
	    }
	}
	if ( $Verbose ) {
	    local $" = ", ";
	    &log_message( undef, "$self: Invoking $obj->$func(@args)" );
	}
#
#
# Rob's Bedrock hack...
# Well, Jay was right...Bedrock is JUNK! Useful junk, but junk none-the-less...
#
# Okay, we're trying to execute a method on an object, but it doesn't like to be called in a scalar context...say
# IO::File->getlines for example...
#
# The code below forces the function to return something in an array context...this could be dangerous as some clever
# perl programmers create those polymorphic methods that return scalars or arrays depending on how (context) they are called.
# My gut tells me that Bedrock, in general, is not going to suffer since function references being invoked here are typically
# BLMs and they are usually far from clever.
#
	my @ref_v = $funcref->($obj, @args);
	my $v;
	if (@ref_v > 1) {
	  $v = \@ref_v;
	}
	else {
	  $v = $ref_v[0];
	}
#	my $v = $funcref->($obj, @args);
	&log_message( undef, "$self: Function call returned [$v]" ) if $Verbose;
	return $v;
    }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.9  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.8  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.7  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.6  2001/01/22 21:44:00  sridhar
# Bug fix: invoking a method on an unblessed ARRAY or HASH was returning
# a junk value due to falling off the end of the function.
#
# Revision 1.5  2000/09/25 18:32:51  sridhar
# Passing verbose settings to function arguments to debug more
# effectively
#
# Revision 1.4  2000/08/25 20:44:02  sridhar
# Patch for being able to invoke methods on scalars by constructing a
# bedrock scalar object.
#
# Revision 1.3  2000/06/21 16:06:13  sridhar
# 1. Making sure eval returns a reference before trying to invoke a method
# on it.
# 2. More logging
#
# Revision 1.2  2000/06/06 20:02:37  sridhar
# 1. More log messages
# 2. Bug fix -- if a method is not supported by an object, just logs a
# message and returns
#
# Revision 1.1  2000/06/01 18:38:10  sridhar
# Adding support for invocation of object methods.
#
