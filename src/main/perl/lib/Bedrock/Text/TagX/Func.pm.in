#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Func;

use strict;

BEGIN
  {
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
  }

use TagX::Log;
use TagX::Scalar;

my $Verbose;

sub new
  {
    my $class = shift;
    my $self = bless [], $class;
    @{$self} = @_;
    $self;
  }

sub verbose
  {
    my $self = shift;
    if ( @_ ) {
      $Verbose = shift;
    }
    $Verbose;
  }

sub eval
  {
    my $self = shift;
    &log_message( undef, "$self: begin eval with @{[scalar(@{$self})]} items: (@{$self})" )
      if $Verbose;

    my ($var, $func) = @{$self}[0,1];
    my $obj = $var->eval( @_ );
    &log_message( undef, "$self: $var evaluated to [$obj]" ) if $Verbose;

    # Create a scalar object if we do have a scalar
    unless ( ref( $obj ) ) {
      $obj = TagX::Scalar->new( $obj );
      &log_message( undef, "$self: Created object with scalar: [$obj]" ) if $Verbose;
    }

    my $ref = ref( $obj );

    #
    # What happens when the object being parsed in order to invoke a
    # method is not an object that can invoke the method?  
    #
    # I think there are two choices here, either die or return
    # undef...which is not what Jay's original code did.
    #
    # The code previously would return nothing, hence callers who
    # invoked eval thusly:
    #
    # push @args, $term->eval( @_ );
    #
    # ...pushed nothing onto, @args, i.e. an empty array, which is to
    # say @args may now be "unbalanced".  Turns out that will through
    # Bedrock parsing out the window if, for example we were expected
    # to get a value for the left hand side of an expression (the <if>
    # or <while> tags come to mind...
    #
    # this may have been just a bug, OTOH, when the method is just not
    # found it is still possible the class provides an implementation
    # via AUTOLOAD
    # 
    # Bedrock 2.3.0 - being the compatibility busting version that it
    # is, will fix this behavior once and for all.
    #
    # 1. If the object is a HASH or ARRAY, then clearly this is stupid:
    #    $obj.func()
    #
    # 2. If the object is a class and it hasn't advertised that it
    #    'can' invoke the method, then we'll still try to invoke the
    #    method and die with an appropriate error if that doesn't work.
    #
    # In case you want to second guess this decision, consider the
    # alternative.  You'll never know that your Bedrock statement had
    # a typo.
    #
    #   <null $foo.sav($this)>
    #
    # which should have been:
    #
    #   <null $foo.saved($this)>
    #
    # will merrily do nothing except perhaps log a message in a log
    # you'll never look at.
    die "Can't call a method of a scalar object."
      unless $ref;

    my $funcref; 
    $funcref = $obj->can( $func );

    unless ( $funcref ) {
      &log_message( undef, "$self: unsupported function ($func)" );
    }
      
    my @args = @{$self};
    shift @args; shift @args;
    &log_message( undef, "$self: Arguments to $func() are (@args)" ) 
      if $Verbose;

    for (@args) {
      if ( $Verbose ) {
	$_->verbose($Verbose);
	my $value = $_->eval( @_ );
	$_->verbose(0);
	$_ = $value;
      } else {
	$_ = $_->eval( @_ );
      }
    }

    if ( $Verbose ) {
      local $" = ", ";
      &log_message( undef, "$self: Invoking $obj->$func(@args)" );
    }
    #
    #
    # Rob's Bedrock hack...
    # Well, Jay was right...Bedrock is JUNK! Damn useful junk, but junk none-the-less...
    #
    # Okay, we're trying to execute a method on an object, but it doesn't like to be called in a scalar context...say
    # IO::File->getlines for example...
    #
    # The code below forces the function to return something in an array context...this could be dangerous as some clever
    # perl programmers create those polymorphic methods that return scalars or arrays depending on how (context) they are called.
    # My gut tells me that Bedrock, in general, is not going to suffer since function references being invoked here are typically
    # BLMs and they are usually far from clever.
    # 
    # so instead of doing just...
    #	my $v = $funcref->($obj, @args);
    # we'll do...
    #
    my @ref_v;
    my $v;

    if ( $funcref ) {
      @ref_v= $funcref->($obj, @args);
    } else {
      &log_message( undef, "$self: eval function in case implemented via AUTOLOAD\n\@ref_v = $obj->$func(\@args);");

      eval '@ref_v = $obj->' . $func . '(@args);';
      die "$@"
	if $@;
    }

    if ( @ref_v > 1) {
      $v = Bedrock::Array->new( @ref_v );
    } else {
      $v = $ref_v[0];
    }
    
    &log_message( undef, "$self: Function call returned [$v]" ) 
      if $Verbose;
    return $v;
  }

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.14  2011/09/14 19:02:37  eutl420
# - die if trying to invoke method of a scalar
#
# Revision 1.13  2011/09/10 15:52:47  eutl420
# - die on malformed method invocations. We now eval the method call as a last resort in the event the method call
#   is being implemented in an AUTOLOAD function.
#
# Revision 1.12  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.11  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.10  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.9  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.8  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.7  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.6  2001/01/22 21:44:00  sridhar
# Bug fix: invoking a method on an unblessed ARRAY or HASH was returning
# a junk value due to falling off the end of the function.
#
# Revision 1.5  2000/09/25 18:32:51  sridhar
# Passing verbose settings to function arguments to debug more
# effectively
#
# Revision 1.4  2000/08/25 20:44:02  sridhar
# Patch for being able to invoke methods on scalars by constructing a
# bedrock scalar object.
#
# Revision 1.3  2000/06/21 16:06:13  sridhar
# 1. Making sure eval returns a reference before trying to invoke a method
# on it.
# 2. More logging
#
# Revision 1.2  2000/06/06 20:02:37  sridhar
# 1. More log messages
# 2. Bug fix -- if a method is not supported by an object, just logs a
# message and returns
#
# Revision 1.1  2000/06/01 18:38:10  sridhar
# Adding support for invocation of object methods.
#
