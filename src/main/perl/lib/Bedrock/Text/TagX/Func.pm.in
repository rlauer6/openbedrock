package TagX::Func;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use parent qw{Exporter};

use Bedrock::Constants qw{:chars :booleans};
use Data::Dumper;
use English qw{-no_match_vars};
use Log::Log4perl::Level;
use Scalar::Util qw/reftype blessed/;
use TagX::Scalar;

use Role::Tiny::With;
with 'Bedrock::Logger';

our @VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless [], $class;

  @{$self} = @args;

  return $self;
}

########################################################################
sub verbose {
########################################################################
  my ($self) = @_;

  return $self->get_logger( ref $self )->level eq $DEBUG;
}

########################################################################
sub eval {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @function_args ) = @_;

  my $logger = $self->get_logger( ref $self );

  $logger->debug(
    sub {
      return sprintf 'begin eval with %s items: %s items: (%s)',
        @{ [ scalar @{$self} ] }, @{$self};
    }
  );

  my ( $var, $func ) = @{$self}[ 0, 1 ];

  my $obj = $var->eval(@function_args);

  $logger->debug( sprintf '%s evaluated to [%s]', $var, $obj );

  # Create a scalar object if we do have a scalar
  if ( !ref $obj ) {
    $obj = TagX::Scalar->new($obj);

    $logger->debug( sprintf 'Created object with scalar: [%s]', $obj );
  }

  #
  # What happens when the object being parsed in order to invoke a
  # method is not an object that can invoke the method?
  #
  # I think there are two choices here, either die or return
  # undef...which is not what Jay's original code did.
  #
  # The code previously would return nothing, hence callers who
  # invoked eval thusly:
  #
  # push @args, $term->eval( @_ );
  #
  # ...pushed nothing onto, @args, i.e. an empty array, which is to
  # say @args may now be "unbalanced".  Turns out that will throw
  # Bedrock parsing out the window if, for example we were expected
  # to get a value for the left hand side of an expression (the <if>
  # or <while> tags come to mind...
  #
  # this may have been just a bug, OTOH, when the method is just not
  # found it is still possible the class provides an implementation
  # via AUTOLOAD
  #
  # Bedrock 2.3.0 - being the compatibility busting version that it
  # is, will fix this behavior once and for all.
  #
  # 1. If the object is a HASH or ARRAY, then clearly this is stupid:
  #    $obj.func()
  #
  # 2. If the object is a class and it hasn't advertised that it
  #    'can' invoke the method, then we'll still try to invoke the
  #    method and die with an appropriate error if that doesn't work.
  #
  # In case you want to second guess this decision, consider the
  # alternative.  You'll never know that your Bedrock statement had
  # a typo.
  #
  #   <null $foo.sav($this)>
  #
  # which should have been:
  #
  #   <null $foo.save($this)>
  #
  # will merrily do nothing except perhaps log a message in a log
  # you may never look at.

  my $funcref;

  if ( blessed $obj ) {
    $funcref = $obj->can($func);
  }

  if ( !$funcref ) {
    # let's provide a universal Bedrock Object reftype?, iow, every Bedrock object can 'reftype'.
    if ( $func eq 'reftype' ) {
      return reftype($obj);
    }
    else {
      $logger->debug(
        sprintf
          'warning! unsupported function (%s...if not handled by AUTOLOAD...error',
        $func
      );
    }
  }

  my @args = @{$self};
  shift @args;
  shift @args;

  $logger->debug(
    sub {
      return sprintf 'Arguments to %s() are (%s)', $func, join $COMMA, @args;
    }
  );

  my @funcargs;

  for (@args) {
    my $value = $_->eval(@function_args);
    push @funcargs, ref $value eq 'Bedrock::List' ? $value->list : $value;

  }

  $logger->debug( sprintf 'Invoking %s->%s(%s)',
    $obj, $func, join $COMMA, @args );

  #
  #
  # Rob's Bedrock hack...
  # Well, Jay was right...Bedrock is JUNK! Damn useful junk, but junk none-the-less...
  #
  # Okay, we're trying to execute a method on an object, but it doesn't
  # like to be called in a scalar context...say IO::File->getlines for
  # example...
  #
  # The code below forces the function to return something in an array
  # context...this could be dangerous as some clever Perl programmers
  # create those polymorphic methods that return scalars or arrays
  # depending on how (context) they are called.  My gut tells me that
  # Bedrock, in general, is not going to suffer since function
  # references being invoked here are typically BLMs and they are
  # usually far from clever.
  #
  # so instead of doing just...
  #	my $v = $funcref->($obj, @args);
  # we'll do...
  #
  my @ref_v;
  my $v;

  if ($funcref) {
    @ref_v = $funcref->( $obj, @funcargs );
  }
  else {
    $logger->debug(
      sub {
        return
          sprintf
          'eval function in case implemented via AUTOLOAD: %s = %s->%s(%s)',
          $obj, $func, join $COMMA, @args;
      }
    );

    eval '@ref_v = $obj->' . $func . '(@funcargs);';  ## no critic (RequireInterpolationOfMetachars, ProhibitStringyEval)

    if ($EVAL_ERROR) {
      if ( $EVAL_ERROR =~ /TagX::Scalar/xsm ) {
        $logger->debug( sub { return Dumper [ $obj, $func ] } );
        die
          "attempt to invoke possibly non-existent method ($func) on a possibly non-existent scalar\n";
      }
      else {
        die "$EVAL_ERROR\n";
      }
    }
  }

  if ( @ref_v > 1 ) {
    $v = Bedrock::List->new(@ref_v);
  }
  else {
    $v = $ref_v[0];
  }

  $logger->debug( sprintf 'Function call returned [%s]', $v );

  return $v;
}

1;

__END__
