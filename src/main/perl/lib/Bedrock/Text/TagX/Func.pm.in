#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::Func;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;

my $Verbose;

sub new
{
    my $class = shift;
    my $self = bless [], $class;
    @{$self} = @_;
    $self;
}

sub verbose
{
    my $self = shift;
    if ( @_ ) {
	$Verbose = shift;
    }
    $Verbose;
}

sub eval
{
    my $self = shift;
    &log_message( undef, "$self: begin eval with @{[scalar(@{$self})]} items: (@{$self})" )
	if $Verbose;

    my ($var, $func) = @{$self}[0,1];
    my $obj = $var->eval( @_ );
    &log_message( undef, "$self: $var evaluated to [$obj]" ) if $Verbose;
    my $ref = ref( $obj );
    if ( $ref eq 'HASH' ) {
	&log_message( undef, "$self: unsupported function ($func)" );
    } elsif ( $ref eq 'ARRAY' ) {
	&log_message( undef, "$self: unsupported function ($func)" );
    } else {
	my $funcref = $obj->can( $func );
	unless ( $funcref ) {
	    &log_message( undef, "$self: unsupported function ($func)" );
	    return;
	}
	my @args = @{$self};
	shift @args; shift @args;
	&log_message( undef, "$self: Arguments to $func() are (@args)" ) if $Verbose;
	for (@args) {
	    $_ = $_->eval( @_ );
	}
	if ( $Verbose ) {
	    local $" = ", ";
	    &log_message( undef, "$self: Invoking $obj->$func(@args)" );
	}
	return $funcref->($obj, @args);
    }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.2  2000/06/06 20:02:37  sridhar
# 1. More log messages
# 2. Bug fix -- if a method is not supported by an object, just logs a
# message and returns
#
# Revision 1.1  2000/06/01 18:38:10  sridhar
# Adding support for invocation of object methods.
#
