#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::Scalar;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;

sub new
{
    my $class = shift;
    my $scalar = shift;
    bless \$scalar, $class;
}

sub chr		{my $self = $_[0]; return chr($$self)}
sub crypt	{my $self = $_[0]; return crypt($$self, $_[1])}
sub lc		{my $self = $_[0]; return lc($$self)}
sub lcfirst	{my $self = $_[0]; return lcfirst($$self)}
sub uc		{my $self = $_[0]; return uc($$self)}
sub ucfirst	{my $self = $_[0]; return ucfirst($$self)}
sub reverse	{my $self = $_[0]; return scalar reverse($$self)}
sub format	{my $self = $_[0]; return sprintf($_[1], $$self)}

sub substr
{
    my $self = shift;
    my $offset = shift;
    my $len = shift;
    if ( defined($len) ) {return substr($$self, $offset, $len)}
    else {return substr($$self, $offset)}
}

sub replace
{
    my $self = shift;
    my $pat = shift;
    my $repl = shift;
    my $flags = shift;

    if ( defined( $flags ) ) {
	# sort flag chars, eliminate dups
	$flags = join '', sort split '', $flags;
	$flags =~ s/(.)\1{1,}/$1/g;

	if ( $flags eq 'gim' ) {
	    $$self =~ s/$pat/$repl/gim;
	} elsif ( $flags eq 'gi' ) {
	    $$self =~ s/$pat/$repl/gi;
	} elsif ( $flags eq 'im' ) {
	    $$self =~ s/$pat/$repl/im;
	} elsif ( $flags eq 'gm' ) {
	    $$self =~ s/$pat/$repl/gm;
	} elsif ( $flags eq 'g' ) {
	    $$self =~ s/$pat/$repl/g;
	} elsif ( $flags eq 'i' ) {
	    $$self =~ s/$pat/$repl/i
	} elsif ( $flags eq 'm' ) {
	    $$self =~ s/$pat/$repl/m;
	}
    } else {
	$$self =~ s/$pat/$repl/;
    }
    $$self;
}

sub split
{
    my $self = shift;
    my $pat = shift;
    my $max = shift;
    $pat = '\s+' unless defined $pat;
    my @a;
    if ( defined($max) ) {
	@a = split /$pat/, $$self, $max;
    } else {
	@a = split /$pat/, $$self;
    }
    return \@a;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.2  2000/08/31 17:21:29  sridhar
# Added method `split()' for splitting a string into an array of
# strings. Pattern defaults to white-space.
#
# Revision 1.1  2000/08/25 20:40:10  sridhar
# New module implementing operations on scalars in Bedrock.
#
#
