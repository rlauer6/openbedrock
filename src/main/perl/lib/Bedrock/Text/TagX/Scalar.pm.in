#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Scalar;

use strict;
use POSIX;

use Bedrock::BedrockJSON;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use Bedrock::Array;
use Bedrock::Text::URLEncode;
use MIME::Base64;
use Digest::SHA;

sub new {
  my $class  = shift;
  my $scalar = shift;
  bless \$scalar, $class;
}

sub length { CORE::length( ${ $_[0] } ); }
sub chomp { my $self = $_[0]; my $tmp = $$self; chomp $tmp; return $tmp; }
sub chr     { my $self = $_[0]; return chr($$self) }
sub crypt   { my $self = $_[0]; return crypt( $$self, $_[1] ) }
sub lc      { my $self = $_[0]; return lc($$self) }
sub lcfirst { my $self = $_[0]; return lcfirst($$self) }
sub uc      { my $self = $_[0]; return uc($$self) }
sub ucfirst { my $self = $_[0]; return ucfirst($$self) }
sub reverse { my $self = $_[0]; return scalar reverse($$self) }
sub format  { my $self = $_[0]; return sprintf( $_[1], $$self ) }
sub sprintf { my $self = shift; return sprintf( $$self, @_ ); }
sub eq      { my $self = $_[0]; return ( $$self == $_[1] ) }
sub gt      { my $self = $_[0]; return ( $$self > $_[1] ) }
sub lt      { my $self = $_[0]; return ( $$self < $_[1] ) }
sub le      { my $self = $_[0]; return ( $$self <= $_[1] ) }
sub ge      { my $self = $_[0]; return ( $$self >= $_[1] ) }
sub base64  { my $self = $_[0]; return encode_base64( $$self ) }


sub substr {
  my $self   = shift;
  my $offset = shift;
  my $len    = shift;
  if ( defined($len) ) { return substr( $$self, $offset, $len ) }
  else                 { return substr( $$self, $offset ) }
}

sub tr {
  my $self = shift;
  my $tmp = $$self;
  my ($a, $b) = @_;

  die "arguments must be same length\n"
    if ( $b  && CORE::length($a) != CORE::length($b));

  $b =~s|/|\\/|;
  $a =~s|/|\\/|;

  eval "\$tmp =~tr/$a/$b/";

  die $@
    if $@;

  return $tmp;
}

sub hmac_sha1   { my $self = shift; return Digest::SHA::hmac_sha1   ( $$self, shift ); }
sub hmac_sha224 { my $self = shift; return Digest::SHA::hmac_sha224 ( $$self, shift ); }
sub hmac_sha256 { my $self = shift; return Digest::SHA::hmac_sha256 ( $$self, shift ); }
sub hmac_sha384 { my $self = shift; return Digest::SHA::hmac_sha384 ( $$self, shift ); }
sub hmac_sha512 { my $self = shift; return Digest::SHA::hmac_sha512 ( $$self, shift ); }

sub replace {
  my $self  = shift;
  my $pat   = shift;
  my $repl  = shift;
  my $flags = shift;

  if ( defined($flags) ) {

    # sort flag chars, eliminate dups
    $flags = join '', sort split '', $flags;
    $flags =~ s/(.)\1{1,}/$1/g;

    if ( $flags eq 'gim' ) {
      $$self =~ s/$pat/$repl/gim;
    }
    elsif ( $flags eq 'gi' ) {
      $$self =~ s/$pat/$repl/gi;
    }
    elsif ( $flags eq 'im' ) {
      $$self =~ s/$pat/$repl/im;
    }
    elsif ( $flags eq 'gm' ) {
      $$self =~ s/$pat/$repl/gm;
    }
    elsif ( $flags eq 'g' ) {
      $$self =~ s/$pat/$repl/g;
    }
    elsif ( $flags eq 'i' ) {
      $$self =~ s/$pat/$repl/i;
    }
    elsif ( $flags eq 'm' ) {
      $$self =~ s/$pat/$repl/m;
    }
  }
  else {
    $$self =~ s/$pat/$repl/;
  }
  $$self;
}

sub split {
  my $self = shift;
  my $pat  = shift;
  my $max  = shift;
  $pat = '\s+' unless defined $pat;
  my @a;
  if ( defined($max) ) {
    @a = split /$pat/, $$self, $max;
  }
  else {
    @a = split /$pat/, $$self;
  }
  return Bedrock::Array->new(@a);
}


sub align_left {
  my $self = shift;
  my $cols = shift;

  CORE::sprintf( "%-" . $cols . "s", $$self );
}

sub align_center {
  my $self = shift;
  my $cols = shift;

  my $nspaces = $cols - CORE::length($$self);
  return CORE::sprintf( "%." . $cols . "s", $$self ) if $nspaces <= 0;
  my $padding = ' ' x ( $nspaces / 2 );
  CORE::sprintf( $padding . "%s" . $padding . ( $nspaces % 2 ? ' ' : '' ), $$self );
}

sub align_right {
  my $self = shift;
  my $cols = shift;

  CORE::sprintf( "%" . $cols . "s", $$self );
}

sub or {
  my $self = shift;
  my $val  = shift;

  return $$self or $val;
}

sub sign {
  my $self = shift;
  my $val  = shift;

  if ( $$self - $val > 0 ) {
    return 1;
  }
  elsif ( $$self - $val < 0 ) {
    return -1;
  }
  else {
    return 0;
  }
}

sub toggle {
  my $self = shift;
  my @list = @_;

  if ( @list == 1 ) {
    @list = split /\s*,\s*/, shift;
  }

  my ( $a, $b ) = @list;

  $$self = ( $$self eq $a ) ? $b : $a;
}

sub _decode {
  return $_[1]->{ $_[0] } if exists $_[1]->{ $_[0] };
  return $_[1]->{default} if exists $_[1]->{default};

  return undef;
}

sub decode {
  my $self = shift;

  if ( @_ > 1 ) {

    # if an odd number of elements, then last element is default
    if ( scalar(@_) % 2 ) {
      my $default_value = pop @_;
      push @_, 'default', $default_value;
    }
    my %lookup = @_;
    return _decode( $$self, \%lookup );
  }
  else {
    my $json = shift;
    if ( ref($json) =~ /(object|hash)/i ) {
      return _decode( $$self, $json );
    }
    elsif ( ref($json) ) {
      die "You must pass either a hash or scalar representing a JSON string.";
    }
    else {
      my $obj;
      eval { $obj = Bedrock::JSON::decode($json); };

      die "There was a problem decoding your JSON string ($json) - $@."
      if $@;
      return _decode( $$self, $obj );
    }
  }
}

sub json {
  my $self = shift;
  my $json = JSON->new;

  $json->loose(JSON::true);
  $json->relaxed(JSON::true);

  my $data = $json->decode($$self);

  if ( ref($data) =~ /HASH/ ) {
    $data = Bedrock::Hash->new(%$data);
  }
  elsif ( ref($data) =~ /ARRAY/ ) {
    $data = Bedrock::Array->new(@$data);
  }

  $data;
}

sub align {
  my $self  = shift;
  my $l_c_r = shift;

  for ($l_c_r) {
    /left/i   and return $self->align_left(@_);
    /center/i and return $self->align_center(@_);
    /right/i  and return $self->align_right(@_);
  }
}

sub rtrim {
  my $self = shift;
  my $s    = $$self;
  $s =~ s/\s+$//;
  $s;
}

sub ltrim {
  my $self = shift;
  my $s    = $$self;
  $s =~ s/^\s+//;
  $s;
}

sub trim {
  my $self = shift;
  my $s    = $$self;
  $s =~ s/^\s*(.*?)\s*$/$1/;
  $s;
}

sub format_time {
  my $self = shift;
  my $s    = $$self;
  if ( @_ > 0 ) {
    return &POSIX::strftime( $_[0], localtime($s) );
  }
  else {
    return scalar( localtime($s) );
  }
}

sub urlencode {
  my $self = shift;
  return &Text::URLEncode::Encode($$self);
}

# returns undef = null string, 0 = string of length 0, string of length > 0
sub isEmpty {
  my $self = shift;
  return undef unless defined($$self);
  return CORE::length($$self) > 0 ? 0 : 1;
}

sub htmlencode {
  my $self = shift;

  Text::URLEncode::htmlencode($$self);

  $$self;
}

sub matches {
  my $self = shift;
  my $pattern = shift;
  my $flags = shift;

  die "invalid flags: only i,m, g or s" 
    if $flags && $flags !~/^[imsg]+$/;

  my $re;
  my $g = $flags =~s/g//;

  if ( $pattern =~/^qr/ ) {
    $re = eval $pattern;
  }
  else {
    eval "\$re = qr/\$pattern/" . $flags;
  }

  die "invalid regexp: $pattern\n$@\n"
    unless $re;

  my $result = Bedrock::Array->new;

  if ( $g ) {
    push @$result, $$self =~ /$re/g;
  }
  else {
    push @$result, $$self =~/$re/;
  }

  return $result;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.36  2012/04/11 13:13:21  eutl420
# - remove warnings when using CORE:: methods ambiguously in methods (length(), sprintf())
#
# Revision 1.35  2012/02/06 18:45:14  eutl420
# - added new method for transliterating strings (tr)
# - added new method for encoding a string as base 64 (base64)
# - added new methods for creating digests:
#   hmac_sha1, hmac_sha244, hmac_sha256, hmac_384, hmac_sha512
#
# Revision 1.34  2011/09/29 12:54:49  eutl420
# - make sure 'g' flag applies to qr// too
#
# Revision 1.33  2011/09/21 20:26:28  eutl420
# - added matches method()
# - or() method should not alter value of scalar
#
# Revision 1.32  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.31  2011/08/31 02:49:00  eutl420
# - chomp was not working as advertised.  It would return the result of chomp, not
#   the new scalar
#
# Revision 1.30  2011/08/07 16:13:25  eutl420
# - use Bedrock::BedrockJSON instead of Bedrock::JSON to avoid namespace collisions with JSON when use Bedrock; is employed
# - JSON::true, not JSON::PP::true
#
# Revision 1.29  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.28  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.27  2011/03/25 16:02:39  eutl420
# - added chomp() method for scalars
#
# Revision 1.26  2010/12/12 17:13:05  eutl420
# - use Bedrock::Text::URLEncode
#
# Revision 1.25  2010/12/06 14:16:56  rlauer
# - use Bedrock::Text::URLEncode::htmlencode instead of in-line code
#
# Revision 1.24  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.23  2010/09/30 13:02:02  rlauer
# - added sprintf method
#
# Revision 1.22  2009/12/28 23:28:12  rlauer
# use constants from JSON::PP package
#
# Revision 1.21  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.20  2009/12/26 15:38:36  rlauer
# add comment
#
# Revision 1.19  2009/12/16 23:24:29  rlauer
# use json objects for decode
#
# Revision 1.18  2009/12/15 12:41:16  rlauer
# added sign() or()
#
# Revision 1.17  2009/12/09 13:22:40  rlauer
# toggle/decode as scalar methods should alter scalar values (IMHO)
#
# Revision 1.16  2009/12/09 12:50:10  rlauer
# added json method
#
# Revision 1.15  2009/12/08 21:20:10  rlauer
# decode/toggle methods
#
# Revision 1.14  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.13  2008/02/28 18:14:42  rlauer
# Applying Rob's patches to make Bedrock work on Apache 2.x
# (plus a few other obvious bug fixes).
#
# Revision 1.9  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.8  2000/12/06 18:53:06  sridhar
# Added htmlencode() method.
#
# Revision 1.7  2000/11/29 21:01:53  sridhar
# Added method `isEmpty()'
#
# Revision 1.6  2000/10/24 17:02:38  sridhar
# Added method `urlencode()' to scalars
#
# Revision 1.5  2000/09/29 19:18:07  sridhar
# Added format_time() method to format a scalar as a timestamp using
# POSIX::strftime().
#
# Revision 1.4  2000/09/25 17:43:45  sridhar
# 1. Added methods align(), align_left(), align_center() and align_right()
# for aligning a string within a specified number of columns
# 2. Added trim(), ltrim() and rtrim() for trimming blanks at the
# beginning and the end.
#
# Revision 1.3  2000/09/11 17:41:33  sridhar
# Made the return value from split() a SIS::Array object so methods can
# be invoked on it.
#
# Revision 1.2  2000/08/31 17:21:29  sridhar
# Added method `split()' for splitting a string into an array of
# strings. Pattern defaults to white-space.
#
# Revision 1.1  2000/08/25 20:40:10  sridhar
# New module implementing operations on scalars in Bedrock.
#
#
