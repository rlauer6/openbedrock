#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::Error;

use strict;
use Carp;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

sub new
{
    my $class = shift;
    my $self = bless [], $class;
    $self->newLevel;
    $self->file(@_) if @_ == 1;
    $self;
}

use Carp;

sub newLevel
{
    my $self = shift;
    unshift @{$self}, {};
    $self->file(@_) if @_ == 1;
    $self;
}

sub endLevel
{
    my $self = shift;
    shift @{$self};
    $self;
}

sub file
{
    my $self = shift;
    $self->[0]->{'file'} = shift if @_ > 0;
    $self->[0]->{'file'};
}

sub line
{
    my $self = shift;
    $self->[0]->{'line'} = shift if @_ > 0;
    $self->[0]->{'line'};
}

sub mesg
{
    my $self = shift;
    $self->[0]->{'mesg'} = "@_" if @_ > 0;
    $self->[0]->{'mesg'};
}

sub location
{
    my $self = shift;
    my ($file, $line) = @_;
    $self->[0]->{'file'} = $file if defined($file); 
    $self->[0]->{'line'} = $line if defined($line); 
}

sub view_source
{
    my $self = shift;
    my $index = shift;
    $index = 0 unless defined($index);
    my $file = $self->[$index]->{'file'};

    local(*FILE);
    open(FILE, $file) or return '';

    my $newscan = 1;
    my $optstring = '';
    my $options_expr = '^(\s*([^>\\\\]|\\\\.)*)>';

    my $output;

  INPUT:
    while (<FILE>) {
      MAIN: {

	  #
	  # Check whether we are into a new scan or collecting options
	  # for a matched tag
	  #
	  unless ( $newscan ) {

	      # Collecting options for a matched tag -- Look for tag end which is
	      # an un-escaped '>'
	      if ( s/$options_expr//o ) {

		  # Found an un-escaped '>', which terminates the current tag and its options
		  # $optstring contains the options collected so far
		  $optstring .= $1;

		  # Remove escapes from the option string
		  $optstring =~ s/\\([^\\])/$1/g;
		  $optstring =~ s/\\\\/\\/g;

		  # And set the current object options
		  for ($optstring) {
		      s/\&/\&amp;/g;
		      s/</\&lt;/g;
		      s/>/\&gt;/g;
		  }
		  $output .= $optstring . "&gt;</span>";

		  # Start a new scan after this
		  $newscan = 1;

		  # Handle possible left over stuff after the '>'
		  redo MAIN;
	      } else {

		  # No terminating '>' in entire line -- start by reading input again
		  $optstring .= $_;
		  next INPUT;
	      }
	  }

	  # New scan from here -- scan afresh for tags.
	  # if no '<' found in line, skip line
	  unless ( s/^(.*?)<//oi ) {
	      if ( length ) {
		  for ($_) {
		      s/\&/\&amp;/g;
		      s/</\&lt;/g;
		      s/>/\&gt;/g;
		  }
		  $output .= $_;
	      }
	      next INPUT;
	  }

	  # We did find a '<' -- could be we have a possible supported tag next
	  # The text before the '<' needs to be processed.
	  if ( length($1) ) {
	      my $text = $1;
	      for ($text) {
		  s/\&/\&amp;/g;
		  s/</\&lt;/g;
		  s/>/\&gt;/g;
	      }
	      $output .= $text;
	  }

	  # Check if we have a supported tag
	  if ( s/$Text::TagX::Opentag_expr//oi ) {

	      # Yes we do
	      my $tag = $1;
	      $output .= qq(<span class="$tag">&lt;$tag);

	      # After creating object of suitable type depending on the tag, check
	      # if the tag ends on the same line. Tag ending is an un-escaped '>'.
	      if ( s/$options_expr//oi ) {

		  # The tag definition ended on same line -- all options specified on
		  # one line
		  my $options = $1;

		  # Unescape the options
		  # $options =~ s/\\([^\\])/$1/g;
		  # $options =~ s/\\\\/\\/g;

		  # And set the current object options
		  for ($options) {
		      s/\&/\&amp;/g;
		      s/</\&lt;/g;
		      s/>/\&gt;/g;
		  }
		  $output .= $options . "&gt;</span>";

		  # And rescan the string for more tags -- Note that $newscan is unchanged
		  # from its value of 1, so we don't need to set it here
		  redo MAIN;
	      } else {

		  # Tag definition did not end on one line -- Further input is consumed for
		  # looking for the tag ending
		  $newscan = 0;

		  # Start collection of the options string
		  $optstring = $_;
	      }

	  } elsif ( s/$Text::TagX::Closetag_expr//oi ) {

	      # Check whether we have hit a tag-body-ending tag
	      # and if so, end the current object
	      my $tag = $1;
	      my $class = $tag; $class =~ s/\W//g;
	      $output .= qq(<span class="$class">&lt;$tag&gt;</span>);

	      # And rescan string for more tags
	      redo MAIN;
	  } else {

	      # Unsupported tag hit -- output the '<' since we don't consume it
	      $output .= '&lt;';

	      # And rescan for more tags
	      redo MAIN;
	  }
      }
    }

    close FILE;

    my %args = @_;
    my $context_lines = $args{'context'}; $context_lines = 2 unless defined( $context_lines );
    my $compact = $args{'compact'};

    my $errline = $self->[$index]->{'line'};
    my $fd = IO::Scalar->new(\$output);
    my $line = 0;
    my $string;
    my $lower = $errline - $context_lines; $lower = 1 if $lower <= 0;
    my $upper = $errline + $context_lines;
    while ($_ = $fd->getline) {
	$line++;
	if ($line == $errline ) {
	    $string .= sprintf( "<span class='lineno'><span class='context'><span class='error'>%4s|</span></span></span>%s", $line, $_ );
	} elsif ( $line == $lower ) {
	    $string .= sprintf( "<a name='error_$index'></a><span class='lineno'><span class='context'>%4s|</span></span>%s", $line, $_ );
	} elsif ( $line >= $lower and $line <= $upper ) {
	    $string .= sprintf( "<span class='lineno'><span class='context'>%4s|</span></span>%s", $line, $_ );
	} else {
	    $string .= sprintf( "<span class='lineno'>%4s|</span>%s", $line, $_ ) unless $compact;
	}
    }
    $fd->close;

    $string = "<div class='source'>" . $string . "</div>";
    $string;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.2  2000/11/20 17:58:13  sridhar
# Add link to jump to error location
#
# Revision 1.1  2000/11/16 19:58:53  sridhar
# The error reporting module.
#
#
