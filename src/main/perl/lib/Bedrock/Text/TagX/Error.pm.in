#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Error;

use strict;
use warnings;

use Carp;
use Bedrock::Constants qw{ :regexp :booleans :chars};

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolationOfMetachars)

use parent qw{Exporter};

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless [], $class;

  $self->newLevel;

  if ( @args == 1 ) {
    $self->file(@args);
  }

  return $self;
}

########################################################################
sub newLevel {
########################################################################
  my ( $self, @args ) = @_;

  unshift @{$self}, {};

  if ( @args == 1 ) {
    $self->file(@args);
  }

  return $self;
}

########################################################################
sub endLevel {
########################################################################
  my ($self) = @_;

  shift @{$self};

  return $self;
}

########################################################################
sub file {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->[0]->{'file'} = shift @args;
  }

  return $self->[0]->{'file'};
}

########################################################################
sub line {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->[0]->{'line'} = shift @args;
  }

  return $self->[0]->{'line'};
}

########################################################################
sub mesg {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->[0]->{'mesg'} = "@args";
  }

  return $self->[0]->{'mesg'};
}

sub as_string { goto &mesg; }

########################################################################
sub location {
########################################################################
  my ( $self, $file, $line ) = @_;

  if ( defined $file ) {
    $self->[0]->{'file'} = $file;
  }

  if ( defined $line ) {
    $self->[0]->{'line'} = $line;
  }

  return;
}

########################################################################
sub view_source {
########################################################################
  my ( $self, $index, @args ) = @_;

  $index //= 0;

  my $file = $self->[$index]->{'file'};

  open my $fh, '<', $file  ## no critic (RequireBriefOpen)
    or return $EMPTY;

  my $newscan      = $TRUE;
  my $optstring    = $EMPTY;
  my $options_expr = '^(\s*([^>\\\\]|\\\\.)*)>';

  # implements a skeleton parser to create an HTML encoded source file
  my $output;

  INPUT:

  while (<$fh>) {

    MAIN: {

      #
      # Check whether we are into a new scan or collecting options
      # for a matched tag
      #
      if ( !$newscan ) {

        # Collecting options for a matched tag -- Look for tag end which is
        # an un-escaped '>'
        if (s/$options_expr//xsmo) {

          # Found an un-escaped '>', which terminates the current tag and its options
          # $optstring contains the options collected so far
          $optstring .= $1;

          # Remove escapes from the option string
          $optstring =~ s/\\([^\\])/$1/xsmg;
          $optstring =~ s/\\\\/\\/xsmg;

          # And set the current object options
          for ($optstring) {
            s/\&/\&amp;/xsmg;
            s/</\&lt;/xsmg;
            s/>/\&gt;/xsmg;
          }

          $output .= $optstring . '&gt;</span>';

          # Start a new scan after this
          $newscan = $TRUE;

          # Handle possible left over stuff after the '>'
          redo MAIN;
        }
        else {

          # No terminating '>' in entire line -- start by reading input again
          $optstring .= $_;
          next INPUT;
        }
      }

      # New scan from here -- scan afresh for tags.
      # if no '<' found in line, skip line
      if ( !s/^(?:.*?)<//xsmoi ) {

        if (length) {

          for ($_) {
            s/\&/\&amp;/xsmg;
            s/</\&lt;/xsmg;
            s/>/\&gt;/xsmg;
          }

          $output .= $_;
        }
        next INPUT;
      }

      # We did find a '<' -- could be we have a possible supported tag next
      # The text before the '<' needs to be processed.
      if ( length $1 ) {
        my $text = $1;

        for ($text) {
          s/\&/\&amp;/xsmg;
          s/</\&lt;/xsmg;
          s/>/\&gt;/xsmg;
        }

        $output .= $text;
      }

      # Check if we have a supported tag
      if (s/$OPENTAG_EXPR//oixsm) {

        # Yes we do
        my $tag = $1;
        $output .= sprintf q{<span class="%s">&lt;%s}, $tag, $tag;

        # After creating object of suitable type depending on the tag, check
        # if the tag ends on the same line. Tag ending is an un-escaped '>'.
        if (s/$options_expr//xsmoi) {

          # The tag definition ended on same line -- all options specified on one line
          my $options = $1;

          # Unescape the options
          # $options =~ s/\\([^\\])/$1/g;
          # $options =~ s/\\\\/\\/g;

          # And set the current object options
          for ($options) {
            s/\&/\&amp;/gxsm;
            s/</\&lt;/gxsm;
            s/>/\&gt;/gxsm;
          }
          $output .= $options . '&gt;</span>';

          # And rescan the string for more tags -- Note that $newscan is unchanged
          # from its value of 1, so we don't need to set it here
          redo MAIN;
        }
        else {

          # Tag definition did not end on one line -- Further input is consumed for
          # looking for the tag ending
          $newscan = $FALSE;

          # Start collection of the options string
          $optstring = $_;
        }

      }
      elsif (s/$CLOSETAG_EXPR//xsmoi) {

        # Check whether we have hit a tag-body-ending tag
        # and if so, end the current object
        my $tag = $1;

        my $class = $tag;
        $class =~ s/\W//xsmg;

        $output .= sprintf q{<span class="%s">&lt;%s&gt;</span>}, $class,
          $tag;

        # And rescan string for more tags
        redo MAIN;
      }
      else {
        # Unsupported tag hit -- output the '<' since we don't consume it
        $output .= '&lt;';

        # And rescan for more tags
        redo MAIN;
      }
    }
  }

  close $fh;

  my %args    = @args;
  my $compact = $args{'compact'};

  my $context_lines = $args{'context'};

  $context_lines //= 2;

  my $fd = IO::Scalar->new( \$output );

  my $errline = $self->[$index]->{'line'};

  # = max( 1, $errline - $context_lines);
  my $lower;
  my $upper;

  if ( defined $errline ) {
    $lower = $errline - $context_lines;

    if ( $lower <= 0 ) {
      $lower = 1;
    }

    $upper = $errline + $context_lines;
  }

  my $string;

  my $line = 0;

  while ( $_ = $fd->getline ) {
    $line++;

    # if we have an error....
    if ( defined $errline ) {

      if ( $line == $errline ) {  # error is on this line...
        $string .= sprintf
          q{<span class='lineno'><span class='context'><span class='error'>%4s|</span></span></span>%s},
          $line, $_;
      }
      elsif ( $line == $lower ) {  # ...start of error context

        $string
          .= sprintf
          q{<a name='error_%s'></a><span class='lineno'><span class='context'>%4s|</span></span>%s},
          $index, $line, $_;
      }
      elsif ( $line >= $lower and $line <= $upper ) {  # ...end of error context

        $string .= sprintf
          q{<span class='lineno'><span class='context'>%4s|</span></span>%s},
          $line, $_;
      }
    }
    else {  # ...normal line
      if ( !$compact ) {
        $string .= sprintf q{<span class='lineno'>%4s|</span>%s}, $line, $_;
      }
    }
  }

  $fd->close;

  $string = sprintf q{<div class='source'>%s</div>}, $string;

  return $string;
}

1;

__END__
