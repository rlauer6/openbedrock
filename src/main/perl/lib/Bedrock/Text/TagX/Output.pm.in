package TagX::Output::Frame;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

#
# Create new frame and store the parent output handle
#

use strict;
use warnings;

########################################################################
sub new {
########################################################################
  my ( $class, $out_handle ) = @_;

  my $self = bless {}, $class;

  $self->{out_handle} = $out_handle;

  $self->{discard} = 1;

  return $self;
}

########################################################################
sub end {
########################################################################
  my ($self) = @_;

  $self->{discard} = 0;

  return $self->{out_handle}->end_frame;
}

#
# Frame being destroyed due to unhandled exception. Remove
# me from parent's list of frames
#
########################################################################
sub DESTROY {
########################################################################
  my ($self) = @_;

  if ( $self->{discard} ) {
    $self->{out_handle}->discard_frame;
  }

  return;
}

1;

########################################################################
package TagX::Output;
########################################################################

use strict;
use warnings;

use IO::Handle;
use IO::File;
use Data::Dumper;
use Digest::MD5 qw(md5_hex);

use List::Util qw(none any);
use Scalar::Util qw(reftype blessed);

use English qw(-no_match_vars);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic

use parent qw(Exporter);

########################################################################
sub new {
########################################################################
  my ( $class, $file_or_handle ) = @_;

  my $self = bless {}, $class;

  if ( ref $file_or_handle ) {
    my $cond = eval { $file_or_handle->can('print') };

    if ( $EVAL_ERROR or not $cond ) {
      $self->{Handle} = IO::Handle->new_from_fd( $file_or_handle, 'w' );
    }
    else {
      # is probably IO:: or Apache::
      $self->{Handle} = $file_or_handle;
    }
  }
  else {
    # is a file
    $self->{Handle} = IO::File->new( $file_or_handle, 'w' );
  }

  die "$class: could not create output handle for print() from [$file_or_handle]"
    if !defined $self->{Handle};

  return $self;
}

########################################################################
sub header {
########################################################################
  my ( $self, @args ) = @_;

  if ( $args[0] ) {
    $self->{__header} = $args[0];
  }

  return $self->{__header};
}

# Make a new frame -- from now on all print data goes to this
# frame
########################################################################
sub create_frame {
########################################################################
  my ($self) = @_;

  my $frame = TagX::Output::Frame->new($self);

  push @{ $self->{buffers} }, q{};

  return $frame;
}

# Discard the data from the last frame due to unhandled exception
########################################################################
sub discard_frame {
########################################################################
  my ($self) = @_;

  return
    if !$self->{buffers};

  pop @{ $self->{buffers} };

  return
    if @{ $self->{buffers} };

  delete $self->{buffers};

  return;
}

# Delete data in frame
########################################################################
sub empty_frame {
########################################################################
  my ($self) = @_;

  if ( $self->{buffers} ) {
    $self->{buffers}->[-1] = q{};
  }

  return;
}

# Done successfully with current frame -- Append current frame's data
# to previous frame
########################################################################
sub end_frame {
########################################################################
  my ($self) = @_;

  return
    if !$self->{buffers};

  my $data = pop @{ $self->{buffers} };

  if ( !@{ $self->{buffers} } ) {
    delete $self->{buffers};
  }

  return $self->print($data);
}

# Return data for specified frame. Return last frame data if none
# specified
########################################################################
sub frame_data {
########################################################################
  my ( $self, @args ) = @_;

  return
    if !$self->{buffers};

  my $frame = @args ? $args[0] : -1;

  return $self->{buffers}->[$frame];
}

########################################################################
sub dump_state {
########################################################################
  my ( $self, @args ) = @_;

  my $mesg = shift @args;

  warn sprintf "%s\nNumber of frames: %d\n", $mesg, scalar @{ $self->{buffers} };

  my $i = 0;

  warn sprintf "Frame %d\n{%s}\n", ++$i, $_ for @{ $self->{buffers} };  ## no critic

  return;
}

########################################################################
sub print_header {
########################################################################
  my ($self) = @_;

  my $header = delete $self->{__header};

  return $header->print_header( $self->{Handle} );
}

# Append data to the last frame; if no frames, output it
########################################################################
sub print {  ## no critic
########################################################################
  my ( $self, @args ) = @_;

  return
    if !@args;

  @args = grep {defined} @args;

  if ( $self->{buffers} ) {
    $self->{buffers}->[-1] .= @args ? join q{}, @args : q{};

    return;
  }

  my $header = $self->{__header};

  my $handle = $self->{Handle};

  local $LIST_SEPARATOR = q{};

  my $content = "@args";

  my $caching_enabled = can_cache_page($handle);

  my $etag;

  if ($header) {
    my $obj = tied %{$header};

    my $output = $obj->{output};

    if ($caching_enabled) {
      $etag = md5_hex($content);
      $header->set( Etag => $etag );
    }

    $self->print_header;

    return
      if $output && ( $output->{location} || $output->{Location} );
  }

  $handle->print($content);

  return
    if !$caching_enabled;

  my $redis = $handle->redis();

  return $redis->cache_page( $etag, $content );
}

########################################################################
sub can_cache_page {
########################################################################
  my ($handle) = @_;

  return
    if !$ENV{SERVER_NAME};  # no caching when not running in a web context

  return
    if !blessed $handle || !$handle->can('redis') || !$handle->redis();

  my $redis = $handle->redis();

  return $redis->can_cache_page( $ENV{REQUEST_URI} );
}

1;
