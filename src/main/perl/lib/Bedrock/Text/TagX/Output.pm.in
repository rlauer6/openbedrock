#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Output::Frame;

#
# Create new frame and store the parent output handle
#
sub new {
  my ( $class, $out_handle ) = @_;
  my $self = bless {}, $class;
  $self->{'out_handle'} = $out_handle;
  $self->{'discard'}    = 1;
  $self;
}

sub end {
  my $self = shift;
  $self->{'discard'} = 0;
  $self->{'out_handle'}->end_frame;
}

#
# Frame being destroyed due to unhandled exception. Remove
# me from parent's list of frames
#
sub DESTROY {
  my $self = shift;

  $self->{'out_handle'}->discard_frame
    if $self->{'discard'};
}

1;

package TagX::Output;

use strict;
use IO::Handle;
use IO::File;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

sub new {
  my $class          = shift;
  my $file_or_handle = shift;

  my $self = bless {}, $class;

  if ( ref($file_or_handle) ) {
    my $cond = eval { $file_or_handle->can('print') };

    if ( $@ or not $cond ) {
      $self->{'Handle'} = IO::Handle->new_from_fd( $file_or_handle, 'w' );
    }
    else {
      # is probably IO:: or Apache::
      $self->{'Handle'} = $file_or_handle;
    }
  }
  else {

    # is a file
    $self->{'Handle'} = IO::File->new( $file_or_handle, 'w' );
  }

  die "$class: could not create output handle for print() from [$file_or_handle]"
    unless defined( $self->{'Handle'} );

  $self;
}

sub header {
  my $self = shift;
  $self->{'__header'} = shift if @_ == 1;
  $self->{'__header'};
}

#
# Make a new frame -- from now on all print data goes to this
# frame
#
sub create_frame {
  my $self  = shift;
  my $frame = TagX::Output::Frame->new($self);
  push @{ $self->{'buffers'} }, '';
  $frame;
}

#
# Discard the data from the last frame due to unhandled exception
#
sub discard_frame {
  my $self = shift;
  if ( $self->{'buffers'} ) {
    pop @{ $self->{'buffers'} };
    delete $self->{'buffers'} unless @{ $self->{'buffers'} } > 0;
  }
}

#
# Delete data in frame
#
sub empty_frame {
  my $self = shift;
  $self->{'buffers'}->[-1] = '' if $self->{'buffers'};
}

#
# Done successfully with current frame -- Append current frame's data
# to previous frame
#
sub end_frame {
  my $self = shift;
  
  if ( $self->{'buffers'} ) {
    my $data = pop @{ $self->{'buffers'} };
    
    delete $self->{'buffers'}
      unless @{ $self->{'buffers'} } > 0;
    
    $self->print($data);
  }
}

#
# Return data for specified frame. Return last frame data if none
# specified
#
sub frame_data {
  my $self = shift;
  return undef unless $self->{'buffers'};
  return $self->{'buffers'}->[ @_ == 1 ? shift : -1 ];
}

sub dump_state {
  my $self = shift;
  my $mesg = shift;
  warn "$mesg\nNumber of frames: ", scalar( @{ $self->{'buffers'} } ), "\n";
  for ( my $i = 0 ; $i < scalar( @{ $self->{'buffers'} } ) ; $i++ ) {
    warn "Frame ", $i + 1, "\n{$self->{'buffers'}->[$i]}\n";
  }
}

sub print_header {
  my $self = shift;

  my $header = delete $self->{'__header'};
  $header->print_header( $self->{'Handle'} );
}

#
# Append info to the last frame; if no frames, output it
#
sub print {
  my $self = shift;
  return unless @_;

  my $output;

  if ( $self->{'buffers'} ) {
    $self->{'buffers'}->[-1] .= "@_";
  }
  else {
    my $header = $self->{'__header'};

    if ($header) {
      my $obj = tied( %{$header} );
      $output = $obj->{'output'};

      $self->print_header;
    }

    # don't bother writing output if we're just redirecting!
    unless ( $output && $output->{location} || $output->{Location} ) {
      $self->{'Handle'}->print(@_);
    }
  }
}

1;
