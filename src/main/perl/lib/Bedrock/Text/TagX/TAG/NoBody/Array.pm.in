#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Array;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @INC);
  @ISA = qw (Exporter);
}

use TagX::Log;
use TagX::TAG::NoBody;
use Symbol;

use Bedrock::Array;
use Bedrock::XML;
use Bedrock::BedrockJSON;

use Data::Dumper;

@ISA = qw (TagX::TAG::NoBody);

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = ( 'json'        => undef,
                  'bedrock-xml' => undef,
                  'define-var'  => undef,
                  'expand-args' => undef,
                  'expand-all'  => undef,
                  'expand'      => undef,
                  'handle'      => undef,
		  'file'        => undef,
		  'list'        => undef,
		  'recordset'   => undef
                );

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  $self->dump_options( \%options ) if $verbose;

  my $name = $options{'define-var'} || '_';
  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $tag_opts->{name} ) {
    shift @argv;
    $name = $tag_opts->{name};
  }

  my $obj;

  if ( exists $options{'handle'} || exists $options{file} ) {
    if ( exists $options{'handle'} ) {
      if ( @argv != 1 || !( -r $argv[0] || $argv[0]->can('getline') ) )   {
	die "Use only 1 argument with --handle option and must be a handle.\n";
      }
    }

    my $fh = $argv[0];
    
    unless ( ref( $fh ) ) {
      my $file = $tx->find_file( $fh, undef, "." );
      unless ( $file && -s $file ) {
	die "error: can't read [$fh]. Either it does not exist or is empty\n";
      }
      
      $fh = new IO::File;
      $fh->open("<$file");
    }
    
    die "Could not open file ( $argv[0] ) for reading."
      unless $fh && ( (-r $fh ) || $fh->can('getline'));

    $obj = new Bedrock::Array;

    while (<$fh>) {
      chomp;
      $obj->push($_);
    }
  }
  elsif ( $options{'bedrock-xml'} ) {
    $obj = Bedrock::XML->newFromString( join( '', @argv ) );
  }
  elsif ( $options{'json'} ) {
    my $json_string = join( '', @argv );
    $obj = Bedrock::JSON::decode($json_string);
  }
  elsif (    exists $options{'expand-args'}
          || exists $options{'expand-all'}
          || exists $options{'expand'} )
    {
      my @list;
      foreach (@argv) {
      ( UNIVERSAL::isa( $_, 'ARRAY' ) ) ? push @list, @$_ : push @list, $_;
    }
      $obj = Bedrock::Array->new(@list);
    }
  else {
    $obj = Bedrock::Array->new(@argv);
  }

  die "Not an array definition ([@argv]).\n"
    unless ( UNIVERSAL::isa( $obj, 'ARRAY' ) );

  $obj = new Bedrock::RecordSet( $obj ) 
    if $options{recordset};

  bless $obj, 'Bedrock::List'
    if $options{list};

  $tx->{'VARS'}->{$name} = $obj;

  return $obj;
}

=head1 TAG - C<E<lt>arrayE<gt>>

=head1 PURPOSE

Create a Bedrock array.

=head1 SYNTAX

 <array:[array name] [options] expression ...>

=head1 DESCRIPTION

Creates a Bedrock array from the expression contained in the tag.  The
expression can be a simple list of scalars, a list of expressions or
the return value from a method call.

Bedrock arrays have a host of interesting methods and can be iterated
over using the C<foreach> tag.

=head1 OPTIONS

 --bedrock-xml
 --define-var = "var-name"
 --expand-args
 --json
 --recordset

=over 5

=item --bedrock-xml

Indicates that the argument is a Bedrock XML object.  It must
evaluate to an array.

 <array:foo --bedrock-xml "<array\><scalar\>foo</scalar\></array\>">

=item --define-var

Name of the array to create.

=item --expand-args

All objects in the list that are array objects will be expanded into a list.

  <array:foo 1 2 3 4>
  <array:bar --expand-args $foo>
  <array:params --expand-args $input.keys() $input.values()>

=item --json

Consider the argument(s) to be a JSON string to convert to an internal
array representation.

Note that Bedrock will join the arguments and consider them one string
when decoding the string as a JSON object.  That means you can include
Bedrock objects in the JSON string without resorting to concatenation
using the '+' operator.

 <array:that woohoo woohoo2>

 <array:foo --json '["this",' $that.json() ',"another"]' >

 <pre>
 <var $foo --json>
 </pre>

 <array:foo --json ('["this",'+$that.json()+',"another"]') >

 <pre>
 <var $foo --json>
 </pre>

=item --recordset

Creates a recordset object from the array.

=back

=head1 METHODS

=head2 bedrock_xml

 bedrock_xml( options )

Output the object as a Bedrock XML string.  Generally speaking you may
not find this method useful for arrays if the ultimate goal is to
deserialize a Bedrock object for later use as a Bedrock XML file.
Recall that valid Bedrock XML files must have a root element that is
an hash (C<E<lt>objectE<gt>>).

You can use the deserialized version of an array internally or to
transmit as an result of a GET operation for example (assuming the
client is expecting Bedrock XML).

 <null:foo red green blue>

 <null:serialized $foo.bedrock_xml()> 

 <null:deserialized --bedrock-xml $serialized>
 <trace --output $serialized $deserialized>

If you want to store the array in a Bedrock XML file then first store
the array in a hash and serialize the hash using the hashE<039>s
C<bedrock_xml()> method.

 <hash:foo foo $foo>
 <plugin:FileIO "foo.xml" "w">
 <null $FileIO.print( $foo.bedrock_xml() )>

=head2 get

 get( index )

Retrieve an element from the array based on the given index.

 <var $foo.get(0)>

=head2 grep

 grep( string|regexp )

Return an array of elements that match the given string or regular expression.  

If the argument is of the form C<qr/.../> then the string will be
treated as a quoted regular expression.

Return all elements of foo that start with "a"

  <null:foo_sub_set $foo.grep("qr/^a/i")>

Return all element of foo that match "foo"

  <null:foo_sub_set $foo.grep("foo")>

=head2 isEmpty I<deprecated>

Returns false if length of array is 0.

 <if $array.isEmpty()>  <=>  <if $array.length() --eq "0">

Note: This method may not appear in future versions of Bedrock.  Use C<length()>.

=head2 join

 join( string )

Returns a string that is the result of joining elements of the array with the given string.

 <var $array.join("\<br\>")>

=head2 json

Returns the JSON representataion of the array.

 <var $array.json()>

=head2 length

Returns the length of the array.

=head2 map

 map( format )

Returns an array that is the result of using the C<sprintf> style
format string given as the argument to C<map> with each value of the
array as an argument to C<sprintf>.  

  <null:temp $foo.map("%5.2f")>

Functionally equivalent to:

  <null:format "%5.2f"> <- create a format string
  <null:array:temp>     <- create an array to hold result

  <foreach $foo>
   <null $temp.push($_.format($format))>
  </foreach>

=head2 matches

 matches( pattern, [flags] )

Returns a Bedrock containing the matches based on the pattern given.  C<flags> can be any of:

=over 5

=item i

Ignore case.

=item m

Treat string as multiple lines.

=item s

Treat string as single line.

=item g

Global matching.  Bedrock will iterate over each member of the array
looking for as many matches as possible.  In other words, you may get
multiple matches per member.

Consider:

  <null:foo rob ROBERT bobbie>

  ---- non-global array
  array:
  <null:results $foo.matches("([rb][^ ])", "i")>
  <trace --output $results>
  
  ---- global array
  array:
  <null:results $foo.matches("([rb][^ ])", "ig")>
  <trace --output $results>

...would produce

  ---- non-global array
  
  array:
  [
    [0] .. (rob)
    [1] .. (ROBERT)
    [2] .. (bobbie)
    ]
  
  
  ---- global array
  
  array:
  [
    [0] .. (ro)
    [1] .. (RO)
    [2] .. (BE)
    [3] .. (RT)
    [4] .. (bo)
    [5] .. (bb)
    ]

=back

=head2 pop

 pop()

Remove the last element from the array and return.

 <null:foo $array.pop()>

=head2 push

 push( arg )

Add an element to the front of the array.

 <null $array.push( $input.foo ) >

=head2 recordset

 recordset()

Return a Bedrock recordset object from the array.  The array must be an array of hashes.

 <null:rs $array.recordset()>

=head2 reverse

 reverse()

Return an array in reverse order.  Note this does not alter the original object!

 <null:reverse $array.reverse()>

=head2 set

 set( index, arg )

Assign the specified element of the array to the given value.
 
 <null $array.set(0, "foo")>

=head2 sort

 sort( [dir], [type] )

By default returns an alphabetic sort in ascending order.

  <null:sorted $foo.sort()>

The sort order and type can be changed by passing the appropriate arguments
(see below).

=head3 Examples

 <null:foo 01 0100 3 5 7 8 3 7 4 >

=over 5

=item Ascending, lexical (default)

 <var --json $foo.sort()>

=item Descending, lexical

 <var --json $foo.sort('desc')>

=item Ascending, numeric

 <var --json $foo.sort('asc', 'numeric')>

=item Descending, numeric

 <var --json $foo.sort('desc', 'numeric')>

=back

=head2 shift

Remove and return an element from the front of the array.

=head2 splice

Equivalent to the perl C<splice> function...from the perldocs...

I<Removes the elements designated by OFFSET and LENGTH from an array,
and replaces them with the elements of LIST, if any.  In list context,
returns the elements removed from the array.  In scalar context,
returns the last element removed, or "undef" if no elements are
removed.  The array grows or shrinks as necessary.  If OFFSET is
negative then it starts that far from the end of the array.  If LENGTH
is omitted, removes everything from OFFSET onward.  If LENGTH is
negative, removes the elements from OFFSET onward except for -LENGTH
elements at the end of the array.  If both OFFSET and LENGTH are
omitted, removes everything. If OFFSET is past the end of the array,
perl issues a warning, and splices at the end of the array.>

This implementation does not include the scalar context functionality, however.

=head2 unshift

Add an element to the front of the array.

=head2 xml

 xml( options )

Output the object as an XML document.  See the documentation regarding
XML conversion in the C<E<lt>varE<gt>> tag.

=over 5

=item options

A list of key/value pairs of options as documented in the perl module C<XML::Simple>.

=back

=head1 EXAMPLE

=over 5

=item * Create an array from a simple list

 <array:foo 1 2 3 4 5 6>
 <array --define-var="foo" 1 2 3 4 5>

=item * Create an array by decoding a JSON string

 <array:foo --json '[1,2,3,4,5]'>

=item * Create an array as the output from a method

 <array:foo $obj.method()>

=back

=head1 SEE ALSO

C<E<lt>nullE<gt>>, C<E<lt>foreachE<gt>>, C<E<lt>hashE<gt>>, C<E<lt>recordsetE<gt>>

=cut

#
# Revision 1.25  2012/07/30 13:31:34  lauerrc
# - pod tweaks
#
# Revision 1.24  2012/07/29 18:42:06  lauerrc
# - support for --recordset option
#
# Revision 1.23  2012/07/18 13:40:19  lauerrc
# - added pod for new hash_sort() method
#
# Revision 1.22  2012/04/13 15:16:34  eutl420
# - added --handle, --file options similar to <null> tag
#
# Revision 1.21  2012/02/08 19:50:03  eutl420
# - pod edits
#
# Revision 1.20  2011/09/21 20:28:36  eutl420
# - pod for matches(), tweaks
#
# Revision 1.19  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.18  2011/09/09 21:11:47  eutl420
# typo
#
# Revision 1.17  2011/09/09 19:25:54  eutl420
# - support the --bedrock-xml option which considers argument to be a Bedrock XML string
# - expand all elements that are array refs if --expand-args, --expand or --expand-all
#
# Revision 1.16  2011/09/04 21:56:10  eutl420
# - removed hyphenation in pod to prevent goofy texi2pdf issue
#
# Revision 1.15  2011/08/07 16:12:19  eutl420
# use Bedrock::BedrockJSON instead of Bedrock::JSON to avoid namespace collisions with JSON when use Bedrock; is employed
#
# Revision 1.14  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.13  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.12  2010/12/12 17:10:35  eutl420
# - use parse_tag_name
# - use dump_options
#
# Revision 1.11  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.10  2010/11/19 15:12:26  rlauer
# - add --expand-args option
# - document --expand-args option, tweaks
#
# Revision 1.9  2010/11/17 02:27:26  rlauer
# - pod cleanup
#
# Revision 1.8  2010/11/16 13:07:01  rlauer
# - documentation tweaks
#
# Revision 1.7  2010/11/08 03:14:26  rlauer
# - documentation changes only
#
# Revision 1.6  2010/01/04 02:47:46  rlauer
# add --xml to options section of docs
#
# Revision 1.5  2010/01/04 02:25:49  rlauer
# docs
#
# Revision 1.4  2009/12/31 18:30:41  rlauer
# sort with direction and type, methods documented
#
# Revision 1.3  2009/12/31 12:43:24  rlauer
# add --json and --define-var options
#
# Revision 1.2  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.1  2009/12/15 13:10:21  rlauer
# first check-in
#

1;
