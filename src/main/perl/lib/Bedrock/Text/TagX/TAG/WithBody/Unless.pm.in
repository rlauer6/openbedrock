#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Unless;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use TagX::Log;
use TagX::TAG::WithBody::If;

@ISA = qw ( TagX::TAG::WithBody::If );

=pod

=head1 TAG - C<E<lt>unlessE<gt>>

=head1 PURPOSE

Conditional inclusion of a block of text.

=head1 SYNTAX

  <unless boolean-expression >
   ...
  <elseif test>
   ...
  <else>
   ...
  </if>

Where I<boolean-expression> is a Bedrock expression that evaluates to true or false (in the perl sense).

Bedrock dyadic (has two arguments) boolean expressions include:

 arg1 --eq arg2
 arg1 --ne arg2
 arg1 --lt arg2
 arg1 --le arg2
 arg1 --gt arg2
 arg1 --ge arg2
 arg1 --re regexp
 arg1 --or arg2
 arg1 --and arg2
 arg1 --ref arg2

Bedrock monadic (has 1 argument) boolean expressions include:

 --not    arg1 => true if ! arg1
 --exists arg1 => true if exists arg1
 --object arg1 => true if arg1 is a hash reference
 --blm    arg1 => true if arg1 is a BLM
 --array  arg1 => true if arg1 is an array reference
 --scalar arg1 => true if arg1 is a scalar

=head1 OPTIONS

None

=head1 DESCRIPTION

The C<E<lt>ifE<gt> tag is, technically, to be used to conditionally
assemble portions of a document.  In other words the statement is
designed to conditionally include 1 of several different alternate
snippets of HTML or document text.

If you find yourself programming too much, write a Plugin please.

=head1 EXAMPLES

 <if $input.name>
   <null $foo.search($input.name)>
   <include:results>
 <else>
   <include:menu>
 </if>

=head1 NOTES

=over 5

=item 1. comparisons are done in the alpha-numeric sense, not a numeric sense

=item 2. compound tests (more than one expression) are allowed, but use parentheses liberally

=item 3. whitespace is ALWAYS preserved by Bedrock!

If you don't want extra space in your HTML then construct accordingly.
In other words, pedantic indenting may look good to you in your raw
Bedrock page, but the resulting HTML will reflect your indenting.
Bedrock is essentially a templating tool, thus it interprets pages
literally.

The snippet below illustrates where whitespace (.) and newlines (^) will be preserved.

  <if $input.action --eq "save">^
  ...<null $foo.save()>^
  </if>^

If you wanted a cleaner HTML output you'd probably want:

  <if $input.action --eq "save"><null $foo.save()></if>

=item 4. C<--re> evaluates simple regular expressions using the following perl pseudo code

   $lhs =~ /$rhs/ 

The regular expression you pass is (C<$rhs>).

=item 5. C<--ref> evalues to true if ref(arg1) eq arg2

  <if $input --ref "BLM:Startup::Input">
    This is the input object!
  </if>

=item 6. Bedrock II introduces the C<E<lt>caseE<gt>> tag.  If it feels better using if, then use if, else use  C<E<lt>caseE<gt>>.

  <if $input.radio_1>checked=checked </if>
  <case $input.radio_1 "checked=checked ">

=back

=head1 SEE ALSO

C<E<lt>caseE<gt>>

=cut

#
# $Log$
# Revision 1.2  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.1  2011/08/18 21:51:23  eutl420
# first check-in
#
#

1;
