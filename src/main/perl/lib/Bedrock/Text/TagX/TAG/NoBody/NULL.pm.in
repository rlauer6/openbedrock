package TagX::TAG::NoBody::NULL;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Array;
use Bedrock::BedrockJSON;
use Bedrock::Constants qw(:chars);
use Bedrock::Dump;
use Bedrock::Hash;
use Bedrock::Object;
use Bedrock::Serializer qw(evolve devolve);
use Bedrock::XML;
use English qw(-no_match_var);
use MIME::Base64;
use Scalar::Util qw(reftype blessed openhandle);

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw(Exporter TagX::TAG::NoBody);

########################################################################
sub _promote {
########################################################################
  my ($value) = @_;

  eval { evolve($value); };

  die "could not serialize value: [$EVAL_ERROR]\n"
    if $EVAL_ERROR;

  return $value;
}

########################################################################
sub param {
########################################################################
  my ( $options, $tx, $obj ) = @_;

  my $name;

  foreach (qw(define-var define-array define-object)) {
    last if $name = $options->{$_};
  }

  # create a Bedrock::RecordSet object
  if ( $options->{recordset} && ref $obj ) {

    die 'invalid object type: must be array'
      if reftype($obj) ne 'ARRAY';

    $obj = Bedrock::RecordSet->new($obj);
  }

  return $tx->param( $name => $obj );
}

########################################################################
sub define_options {
########################################################################
  return (
    'base64'          => undef,
    'bedrock-xml'     => undef,
    'cache=s'         => undef,
    'create-object=s' => undef,
    'default=s'       => undef,
    'define-array=s'  => undef,
    'define-object=s' => undef,
    'define-var=s'    => undef,
    'escape'          => undef,
    'encode'          => undef,
    'expand-all'      => undef,
    'expand-args'     => undef,
    'expand'          => undef,
    'file'            => undef,
    'filter-hash=s'   => undef,
    'handle'          => undef,
    'json'            => undef,
    'recordset'       => undef,
    'range=s'         => undef,
    'serializer=s'    => undef,
    'xml'             => undef,
    'yaml'            => undef,
  );

}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  my $tag_opts = $self->parse_tag_name( $argv[0] );

  # synonymous tags
  if ( exists $options{expand} ) {
    $options{'expand-args'} = 1;
  }

  if ( $tag_opts->{type} ) {
    if ( $tag_opts->{type} =~ /object|hash/xsm ) {
      $options{'create-object'} = $tag_opts->{name};
    }
    elsif ( $tag_opts->{type} =~ /array/xsm ) {
      $options{'define-array'} = $tag_opts->{name};
    }
    elsif ( $tag_opts->{type} =~ /var/xsm ) {
      $options{'define-var'} = $tag_opts->{name};
    }
    shift @argv;
  }
  elsif ( $tag_opts->{name} ) {
    $options{'define-var'} = $tag_opts->{name};
    shift @argv;
  }

  my $default = $options{default};
  $self->get_logger->debug( sprintf 'default value is: [%s]', $default // 'undef' );

  if ( exists $options{handle}
    && ( @argv != 1 || !( -r $argv[0] || $argv[0]->can('getline') ) ) ) {
    die "Use only 1 argument with --handle option and must be a handle.\n";
  }
  elsif ( exists $options{file} && ( @argv != 1 || ref $argv[0] ) ) {
    die "Use only 1 argument with --file option and must be filename.\n";
  }

  if ( exists $options{'create-object'} ) {
    $options{'define-object'} = $options{'create-object'};
    delete $options{'create-object'};
  }

  if ( exists $options{'define-var'} and exists $options{'define-array'} ) {
    die "Use either `--define-var' or `--define-array' here.\n";
  }

  if ( exists $options{'define-var'} and exists $options{'define-object'} ) {
    die "Use either `--define-var' or `--define-object' here.\n";
  }

  if ( exists $options{'define-array'} and exists $options{'define-object'} ) {
    die "Use either `--define-array' or `--define-object' here.\n";
  }

  die "Use `--define-var' once only.\n"
    if exists $options{'define-var'} and ref $options{'define-var'};

  die "Use `--define-array' once only.\n"
    if exists $options{'define-array'} and ref $options{'define-array'};

  die "Use `--define-object' once only.\n"
    if exists $options{'define-object'} and ref $options{'define-object'};

  die "Use `--json only' only for `--define-var'.\n"
    if exists $options{'json'} and exists $options{'define-array'};

  if ( $options{cache} ) {
    push @argv, $tx->read_cache( $options{cache} );
  }

  # locally define $_
  if ( !exists $options{'define-var'}
    && !exists $options{'define-object'}
    && !exists $options{'define-array'} ) {

    # see if current context has a default variable?
    if ( exists $context[0]->{$UNDERSCORE} ) {
      $self->get_logger->warn(
        sub {

          my $val = $context[0]->{$UNDERSCORE};
          $val //= 'undef';

          sprintf
            'You are about to overwrite the default variable _ => (%s)!',
            $val;
        }
      );
    }

    $options{'define-var'} = $UNDERSCORE;
  }

  # --base64 option tells Bedrock that the argument to the <null> tag is
  # base64 encoded and should be decoded, before applying other options.
  # Currently this is available for a single argument (scalar or array)
  #
  # The string is base64 encoded
  #   <null:decoded --base64 $input.encoded>
  #
  # The string is a base64 encoded JSON string
  #   <null:decoded --json --base64 $input.encoded>

  if ( exists $options{base64} ) {
    if ( @argv == 1 && !ref $argv[0] ) {
      $argv[0] = decode_base64( $argv[0] );
    }
    elsif ( reftype( $argv[0] ) eq 'ARRAY' ) {
      @argv = map { decode_base64($_); } @{ $argv[0] };
    }
    else {
      die sprintf
        "'Use --base64 with single argument: scalar or array reference - not %s\n",
        ref $argv[0];
    }
  }

  # Vanilla define-var does the following
  #  1. If there is a single argument, the argument is bound to the
  #     specified name
  #  2. If there is more than one argument, an array is created out of
  #     the args
  #  3. If there are no args, a generic object is bound to the specified name
  if ( exists $options{'define-var'} ) {
    if ( @argv > 1 ) {

      $self->get_logger->debug(
        sub {
          sprintf 'Defining an array with (%s)[%s items]', join( $EMPTY, @argv ), scalar @argv;
        }
      );

      # check to see if it's possible that this is just a trick
      # of quoting that resulted in the parser creating multiple
      # arguments - qw{ a b c d }
      my $arg = join $SPACE, @argv;

      if ( $arg =~ /^\s*qw[{]\s*([^}]+)\s*[}]\s*$/xsm ) {
        param( \%options, $tx, Bedrock::Array->new( split /\s+/xsm, $1 ) );
      }
      else {
        if ( exists $options{json} ) {

          my $json_string = $arg || $default;

          my $handler = $self->io_handler( $tx, 'JSON' );

          my $ref = $handler->in($json_string);

          param( \%options, $tx, $ref );
        }
        else {
          # arguments may be taken solely as list, first as expanded, or
          # all as expanded...
          if ( exists $options{'expand-args'}
            && reftype( $argv[0] ) eq 'ARRAY' ) {
            param( \%options, $tx, Bedrock::Array->new( @{ shift @argv }, @argv ) );
          }
          elsif ( exists $options{'expand-all'} ) {
            param( \%options, $tx,
              Bedrock::Array->new( map { ( reftype($_) eq 'ARRAY' ) ? @{$_} : $_ } @argv ) );
          }
          else {
            param( \%options, $tx, Bedrock::Array->new(@argv) );
          }
        }
      }
    }
    elsif ( @argv == 1 ) {
      $self->get_logger->debug(
        sub {
          my $val = $argv[0] // 'undef';

          sprintf 'Assigning %s to %s', $val, $options{'define-var'};
        }
      );

      if ( defined $options{file} || defined $options{handle} ) {
        my ( $fh, $file ) = ( openhandle( $argv[0] ), $argv[0] );

        die "no handle or file specified\n"
          if !$fh && !$file;

        if ( !$fh ) {
          $file = $tx->find_file( $file, undef, $DOT );

          if ( !$file || !-s $file ) {
            die "error: can't read [$fh]. Either it does not exist or is empty\n";
          }

          open $fh, '<', $file or  ## no critic (RequireBriefOpen)
            die "Could not open file ( $argv[0] ) for reading.";
        }

        local $RS = undef;

        $argv[0] = <$fh>;
      }

      my $encode = $options{encode};

      if ( defined $options{json} ) {

        my $handler = $self->io_handler( $tx, 'JSON' );

        my $value = shift @argv || $default;

        $value
          = $encode
          ? $handler->serialize( $value, { %options, @argv } )
          : $handler->deserialize( $value, { %options, @argv } );

        if ( !$options{endcode} ) {
          _promote($value);
        }

        param( \%options, $tx, $value );
      }
      elsif ( defined $options{'bedrock-xml'} ) {
        my $handler = $self->io_handler( $tx, 'BedrockXML' );
        my $value   = shift @argv || $default;
        $value
          = $encode
          ? $handler->serialize( $value, { %options, @argv } )
          : $handler->deserialize( $value, { %options, @argv } );

        _promote($value) if !$options{endcode};

        param( \%options, $tx, $value );
      }
      elsif ( defined $options{xml} ) {
        my $handler = $self->io_handler( $tx, 'XML' );
        my $value   = shift @argv || $default;
        $value
          = $encode
          ? $handler->serialize( $value, { %options, @argv } )
          : $handler->deserialize( $value, { %options, @argv } );

        if ( !$options{endcode} ) {
          _promote($value);
        }

        param( \%options, $tx, $value );
      }
      elsif ( defined $options{yaml} ) {
        my $handler = $self->io_handler( $tx, 'YAML' );

        my $value = shift @argv || $default;

        $value
          = $encode
          ? $handler->serialize( $value, { %options, @argv } )
          : $handler->deserialize( $value, { %options, @argv } );

        _promote($value) if !$options{endcode};

        param( \%options, $tx, $value );
      }
      elsif ( defined $options{serializer} ) {
        my $handler
          = $self->io_handler( $tx, $options{serializer}, { 'out', @argv } );

        my $value = shift @argv || $default;
        $value
          = $encode
          ? $handler->serialize( $value, { %options, @argv } )
          : $handler->deserialize( $value, { %options, @argv } );

        if ( !$encode ) {
          _promote($value);
        }

        param( \%options, $tx, $value );
      }

      elsif ( defined $options{'filter-hash'} ) {
        $self->get_logger->debug(
          sub {
            'filter-hash:' . $options{'filter-hash'};
          }
        );

        my $filter = Bedrock::JSON::decode( $options{'filter-hash'} );
        my ( $key, $value );

        if ( reftype($filter) eq 'ARRAY' ) {
          ( $key, $value ) = @{$filter};
        }
        elsif ( reftype($filter) eq 'HASH' ) {
          ( $key, $value ) = %{$filter};
        }

        $self->get_logger->debug(
          sub {
            'fltering on key: ' . $key . " value: " . $value;
          }
        );

        my @filtered_array;

        foreach ( @{ $argv[0] } ) {
          if ( reftype($_) eq 'HASH' ) {
            if ( $_->{$key} eq $value ) {
              push @filtered_array, $_;
            }
          }
          else {
            push @filtered_array, $_;
          }
        }

        param( \%options, $tx, Bedrock::Array->new(@filtered_array) );
      }
      elsif ( defined $default ) {

        $self->get_logger->debug(
          Dumper(
            [ options => \%options,
              argv    => \@argv,
              default => $default,
            ]
          )
        );

        param( \%options, $tx, defined $argv[0] ? $argv[0] : $default );
      }
      elsif ( defined $options{'expand-args'}
        && reftype( $argv[0] ) eq 'ARRAY' ) {
        param( \%options, $tx, Bedrock::Array::Reference->new( $argv[0] ) );
      }
      else {
        ## no critic (RequireInterpolationOfMetachars)
        if ( defined $options{escape} ) {
          my %sub_strings = (
            '\n' => "\n",
            '\t' => "\t",
            '\r' => "\r",
          );

          $argv[0] =~ s/(\\n|\\t|\\r)/$sub_strings{$1}/xsm;
        }

        param( \%options, $tx, Bedrock::Object::create_object( $argv[0] ) );
      }
    }
    elsif ( $options{range} ) {
      my $range = $tx->parse_range( $options{range} );

      die sprintf "invalid range %s\n", $options{range}
        if !$range;

      param( \%options, $tx, Bedrock::Array->new( @{$range} ) );
    }
    else {
      # no arguments (@argv is empty)
      $self->get_logger->debug(
        sub {
          'Creating an undefined scalar named ' . $options{'define-var'};
        }
      );

      param( \%options, $tx, $default );
    }
  }
  elsif ( exists $options{'define-array'} ) {
    # define-array explicitly specifies array creation with the arguments, if any
    $self->get_logger->debug(
      sub {
        sprintf 'Defining an array with (%s)[%s items]', join( $EMPTY, @argv ), scalar @argv;
      }
    );

    if ( defined $options{expand} || defined $options{'expand-args'} ) {
      param( \%options, $tx, Bedrock::Array->new( map { ( reftype($_) eq 'ARRAY' ) ? @{$_} : $_; } @argv ) );
    }
    else {
      param( \%options, $tx, Bedrock::Array->new(@argv) );
    }
  }
  elsif ( exists $options{'define-object'} ) {
    # define-object creates an object and does the following
    #  0. If $options{json} then assume all args represent a JSON string
    #     to be converted into an object
    #  1. If the number of args is even, uses the arguments as
    #     key-value pairs to initialize the object
    #  2. If the number of args is odd and the first or last argument is
    #     an array, this array is expanded one level and combined with the
    #     rest of the arguments to use as key-value pairs
    #  3. In both cases, the key must be a scalar -- cannot be an object, array ..
    #  4. Anything else is an error

    if ( $options{json} && @argv % 2 ) {

      my $json_string = join $EMPTY, @argv;

      # interpret the arguments as JSON string
      my $json = Bedrock::JSON->new($json_string);

      $self->get_logger->trace(
        sub {
          Bedrock::Dump::compact( $json->decode );
        }
      );

      param( \%options, $tx, $json->decode );
    }
    else {
      # if odd number of elements, see if first or last element is a reference
      my $obj;

      if ( @argv % 2 ) {

        $self->get_logger->warn(
          sub {
            sprintf
              'Odd number of elements in object creation list, merging in %s',
              $argv[0];
          }
        );

        my $aref = $argv[0];

        if ( @argv == 1 ) {
          if ( reftype($aref) eq 'HASH' ) {
            $obj = Bedrock::Hash->new( %{$aref} );
          }
          elsif ( reftype($aref) eq 'ARRAY' ) {
            $obj = Bedrock::Hash->new( @{$aref} );
          }
          else {
            my $json = Bedrock::JSON->new($aref);
            $obj = $json->decode;
          }

          $self->get_logger->trace(
            sub {
              Bedrock::Dump::compact($obj);
            }
          );
        }
        elsif ( reftype($aref) =~ /HASH|ARRAY/xsm ) {
          shift @argv;

          if ( reftype($aref), 'ARRAY' ) {
            $self->get_logger->debug(
              sub {
                sprintf "Prepending the following array to (%s)\n(%s)", join( $EMPTY, @argv ), @{$aref};
              }
            );

            unshift @argv, @{$aref};
          }
          else {
            $self->get_logger->debug(
              sub {
                sprintf "Prepending the following array to (%s)\n(%s)", join( $EMPTY, @argv ), @{$aref};
              }
            );

            unshift @argv, %{$aref};
          }
        }
        elsif ( defined( $aref = $argv[-1] )
          and ( reftype($aref) =~ /HASH|ARRAY/xsm ) ) {
          pop @argv;

          if ( reftype($aref) eq 'ARRAY' ) {
            $self->get_logger->debug(
              sub {
                return sprintf "Appending the following array to (%s)\n(%s)", join( $EMPTY, @argv ), @{$aref};
              }
            );

            push @argv, @{$aref};
          }
          else {
            $self->get_logger->debug(
              sub {
                return sprintf "Appending the following array to (%s)\n(%s)", join( $EMPTY, @argv ), @{$aref};
              }
            );

            push @argv, %$aref;
          }
        }
      }

      die sprintf
        "Odd number of elements [%d] in object creation list. Use --json if this is a JSON string.\n",
        scalar @argv
        if @argv % 2 && !defined $obj;

      if ( !defined $obj ) {
        $self->get_logger->debug(
          sub {
            return sprintf "Key-value pairs for object creation are\n(%s)", join $SPACE, @argv;
          }
        );
      }

      if ( !defined $obj ) {
        $obj = Bedrock::Hash->new(@argv);
      }

      $self->get_logger->debug(
        sub {
          return sprintf 'Creating an object named %s', $options{'define-object'};
        }
      );

      param( \%options, $tx, $obj );
    }
  }

  return;
}

1;

__END__

=pod

=head1 TAG - C<E<lt>nullE<gt>>

=head1 PURPOSE

The C<null> tag is the I<do something> tag or more correctly I<the
possibly do something but donE<039>t output anything tag>.  It allows
for invocation of object methods and/or the creation of Bedrock
objects without inserting anything at the point at which the
C<E<lt>nullE<gt>> tag is encountered.

=head1 SYNTAX

<null[:type][:var-name] [options] [list | expression]>

I<type> should be one of:

=over 5

=item hash

Create a Bedrock hash object

=item array

Create a Bedrock array object

=back

If I<type> is not provided Bedrock will create the appropriate object
based on the argument(s).  If the argument is a list, then Bedrock
will create an array.  One element lists are created as scalars.  If the
argument is an expression, then the object type will be determined by
the the result of the expression.

=head1 DESCRIPTION

Use the C<E<lt>nullE<gt>> tag to create Bedrock objects or invoke methods on
objects when no output is desired.

=head1 OPTIONS

 --base64
 --bedrock-xml
 --cache = "key-name"
 --create-object = "var-name" I<deprecated>
 --default
 --define-array  = "var-name"
 --define-object = "var-name"
 --define-var    = "var-name"
 --encode
 --expand-all
 --expand-args
 --file
 --handle
 --json
 --range
 --recordset
 --xml

=over 5

=item --base64

This option tells Bedrock that the argument to the C<E<lt>nullE<gt>> tag is 
a I<base64> encoded string and should be decoded before applying other options.

Currently this option will only work with a single argument which can either
be a scalar or an array reference.

Examples:

The string is base64 encoded

 <null:decoded --base64 $input.encoded>

The string is a base64 encoded JSON string

 <null:decoded --json --base64 $input.encoded>

=item --bedrock-xml

Consider the input to be a scalar string (or an open filehandle) that
represents a valid Bedrock XML object (or valid Bedrock XML file).
This has the effect of essentially deserializing the string file into
a Bedock object.

 <plugin:FileIO ($env.BEDROCK_CONFIG_PATH + "/tagx.xml")>
 <null:tagx --bedrock-xml $FileIO.handle>
 <trace --output $tagx>


 <null:foo a b c d>
 <trace --output $foo>

 <null:xml $foo.bedrock_xml()>

 <null:foo --bedock-xml $xml>
 <trace --output $foo>

=item --cache

Name of the key to retrieve from the cache. The value is treated as an
argument to the tag. For example, to retrieve a JSON encoded object
from the cache and convert this to a Bedrock object you might do
something like this:

 <sink --cache="foo">
 {
   "foo" : "bar"
 }
 </sink>
 
 <null:foo --cache=foo --json>
 <trace --output $foo>

=item --create-object

I<Deprecated> use C<--define-object>.

=item --default

Provides a default value if the argument is B<undefined>.

 <null:foo --default="red" $input.color>

If you want to provide a default value when a value is B<not true> in
the B<Perl> sense, then try this:

 <null:foo ($nput.color --or "red")>

=item --define-var

Create a scalar, array or object (only if no content).

=item --define-array

Create a Bedrock array.

=item --define-object

Create a Bedrock hash. All Bedrock hashes are ordered, with the
exception of those created using the C<--json> option.

 <null --define-object="foo" red 1 green 2 blue 3>

=item --encode

Encodes the object if any of the options:

 --bedrock-xml

 --json

 --xml
 
 --yaml

...are also present.  Normally these options indicate to Bedrock, how to
I<decode> the object during the assignment.  By using the C<--encode>
option you are asking Bedrock to create a scalar from the object and
encode it as a JSON or XML object.

 <null:env_xml --encode --bedrock-xml $env>

=item --expand-args

=item --expand-all

Expand array objects into lists.  If the C<--define-var> option is
used, this only applies to the first object in the list.  If the
C<--define-array> option is used, then all array references are
expanded into lists.  To force the expansion of all objects into a
list, use the C<--expand-all> option.

=item --file

Indicates that the argument is the name of a file and that it should
be slurped. If the file is not found or is empty, an exception will be
thrown.

 <null:config --bedrock-xml --file ($env.CONFIG_PATH + "/tagx.xml")>

You can add options as shown above that tell Bedrock how to interpret
the file.

 --bedrock-xml
 --json
 --xml
 --yaml

=item --handle

Indicates that the argument is a file handle and the file should be
slurped.

 <open:fh --mode="r" $file>
 <null:text --file $fh>

=item --json

For C<--define-var> consider the string to be a JSON string.

 <null:foo --json '{"red" : 1, "green" : 2, "blue" : 3}'>

 <null --define-var='foo' --json '{"red" : 1, "green" : 2, "blue" : 3}'>

=item --range

Creates an array of integers. Similar to the range operator in
Perl. The argument to the range option should be a comma delimited
start and stop value (actually range will accept \d+\D+\d+, e.g: 1..10)

 <null:foo --range="1,10">

=item --recordset

Creates an object that is a C<Bedrock::Recordset> from an array.

=item --escape

Escapes certain special characters (\n, \r, \t)

 <null:foo --escape 'foo\\n'>

...is sometimes preferable to:

 <sink:foo>foo
 </sink>

=item --xml

For C<--define-var> consider the string to be an XML string.  Consider using
the C<< <sink> >> tag for this purpose.

 <null $config.XML('in', 'KeepRoot', 0)>
 <null:foo --xml '<colors\><red\>1</red\><green\>2</green\><blue\>2</blue\></colors\>'>

=back

=head1 NOTE

Arrays and hashes have a boat load of useful methods.  See the
documentation on the C<E<lt>hashE<gt>> and C<E<lt>arrayE<gt>> tags for
a description of the methods associated with those objects.

=head1 EXAMPLES

=over 5

=item * Create an object as the return result from some method:

 <null --define-var="x" $object.method()>

=item * Create a hash

 <null --define-object="foo" key1 value1 key2 value2>
 <null:hash:foo key1 value1 key2 value2>
 <null:foo --json '{key1 : "value1", key2 : "value2"}'>

Note that quotes around keys are not required.

=item * Create an array

 <null --define-array="x" 1 2 3 4>

 <null:array:x 1 2 3 4>

I<Bedrock assumes you want to create a list from a list ;-)>

 <null:x 1 2 3 4>

 <null:x --json '[1,2,3,4]'>

=item * Invoke a method, no return value

 <null $header.see_other("/new_url")>

=back

=head1 SEE ALSO

C<E<lt>hashE<gt>>, C<E<lt>arrayE<gt>>, C<E<lt>recordsetE<gt>>, C<Bedrock::Array>, C<Bedrock::Hash>

=cut
