#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::NULL;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.07;
}

use SIS::Hash;
use SIS::Array;
use SIS::JSON;
use Data::Dumper;

use BLM::OrderedObject;

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('define-var=s'	=> undef,
		   'define-array=s'	=> undef,
		   'create-object=s'	=> undef,
		   'ordered'            => undef,
		   'json'               => undef
		  );

    my @argv = $self->parse_options (\%options, @context);

    my $verbose = $self->verbose;
    if ( $verbose ) {
	my ($key, $value);
	my $str = "Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments ..(@argv)";
	&log_message( $self, $str );
    }

    $argv[0] =~/^:([^:]*):?(.*?)$/;

    &log_message($self, sprintf("ARGV[0] => [%s], 1 =>  [%s], 2 => [%s]", $argv[0], $1, $2)) if $verbose;

    my ($type, $name) = ($1, $2);

    if ($name && $type) {
      if ($type =~/(object|hash)/) {
	$options{'create-object'} = $name 
      }
      elsif ($type =~/array/) {
	$options{'define-array'} = $name;
      }
      elsif ($type =~/var/) {
	$options{'define-var'} = $name;
      }
      shift @argv;
    }
    elsif ($type) {
      $options{'define-var'} = $type;
      shift @argv;
    }

    if ( exists $options{'define-var'} and
	 exists $options{'define-array'} ) {
	die "Use either `--define-var' or `--define-array' here.\n";

    }

    if ( exists $options{'define-var'} and
	 exists $options{'create-object'} ) {
	die "Use either `--define-var' or `--create-object' here.\n";
    }

    if ( exists $options{'define-array'} and
	 exists $options{'create-object'} ) {
	die "Use either `--define-array' or `--create-object' here.\n";
    }

    die "Use `--define-var' once only.\n"
      if exists $options{'define-var'} and ref($options{'define-var'});
    
    die "Use `--define-array' once only.\n"
      if exists $options{'define-array'} and ref($options{'define-array'});

    die "Use `--create-object' once only.\n"
      if exists $options{'create-object'} and ref($options{'create-object'});

    die "Use `--ordered' only for `--create-object'.\n"
      if exists $options{'ordered'} and (exists $options{'define-var'} or exists $options{'define-array'});

    die "Use `--json only' only for `--define-var'.\n"
      if exists $options{'json'} and exists $options{'define-array'};
    
    if ( exists $options{'define-var'} ) {
	# Vanilla define-var does the following
	#  1. If there is a single argument, the argument is bound to the
	#     specified name
	#  2. If there is more than one argument, an array is created out of
	#     the args
	#  3. If there are no args, a generic object is bound to the specified name
	if ( @argv > 1 ) {
	    &log_message( $self, "Defining an array with (@argv)[" . scalar(@argv) . " items]" )
		if $verbose;
	    # check to see if it's possible that this is just a trick
	    # of quoting that resulted in the parser creating multiple
	    # arguments - q{{foo:1, bar:2}}

	    if ($options{'json'}) {
	      my $json_string = join('', @argv);
	      $tx->param($options{'define-var'}, SIS::JSON::decode($json_string));
	    }
	    else {
	      $tx->param( $options{'define-var'} => SIS::Array->new(@argv) );
	    }
	} elsif ( @argv == 1 ) {
	    &log_message( $self, "Assigning $argv[0] to $options{'define-var'}" ) if $verbose;
	    if (defined $options{'json'}) {
	      my $json = SIS::JSON->new($argv[0]);
	      &log_message($self, "in NULL ".Dumper($json->decode)) if $verbose;
	      $tx->param($options{'define-var'} => $json->decode);
	    }
	    else {
	      $tx->param( $options{'define-var'} => $argv[0] );
	    }
	} else {
	    &log_message( $self, "Creating an object named $options{'define-var'}" ) if $verbose;
	    $tx->param( $options{'define-var'} => SIS::Hash->new );
	}
    } elsif ( exists $options{'define-array'} ) {
	# define-array explicitly specifies array creation with the arguments, if any
	&log_message( $self, "Defining an array with (@argv)[" . scalar(@argv) . " items]" )
	    if $verbose;
	$tx->param( $options{'define-array'} => SIS::Array->new(@argv) );
    } elsif ( exists $options{'create-object'} ) {
	# create-object creates an object and does the following
        #  0. If $options{'json'} then assume all args represent a JSON string to be converted into an object
	#  1. If the number of args is even, uses the arguments as
	#     key-value pairs to initialize the object
	#  2. If the number of args is odd and the first or last argument is
	#     an array, this array is expanded one level and combined with the
	#     rest of the arguments to use as key-value pairs
	#  3. In both cases, the key must be a scalar -- cannot be an object, array ..
	#  4. Anything else is an error
	my $nArgs = @argv;
	if ($options{'json'} || $nArgs == 1) {
	  my $json_string = join('', @argv);
	  # interpret the arguments as JSON string
	  my $json = SIS::JSON->new($json_string);
	  &log_message($self, "in NULL ".Dumper($json->decode)) if $verbose;
	  $tx->param($options{'create-object'} => $json->decode);	  
	}
	else {
	  unless ( int($nArgs / 2) * 2 == $nArgs ) {
	  &log_message( $self, "Odd number of elements in object creation list, merging in $argv[0]" ) if $verbose;
	    my $aref = $argv[0];
	    if ( &UNIVERSAL::isa($aref, 'ARRAY') ) {
	      shift @argv;
		&log_message( $self, "Prepending the following array to (@argv)\n(@{$aref})" ) if $verbose;
		unshift @argv, @{$aref};
	      } elsif ( defined($aref = $argv[-1]) and &UNIVERSAL::isa($aref, 'ARRAY') ) {
	      pop @argv;
		&log_message( $self, "Appending the following array to (@argv)\n(@{$aref})" ) if $verbose;
		push @argv, @{$aref};
	      }
	  }
	
	$nArgs = @argv;
	die "Odd number of elements($nArgs) in object creation list.\n" unless int($nArgs / 2) * 2 == $nArgs;
	&log_message( $self, "Key-value pairs for object creation are\n(@argv)" ) if $verbose;
	my $obj = (exists $options{ordered}) ? BLM::OrderedObject->new(@argv) : SIS::Hash->new(@argv);
	#	my %args = @argv;
	#	for my $key ($obj->keys()) {
	#	    die "Cannot use `$key' as a property name: must be a scalar.\n"
	#		if ref($key);
	#	    $obj->{$key} = $args{$key};
	#	}
	
	&log_message( $self, "Creating an object named $options{'create-object'}" ) if $verbose;
	$tx->param( $options{'create-object'} => $obj);
      }
    }
}

1;

=head1 TAG null

=head1 PURPOSE

The C<null> tag allow for invocation of object methods, or creation of Bedrock objects.

=head1 SYNTAX

  <null [--define-var=name | --define-array=name | --create-object=name] [--ordered] [--json] ...>

  <null:type:name ...>

  <null:name ...>

=head1 OPTIONS

=over 5

=item --define-var

Create a scalar, array or object (only if no content).

=item --define-array

Create an array.

=item --create-object

Create a hash.

=item --json

For <--define-var> consider the string to be a JSON string.

=item --ordered

Create an ordered hash.

=head1 EXAMPLE

  <null --define-var="x" $object.method()>
  <null --create-object "key1" "value2" "key2" "value2">
  <null --define-array="x" 1 2 3 4>
  <null $header.see_other("/new_url")>

=back

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.12  2009/12/17 23:23:30  rlauer
# more JSON awareness
#
# Revision 1.11  2009/12/16 23:22:27  rlauer
# fix docs, tighter error checing
#
# Revision 1.10  2009/12/15 23:06:58  rlauer
# added a json option
#
# Revision 1.9  2009/12/15 13:06:41  rlauer
# simplified object creation syntax, +ordered objects
#
# Revision 1.8  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.7  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.6  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.5  2000/12/15 14:26:58  sridhar
# Proper checking for presence of any one of --define-var,
# --define-array or --create-object.
#
# Revision 1.4  2000/11/29 21:00:37  sridhar
# 1. Added option --create-object which takes the arguments and makes it
# the properties of a newly created object.
# 2. If the there are odd number of arguments, the first or last
# argument is expanded if it is an array
# 3. Throws exception if the object cannot be created due to invalid
# arguments.
#
# Revision 1.3  2000/11/16 19:10:28  sridhar
# Fixed error messages so exceptions don't have perl source code
# locations in them.
#
# Revision 1.2  2000/09/22 20:23:06  sridhar
# 1. Have a --define-array option which makes an array of the arguments,
# if any are present. Defines an empty array, if no arguments
# 2. --define-var makes an empty object if no arguments. Also makes an
# array of the arguments if more than one argument present.
#
# Revision 1.1  2000/06/06 20:00:11  sridhar
# Adding a tag which does not produce any output; only purpose of this
# tag is to invoke object methods.
#
#
