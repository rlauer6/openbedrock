#!@PERL@ -w

# ident "@(#) $Header$
# ident "@(#)        $Name$"
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::SQLTable;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use DBI;

use TagX::Log;
use TagX::TAG::NoBody;
use TagX::TAG::SQLHandler;
use BLM::IndexedTableHandler;
use Data::Dumper;

@ISA = qw (TagX::TAG::NoBody TagX::TAG::SQLHandler);

sub finalize {
  my ( $self, $tx, @context ) = @_;
  
  my %options = ( 
		 'dbname=s'       => undef,
		 'db=s'           => undef,
		 'data-source=s'  => undef,
		 'define-var'     => undef,
		 'table-name'     => undef,
		 'html-form'      => undef,
		 'format-mode=s'  => undef,
		 'display-only=s' => undef,
		 'not-null=s'     => undef
                );

  my $input = {};

  my @names = $tx->out_handle->{Handle}->getInputValue();
  @{$input}{@names} = $tx->out_handle->{Handle}->getInputValue(@names);

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  my $config  = $tx->out_handle->{Handle}->{'CONFIG'};

  my $config = $config->{sqltables} || {};

  $self->dump_options( \%options ) if $verbose;

  @argv = $self->get_name( \%options, @argv );

  $options{'table-name'} = $options{'table-name'} || $options{'define-var'};

  die "no table name\n"
    if $options{'table-name'} eq '_';

  my $dbh = $self->get_db_handle($tx, %options);

  my $id = shift @argv;

  my $obj = BLM::IndexedTableHandler->new( $dbh, $id, $config, $options{'table-name'});

  $tx->param( $options{'define-var'} => $obj );

  # execute the handler which will interpret the action form variable
  # and do things like delete, update, insert, search for records.
  if ( $input->{action} ) {
    if ( $input->{action} eq 'save' ) {
      if ( defined $options{'not-null'} ) {
	map { die "required field [$_]\n" unless $input->{$_} } 
	  $self->get_list_options($options{'not-null'});
      }
    }

    my $result = $obj->handler( $input );
    if ( UNIVERSAL::isa($result, 'ARRAY') ) {
      if ( @{$result} == 1) {
	$obj = $result->[0];
      }
      elsif ( @{$result} > 1 ) {
	$tx->param('_' => $result);
      }
    }
  }

  # set the format fields
  if ( defined $options{'format-mode'} ) {
    map { $obj->set_format_mode($_, 1) } $self->get_list_options($options{'format-mode'});
  }

  # set the display-only
  if ( defined $options{'display-only'} ) {
    map { $obj->set_display_only($_, 1); }  $self->get_list_options($options{'display-only'});
  }

  if ( defined $options{'html-form'} ) {
    my $html = $obj->html_form_header();
    $html .= $obj->html_form_body();
    $html .= $obj->html_form_footer();
    $tx->out_handle->print( $html );
  }
  else {
    $obj;
  }
}

=head1 TAG - C<E<lt>sqltableE<gt>>

=head1 PURPOSE

Implements a mini-CRUD web application in a tag.

=head1 SYNTAX

 <sqltable:[table-name] [options] [id] >

=head1 DESCRIPTION

This is an experimental tag that implements a full-featured mini-web
application that will create, read, update and delete records from a
MySQL table.

This tag is implemented via the C<BLM::IndexedTableHandler> Plugin.
See C<BLM::IndexedTableHandler> which contains more extensive
documentation regarding how this Plugin works.


=head1 OPTIONS

 --db = 
 --dbname = 
 --define-var = variable name
 --display-only = column name
 --format-mode = column name
 --html-form
 --not-null = column name
 --table-name = table name

=over 4

=item --db

=item --dbname

Name of a database connection object to use when interacting with the
table.  If not provided the default datatbase connection object
associated with the C<E<lt>sqlconnectE<gt>> tag is used.

=item --define-var

Name of the variable that will contain the C<BLM::IndexedTableHandler>
object that represents a row of dat in your table. If you use the
suffix syntax to indicate the variable name and do not use the
C<--table-name> option, then the tag suffix is taken to be both the
table name and the name of the object to create.

=item --display-only

Indicates that 

=item --format-mode

Indicates that a field should be formatted on output and interpretted
on input.  Currently, data, datetime and timestamp fields and any
field with the name 'phone' will perform some default formatting via
the behaviors documented in C<BLM::IndexedTableHandler>.  Future
versions of Bedrock may implement additional formatting modes.

 <sqltable:customer --format-mode="phone"  --html-form>

=item --html-form

Using this option causes the tag to create an HTML form that can be
used to enter data.  The form includes buttons that will set the
C<action> form variable so that subsequent posts to this page cause
the tag to process the form contents and perform the desired action
(I<search>, I<save>, I<delete>, I<new>).

See C<BLM::IndexedTableHandler> for more information regarding how the
form is rendered and the capabilities of the form handler.

=item --not-null

Indicates that a field must contain data, otherwise a C<save> function
will throw an exception.

 <sqltable:customer --not-null="name" --html-form>

You may use more than 1 of these options in the tag if you have
additional fields that you want to require on the form.

=item --table-name

The name of the MySQL table to read from.  If you include a suffix in
the tag name and do not include a C<--table-name> option, the suffix
is taken to be both the name of the object that will be created and
the table name.  The statements below are equivalent.

  <sqltable --table-name="customer --define-var="customer">
  
  <sqltable:customer>

=back

=head1 SEE ALSO

C<E<lt>sqlE<gt>>, C<E<lt>sqlselectE<gt>>, C<BLM::IndexedTableHandler>

=cut

# $Log$
# Revision 1.2  2011/12/01 17:11:33  eutl420
# - use methods from Text::TagX::TAG::SQLHandler, get_db_handle(), etc, added pod
#
# Revision 1.1  2011/12/01 15:52:50  eutl420
# - first check-in
#

1;
