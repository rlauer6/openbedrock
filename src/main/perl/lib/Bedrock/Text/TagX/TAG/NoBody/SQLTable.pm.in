#!@PERL@ -w

# ident "@(#) $Header$
# ident "@(#)        $Name$"
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::SQLTable;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use DBI;

use TagX::Log;
use TagX::TAG::NoBody;
use BLM::IndexedTableHandler;
use Data::Dumper;

@ISA = qw (TagX::TAG::NoBody);

sub ANONYMOUS {
  '*anonymous*';
}

sub get_list_options {
  my $self = shift;
  my $option;

  my @list;

  if ( defined $option ) {
    if ( UNIVERSAL::isa($option, 'ARRAY') ) {
      push @list, @{$option};
    }
    else {
      push @list, $option;
    }
  }
  
  return @list;
}


sub finalize {
  my ( $self, $tx, @context ) = @_;
  
  my %options = ( 
		 'dbname=s'       => undef,
		 'db=s'           => undef,
		 'data-source=s'  => undef,
		 'define-var'     => undef,
		 'table-name'     => undef,
		 'html-form'      => undef,
		 'format-mode=s'  => undef,
		 'display-only=s' => undef,
		 'not-null=s'     => undef
                );

  my $input = {};

  my @names = $tx->out_handle->{Handle}->getInputValue();
  @{$input}{@names} = $tx->out_handle->{Handle}->getInputValue(@names);

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  my $config  = $tx->out_handle->{Handle}->{'CONFIG'};

  my $config = $config->{sqltables} || {};

  $self->dump_options( \%options ) if $verbose;

  @argv = $self->get_name( \%options, @argv );

  $options{'table-name'} = $options{'table-name'} || $options{'define-var'};

  die "no table name\n"
    if $options{'table-name'} eq '_';

  my $name = $options{'dbname'};
  &log_message( $self,
                "Use of deprecated option `--dbname'. Use `--db' instead.\n" )
    if $name && $verbose;

  my $dbh;
  if ( $options{'db'} ) {
    $dbh = $options{'db'};
  }
  elsif ( $name ) {
    $dbh = $tx->{'DB'}->{$name};
    die "Unknown database connection named `$name'.\n" unless $dbh;
  }
  else {
    $dbh = $tx->{'DB'}->{&ANONYMOUS};
  }

  &log_message( $self, "Using database handle ($dbh)" )
    if $verbose;

  my $id = shift @argv;

  my $obj = BLM::IndexedTableHandler->new( $dbh, $id, $config, $options{'table-name'});

  $tx->param( $options{'define-var'} => $obj );

  # execute the handler which will interpret the action form variable
  # and do things like delete, update, insert, search for records.
  if ( $input->{action} ) {
    if ( $input->{action} eq 'save' ) {
      if ( defined $options{'not-null'} ) {
	map { die "required field [$_]\n" unless $input->{$_} } 
	  $self->get_list_options($options{'not-null'});
      }
    }

    my $result = $obj->handler( $input );
    if ( UNIVERSAL::isa($result, 'ARRAY') ) {
      if ( @{$result} == 1) {
	$obj = $result->[0];
      }
      elsif ( @{$result} > 1 ) {
	$tx->param('_' => $result);
      }
    }
  }

  # set the format fields
  if ( defined $options{'format-mode'} ) {
    map { $obj->set_format_mode($_, 1) } $self->get_list_options($options{'format-mode'});
  }

  # set the display-only
  if ( defined $options{'display-only'} ) {
    map { $obj->set_display_only($_, 1); }  $self->get_list_options($options{'display-only'});
  }

  if ( defined $options{'html-form'} ) {
    my $html = $obj->html_form_header();
    $html .= $obj->html_form_body();
    $html .= $obj->html_form_footer();
    $tx->out_handle->print( $html );
  }
  else {
    $obj;
  }
}

=head1 TAG - C<E<lt>sqltableE<gt>>

=head1 PURPOSE

=head1 SYNTAX

=head1

=head1 NOTES

=head1 SEE ALSO

C<E<lt>sqlE<gt>>, C<E<lt>sqlselectE<gt>>, C<BLM::IndexedTableHandler>

=cut

# $Log$
# Revision 1.1  2011/12/01 15:52:50  eutl420
# - first check-in
#

1;
