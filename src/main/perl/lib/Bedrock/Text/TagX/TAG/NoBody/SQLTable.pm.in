#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::SQLTable;

use strict;
use warnings;

use DBI;

use Bedrock::Constants qw{:chars};
use BLM::IndexedTableHandler;
use English qw{-no_match_vars};

use Data::Dumper;
use Scalar::Util qw/reftype/;

use Bedrock::HTML::Helper qw( create_html_element
  create_label_name
  create_xhtml_element
  create_radio_buttons
  create_select_list
);

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw (Exporter TagX::TAG::NoBody TagX::TAG::SQLHandler);

sub define_options {
  return (
    'attributes=s'      => undef,
    'dbname=s'          => undef,
    'db=s'              => undef,
    'data-source=s'     => undef,
    'define-var'        => undef,
    'handle-exceptions' => undef,
    'html-form'         => undef,
    'labels=s'          => undef,
    'lists=s'           => undef,
    'list-results'      => undef,
    'format-mode=s'     => undef,
    'display-only=s'    => undef,
    'max-rows=s'        => undef,
    'skip-field=s'      => undef,
    'not-null=s'        => undef,
    'table-name'        => undef
  );

}

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  my $input = {};

  my @names = $tx->out_handle->{Handle}->getInputValue();
  @{$input}{@names} = $tx->out_handle->{Handle}->getInputValue(@names);

  my $config = $tx->out_handle->{Handle}->{'CONFIG'};

  @argv = $self->get_name( \%options, @argv );

  $options{'table-name'} = $options{'table-name'} || $options{'define-var'};

  die "no table name\n"
    if $options{'table-name'} eq '_';

  my $dbh = $self->get_db_handle( $tx, %options );

  my $id         = shift @argv;
  my $sql_config = $config->{sqltables} || {};
  my $obj        = BLM::IndexedTableHandler->new( $dbh, $id, $sql_config,
    $options{'table-name'} );

  if ( exists $options{'max-rows'} ) {
    $obj->max_rows( $options{'max-rows'} );
  }

  $tx->param( $options{'define-var'} => $obj );

  my $html_form;
  my $html_result_list;

  # execute the handler which will interpret the action form variable
  # and do things like delete, update, insert, search for records.
  my @errors;

  if ( $input->{action} ) {
    if ( $input->{action} eq 'save' ) {
      if ( defined $options{'not-null'} ) {
        foreach ( $self->get_list_options( $options{'not-null'} ) ) {
          next if $input->{$_};

          push @errors, "required field: [$_]";
        }
      }
    }

    my $result;

    if ( !@errors ) {
      $result = $obj->handler($input);
    }

    if ( ref($result) && reftype($result) eq 'ARRAY' ) {
      if ( exists $options{'list-results'} ) {
        $html_result_list = $result->html_result_list;
      }
      else {
        if ( @{$result} == 1 ) {
          $obj = $result->[0];
        }
        elsif ( @{$result} > 1 ) {
          $tx->param( $UNDERSCORE => $result );
        }
      }
    }
  }

  # set the format fields
  if ( defined $options{'format-mode'} ) {
    map { $obj->set_format_mode( $_, 1 ) }
      ( $self->get_list_options( $options{'format-mode'} ) );
  }

  # set the display-only
  if ( defined $options{'display-only'} ) {
    map { $obj->set_display_only( $_, 1 ); }
      ( $self->get_list_options( $options{'display-only'} ) );
  }

  my $html_errors;

  my $attributes = $options{'attributes'} || {};
  my $lists      = $options{'lists'}      || {};
  my $labels     = $options{'labels'}     || {};

  if ( exists $options{'handle-exceptions'} ) {

    $html_errors = sprintf '%s%s</div>',
      create_html_element( 'div', %{ $attributes->{div} } ),
      join '<br>', @errors;
  }

  my @skip_list = $options{'skip-field'} || [];

  if ( defined $options{'html-form'} ) {
    $html_form = $obj->html_form_header($attributes);
    $html_form
      .= $obj->html_form_body( $attributes, $labels, $lists, \@skip_list );
    $html_form .= $obj->html_form_footer($attributes);
    $tx->out_handle->print( $html_form . $html_result_list . $html_errors );
  }
  else {
    return $obj;
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>sqltableE<gt>>

=head1 PURPOSE

Implements a mini-CRUD web application in a tag.  As close to a thermos as you can get.

=head1 SYNTAX

 <sqltable:[table-name] [options] [id] >

=head1 DESCRIPTION

This is an experimental tag that implements a full-featured mini-web
application that will create, read, update and delete records from a
MySQL table.

This tag is implemented via the C<BLM::IndexedTableHandler> Plugin.
See C<BLM::IndexedTableHandler> which contains more extensive
documentation regarding how this Plugin works.


=head1 OPTIONS

 --attributes = attribute hash
 --db = 
 --dbname = 
 --define-var = variable name
 --display-only = column name
 --format-mode = column name
 --html-form
 --labels = labels
 --lists = pick lists
 --list-results
 --max-rows = maximum number of rows in result set
 --handle-exceptions
 --not-null = column name
 --skip-field = column name
 --table-name = table name

=over 4

=item --attributes

Specify the name of a hash contains attributes for the various
elements that make up the form.  The hash is typically comprised of
keys that reference other hashes that contain attributes for the HTML
elements.  For example:

 <null:attributes --json '{ div   : { style : "color:red;font-size:8pt" }
                            table : { class : "customer" }
                          }'>


=item --db

=item --dbname

Name of a database connection object to use when interacting with the
table.  If not provided the default datatbase connection object
associated with the C<E<lt>sqlconnectE<gt>> tag is used.

=item --define-var

Name of the variable that will contain the C<BLM::IndexedTableHandler>
object that represents a row of dat in your table. If you use the
suffix syntax to indicate the variable name and do not use the
C<--table-name> option, then the tag suffix is taken to be both the
table name and the name of the object to create.

=item --display-only

Indicates that 

=item --format-mode

Indicates that a field should be formatted on output and interpretted
on input.  Currently, data, datetime and timestamp fields and any
field with the name 'phone' will perform some default formatting via
the behaviors documented in C<BLM::IndexedTableHandler>.  Future
versions of Bedrock may implement additional formatting modes.

 <sqltable:customer --format-mode="phone"  --html-form>

=item --html-form

Using this option causes the tag to create an HTML form that can be
used to enter data.  The form includes buttons that will set the
C<action> form variable so that subsequent posts to this page cause
the tag to process the form contents and perform the desired action
(I<search>, I<save>, I<delete>, I<new>).

See C<BLM::IndexedTableHandler> for more information regarding how the
form is rendered and the capabilities of the form handler.

=item --labels

Specify a hash that contains alternate labels for the column names
instead of the ones that are auto generated by the tag.

=item lists

Pick lists for for fields of type C<enum> or C<set> are automatic,
However if you want to associate a pick list with a C<varchar> field
for example you specify a pick list one of a few different manners as
explained in the documentation for C<BLM::IndexedTableHandler>.

The easiest way to is to create a hash whose keys represent the column
names and whose value is a comma separated list of options.

Example:

 <null:lists county "Atlantic,Bergen,Burlington,Camden">

 <sqltable:customer --lists=$lists $input.id>

=item list-results

If the result of the user action on the form is a search result that
contains more than 1 row, this option indicates that a simple list of
links should be output after the form.  The user will be able to click
on the link and edit the row associated with that result.

The text associated with the links is the second column of the table.

The maximum number of results returned by the form will be dictated by
the C<--max-rows> option.

The option implements more or less implements the following construct:
  

  <sqltable:customer $input.id>

  <null:fields $customer.[0].fields()>

  <if --array $_>
    <if $_.length() --gt 1>
    <ol>
     <foreach $_>
      <li><a href="?id=<var $id>"><var $_.get($fields.[1])></a>></li>
     </foreach>
    </ol>
    </if>
  </if>


=item max-rows

Specify the maximum number of rows that can be returned by a query.

=item handle-execeptions

If this option is provided the tag will not throw exceptions on fields
that are validated (for example, not-null fields).  Rather, the errors
will be displayed in a C<div>.

=item --not-null

Indicates that a field must contain data, otherwise a C<save> function
will throw an exception.

 <sqltable:customer --not-null="name" --html-form>

You may use more than 1 of these options in the tag if you have
additional fields that you want to require on the form.

=item --skip-field

Specify the name of a column in the table that should B<not> be
rendered in the form.

=item --table-name

The name of the MySQL table to read from.  If you include a suffix in
the tag name and do not include a C<--table-name> option, the suffix
is taken to be both the name of the object that will be created and
the table name.  The statements below are equivalent.

  <sqltable --table-name="customer" --define-var="customer">
  
  <sqltable:customer>

=back

=head1 SEE ALSO

C<E<lt>sqlE<gt>>, C<E<lt>sqlselectE<gt>>, C<BLM::IndexedTableHandler>

=cut

# Revision 1.4  2011/12/05 15:20:08  eutl420
# - added pod to explain new options
#   --attributes
#   --labels
#   --lists
#   --skip-field
#   --max-rows
#   --handle-exceptions
#   --list-results
#
# Revision 1.3  2011/12/01 22:12:14  eutl420
# - added new options:
#   --max-rows          => limit rows returned
#   --list-results      => create simple list of links
#   --skip-field        => exclude field from form
#   --lists             => pick lists
#   --labels            => field labels
#   --handle-exceptions => display a div with error fields rather than throw exception
# - $config was being passed instead of the 'sqltables' object
#
# Revision 1.2  2011/12/01 17:11:33  eutl420
# - use methods from Text::TagX::TAG::SQLHandler, get_db_handle(), etc, added pod
#
# Revision 1.1  2011/12/01 15:52:50  eutl420
# - first check-in
#

1;
