#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::If;

use strict;
use warnings;

use Bedrock qw{:booleans};
use Bedrock::Constants qw{:chars :booleans};
use Bedrock::RegExp;

use Cwd;
use Data::Dumper;
use English qw{-no_match_vars};
use Scalar::Util qw/reftype looks_like_number/;
use version;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw (Exporter TagX::TAG::WithBody);

########################################################################
sub file_test {
########################################################################
  my ( $test, $file ) = @_;

  if ( $file =~ /^(\S*)/xsm ) {
    $file = $1;
  }
  else {
    die "no filename specified: usage: filename --file file-test-op\n";
  }

  for ($file) {
    /^\~([^~]*)$/xsm && do {
      $file = sprintf '%s/%s', getcwd(), $1;
      last;
    };

    /^[^\/~]/xsm && do {
      $file = sprintf '%s/%s', ( $ENV{DOCUMENT_ROOT} // $DOT ), $file;
      last;
    };
  }

  if ( $test =~ /^-?([rwxoRWXOezsfdlpSbctugkTBMAC])/xsm ) {
    my $test_str = sprintf '%s "%s"', $test, $file;

    return eval $test_str;  ## no critic (ProhibitStringyEval)
  }
  else {
    die "invalid file test operation\n";
  }
}

########################################################################
sub end_if {
########################################################################
  my ($self) = @_;

  return $self->parent;
}

########################################################################
sub else_obj {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args == 1 ) {
    $self->{'else'} = $args[0];

    $self->{'else'}->parent_if(
      exists $self->{'parent_if'} ? $self->{'parent_if'} : $self );

    $self->{'else'}->parent( $self->parent );
  }

  return $self->{'else'};
}

########################################################################
sub end_child {
########################################################################
  my ($self) = @_;

  return $self->end_if;
}

########################################################################
sub closure {
########################################################################
  return '/if';
}

########################################################################
sub evaluate {
########################################################################
  my ( $self, $args, $context ) = @_;

  if ( @{$args} == 1 ) {
    return $args->[0];
  }
  elsif ( @{$args} == 2 ) {

    # unary op
    my ( $op, $v ) = @{$args};
    for ($op) {

      $_ eq '--not' and return not $v;

      if ( $_ eq '--exists' ) {
        my $what = $self->{'__argv'}->[1];

        if ( ref($what) eq 'TagX::Term::Var' ) {

          return defined $what->exists( @{$context} ) ? $TRUE : $FALSE;
        }
        elsif ( ref $what ) {
          return $TRUE;
        }
        else {
          return defined $v;
        }
      }

      $self->get_logger->trace(
        sub {
          sprintf "op: %s\narg: %s\nref arg: %s\n", $op, Dumper( [$v] ),
            ref $v;
        }
      );

      $_ eq '--object'  && return is_hash($v);
      $_ eq '--hash'    && return is_hash($v);
      $_ eq '--blm'     && return ref($v) =~ /^blm/xsmi;
      $_ eq '--plugin'  && return ref($v) =~ /^blm/xsmi;
      $_ eq '--array'   && return is_array($v);
      $_ eq '--scalar'  && return !ref $v;
      $_ eq '--ref'     && return ref $v;
      $_ eq '--defined' && return defined $v;

      my $error = "invalid unary operator in `if/else' statement: $_";
      $self->get_logger->error($error);

      die "$error\n";
    }
  }
  elsif ( @{$args} == 3 ) {
    my ( $lhs, $cond, $rhs ) = @{$args};

    $self->get_logger->trace( sprintf "lhs: $lhs cond $cond rhs: $rhs" );

    my $ref = ref $lhs;
    {
      no warnings qw/uninitialized/;  ## no critic (ProhibitNoWarnings)

      for ( lc $cond ) {
        if ( looks_like_number($lhs) && looks_like_number($rhs) ) {
          $_ eq '--gt' and return $lhs > $rhs;
          $_ eq '--ge' and return $lhs >= $rhs;
          $_ eq '--lt' and return $lhs < $rhs;
          $_ eq '--le' and return $lhs <= $rhs;
          $_ eq '--eq' and return $lhs == $rhs;
          $_ eq '--ne' and return $lhs != $rhs;
        }
        else {
          $_ eq '--gt'   and return $lhs gt $rhs;
          $_ eq '--ge'   and return $lhs ge $rhs;
          $_ eq '--lt'   and return $lhs lt $rhs;
          $_ eq '--le'   and return $lhs le $rhs;
          $_ eq '--eq'   and return $lhs eq $rhs;
          $_ eq '--ne'   and return $lhs ne $rhs;
          $_ eq '--file' and return file_test( $lhs, $rhs );
        }

        $_ eq '--and' and return $lhs && $rhs;
        $_ eq '--or'  and return $lhs || $rhs;

        # --ref(type)
        if ( $_ =~ /^--ref/xsm ) {
          $rhs = regexp_compile($rhs);

          $self->get_logger->trace("--ref(type): $_, $lhs, $rhs");

          my $thing = $_ eq '--ref' ? ref($lhs) : reftype($lhs);
          $thing //= 'SCALAR';

          if ( ref($rhs) eq 'Regexp' ) {
            return $thing =~ $rhs;
          }
          else {
            return $thing eq $rhs;
          }
        }

        if ( $_ eq '--re' ) {
          ## no critic (ProhibitStringyEval, RequireInterpolationOfMetachars))
          my $re = regexp_compile($rhs);

          # we really only support >= 5.10 anyway
          if ( version->parse($PERL_VERSION) >= version->parse('v5.10') ) {
            if ( $lhs =~ $re ) {

              my $capture_group = regexp_capture_group($self);

              return $lhs =~ $re ? ( 1, $capture_group ) : undef;
            }
            else {
              return $FALSE;
            }
          }
          else {
            return $lhs =~ $re;
          }
        }

        if ( $_ eq '--exists' ) {
          die "invalid argument for '--exists': HASH --exists KEY\n"
            if !is_hash($lhs);

          return ( exists $lhs->{$rhs} ) ? $TRUE : $FALSE;

        }
      }

      die "invalid binary operator in `if/else' statement: [$_]\n";
    }
  }
  else {
    die sprintf "invalid number of args(%d) to 'if/else' statement.\n",
      scalar @{$args};
  }

  return $FALSE;
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  # If no args defined, means we are executing the else branch
  if ( !@argv ) {
    $self->SUPER::finalize( $tx, @context );

    return;
  }

  my ( $v, $cg ) = $self->evaluate( \@argv, \@context );

  if ($v) {
    map { $context[0]->{$_} = $cg->{$_}; } keys %{$cg};
  }

  if ( ref($self) =~ /unless/xsmi ) {
    $v = !$v;
  }

  $self->get_logger->debug(
    sub {
      return sprintf 'Statement (%s) evaluated to (%s)',
        ( join $SPACE, map { defined $_ ? $_ : 'undef' } @argv ),
        ( $v ? 'true' : 'false' );
    }
  );

  if ($v) {
    $self->get_logger->debug('Condition succeeded ..');

    $self->SUPER::finalize( $tx, @context );
  }
  elsif ( $self->else_obj ) {
    $self->get_logger->debug('Condition failed .. trying <else[if]> branch');

    $self->else_obj->finalize( $tx, @context );
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>ifE<gt>>

=head1 PURPOSE

Conditional inclusion of a block of text.

=head1 SYNTAX

  <if boolean-expression >
   ...
  <elseif test>
  <elsif test>
   ...
  <else>
   ...
  </if>

Where I<boolean-expression> is a Bedrock expression that evaluates to
true or false (in the Perlish sense).

Bedrock dyadic (has two arguments) boolean expressions include:

 arg1  --eq      arg2
 arg1  --ne      arg2
 arg1  --lt      arg2
 arg1  --le      arg2
 arg1  --gt      arg2
 arg1  --ge      arg2
 arg1  --re      regexp
 arg1  --or      arg2
 arg1  --and     arg2
 arg1  --ref     arg2
 arg1  --reftype arg2
 arg1  --file    arg2


Bedrock monadic (has 1 argument) boolean expressions include:

 --not     arg1 => true if ! arg1
 --exists  arg1 => true if exists arg1
 --defined arg1 => true if defined arg1
 --ref     arg1 => true if arg1 is ref (arg1 can be regexp or string)
 --scalar  arg1 => true if arg1 is a scalar
 --array   arg1 => true if arg1 is an array object
 --hash    arg1 => true if arg1 is a hash object
 --plugin  arg1 => true if arg1 is a Plugin


Deprecated

 --blm    arg1 => true if arg1 is a BLM 
 --object arg1 => true if arg1 is a hash object

=head1 OPTIONS

None

=head1 DESCRIPTION

The C<E<lt>ifE<gt>> tag is used to I<conditionally
assemble> portions of a document.  In other words the statement is
designed to conditionally include 1 of possibly several different
alternate snippets of a Bedrock page to be processed.  This being a
I<templating> language, you should not consider this a flow control
mechanism.

If you find yourself using the C<E<lt>ifE<gt>> tag for gnarly business
logic (i.e. programming), consider writing an I<Application Plugin>.

=head1 EXAMPLES

 <if $input.name>
   <null --define-var="results" $foo.search($input.name)>
   <foreach $results>
      <var $fname> <var $lname><br>
   </foreach>
 <else>
   <form>
     <input type="name" size="40" value="<var $input.name>">&nbsp;
     <input type="submit">
   </form>
 </if>

=head1 NOTES

=over 5

=item 1.

When two arguments are used C<arg1> must be a Bedrock object

 <if $foo --eq 1>

not

 <if 1 --eq "foo">

=item 2.

Comparisons are done in the alpha-numeric sense, if either argument does not look like a number

=item 3.

Compound tests (more than one expression) are allowed, but use parentheses liberally

=item 4.

Whitespace is ALWAYS preserved by Bedrock!

If you donE<039>t want extra space in your HTML then construct accordingly.
In other words, obsessive indenting may look good to you in your raw
Bedrock page, but the resulting HTML will reflect your indenting.
Bedrock is essentially a templating tool, thus it interprets pages
literally.

The snippet below illustrates where whitespace (.) and newlines (^) will be preserved.

  <if $input.action --eq "save">^
  ...<null $foo.save()>^
  </if>^

If you wanted a cleaner HTML output youE<039>d probably want:

  <if $input.action --eq "save"><null $foo.save()></if>

Of course, there is always C<E<lt>sinkE<gt>>.

=item 5.

C<--re> evaluates simple regular expressions using the following Perl pseudo code

   $lhs =~ $rhs

The regular expression on the right hand side of C<--re> can be of the form:

 /regexp/

or

 qr/regexp/

In the former case, the regexp will be compiled as C<qr/$rhs/xsm>.

If the regular expression will not compile, Bedrock will throw an exception.

=item 6.

The right hand side of the C<--ref> operator can be a string or a regular expression. Regular expressions take the form as describe in Note 7.

  <if $input --ref "BLM::Startup::Input">
    This is true...
  </if>

  <if $input --ref '/^BLM/'>
    ...and so is this
  </if

  <if $input --ref 'qr/^blm/i'>
    ...and of course this is too...
  </if>

=item 7.

C<--reftype> evaluates to true if C<ref($arg1) and reftype($arg1) = $arg2>

  <if $foo --reftype 'HASH'>
    This is a HASH!
  </if>

C<$obj.reftype()> will also return the object type ('HASH', 'ARRAY' or 'SCALAR').

=item 8.

Bedrock 2 introduces the C<E<lt>caseE<gt>> tag.  If it feels better using if, then use if, else use  C<E<lt>caseE<gt>>.

  <if $input.radio_1>checked=checked </if>
  <case $input.radio_1 "checked=checked ">

=item 9.

C<--file> is equivalent to PerlE<039>s file test operators

=over 10

=item *

The left hand argument should be file test operator (e.g. C<-s>).  The
right hand argument should be a file name.

=item *

If the right hand argument begins with a '/' (back-slash), then the
argument is considered the fully qualifed pathname of a file.

=item *

If the right hand argument begins with a tilde (C<~>), then the
argument is considered to be a file in the current working directory.

=item *

If the argument begins with neither a back-slash or tilde, then the
argument is considered to be a pathname relative to the document root.

=back

=item 10.

Bedrock does not allow variables to begin with integers, therefore
capture groups in regular expressions can be accessed using
C<$_1>..C<$_n>.

 <if $path_info --re '/members\/([a-zA-Z])$'>
   <null:contact $contact.get_contacts_by_letter($_1, $_1, 'member')>
 </if>

They can also be accessed as named captured groups.

 <if $path_info --re '/members\/(?<letter\>[a-zA-Z])$'>
   <null:contact $contact.get_contacts_by_letter($letter, $letter, 'member')>
 </if>

B<Note the escaping of the final E<gt> (greater than) symbol.>

If you do not escape the E<gt>, Bedrock will report a syntax error
while trying to parse your statement. Alternately, avoid using the
E<lt>, E<gt> symbols as delimiters. in named capture groups.

 <if $path_info --re "/members\/(?'letter'[a-zA-Z])$">
   <null:contact $contact.get_contacts_by_letter($letter, $letter, "member")>
 </if>

=back

=head1 SEE ALSO

C<E<lt>caseE<gt>>, C<E<lt>unlessE<gt>>, C<E<lt>iifE<gt>>, C<E<lt>whileE<gt>>

=cut
