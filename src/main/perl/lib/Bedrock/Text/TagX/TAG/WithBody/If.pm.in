#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::If;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use TagX::TAG::WithBody;

use Scalar::Util qw/reftype looks_like_number/;
use Cwd;
use Data::Dumper;
use Log::Log4perl qw/:easy/;

@ISA = qw (TagX::TAG::WithBody);

sub file_test {
  my $file;

  if ( $_[1] =~ /^(\S*)/ ) {
    $file = $1;
  }
  else {
    die "no filename specified: usage: filename --file file-test-op\n";
  }

  for ($file) {
    /^\~([^~]*)$/ && do {
      $file = getcwd() . '/' . $1;
      last;
    };

    /^[^\/~]/ && do {
      $file = $ENV{DOCUMENT_ROOT} . '/' . $file;
      last;
    };
  }

  $_[0] =~ /^-?([rwxoRWXOezsfdlpSbctugkTBMAC])/ && do {
    return eval "-$1 \"" . $file . "\" ? 1 : 0";
  };

  die "invalid file test operation: '$_[0] $_[1]'";

}

sub end_if {
  my $self = shift;
  $self->parent;
}

sub else_obj {
  my $self = shift;
  if ( @_ == 1 ) {
    $self->{'else'} = shift;
    $self->{'else'}->parent_if(
      exists $self->{'parent_if'} ? $self->{'parent_if'} : $self );
    $self->{'else'}->parent( $self->parent );
  }
  $self->{'else'};
}

sub end_child {
  my $self = shift;
  $self->end_if;
}

sub closure {
  '/if';
}

sub evaluate {
  my $self = shift;
  my ( $args, $context ) = @_;

  if ( @{$args} == 1 ) {
    return $args->[0];
  }
  elsif ( @{$args} == 2 ) {

    # unary op
    my ( $op, $v ) = @{$args};

    for ($op) {

      $_ eq '--not' and return not $v;
      if ( $_ eq '--exists' ) {
        my $what = $self->{'__argv'}->[1];

        if ( ref($what) eq 'TagX::Term::Var' ) {

          return ( defined $what->exists( @{$context} ) ? 1 : 0 );
        }
        elsif ( ref($what) ) {
          return 1;
        }
        else {
          return defined $v;
        }
      }

      $_ eq '--object'  and return ref($v) && reftype($v) eq 'HASH';
      $_ eq '--hash'    and return ref($v) && reftype($v) eq 'HASH';
      $_ eq '--blm'     and return ref($v) =~ /blm/i;
      $_ eq '--plugin'  and return ref($v) =~ /blm/i;
      $_ eq '--array'   and return ref($v) && reftype($v) eq 'ARRAY';
      $_ eq '--scalar'  and return !ref($v);
      $_ eq '--defined' and return defined $v;

      die "invalid unary operator in `if/else' statement: $_\n";
    }
  }
  elsif ( @{$args} == 3 ) {
    my ( $lhs, $cond, $rhs ) = @{$args};
    my $ref = ref($lhs);
    {
      no warnings qw/uninitialized/;

      for ( lc($cond) ) {
        if ( looks_like_number($lhs) && looks_like_number($rhs) ) {
          $_ eq '--gt' and return $lhs > $rhs;
          $_ eq '--ge' and return $lhs >= $rhs;
          $_ eq '--lt' and return $lhs < $rhs;
          $_ eq '--le' and return $lhs <= $rhs;
          $_ eq '--eq' and return $lhs == $rhs;
          $_ eq '--ne' and return $lhs != $rhs;
        }
        else {
          $_ eq '--gt'   and return $lhs gt $rhs;
          $_ eq '--ge'   and return $lhs ge $rhs;
          $_ eq '--lt'   and return $lhs lt $rhs;
          $_ eq '--le'   and return $lhs le $rhs;
          $_ eq '--eq'   and return $lhs eq $rhs;
          $_ eq '--ne'   and return $lhs ne $rhs;
          $_ eq '--file' and return file_test( $lhs, $rhs );
        }

        $_ eq '--and' and return $lhs && $rhs;
        $_ eq '--or'  and return $lhs || $rhs;
        $_ eq '--ref' and return ref($lhs) =~ /$rhs/;

        if ( $_ eq '--reftype' ) {
          return !ref($lhs) if $rhs eq 'SCALAR';
          return ref($lhs) && reftype($lhs) eq $rhs;
        }

        if ( $_ eq '--re' ) {
          my $re = ( $rhs =~ /^qr/ ) ? eval $rhs : eval "qr/\$rhs/";
          if ( $^V ge 'v5.10' ) {
            $lhs =~ /$re/;

            my %capture_group = %+;
            return $lhs =~ /$re/ ? ( 1, \%capture_group ) : undef;
          }
          else {
            return $lhs =~ /$re/;
          }
        }

        if ( $_ eq '--exists' ) {
          die "invalid argument for '--exists': HASH --exists KEY\n"
            unless ref($lhs) && reftype($lhs) eq 'HASH';

          return ( exists $lhs->{$rhs} ) ? 1 : 0;

        }
      }

      die "invalid binary operator in `if/else' statement: $_\n";
    }
  }
  else {
    die 'invalid number of args('
      . scalar( @{$args} )
      . " to 'if/else' statement.\n"
      . join( ",", @{$args} );
  }
}

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options;

  my @argv = $self->parse_options( \%options, @context );
  $self->dump_options( \%options, @argv );

  # If no args defined, means we are executing the else branch
  if ( !@argv ) {
    $self->SUPER::finalize( $tx, @context );

    return;
  }

  my ( $v, $cg ) = $self->evaluate( \@argv, \@context );

  map { $context[0]->{$_} = $cg->{$_}; } keys %{$cg}
    if $v;

  $v = !$v
    if ref($self) =~ /unless/i;

  DEBUG sub {
    "Statement (" . @argv . ") evaluated to (" . $v . "): " . $v
      ? "(true)"
      : "(false)";
  };

  if ($v) {
    DEBUG 'Condition succeeded ..';

    $self->SUPER::finalize( $tx, @context );
  }
  elsif ( $self->else_obj ) {
    DEBUG 'Condition failed .. trying <else[if]> branch';

    $self->else_obj->finalize( $tx, @context );
  }
}

=pod

=head1 TAG - C<E<lt>ifE<gt>>

=head1 PURPOSE

Conditional inclusion of a block of text.

=head1 SYNTAX

  <if boolean-expression >
   ...
  <elseif test>
  <elsif test>
   ...
  <else>
   ...
  </if>

Where I<boolean-expression> is a Bedrock expression that evaluates to
true or false (in the Perlish sense).

Bedrock dyadic (has two arguments) boolean expressions include:

 arg1  --eq      arg2
 arg1  --ne      arg2
 arg1  --lt      arg2
 arg1  --le      arg2
 arg1  --gt      arg2
 arg1  --ge      arg2
 arg1  --re      regexp
 arg1  --or      arg2
 arg1  --and     arg2
 arg1  --ref     arg2
 arg1  --reftype arg2
 arg1  --file    arg2

Bedrock monadic (has 1 argument) boolean expressions include:

 --not     arg1 => true if ! arg1
 --exists  arg1 => true if exists arg1
 --defined arg1 => true if defined arg1

 --scalar  arg1 => true if arg1 is a scalar
 --array   arg1 => true if arg1 is an array object
 --hash    arg1 => true if arg1 is a hash object
 --plugin  arg1 => true if arg1 is a Plugin

Deprecated

 --blm    arg1 => true if arg1 is a BLM 
 --object arg1 => true if arg1 is a hash object

=head1 OPTIONS

None

=head1 DESCRIPTION

The C<E<lt>ifE<gt>> tag pedantically is used to I<conditionally
assemble> portions of a document.  In other words the statement is
designed to conditionally include 1 of possibly several different
alternate snippets of a Bedrock page to be processed.  This being a
I<templating> language, you should not consider this a flow control
mechanism, despite what you might read elsewhere in Bedrock
documentation!  It will mess with your head.

If you find yourself using the C<E<lt>ifE<gt>> tag for gnarly business
logic (i.e. programming), write an I<Application Plugin> please.

=head1 EXAMPLES

 <if $input.name>
   <null --define-var="results" $foo.search($input.name)>
   <foreach $results>
      <var $fname> <var $lname><br>
   </foreach>
 <else>
   <form>
     <input type="name" size="40" value="<var $input.name>">&nbsp;
     <input type="submit">
   </form>
 </if>

=head1 NOTES

=over 5

=item 1.

When two arguments are used C<arg1> must be a Bedrock object

 <if $foo --eq 1>

not

 <if 1 --eq "foo">

=item 2.

Comparisons are done in the alpha-numeric sense, if either argument does not look like a number

=item 3.

Compound tests (more than one expression) are allowed, but use parentheses liberally

=item 4.

Whitespace is ALWAYS preserved by Bedrock!

If you donE<039>t want extra space in your HTML then construct accordingly.
In other words, obsessive indenting may look good to you in your raw
Bedrock page, but the resulting HTML will reflect your indenting.
Bedrock is essentially a templating tool, thus it interprets pages
literally.

The snippet below illustrates where whitespace (.) and newlines (^) will be preserved.

  <if $input.action --eq "save">^
  ...<null $foo.save()>^
  </if>^

If you wanted a cleaner HTML output youE<039>d probably want:

  <if $input.action --eq "save"><null $foo.save()></if>

Of course, there is always C<E<lt>sinkE<gt>>.

=item 5.

C<--re> evaluates simple regular expressions using the following Perl pseudo code

   $lhs =~ /$rhs/

...however you can make them a tad more complex by using a quoted
regular expression.

 <if $input.name --re "qr/foo/i">foo!</if>

The regular expression you pass is (C<$rhs>). I<Note that the Bedrock
parser will look for 'qr' at the beginning of your string to determine
if it is a regular expression.>

=item 6.

C<--ref> evaluates to true if C<ref($arg1) = $arg2>

  <if $input --ref "BLM:Startup::Input">
    This is the input object!
  </if>

=item 7.

C<--reftype> evaluates to true if C<ref($arg1) and reftype($arg1) = $arg2>

  <if $foo --reftype 'HASH'>
    This is a HASH!
  </if>

C<$obj.reftype()> will also return the object type ('HASH', 'ARRAY' or 'SCALAR').

=item 8.

Bedrock 2 introduces the C<E<lt>caseE<gt>> tag.  If it feels better using if, then use if, else use  C<E<lt>caseE<gt>>.

  <if $input.radio_1>checked=checked </if>
  <case $input.radio_1 "checked=checked ">

=item 9.

C<--file> is equivalent to PerlE<039>s file test operators

=over 10

=item *

The left hand argument should be file test operator (e.g. C<-s>).  The
right hand argument should be a file name.

=item *

If the right hand argument begins with a '/' (back-slash), then the
argument is considered the fully qualifed pathname of a file.

=item *

If the right hand argument begins with a tilde (C<~>), then the
argument is considered to be a file in the current working directory.

=item *

If the argument begins with neither a back-slash or tilde, then the
argument is considered to be a pathname relative to the document root.

=back

=item 10.

Named capture groups in regular expressions

If you are running a version of perl > 5.10, then you regular
expression may include named capture groups.

 <if $path_info --re '/members\/(?<letter\>[a-zA-Z])$'>
   <null:contact $contact.get_contacts_by_letter($letter, $letter, 'member')>
 </if>

B<Please note the escaping of the final E<gt> (greater than) symbol.  If
you do not escape the E<gt>, Bedrock will report a syntax error while trying to
parse your statement. Alternately, avoid using the E<lt>, E<gt> symbols as delimiters.>

 <if $path_info --re "/members\/(?'letter'[a-zA-Z])$">
   <null:contact $contact.get_contacts_by_letter($letter, $letter, "member")>
 </if>

=back

=head1 SEE ALSO

C<E<lt>caseE<gt>>, C<E<lt>unlessE<gt>>, C<E<lt>iifE<gt>>, C<E<lt>whileE<gt>>

=cut

1;
