#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Include;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use POSIX qw (strftime);
use TagX::Log;
use TagX::TAG::NoBody;
use TagX::Error;

use Cwd;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = (
		   'file=s'	  => undef,
		   'dir-prefix=s' => undef,
		   'source'       => undef
		  );

    my @argv = $self->parse_options (\%options, @context);

    my $verbose = $self->verbose;
    $self->dump_options(\%options) if $verbose;

    my $dir;
    my $file;

    if ( defined( $dir = delete $options{'dir-prefix'} ) ) {
      &log_message( $self, "Dir prefix is <$dir>" ) if $verbose;
    }

    if ( exists $options{'file'} ) {
      $file = delete $options{'file'};
    }
    elsif ( @argv ) {
      my $tag_opts = $self->parse_tag_name( $argv[0] );
      $tag_opts->{name} =~/^(.*?)(\.inc)?$/;
      $file = $tag_opts->{name} ? $1 . ".inc" : $argv[0];
    }
    else {
      die "Must specify file as argument to <include>.\n";
    }

    if ($dir) {
      $file = $dir . "/" . $file;
    }
    else {
      unless (-s $file) {
	if ( $verbose ) {
	  &log_message( $self, "File $file not found in [" . getcwd() . "]...proceeding on search path.");
	}
	unless ($file =~ /^\~/) {
	  $file = $tx->getoption("INCLUDE_DIR") . "/" . $file;
	}
	else {
	  $file =~ s/^\~/$ENV{'DOCUMENT_ROOT'}/;
	}
      }
    }

    die "Cannot include `$file': is a directory.\n" if -d $file;

    &log_message( $self, "Including file <$file>" ) if $verbose;

    my $more = keys %options;
    my @sv;
    if ( $more ) {
	@sv = stat ( $file );
	unless ( @sv ) {
	    &log_message( $self, "Unable to stat file: $!" );
	    return;
	}
    }

    unless (defined $options{'source'}) {

      my $subform = $tx->new ( $file );
      
      if ( $more ) {
	if ( exists $options{'access-time'} ) {
	  my $value = $sv[8];
	    $value = &strftime ( $options{'access-time-format'}, localtime( $value ) )
	      if exists $options{'access-time-format'};
	    $subform->param ( $options{'access-time'}, $value );
	  }
	
	if ( exists $options{'modify-time'} ) {
	  my $value = $sv[9];
	  $value = &strftime ( $options{'modify-time-format'}, localtime( $value ) )
	      if exists $options{'modify-time-format'};
	  $subform->param ( $options{'modify-time'}, $value );
	}
	
	if ( exists $options{'change-time'} ) {
	  my $value = $sv[10];
	  $value = &strftime ( $options{'change-time-format'}, localtime( $value ) )
	    if exists $options{'change-time-format'};
	  $subform->param ( $options{'change-time'}, $value );
	}
      }
      
      $subform->output;
    }
    else {
      my $obj = TagX::Error->new($file);
      $tx->out_handle->print( $obj->view_source );
    }
}

=head1 TAG - C<E<lt>includeE<gt>>

=head1 PURPOSE

Merge a file into the current Bedrock page at the insertion point of
the tag.

=head1 SYNTAX

  <include[:include-name] [--file=filename] [--dir-prefix] [filename]>

=head1 DESCRIPTION

The C<E<lt>includeE<gt>> tag is used to include a Bedrock snippet within
another Bedrock page.  Typically this is done to make development more
modular.  Sometimes it helps to abtract a page as a series of included
components.  I<All things in moderation> - Benjamin Franklin.

=head1 OPTIONS

This tag takes an optional argument which should be the filename to
include.  Either provide the argument, use the C<--file> option, or specify C<:include-name> but
only one of them.

 --file       = filename
 --dir-prefix = directory-name
 --source

=over 5

=item --file

Name of the file to include.

=item --dir-prefix

Directory where file is to be found.  See the notes below regarding
how Bedrock looks for include files.

=item --source

This option is used to create a raw listing of the included file with
line numbers. Additionally, when used with Bedrock's default error page style
sheet (F/css/source.css>), will produce a respectable decorated listing.

It works best when placed in a C<E<lt>preE<gt>> block.

 <pre>
 <include --source "index.roc">
 </pre>

=back

=head1 NOTES

If the C<E<lt>include:include-nameE<gt>> syntax is used, then Bedrock
will search for a file whose extension is F<.inc> in the current
working directory.  If one is not found there, Bedrock will proceed to
search in the directory indicated by the configuration variable (C<INCLUDE_DIR>).

If C<--dir-prefix> is present it will override that search sequence
and look directly in the specified directory for the file.

Note that files included with this tag are parsed as Bedrock pages.
If you want to include a file as raw text see the C<BLM::File> plugin.

The default suffix for "include files" is F<.inc> so you don't need to
add the suffix unless your include files have non-standard extensions.

If the filename is prefaced with a C<~>, then the file is presumed to
be found relative to the document root.

If the filename includes a C</>, then the filename is presumed to be
a fully qualifed path.

=head1 EXAMPLE

  <include --file="main.inc" --dir-prefix="/var/www/example-site.com/include">

  <include:test> <=> <include --file="test.inc" --dir-prefix=$config.INCLUDE_DIR>

=head1 SEE ALSO

C<E<lt>pebbleE<gt>>

=cut

# 
# Name of Release: $Name$
# $Log$
# Revision 1.25  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.24  2011/01/13 17:18:08  eutl420
# - in finalize, incorrectly handled <include "foo.inc"> case
#
# Revision 1.23  2010/12/12 17:07:19  eutl420
# - use parse_tag_name
#
# Revision 1.22  2010/12/06 14:17:29  rlauer
# - tweaks to pod to better explain the file finding rules and '~'
#
# Revision 1.21  2010/11/23 00:07:10  rlauer
# - added --source option
#
# Revision 1.20  2010/11/20 03:58:32  rlauer
# - better logging when file not found
# - use dump_options
#
# Revision 1.19  2010/11/17 02:27:30  rlauer
# - pod cleanup
#
# Revision 1.18  2010/10/30 21:43:40  rlauer
# - need to to account for '~' in include tag
#
# Revision 1.17  2009/12/31 18:38:33  rlauer
# updated docs
#
# Revision 1.16  2009/12/31 12:43:29  rlauer
# docs tweak
#
# Revision 1.15  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.14  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.13  2008/11/12 16:09:33  rlauer
# - support new <include: syntax
# - use INCLUDE_DIR when looking for files
# - support default .inc extension
#
# Revision 1.12  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.11  2000/11/29 20:56:18  sridhar
# If the filename has a `~' at the beginning, it is replaced with
# DOCUMENT_ROOT environment variable.
#
# Revision 1.10  2000/11/16 19:10:10  sridhar
# Fixed error messages so exceptions don't have perl source code
# locations in them.
#
# Revision 1.9  2000/11/01 16:05:58  sridhar
# 1. Croak if file argument turns out to be a directory
# 2. Removed --access-time, etc.
#
# Revision 1.8  2000/10/31 21:47:39  sridhar
# Bug fix: characters following the closing '>' after <exec> and <include>
# were being discarded due to $_ being clobbered when `output()' was
# reinvoked with new file.
#
# Revision 1.7  2000/05/31 14:54:20  sridhar
# Rigorous version numbering and usage
#
# Revision 1.6  2000/04/24 12:48:27  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:16:48  sridhar
# 1. Using new parse_options method with support for expressions
# 2. Passing filename to TagX->new() method to enable filename logging
# with log messages.
#
# Revision 1.4  2000/03/09 14:16:32  sridhar
# Added new option --dir-prefix, the value of which should be a
# variable resolving into a directory.
#
# Revision 1.3  2000/03/06 18:32:00  sridhar
# Replaced all ad-hoc message logging with message logging only on demand
# -- via --verbose flag specified as a tag option
#
# Revision 1.2  2000/02/08 15:37:44  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:24:58  sridhar
# Added TagX
#
#

1;
