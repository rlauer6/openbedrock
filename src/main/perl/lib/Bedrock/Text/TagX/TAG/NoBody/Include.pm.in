#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Include;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use POSIX qw (strftime);
use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('file=s'			=> undef,
		   'dir-prefix=s'		=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are\n@argv";
	&log_message( $self, $str );
    }

    my $dir;
    my $file;
    if ( defined( $dir = delete $options{'dir-prefix'} ) ) {
	&log_message( $self, "Dir prefix is <$dir>" ) if $verbose;
    }

    if ( exists $options{'file'} ) {
      $file = delete $options{'file'};
    }
    elsif (@argv) {
      $file = shift @argv;
      if ($file =~/^:(.*?)(\.inc)?$/) {
	$file = $1 . ".inc";
      }
    }
    else {
      die "Must specify file as argument to <include>.\n";
    }

    if ($dir) {
      $file = $dir . "/" . $file;
    }
    else {
      unless (-s $file) {
	$file = $tx->getoption("INCLUDE_DIR") . "/" . $file;
      }
    }

    die "Cannot include `$file': is a directory.\n" if -d $file;

    $file =~ s/^\~/$ENV{'DOCUMENT_ROOT'}/;

    &log_message( $self, "Including file <$file>" ) if $verbose;

    my $more = keys %options;
    my @sv;
    if ( $more ) {
	@sv = stat ( $file );
	unless ( @sv ) {
	    &log_message( $self, "Unable to stat file: $!" );
	    return;
	}
    }

    my $subform = $tx->new ( $file );

    if ( $more ) {
	if ( exists $options{'access-time'} ) {
	    my $value = $sv[8];
	    $value = &strftime ( $options{'access-time-format'}, localtime( $value ) )
		if exists $options{'access-time-format'};
	    $subform->param ( $options{'access-time'}, $value );
	}

	if ( exists $options{'modify-time'} ) {
	    my $value = $sv[9];
	    $value = &strftime ( $options{'modify-time-format'}, localtime( $value ) )
		if exists $options{'modify-time-format'};
	    $subform->param ( $options{'modify-time'}, $value );
	}

	if ( exists $options{'change-time'} ) {
	    my $value = $sv[10];
	    $value = &strftime ( $options{'change-time-format'}, localtime( $value ) )
		if exists $options{'change-time-format'};
	    $subform->param ( $options{'change-time'}, $value );
	}
    }

    $subform->output;
}

=head1 TAG include

=head1 PURPOSE

Merge a file into the current page at the insertion point of the tag.

=head1 SYNTAX

  <include:include-name [--file=file] [--dir-prefix]>

=head1 OPTIONS

If the C<E<lt>include:include-nameE<gt>> syntax is used, then Bedrock will search for an
include file in the current working directory followed by the default
include path (C<INCLUDE_DIR>).  If C<--dir-prefix> is present it will
override that search sequence and look directly in the specified
directory for the file.

=over 5

=item --file

Name of the file to include.

=item --dir-prefix

Directory where file is to be found.

=head1 EXAMPLE

  <include --file="main.inc" --dir-prefix="/var/www/example-site.com/include">

  <include:test> <=> <include --file="test.inc" --dir-prefix=$config.INCLUDE_DIR>

=back

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.13  2008/11/12 16:09:33  rlauer
# - support new <include: syntax
# - use INCLUDE_DIR when looking for files
# - support default .inc extension
#
# Revision 1.12  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.11  2000/11/29 20:56:18  sridhar
# If the filename has a `~' at the beginning, it is replaced with
# DOCUMENT_ROOT environment variable.
#
# Revision 1.10  2000/11/16 19:10:10  sridhar
# Fixed error messages so exceptions don't have perl source code
# locations in them.
#
# Revision 1.9  2000/11/01 16:05:58  sridhar
# 1. Croak if file argument turns out to be a directory
# 2. Removed --access-time, etc.
#
# Revision 1.8  2000/10/31 21:47:39  sridhar
# Bug fix: characters following the closing '>' after <exec> and <include>
# were being discarded due to $_ being clobbered when `output()' was
# reinvoked with new file.
#
# Revision 1.7  2000/05/31 14:54:20  sridhar
# Rigorous version numbering and usage
#
# Revision 1.6  2000/04/24 12:48:27  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:16:48  sridhar
# 1. Using new parse_options method with support for expressions
# 2. Passing filename to TagX->new() method to enable filename logging
# with log messages.
#
# Revision 1.4  2000/03/09 14:16:32  sridhar
# Added new option --dir-prefix, the value of which should be a
# variable resolving into a directory.
#
# Revision 1.3  2000/03/06 18:32:00  sridhar
# Replaced all ad-hoc message logging with message logging only on demand
# -- via --verbose flag specified as a tag option
#
# Revision 1.2  2000/02/08 15:37:44  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:24:58  sridhar
# Added TagX
#
#

1;
