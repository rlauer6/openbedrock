#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Include;

use strict;
use warnings;

use Bedrock::Constants qw{:chars :booleans};
use Cwd;
use English qw{-no_match-vars};
use POSIX qw (strftime);
use TagX::Error;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw{ Exporter TagX::TAG::NoBody};

########################################################################
sub define_options {
########################################################################
  return (
    'file=s'       => undef,
    'dir-prefix=s' => undef,
    'source'       => undef,
    'optional'     => undef,
  );
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  my $dir_prefix = delete $options{'dir-prefix'};

  my $file = delete $options{'file'};

  if ( !$file && @argv ) {
    my $tag_opts = $self->parse_tag_name( $argv[0] );
    $file = $tag_opts->{name} || "@argv";
  }

  if ( !$file ) {
    die "Must specify file as argument to <include>.\n";
  }

  die "invalid filename\n"
    if $file =~ /[.][.]/xsm;

  my @file_paths;

  # -- if a prefix exists, we assume an absolute path (might want to
  # reconsider this 'feature')
  if ($dir_prefix) {
    $self->get_logger->warn('POSSIBLE SECURITY ISSUE USING ABSOLUTE PATHS!');

    push @file_paths, sprintf '%s/%s', $dir_prefix, $file;

    if ( $file !~ /[.].+$/xsm ) {
      push @file_paths, sprintf '%s/%s.inc', $dir_prefix, $file;
    }
  }
  else {

    # what they asked for
    push @file_paths, $file;

    # in case they forgot the inc
    if ( $file !~ /[.].+$/xsm ) {
      push @file_paths, $file . '.inc';
    }

    # relative to DOCUMENT_ROOT
    if ( $file =~ /^\~/xsm ) {
      $file =~ s/^\~/$ENV{'DOCUMENT_ROOT'}/xsm;
      push @file_paths, $file;
    }

    if ( $tx->getoption('INCLUDE_DIR') ) {
      push @file_paths, sprintf '%s/%s', $tx->getoption('INCLUDE_DIR'), $file;
    }
    elsif ( $file =~ /^\//xsm ) {
      $self->get_logger->warn(
        'ATTEMPT TO INCLUDE A FILE USING AN ABSOLUTE PATH!');
    }
  }

  my $include_file;
  my @status_info;

  $self->get_logger->debug(
    sub {
      sprintf 'search list: %s', join "\n", @file_paths;
    }
  );

  foreach my $f (@file_paths) {
    die "Cannot include `$f': is a directory.\n"
      if -d $f;

    @status_info = stat $f;

    # try again w/.inc if they forgot .inc?
    if ( !@status_info && $f !~ /[.].+$/xsm ) {
      $self->get_logger->debug(
        sub {
          sprintf 'looking for %s.inc file', $f;
        }
      );

      $f = $f . '.inc';

      @status_info = stat $f;
    }

    if (@status_info) {
      push @status_info, $f;
      last;
    }

    $self->get_logger->debug(
      sub {
        "include: $f not found on search path";
      }
    );
  }

  if (@status_info) {
    $file = pop @status_info;

    $self->get_logger->debug(
      sub {
        "include: found file [$file]";
      }
    );

    if ( !$options{'source'} ) {

      my $subform    = $tx->new($file);
      my @file_times = @status_info[ ( 8, 9, 10 ) ];

      foreach my $v (qw/access modify change/) {
        if ( $options{ $v . '-time' } ) {
          my $value = shift @file_times;

          if ( $options{ $v . '-time-format' } ) {
            $value
              = strftime( $options{ $v . '-time-format' }, localtime $value );
          }

          $subform->param( $options{ $v . '-time' }, $value );
        }
      }

      $subform->output;
    }
    else {
      my $obj = TagX::Error->new($file);

      $tx->out_handle->print( $obj->view_source );
    }
  }
  elsif ( !$options{'optional'} ) {
    die sprintf "Unable to open [%s] for input: No such file or directory\n",
      $file;
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>includeE<gt>>

=head1 PURPOSE

Merge a file into the current Bedrock page at the insertion point of
the tag.

=head1 SYNTAX

  <include[:include-name] [--file=filename] [--dir-prefix=dir] [filename]>

=head1 DESCRIPTION

The C<E<lt>includeE<gt>> tag is used to include a Bedrock snippet within
another Bedrock page.  Typically this is done to make development more
modular.  Sometimes it helps to abtract a page as a series of included
components.  I<All things in moderation> - Benjamin Franklin.

=head1 OPTIONS

This tag takes an optional argument which should be the filename to
include.  Either provide the argument, use the C<--file> option, or specify C<:include-name> but
only one of them.

 --file       = filename
 --dir-prefix = directory-name
 --optional
 --source

=over 5

=item --file

Name of the file to include.

=item --dir-prefix

Directory where file is to be found.  See the notes below regarding
how Bedrock looks for include files.

=item --optional

The C<--optional> flag will prevent Bedrock from throwing an exception
if the file is not found.  Using this option is faster than the
construct below, however use it with caution since Bedrock will not
(obviously) not let you know it couldn't find the file!

Alternately:

 <try>
  <include:foo>
 <catch>
 </try>

=item --source

This option is used to create a raw listing of the included file with
line numbers. Additionally, when used with Bedrock's default error page style
sheet (F/css/source.css>), will produce a respectable decorated listing.

It works best when placed in a C<E<lt>preE<gt>> block.

 <pre>
 <include --source "index.roc">
 </pre>

=item File Stats

=over 10

=item access-time

Name of variable to hold the access time of the file.

=item change-time

Name of variable to hold the change time of the file.

=item modify-time

Name of variable to hold the modify time of the file.

=back

=back

=head1 NOTES

If the C<E<lt>include:include-nameE<gt>> syntax is used, then Bedrock
will search for a file whose extension is F<.inc> in the current
working directory.  If one is not found there, Bedrock will proceed to
search in the directory indicated by the configuration variable (C<INCLUDE_DIR>).

If C<--dir-prefix> is present it will override that search sequence
and look directly in the specified directory for the file.

Note that files included with this tag are parsed as Bedrock pages.
If you want to include a file as raw text see the C<BLM::File> plugin.

The default suffix for "include files" is F<.inc> so you don't need to
add the suffix unless your include files have non-standard extensions.

If the filename is prefaced with a C<~>, then the file is presumed to
be found relative to the document root.

If the filename includes a C</>, then the filename is presumed to be
a fully qualifed path. B<(highty discouraged!)>.

=head1 EXAMPLE

  <include --file="main.inc" --dir-prefix="/var/www/example-site.com/include">

  <include:test> <=> <include --file="test.inc" --dir-prefix=$config.INCLUDE_DIR>

=head1 SEE ALSO

C<E<lt>pebbleE<gt>>

=cut
