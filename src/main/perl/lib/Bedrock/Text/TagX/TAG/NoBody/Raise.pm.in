#!@PERL@ -w

#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

package TagX::TAG::NoBody::Raise;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use TagX::TAG::NoBody;
use Log::Log4perl qw/:easy/;

@ISA = qw (TagX::TAG::NoBody);

sub define_options {
  return ( 'multiline' => undef );
}

sub finalize {
  my ( $self, $tx, @context ) = @_;
  my %options = $self->define_options;
  
  my @argv = $self->parse_options( \%options, @context );
  
  $self->dump_options(\%options, @argv);
  
  my $err = join("", @argv);
  
  $err = shift [split "\n", "$err"]
    if !exists $options{'multiline'};

  die "$err\n";
}

=pod

=head1 TAG - C<E<lt>raiseE<gt>>

=head1 PURPOSE

Raise an exception, typically handled by a try/catch block.

=head1 SYNTAX

  <raise expression>

=head1 DESCRIPTION

The C<E<lt>raiseE<gt>> tag is used to signal an exception to be caught within a C<try/catch> block.

=over 5

=item * expression

A Bedrock expression that typically results in a string or scalar that
represents an exception to be caught by your C<try/catch> block.

=back

=head1 OPTIONS

=head2 --multiline

By default C<E<lt>raiseE<gt>> will chop multi-line error messages and
only present the first line.  If you want to catch multi-line error
messages, then use this option.

 <raise --multiline>

=head1 NOTES

The variable C<$@> will be set to the value of the expression.

=head1 EXAMPLE

 <try>
   ...
   <plugin:search>
   <if --not $search.handle>
     <raise "Could not connect">
   </if>
 <catch "connect">
 Could not connect to server!
 </try>

=head1 SEE ALSO

C<E<lt>tryE<gt>>, C<E<lt>catchE<gt>> 

=cut

1;
