#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Catch;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.08;
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::TAG::WithBody 1.06;

@ISA = qw (TagX::TAG::WithBody);

sub parent_try
{
    my $self = shift;
    $self->{'parent_try'} = shift if @_ == 1;
    $self->{'parent_try'};
}
 
sub end_try
{
    my $self = shift;
    $self->parent;
}

sub closure
{
    '/try';
}

sub catch
{
    my $self = shift;
    if ( @_ == 1 ) {
        $self->{'catch'} = shift;
        $self->{'catch'}->parent_try ( exists $self->{'parent_try'} ? $self->{'parent_try'} : $self );
        $self->{'catch'}->parent ( $self->parent );
    }
    $self->{'catch'};
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options;
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments ..(@argv)";
	&log_message( $self, $str );
    }

    if ( @argv > 0 ) {
	my $string = "@argv";
	if ( $@ =~ /$string/i ) {
	    &log_message( $self, "Caught exception $@ with /$string/i" ) if $verbose;
	    $self->SUPER::finalize ( $tx, @context );
	    &log_message( $self, "Done handling exception" ) if $verbose;
	} elsif ( $self->catch ) {
	    &log_message( $self, "Trying next exception handler for $@" ) if $verbose;
	    $self->catch->finalize ( $tx, @context );
	} else {
	    &log_message( $self, "No exception handler for ($@)" ) if $verbose;
	    die;
	}
    } else {
	# A catch-all exception handler
	&log_message( $self, "In catch-all exception handler" )
	    if $verbose;
	$self->SUPER::finalize ( $tx, @context );
    }
}

=pod

=head1 TAG - <catch>

=head1 PURPOSE

Begins the "catch" portion or exceoption handling portion of a try/catch block.

=head1 SYNTAX

  <catch [regexp]>


=head1 DESCRIPTION

C<catch> is part of the C<try/catch> mechanism for trapping
application errors.  One or more C<catch> blocks may be defined by
your application.  If the regular expression argument form of C<catch>
is used, then the exception is matched against the regular expression
to determin if the C<catch> block will handle this exception.

If no regular expression is present, then that C<catch> block will be the default exception path.

  <try>
  ...
  <catch "error 1">
  ...
  <catch "error 2">
  ...
  <catch>
  ...
  </try>

=over 5

=item regexp

Is a simple string that represents a regular expression that will be
matched against the current exception to determine if this catch block
should be evaluated.  The catch blocks are examined in order and if no
regular expression is matched the default catch block will be used.

Regular expresssions are evaluated in a case-insensitive manner.

=back

=head1 EXAMPLE

  <try>
    <pebble:mypeb "arg1">
  <catch "connect">
    Could not connect!
  <catch "parameter">
    Illegal parameter!
  <catch>
    Unknown error!
  </try>

=head1 SEE ALSO

C<E<lt>tryE<gt>>, C<E<lt>raiseE<gt>>, 

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.10  2009/12/31 18:38:41  rlauer
# updated docs
#
# Revision 1.9  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.8  2008/12/02 15:02:30  rlauer
# Added pod for tag reference
#
# Revision 1.7  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.6  2000/12/15 14:30:20  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.5  2000/05/31 14:39:48  sridhar
# Rigorous version numbering and usage
#
# Revision 1.4  2000/04/24 12:49:13  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.3  2000/04/13 15:21:01  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.2  2000/03/13 15:45:56  sridhar
# Added --verbose option and more verbose message logging
#
# Revision 1.1  2000/03/09 14:19:18  sridhar
# Adding Catch.pm for handling <catch>, which is the tag for catching exceptions.
#
#

1;
