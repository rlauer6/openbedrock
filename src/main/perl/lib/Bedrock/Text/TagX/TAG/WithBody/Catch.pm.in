#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::WithBody::Catch;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::TAG::WithBody 1.06;

@ISA = qw (TagX::TAG::WithBody);

sub parent_try
{
    my $self = shift;
    $self->{'parent_try'} = shift if @_ == 1;
    $self->{'parent_try'};
}
 
sub end_try
{
    my $self = shift;
    $self->parent;
}

sub closure
{
    '/try';
}

sub catch
{
    my $self = shift;
    if ( @_ == 1 ) {
        $self->{'catch'} = shift;
        $self->{'catch'}->parent_try ( exists $self->{'parent_try'} ? $self->{'parent_try'} : $self );
        $self->{'catch'}->parent ( $self->parent );
    }
    $self->{'catch'};
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options;
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments ..(@argv)";
	&log_message( $self, $str );
    }

    if ( @argv > 0 ) {
	my $string = "@argv";
	if ( $@ =~ /$string/i ) {
	    &log_message( $self, "Caught exception $@ with /$string/i" ) if $verbose;
	    $self->SUPER::finalize ( $tx, @context );
	    &log_message( $self, "Done handling exception" ) if $verbose;
	} elsif ( $self->catch ) {
	    &log_message( $self, "Trying next exception handler for $@" ) if $verbose;
	    $self->catch->finalize ( $tx, @context );
	} else {
	    &log_message( $self, "No exception handler for ($@)" ) if $verbose;
	    die;
	}
    } else {
	# A catch-all exception handler
	&log_message( $self, "In catch-all exception handler" )
	    if $verbose;
	$self->SUPER::finalize ( $tx, @context );
    }
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.6  2000/12/15 14:30:20  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.5  2000/05/31 14:39:48  sridhar
# Rigorous version numbering and usage
#
# Revision 1.4  2000/04/24 12:49:13  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.3  2000/04/13 15:21:01  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.2  2000/03/13 15:45:56  sridhar
# Added --verbose option and more verbose message logging
#
# Revision 1.1  2000/03/09 14:19:18  sridhar
# Adding Catch.pm for handling <catch>, which is the tag for catching exceptions.
#
#

1;
