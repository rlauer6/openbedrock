#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Snippet;

use strict;
use warnings;

use Bedrock qw{:booleans};
use Bedrock::Constants qw{:chars :booleans};
use Bedrock::Dump;
use Bedrock::Hash;
use Bedrock::Snippet;
use English qw/-no_match_vars/;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw{ Exporter TagX::TAG::WithBody};

########################################################################
sub error_listing {
########################################################################
  my ( $source, $error, $type ) = @_;

  require IO::Scalar;

  my $fd = IO::Scalar->new( \$source );

  my $err_line;

  if ( $error =~ /line\s(\d+),/xsm ) {
    $err_line = $1;
  }

  my $listing = sprintf "snippet - %s\n\n%s\n", $type, $EVAL_ERROR;

  my $line_no = 0;

  while ( defined( $_ = $fd->getline ) ) {
    chomp;
    $listing .= sprintf "[%4d] %s %s\n", ++$line_no,
      $line_no eq $err_line ? '>>' : q{  }, $_;
  }

  $fd->close;

  return $listing;
}

########################################################################
sub closure {
########################################################################
  return '/snippet';
}

########################################################################
sub define_options {
########################################################################
  return (
    'define-var=s'     => $UNDERSCORE,
    'define-snippet=s' => 'snippet',
  );

} ## end sub define_options

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $tag_opts->{type} ) {
    $options{'define-var'} = $tag_opts->{name};

    $options{'define-snippet'} = $tag_opts->{type};

    shift @argv;
  }
  elsif ( $tag_opts->{name} ) {
    $options{'define-var'} = $tag_opts->{name};

    shift @argv;
  }

  my $snippet = $self->{subobjs}->[0];

  $self->get_logger->debug(
    sub {
      sprintf "Compiling snippet: \n%s", $snippet;
    }
  );

  # compile snippet
  my $obj = eval { $self->create_snippet_class($snippet); };

  die error_listing( $snippet, $EVAL_ERROR, 'complilation error' )
    if $EVAL_ERROR;

  $self->get_logger->debug(
    sub {
      sprintf 'Assigning result of <snippet> to [%s]', $options{'define-var'};
    }
  );

  # initiaize snippet, create methods
  my $rv = eval { $obj->init_snippet( \@context, $tx->config, @argv ); };

  die error_listing( $snippet, $EVAL_ERROR, 'error initializing snippet' )
    if $EVAL_ERROR;

  $tx->param( $options{'define-var'}     => $rv );
  $tx->param( $options{'define-snippet'} => $obj );

  return;
}

# create_snippet_class( name, code );
########################################################################
sub create_snippet_class {
########################################################################
  my ( $self, $code ) = @_;

  my $prefix = <<'END_OF_CODE';
  my $context = shift;
  my $config = shift;

  $self->config(\$config);
  $self->context(\$context);

# 8<------- YOUR CODE START HERE -------
END_OF_CODE

  $code = $prefix . $code;
  $code .= "# 8<------- YOUR CODE STOPS HERE -------\n";

  my $snip = Bedrock::Snippet->new( name => 'init_snippet', code => $code );

  die $EVAL_ERROR
    if $EVAL_ERROR;

  return $snip;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>snippetE<gt>>

=head1 PURPOSE

The C<E<lt>snippetE<gt>> tag allows the Bedrock developer to include a
snippet of Perl code.

=head1 SYNOPSIS

 <snippet $input.some_value>
 use Digest::MD5 qw/md5/;

 return md5(shift);
 </snippet>
 <var $_>

 <snippet:foo>
 use Digest::MD5 qw/md5/;

 sub my_md5 {
   my $self = shift;

   return md5(shift);
 }
 </snippet>

 <var $foo.md5($input.value)>

=head1 DESCRIPTION

 <snippet[:var-name] [options] arg1 arg2 ... >
 # your Perl code here...
 </snippet>

While I<highly discouraged>, the C<E<lt>snippetE<gt>> tag can be used
to include Perl code in your Bedrock page that can return a single
value or perform some function.  The tag can encapsulate defined methods that
can then be invoked anywhere on the page.

Arguments defined in snippet definition are used to invoke a one time
initialization sequence for the snippet.

 <snippet --define-var="foo" $bar>
 use Digest::MD5 qw/md5/;

 return md5(shift);

 </snippet>
 md5: <var $foo>

=head1 OPTIONS

 <snippet[:var-name] [options] arg1 arg2 ... >
 # your Perl code here...
 </snippet>

 --define-var     = "var-name"
 --define-snippet = "snippet-name"

=over 5

=item --define-var

The name of the object that will hold the return value of the C<snippet>.
If not provided the C<snippet> value is available as the default
variable C<$_>.

=item --define-snippet

The name that will be given to the snippet object that is created. If
not provided the name of the object is C<$snippet>.

HereE<039>s an example where neither option is used and a method named
C<my_join> is created.

 <snippet>
 sub my_join {
  my $self = shift;

  return join(",", @_);
 }
 </snippet>

Then to use the snippet...

 <var $snippet.my_join("a", "b", "c")>

I<Note that the C<my_join> is a method of a class whose parent is
C<BLM::Hash>.  Hence you can provide persistence to your snippet
object<039>s hash members.>

=back

=head1 NOTES

As noted above, Bedrock B<discourages> the use of programming
constructs within your Bedrock page.  Bedrock should be used to
assemble a page, not to create a program that outputs an HTML page.
If you really want to write program that creates an HTML page, you
probably use PHP or Perl directly. Having said that, this tag can be
useful for prototyping.

It may be useful for a web application development tool like Bedrock to
include an environment whereby a protoype of a Plugin can be
developed. Hence the C<snippet> concept.  I<Proceed with caution.>

I<The return value of a C<snippet> is stored in a variable specified by
the C<--define-var> option or in C<$_> if no variable name is
specified.>

I<You can create subroutines within the snippet that are called
locally or that are invoked from your Bedrock page.>

Subroutines are actually class methods of a I<pseudo-Plugin> that is
temporarily created during the intepretation of your page.  You can
pass arguments to these subroutines and even persist data across
calls.  The pseudo-Plugin C<ISA> C<Bedrock::Hash> so the methods
associated with hash objects are also available.

See the examples below.

When you're happy with your little C<snippet> and want to make it a
Plugin, you can simply collect all your methods and take the
statements from the top of your C<snippet> and add them to the Plugin
template below.  Then, deploy the Perl module (in the example below
C<BLM/Foo.pm>) I<somewhere where Perl will find it>.

 package BLM::Foo;

 use strict;
 use warnings;

 use Bedrock::Plugin;
 use Bedrock::Hash;

 use parent qw{ Bedrock::Hash Bedrock::Plugin };
 
 sub init_plugin {
   my $self = shift;

   # -- add the stuff you had at the top of your snippet here and return a value 

   return 1;
 }

 # -- add your snippet methods here
 
 1; 

 <plugin:Foo>

 <var $_>

=head1 EXAMPLES

=over 5

=item * Return a value in C<$_>

 <snippet "hello world">
 my @a = split " ", shift;
 
 return join(" ", map { ucfirst } @a;  
 </snippet>

 Snippet return value is <var $_>

=item * Return a value in named variable

 <snippet --define-var="foo" "hello world">
 my @a = split " ", shift;
 
 return join(" ", map { ucfirst } @a;  
 </snippet>

 Foo is <var $foo>

=item * Create named snippet with a method

 <snippet --define-snippet="hello_world" "hello world">
 my @a = split " ", shift;
 
 return join(" ", map { ucfirst } @a);
 
 sub HelloWorld {
  my $self = shift;
  my @a = split " ", shift;
 
  return join(" ", map { ucfirst } @a);
 }
 </snippet>
 
 Return value is <var $_> : Method call return value is <var $hello_world.HelloWorld("hello world")>

=back

=head1 GOODIES

Your snippet is actually a class of type C<Bedrock::Snippet> and your
initialization code is actually part of the classE<039>s
C<init_snippet()> method.  You initialization code can access the
method reference as C<$self>.

There are also some useful methods of the class you might want to use.

=head2 config

Returns BedrockE<039>s configuration object. Since Bedrock defines the
C<$config> object during page processing, you could simply pass
parameters from the configuration object into your snippet or use the
method in your snippet.

 <snippet>

 if ( $self->config->{SOME_CONFIG_VAR} ) {
   ...
 }
 
 </snippet>

=head2 context

Returns an array reference to BedrockE<039>s current symbol context.
Each element of the array defines a C<TagX::Symtab> object.  The
symbol table object contains a set of key/value pairs that represent
localized Bedrock variables.  Tread with care...you probably do not
really need to access this.

 $self->context->[0]->{'_'}; # current default variable if defined

=head1 SEE ALSO

C<E<lt>pebbleE<gt>>

=cut

1;
