#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Loop::SQLSelect;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use Bedrock::Array;
use Bedrock::Hash;

use DBI;
use Data::Dumper;
use Scalar::Util qw/reftype/;
use TagX::Log;
use TagX::TAG::WithBody::Loop;
use TagX::TAG::SQLHandler;
use Log::Log4perl qw/get_logger/;

@ISA = qw (TagX::TAG::WithBody::Loop TagX::TAG::SQLHandler);

sub closure {
  '/sqlselect';
}

sub define_options {
  return (
    'dbname=s'           => undef,
    'db=s',              => undef,
    'statement=s'        => undef,
    'bind=s'             => undef,
    'arg=s'              => undef,
    'define-var=s'       => undef,
    'define-recordset=s' => undef,
    'recordset'          => undef,
    'need-rows=s'        => undef,
    'raise=s'            => undef,
    'meta-info=s'        => undef
  );
}
  
sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  my $logger = get_logger();

  $logger->info("logging with log4perl!\n");
  
  $logger->debug(sub { Dumper \%options })
    if $verbose;

  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $options{'define-recordset'} ) {
    $options{'define-var'} =  $options{'define-recordset'};
    $options{recordset} = 1;
  }

  if ( $tag_opts->{name} ) {
    $options{'define-var'} = $tag_opts->{name};
    shift @argv;
  }

  my $dbh = $self->get_db_handle( $tx, %options );

  die "Specify SQL statement using --statement or as argument, not both.\n"
    if exists $options{'statement'} and @argv > 0;

  my $statement;
  if ( exists $options{'statement'} ) {
    $statement = delete $options{'statement'};
  }
  else {
    $statement = "@argv";
  }

  die "<sqlselect>: no statement specified.\n" unless length($statement);

  if ( exists $options{'arg'} ) {
    my @args = ref($options{arg}) && ref($options{arg} eq 'ARRAY') ? @{$options{arg}} : ($options{arg});

    &log_message( $self, "Substituting following args into statement:\n@args" )
      if $verbose;

    $statement = sprintf( $statement, @args );

    &log_message( $self, "Statement after arg-substitution\n$statement" )
      if $verbose;
  }

  my $sth = $dbh->prepare($statement);
  die "Error in SQL Statement: `", $dbh->errstr, "'\n$statement\n" unless $sth;

  my $nParams = $sth->{NUM_OF_PARAMS};

  my @bind;
  if ( exists $options{'bind'} ) {
    my $bind = $options{'bind'};
    if ( ref($bind) && reftype($bind) eq 'ARRAY' ) {
      for my $item ( @{$bind} ) {
        if ( ref($item) && reftype($item) eq 'ARRAY' ) {
          push @bind, @{$item};
        }
        else {
          push @bind, $item;
        }
      }
    }
    else {
      @bind = ($bind);
    }

    if ( $nParams < @bind ) {
      die @bind - $nParams, " extra bind variable(s) specified.\n";
    }
    elsif ( $nParams > @bind ) {
      die "Insufficient bind variables: need ", $nParams - @bind, " more.\n";
    }
  }
  elsif ($nParams) {
    die "SQL statement needs $nParams bind variable(s).\n";
  }

  my $i = 1;
  my $str = "Bind variables:\n" if $verbose;
  for my $bindval (@bind) {
    my $type = $1 if $bindval =~ s/\(\%\s*(\d+)\s*\%\)\s*$//;

    if ( defined($type) ) {
      $sth->bind_param( $i, $bindval, { TYPE => $type } )
      || die "Failure binding param $i, TYPE $type: `", $sth->errstr, "'\n";
    }
    else {
      $sth->bind_param( $i, $bindval )
      || die "Failure binding param $i: `", $sth->errstr, "'\n";
    }

    if ($verbose) {
      $str .= "Bound ($i";
      $str .= ", $type" if defined($type);
      $str .= ", $bindval" if defined($bindval);
      $str .= ")";
    }
  }
  continue {
    $i++;
  }

  &log_message( $self, $str ) 
    if $verbose;

  my $rows = $sth->execute;
  die "Error executing SQL statement: ", $sth->errstr, "\n$statement\n"
    unless defined($rows);

  my $meta_info;
  if ( $options{'meta-info'} ) {
    &log_message( $self,
              "Need to define meta information variable $options{'meta-info'}" )
      if $verbose;
    $meta_info = { 'NUM_OF_FIELDS' => $sth->{NUM_OF_FIELDS},
                   'NUM_OF_PARAMS' => $sth->{NUM_OF_PARAMS},
                   'STATEMENT'     => $sth->{Statement}
                 };
    my @names = @{ $sth->{NAME_uc} };
    for ( my $i = 0 ; $i < @names ; $i++ ) {
      $meta_info->{FIELDS}->[$i] = { 'NAME'      => $names[$i],
                                     'TYPE'      => $sth->{TYPE}->[$i],
                                     'PRECISION' => $sth->{PRECISION}->[$i],
                                     'SCALE'     => $sth->{SCALE}->[$i],
                                     'NULLABLE'  => $sth->{NULLABLE}->[$i]
                                   };
    }
  }

  my ( $href, @rows, $defined );

  if ( exists $options{'define-var'} ) {
    $defined = $options{'define-var'};
    &log_message( $self, "Need to define <$defined>" ) if $verbose;
  }

  $i = 0;
  &log_message( $self, "we have [", scalar( @{ $self->{'subobjs'} } ),
                "] children" )
  if $verbose;

  while ( defined( $href = $sth->fetchrow_hashref ) ) {

    my $href = Bedrock::Hash->new( %{$href} );
    if ( defined($defined) ) {
      push @rows, $href;
    }
    
    if ($verbose) {
      my ( $key, $value );
      my $str = '';
      while ( ( $key, $value ) = each %{$href} ) {
        $str .= "\t$key = (";
        $str .= $value if defined($value);
        $str .= "\n";
      }
      &log_message( $self, "Row .. $i\n$str" );
    }

    # note we add '_' and 'rownum' and $hashref to local context
    $self->{'finalize_children'}->( $self->{'subobjs'}, $tx, 
				    $href, {'_' => $href, 'rownum' => $i+1 }, 
				    @context
				  );
    $i++;
  }
  &log_message( $self, "Found <$i> row(s)." ) if $verbose;
  &log_message( $self, "we have [", scalar( @{ $self->{'subobjs'} } ),
                "] children" )
  if $verbose;

  if ( $options{'meta-info'} ) {
    $meta_info->{'COUNT'} = $i;
    $tx->param( $options{'meta-info'} => $meta_info );
  }

  if ( $options{'need-rows'} ) {
    if ( $options{'need-rows'} =~ /^([\+\-]?)(\d+)$/oi ) {
      my ( $sgn, $num ) = ( $1, $2 );
      if ( $sgn eq '+' ) {

        # need at least $num rows
        if ( $i < $num ) {
          if ( $options{'raise'} ) {
            die "$options{'raise'}\n";
          }
          else {
            die
            "Insufficient number of rows found($i) (at least $num needed)\n";
          }
        }
      }
      elsif ( $sgn eq '-' ) {

        # need max of $num rows
        if ( $i > $num ) {
          $tx->error->location( $self->start_location );
          if ( $options{'raise'} ) {
            die "$options{'raise'}\n";
          }
          else {
            die "Too many rows found($i) (max of $num exceeded)\n";
          }
        }
      }
      elsif ( $i != $num ) {

        # need exactly $num rows
        $tx->error->location( $self->start_location );
        if ( $options{'raise'} ) {
          die "$options{'raise'}\n";
        }
        else {
          die "Invalid number of rows found($i) (need exactly $num rows)\n";
        }
      }
    }
    else {
      $tx->error->location( $self->start_location );
      die
"Invalid integer `$options{'need-rows'}' specified as argument to --need-rows.\n";
    }
  }
 
  # return a Bedrock::Array or a Bedrock::RecordSet
  if ( $defined ) {
    my $obj = $options{recordset} ?  new Bedrock::RecordSet( \@rows ) : new Bedrock::Array::Reference( \@rows );
    $tx->param( $defined => $obj );
  }
}

=pod

=head1 TAG - C<E<lt>sqlselectE<gt>>

=head1 PURPOSE

Execute a SQL select statement. Iterates until no rows are returned.

=head1 SYNTAX

  <sqlselect[:name] [options] sql-statement></sqlselect>

=head1 DESCRIPTION

The C<E<lt>sqlselectE<gt>> tag iterates over a record set that is
produced with the given SQL statement.  The columns selected in the
statement are exposed as variables within the scope of the tag.  In
other words if your statement was:

  SELECT ACCT, NAME FROM CUSTOMER

then the variables C<$ACCT> and C<$NAME> would be available with the
scope of the tag and only within that scope.  If you wanted to
preserve the data outside the scope of the tag you would need to
specify the C<--define-var> option.

=head1 OPTIONS

 --arg              = expression
 --bind             = expression
 --db               = "handle-name"
 --define-recordset = "var-name"
 --define-var       = "var-name"
 --meta-info
 --need-rows        = integer|expression
 --raise            = "string"
 --recordset        
 --statement        = "sql-statement"

=over 5

=item --arg

One or more arguments to use as arguments to C<sprintf> using SQL
statement as a format string.  Multiple C<--arg> options may be used
or you may specify and array object as the C<--arg> parameter.

=item --bind

One or more bind variables may be specified using multiple C<--bind>
statements or by specifying an array object as the C<--bind> parameter.
They are bound in the order in which they are defined.

=item --db

Name of the database handle object.  The handle associated with the
most recent C<E<lt>sqlconnectE<gt>> is assumed if this parameter is not
specified.

=item --define-recordset

Name of an object which will be used to store the query results.  The
object return is a Bedrock recordset.

=item --define-var

Name of an object which will be used to store the query results.  The
object return is a Bedrock array.

=item --meta-info

Name of the object that will hold the meta data associated with the
execution of the query.  Meta data may include the following data
elements depending upon the DBI implementation:

=over 10

=item NUM_OF_FIELDS

=item NUM_OF_PARMS

=item STATEMENT

=item FIELDS

=over 15

=item TYPE

=item PRECISION

=item SCALE

=item NULLABLE

=back

=item COUNT

=back

=item --need-rows

Maximum number of rows to return.  The expression should evaluate to an integer.

=item --raise

Exception string to raise if the number of rows specfied by
C<--need-rows> is not returned.

=item --recordset

Return a C<Bedrock::RecordSet> instead of a C<Bedrock::Array> object.

=item --statement

SQL query statement to execute.  The statement can contain bind
variable specifiers C<?> and format specifiers C<%s>.

=back

=head1 NOTES

Bedrock's database layer is implemented using the perl C<DBI> module.
For more information about database behavior see C<perldoc DBI>.

I<The default variable C<$_> will hold a Bedrock hash object which
represents the curren row of data from the query in the body of the tag>

I<C<$rownum> (lower case) will have the value of the curren row being processed.
If you happened to have used that name in one of the columns of your
query, then that value will take precedence.>

I<Note that Oracle returns column names in upper case.>

=head1 EXAMPLE

  <sqlselect:foo "select * from customer">
    <var $NAME> <var $ADDRESS><br>
  </sqlselect>

  <sqlselect --define-var="foo" "select * from customer"></sqlselect>
  
  <foreach $foo>
    <var $_.NAME> <var $_.ADDRESS><br>
  </foreach>

=head1 SEE OTHER

C<E<lt>sqlE<gt>>, C<E<lt>sqlconnectE<gt>>

=cut

#
# Revision 1.34  2012/07/29 18:42:07  lauerrc
# - support for --recordset option
#
# Revision 1.33  2011/12/01 17:12:37  eutl420
# - use methods from Text::TagX::TAG::SQLHandler, get_db_handle(), etc
#
# Revision 1.32  2011/09/15 14:53:19  eutl420
# - perltidy
# - expose rownum, $_ inside <sqlselect> scope
#
# Revision 1.31  2011/09/14 18:39:11  eutl420
# minor pod tweak
#
# Revision 1.30  2011/07/17 16:50:30  eutl420
# @PERL@, log_message if verbose
#
# Revision 1.29  2011/07/12 19:10:37  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.28  2010/12/12 16:20:09  eutl420
# - use dump_options
# - attempt auto connect if no current DBI connection
#
# Revision 1.27  2010/11/29 15:57:55  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.26  2010/11/17 02:28:28  rlauer
# - pod cleanup
# - allow a Bedrock array for --arg
#
# Revision 1.25  2010/11/13 17:27:12  rlauer
# - now --define-var returns a Bedrock::Array object
#
# Revision 1.24  2010/11/08 03:09:49  rlauer
# - documentation changes only
#
# Revision 1.23  2009/12/31 18:38:45  rlauer
# updated docs
#
# Revision 1.22  2009/12/31 12:43:40  rlauer
# docs tweaks, allow <sqlselect:name syntax
#
# Revision 1.21  2009/12/28 20:31:35  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.20  2008/12/03 14:01:21  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.19  2008/12/02 15:02:33  rlauer
# Added pod for tag reference
#
# Revision 1.18  2001/02/14 15:35:51  sridhar
# Added copyright and GPL notice
#
# Revision 1.17  2001/01/09 20:25:34  sridhar
# Removed an unnecessary check for extra bind variables.
#
# Revision 1.16  2000/12/15 14:29:07  sridhar
# Bug fix for reporting error when using --need-rows: the script line
# number was not being reported correctly.
#
# Revision 1.15  2000/11/21 19:25:14  sridhar
# 1. Support for passing a database handle using the option --db.
# 2. Error messages cleaned.
# 3. More error checks.
# 4. --dbname option deprecated.
#
# Revision 1.14  2000/11/16 19:05:48  sridhar
# Using function stored under `finalize-children' which is set by the
# parent object.
#
# Revision 1.13  2000/10/25 17:26:49  sridhar
# Argument to --bind can be an array. The array is expanded and used with
# the other bind arguments appropriately.
#
# Revision 1.12  2000/09/22 20:24:12  sridhar
# Argument is treated as SQL select statement to execute if --statement
# is not present.
#
# Revision 1.11  2000/08/11 14:13:34  sridhar
# Bugfix: was previously killing all children after first pass through.
# Was failing to properly generate output since there were no children
# in the second and subsequent loops when invoked in a loop. Fixed by
# not killing children after finishing the loop.
#
# Revision 1.10  2000/07/06 17:21:09  sridhar
# Had to swap computation of meta-info from after `fetch' to before
# `fetch' to accomodate mySQL which seems to treat meta-info retrieval
# after all fetches as invalid.
#
# Revision 1.9  2000/06/21 16:08:16  sridhar
# 1. Added new option `meta-info' for defining variable with query
# information
# 2. Using SIS::Hash for making a hash instead of {}
#
# Revision 1.8  2000/05/31 14:47:34  sridhar
# Rigorous version numbering and usage
#
# Revision 1.7  2000/04/27 20:01:23  sridhar
# Execute was returning undef and *NOT* throwing an exception due to an SQL
# error. Has been fixed now.
#
# Revision 1.6  2000/04/24 12:49:34  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:21:07  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.4  2000/03/13 15:47:29  sridhar
# Added two options --need-rows and --raise, first for raising exception
# when required number of rows are not found, second for specifying the
# error message to throw as an exception.
#
# Revision 1.3  2000/03/09 14:21:40  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.2  2000/03/06 18:37:24  sridhar
# Replaced all ad-hoc message logging with message logging only on
# demand, by the use of --verbose option.
#
# Revision 1.1  2000/03/02 15:00:04  sridhar
# Moved WithBody/SQLSelect.pm to WithBody/Loop/SQLSelect.pm. SQLSelect.pm
# is now a subclass of Loop, which overrides `parent' method to force own
# finalize_children function.
#
# Revision 1.3  2000/02/23 13:43:52  sridhar
# Removed some commented useless code.
#
# Revision 1.2  2000/02/08 15:37:46  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:03  sridhar
# Added TagX
#
#

1;
