#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::WithBody::Loop::SQLSelect;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use DBI;

use TagX::Log 1.01;
use SIS::Hash;
use TagX::TAG::WithBody::Loop 1.03;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('dbname=s'		=> '_anonymous_',
		   'statement=s'	=> undef,
		   'bind=s'		=> undef,
		   'arg=s'		=> undef,
		   'define-var=s'	=> undef,
		   'need-rows=s'	=> undef,
		   'raise=s'		=> undef,
		   'meta-info=s'	=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	&log_message( $self, $str );
    }

    unless ( exists $options{'statement'} ) {
	&log_message( $self, "No Statement specified" );
	return;
    }

    my $name = $options{'dbname'};
    my $dbh;
    if ( exists $tx->{'DB'}->{$name} ) {
	$dbh = $tx->{'DB'}->{$name};
    } else {
	&log_message ( $self, "No database connection named ($name)" );
	return;
    }

    &log_message ( $self, "Using database handle named ($name) .. ($dbh)")
	if $verbose;

    my $statement = $options{'statement'};
    if ( exists $options{'arg'} ) {
	my @args = ref( $options{'arg'} ) eq 'ARRAY' ? @{$options{'arg'}} : ($options{'arg'});
	&log_message( $self, "Substituting following args into statement:\n@args" )
	    if $verbose;
	$statement = sprintf ($statement, @args);
	&log_message( $self, "Statement after arg-substitution\n$statement" )
	    if $verbose;
    }

    my $sth = $dbh->prepare ( $statement );
    my @bind;
    if ( exists $options{'bind'} ) {
	@bind = ref( $options{'bind'} ) eq 'ARRAY' ? @{$options{'bind'}} : ($options{'bind'});
    }

    my $i = 1;
    for my $bindval (@bind) {
	my $type = $1 if $bindval =~ s/\(\%\s*(\d+)\s*\%\)\s*$//;
	if ( defined( $type ) ) { $sth->bind_param ( $i, $bindval, {TYPE => $type}) }
	else { $sth->bind_param ( $i, $bindval ); }
	if ( $verbose ) {
	    my $str = "Bound ($i, ";
	    $str .= $type if defined( $type );
	    $str .= ", ";
	    $str .= $bindval if defined( $bindval );
	    $str .= ")";
	    &log_message( $self, $str );
	}
    } continue {
	$i++;
    }

    my $rows = $sth->execute;
    unless (defined( $rows )) {
	&log_message( $self, "Error while executing statement\n$statement" );
	die "Error executing statement\n$statement";
    }

    my $meta_info;
    if ( $options{'meta-info'} ) {
	&log_message( $self, "Need to define meta information variable $options{'meta-info'}" )
	    if $verbose;
	$meta_info = {'NUM_OF_FIELDS'	=> $sth->{NUM_OF_FIELDS},
		      'NUM_OF_PARAMS'	=> $sth->{NUM_OF_PARAMS},
		      'STATEMENT'	=> $sth->{Statement}};
	my @names = @{$sth->{NAME_uc}};
	for ( my $i = 0 ; $i < @names ; $i++ ) {
	    $meta_info->{FIELDS}->[$i] = {
		'NAME'		=> $names[$i],
		'TYPE'		=> $sth->{TYPE}->[$i],
		'PRECISION'	=> $sth->{PRECISION}->[$i],
		'SCALE'		=> $sth->{SCALE}->[$i],
		'NULLABLE'	=> $sth->{NULLABLE}->[$i]
		};
	}
    }

    my ($href, @rows, $defined);

    if ( exists $options{'define-var'} ) {
	$defined = $options{'define-var'};
	&log_message( $self, "Need to define <$defined>" ) if $verbose;
    }

    $i = 0;
    &log_message( $self, "we have [", scalar(@{$self->{'subobjs'}}), "] children" )
	if $verbose;
    while ( defined ($href = $sth->fetchrow_hashref) ) {

	if ( defined ( $defined ) ) {
	    my $href = SIS::Hash->new(%{$href});
	    push @rows, $href;
	}

	if ( $verbose ) {
	    my ($key, $value);
	    my $str = '';
	    while (($key, $value) = each %{$href}) {
		$str .= "\t$key = (";
		$str .= $value if defined( $value );
		$str .= "\n";
	    }
	    &log_message ( $self, "Row .. $i\n$str");
	}

	for my $child (@{$self->{'subobjs'}}) {
	    next unless $child;
	    if ( ref ($child) ) {
		$child->finalize ( $tx, $href, @context );
	    } else {
		$tx->out_handle->print( $child );
	    }
	}

	$i++;
    }
    &log_message( $self, "Found <$i> row(s)." ) if $verbose;
    &log_message( $self, "we have [", scalar(@{$self->{'subobjs'}}), "] children" )
	if $verbose;

    if ( $options{'meta-info'} ) {
	$meta_info->{'COUNT'} = $i;
	$tx->param ( $options{'meta-info'}=> $meta_info );
    }

    if ( $options{'need-rows'} ) {
	if ( $options{'need-rows'} =~ /^([\+\-]?)(\d+)$/oi ) {
	    my ($sgn, $num) = ($1, $2);
	    if ( $sgn eq '+' ) {
		# need at least $num rows
		if ( $i < $num ) {
		    if ( $options{'raise'} ) {
			die "$self: $options{'raise'}\n";
		    } else {
			die "$self: Insufficient number of rows found($i) (at least $num needed)\n";
		    }
		}
	    } elsif ( $sgn eq '-' ) {
		# need max of $num rows
		if ( $i > $num ) {
		    if ( $options{'raise'} ) {
			die "$self: $options{'raise'}\n";
		    } else {
			die "$self: Too many rows found($i) (max of $num exceeded)\n";
		    }
		}
	    } elsif ( $i != $num ) {
		# need exactly $num rows
		if ( $options{'raise'} ) {
		    die "$self: $options{'raise'}\n";
		} else {
		    die "$self: Invalid number of rows found($i) (need exactly $num rows)\n";
		}
	    }
	} else {
	    &log_message( $self, "Specify an optionally signed integer value for --need-rows" );
	}
    }

    $tx->param ( $defined => \@rows ) if $defined;
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.11  2000/08/11 14:13:34  sridhar
# Bugfix: was previously killing all children after first pass through.
# Was failing to properly generate output since there were no children
# in the second and subsequent loops when invoked in a loop. Fixed by
# not killing children after finishing the loop.
#
# Revision 1.10  2000/07/06 17:21:09  sridhar
# Had to swap computation of meta-info from after `fetch' to before
# `fetch' to accomodate mySQL which seems to treat meta-info retrieval
# after all fetches as invalid.
#
# Revision 1.9  2000/06/21 16:08:16  sridhar
# 1. Added new option `meta-info' for defining variable with query
# information
# 2. Using SIS::Hash for making a hash instead of {}
#
# Revision 1.8  2000/05/31 14:47:34  sridhar
# Rigorous version numbering and usage
#
# Revision 1.7  2000/04/27 20:01:23  sridhar
# Execute was returning undef and *NOT* throwing an exception due to an SQL
# error. Has been fixed now.
#
# Revision 1.6  2000/04/24 12:49:34  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:21:07  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.4  2000/03/13 15:47:29  sridhar
# Added two options --need-rows and --raise, first for raising exception
# when required number of rows are not found, second for specifying the
# error message to throw as an exception.
#
# Revision 1.3  2000/03/09 14:21:40  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.2  2000/03/06 18:37:24  sridhar
# Replaced all ad-hoc message logging with message logging only on
# demand, by the use of --verbose option.
#
# Revision 1.1  2000/03/02 15:00:04  sridhar
# Moved WithBody/SQLSelect.pm to WithBody/Loop/SQLSelect.pm. SQLSelect.pm
# is now a subclass of Loop, which overrides `parent' method to force own
# finalize_children function.
#
# Revision 1.3  2000/02/23 13:43:52  sridhar
# Removed some commented useless code.
#
# Revision 1.2  2000/02/08 15:37:46  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:03  sridhar
# Added TagX
#
#

1;
