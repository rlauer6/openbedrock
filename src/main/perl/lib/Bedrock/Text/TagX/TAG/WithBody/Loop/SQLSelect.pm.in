#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::WithBody::Loop::SQLSelect;

use strict;

BEGIN
{
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use Getopt::Long;
use DBI;

use TagX::TAG::WithBody::Loop;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub finalize
{
    my ($self, $tx, @context) = @_;

    local (@ARGV) = @{$self->{'argv'}};
    my %valid = ('dbname'	=> '_anonymous_');
    &GetOptions(\%valid,
		'verbose',
		'dbname=s',
		'arg=s@',
		'statement=s',
		'bind=s@',
		'need-rows=s',
		'raise=s',
		'define-var=s');

    my $verbose = delete $valid{'verbose'};

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %valid) {
	    $str .= "\t$key .. ($value)\n";
	}
	$tx->log_message( MSG_DEBUG => $str );
    }

    unless ( exists $valid{'statement'} ) {
	$tx->log_message( MSG_DEBUG => "$self: No Statement specified" ) if $verbose;
	return;
    }

    my $name = $valid{'dbname'};
    my $dbh;
    if ( exists $tx->{'DB'}->{$name} ) {
	$dbh = $tx->{'DB'}->{$name};
    } else {
	$tx->log_message ( MSG_DEBUG => "$self: No database connection named ($name)" ) if $verbose;
	return;
    }

    $tx->log_message ( MSG_DEBUG => "$self: Using database handle named ($name) .. ($dbh)")
	if $verbose;

    my $statement = $valid{'statement'};
    my @args = @{$valid{'arg'}} if exists $valid{'arg'};
    my @argvals = map { $self->resolve_name ( $_, @context ) } @args;
    $statement = sprintf ($statement, @argvals) if @args > 0;
    $tx->log_message( MSG_DEBUG => "$self: Statement after arg-substitution\n$statement" )
	if $verbose;

    my $sth = $dbh->prepare ( $statement );
    my $i = 1;
    for my $varname (@{$valid{'bind'}}) {
	my $type = $1 if $varname =~ s/\s*\(\s*(\d+)\s*\)\s*$//oi;
	my $value = $self->resolve_name ( $varname, @context );
	if ( defined( $type ) ) { $sth->bind_param ( $i, $value, {TYPE => $type}) }
	else { $sth->bind_param ( $i, $value ); }
	$tx->log_message( MSG_DEBUG => "Bound ($i, $varname, $type, $value)" )
	    if $verbose;
    } continue {
	$i++;
    }

    $sth->execute;

    my ($href, @rows, $defined);

    if ( exists $valid{'define-var'} ) {
	$defined = $valid{'define-var'};
	$tx->log_message( MSG_DEBUG => "Need to define <$defined>" ) if $verbose;
    }

    $i = 0;
    while ( defined ($href = $sth->fetchrow_hashref) ) {

	if ( defined ( $defined ) ) {
	    my %hash = %{$href};
	    push @rows, \%hash;
	}

	if ( $verbose ) {
	    my ($key, $value);
	    my $str = '';
	    while (($key, $value) = each %{$href}) {
		$str .= "\t$key = ($value\n";
	    }
	    $tx->log_message ( MSG_DEBUG => "Row .. $i\n$str");
	}

	for my $child (@{$self->{'subobjs'}}) {
	    next unless $child;
	    if ( ref ($child) ) {
		$child->finalize ( $tx, $href, @context );
	    } else {
		$tx->out_handle->print( $child );
	    }
	}

	$i++;
    }
    $tx->log_message( MSG_DEBUG => "Found <$i> row(s)." ) if $verbose;

    if ( $valid{'need-rows'} ) {
	if ( $valid{'need-rows'} =~ /^([\+\-]?)(\d+)$/oi ) {
	    my ($sgn, $num) = ($1, $2);
	    if ( $sgn eq '+' ) {
		# need at least $num rows
		if ( $i < $num ) {
		    if ( $valid{'raise'} ) {
			die "$self: $valid{'raise'}\n";
		    } else {
			die "$self: Insufficient number of rows found($i) (at least $num needed)\n";
		    }
		}
	    } elsif ( $sgn eq '-' ) {
		# need max of $num rows
		if ( $i > $num ) {
		    if ( $valid{'raise'} ) {
			die "$self: $valid{'raise'}\n";
		    } else {
			die "$self: Too many rows found($i) (max of $num exceeded)\n";
		    }
		}
	    } elsif ( $i != $num ) {
		# need exactly $num rows
		if ( $valid{'raise'} ) {
		    die "$self: $valid{'raise'}\n";
		} else {
		    die "$self: Invalid number of rows found($i) (need exactly $num rows)\n";
		}
	    }
	} else {
	    $tx->log_message( MSG_ERROR => "Specify an optionally signed integer value for --need-rows" );
	}
    }

    $tx->param ( $defined => \@rows ) if $defined;
    $self->{'nobjs'} = 0;
    @{$self->{'subobjs'}} = ();
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2000/03/13 15:47:29  sridhar
# Added two options --need-rows and --raise, first for raising exception
# when required number of rows are not found, second for specifying the
# error message to throw as an exception.
#
# Revision 1.3  2000/03/09 14:21:40  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.2  2000/03/06 18:37:24  sridhar
# Replaced all ad-hoc message logging with message logging only on
# demand, by the use of --verbose option.
#
# Revision 1.1  2000/03/02 15:00:04  sridhar
# Moved WithBody/SQLSelect.pm to WithBody/Loop/SQLSelect.pm. SQLSelect.pm
# is now a subclass of Loop, which overrides `parent' method to force own
# finalize_children function.
#
# Revision 1.3  2000/02/23 13:43:52  sridhar
# Removed some commented useless code.
#
# Revision 1.2  2000/02/08 15:37:46  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:03  sridhar
# Added TagX
#
#

1;
