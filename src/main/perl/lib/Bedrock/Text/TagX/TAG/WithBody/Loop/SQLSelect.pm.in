#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Loop::SQLSelect;

use strict;
use warnings;

use Bedrock qw(:booleans);

use Bedrock::Array;
use Bedrock::Hash;

use DBI;
use Data::Dumper;
use Scalar::Util qw(reftype);
use List::Util qw( pairs );

use TagX::TAG::WithBody::Loop;
use TagX::TAG::SQLHandler;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw (TagX::TAG::WithBody::Loop TagX::TAG::SQLHandler);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

########################################################################
sub closure {
########################################################################
  return '/sqlselect';
}

########################################################################
sub define_options {
########################################################################
  return (
    'dbname=s'           => undef,
    'db=s',              => undef,
    'statement=s'        => undef,
    'bind=s'             => undef,
    'arg=s'              => undef,
    'define-var=s'       => undef,
    'define-recordset=s' => undef,
    'recordset'          => undef,
    'need-rows=s'        => undef,
    'raise=s'            => undef,
    'meta-info=s'        => undef
  );
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  my $logger = $self->get_logger( ref $self );

  $logger->debug( sub { Dumper \%options } );

  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $options{'define-recordset'} ) {
    $options{'define-var'} = $options{'define-recordset'};
    $options{recordset}    = 1;
  }

  if ( $tag_opts->{name} ) {
    $options{'define-var'} = $tag_opts->{name};
    shift @argv;
  }

  my $dbh = $self->get_db_handle( $tx, %options );

  die "Specify SQL statement using --statement or as argument, not both.\n"
    if exists $options{'statement'} and @argv > 0;

  my $statement;
  if ( exists $options{'statement'} ) {
    $statement = delete $options{'statement'};
  }
  else {
    $statement = "@argv";
  }

  die "<sqlselect>: no statement specified.\n" if !length $statement;

  if ( exists $options{'arg'} ) {
    my @args
      = is_array( $options{args} ) ? @{ $options{arg} } : ( $options{arg} );

    $logger->debug("Substituting following args into statement:\n@args");

    $statement = sprintf $statement, @args;

    $logger->debug("Statement after arg-substitution\n$statement");
  }

  my $sth = $dbh->prepare($statement);

  die 'Error in SQL Statement: `', $dbh->errstr, "'\n$statement\n"
    if !$sth;

  my $nParams = $sth->{NUM_OF_PARAMS};

  my @bind;

  if ( exists $options{'bind'} ) {
    my $bind = $options{'bind'};

    if ( ref($bind) && reftype($bind) eq 'ARRAY' ) {

      for my $item ( @{$bind} ) {
        if ( ref($item) && reftype($item) eq 'ARRAY' ) {
          push @bind, @{$item};
        }
        else {
          push @bind, $item;
        }
      }
    }
    else {
      @bind = ($bind);
    }

    if ( $nParams < @bind ) {
      die @bind - $nParams, " extra bind variable(s) specified.\n";
    }
    elsif ( $nParams > @bind ) {
      die 'Insufficient bind variables: need ', $nParams - @bind, " more.\n";
    }
  }
  elsif ($nParams) {
    die "SQL statement needs $nParams bind variable(s).\n";
  }

  my $i   = 1;
  my $str = "Bind variables:\n";

  for my $bindval (@bind) {
    my $type;

    if ( $bindval =~ s/[(][%]\s*(\d+)\s*[%][)]\s*$//xsm ) {
      $type = $1;
    }

    if ( defined $type ) {
      $sth->bind_param( $i, $bindval, { TYPE => $type } )
        || die "Failure binding param $i, TYPE $type: `", $sth->errstr, "'\n";
    }
    else {
      $sth->bind_param( $i, $bindval )
        || die "Failure binding param $i: `", $sth->errstr, "'\n";
    }

    $str .= sprintf 'Bound (%s, %s, %s)', $i,
      ( defined $type ? ", $type" : q{} ),
      defined $bindval ? ", $bindval" : q{};
  }
  continue {
    $i++;
  }

  $logger->debug($str);

  my $rows = $sth->execute;
  die 'Error executing SQL statement: ', $sth->errstr, "\n$statement\n"
    if !defined $rows;

  my $meta_info;

  if ( $options{'meta-info'} ) {
    $logger->debug("Need to define meta information variable $options{'meta-info'}");

    $meta_info = {
      'NUM_OF_FIELDS' => $sth->{NUM_OF_FIELDS},
      'NUM_OF_PARAMS' => $sth->{NUM_OF_PARAMS},
      'STATEMENT'     => $sth->{Statement}
    };

    my @names = @{ $sth->{NAME_uc} };

    foreach my $i ( 0 .. $#names ) {
      $meta_info->{FIELDS}->[$i] = {
        'NAME'      => $names[$i],
        'TYPE'      => $sth->{TYPE}->[$i],
        'PRECISION' => $sth->{PRECISION}->[$i],
        'SCALE'     => $sth->{SCALE}->[$i],
        'NULLABLE'  => $sth->{NULLABLE}->[$i]
      };
    }
  }

  my ( $href, @rows, $defined );

  if ( exists $options{'define-var'} ) {
    $defined = $options{'define-var'};
    $logger->debug("Need to define <$defined>");
  }

  $i = 0;
  $logger->debug( sprintf 'we have [%d] children', scalar( @{ $self->{'subobjs'} } ) );

  while ( defined( $href = $sth->fetchrow_hashref ) ) {

    my $href = Bedrock::Hash->new( %{$href} );

    if ( defined $defined ) {
      push @rows, $href;
    }

    $logger->debug(
      sub {
        my @message;

        foreach my $p ( pairs %{$href} ) {
          my ( $key, $value ) = @{$p};
          push @message, sprintf "\t%s = %s", $key, $value // q{};
        }

        return sprintf "Row...%s\n%s\n", $i, join "\n", @message;
      }
    );

    # note we add '_' and 'rownum' and $hashref to local context
    $self->{'finalize_children'}
      ->( $self->{'subobjs'}, $tx, $href, { '_' => $href, 'rownum' => $i + 1 }, @context );
    $i++;
  }

  $logger->debug( sprintf 'Found <%d> row(s).',    $rows );
  $logger->debug( sprintf 'we have [%d] children', scalar( @{ $self->{'subobjs'} } ) );

  if ( $options{'meta-info'} ) {
    $meta_info->{'COUNT'} = $i;
    $tx->param( $options{'meta-info'} => $meta_info );
  }

  if ( $options{'need-rows'} ) {

    if ( $options{'need-rows'} =~ /^([+\-]?)(\d+)$/oixsm ) {
      my ( $sgn, $num ) = ( $1, $2 );

      if ( $sgn eq q{+} ) {

        # need at least $num rows
        if ( $i < $num ) {
          if ( $options{'raise'} ) {
            die "$options{'raise'}\n";
          }
          else {
            die "Insufficient number of rows found($i) (at least $num needed)\n";
          }
        }
      }
      elsif ( $sgn eq q{-} ) {

        # need max of $num rows
        if ( $i > $num ) {

          $tx->error->location( $self->start_location );

          if ( $options{'raise'} ) {
            die "$options{'raise'}\n";
          }
          else {
            die "Too many rows found($i) (max of $num exceeded)\n";
          }
        }
      }
      elsif ( $i != $num ) {

        # need exactly $num rows
        $tx->error->location( $self->start_location );

        if ( $options{'raise'} ) {
          die "$options{'raise'}\n";
        }
        else {
          die "Invalid number of rows found($i) (need exactly $num rows)\n";
        }
      }
    }
    else {
      $tx->error->location( $self->start_location );
      die "Invalid integer `$options{'need-rows'}' specified as argument to --need-rows.\n";
    }
  }

  # return a Bedrock::Array or a Bedrock::RecordSet
  my $obj;

  if ($defined) {
    $obj
      = $options{recordset}
      ? Bedrock::RecordSet->new( \@rows )
      : Bedrock::Array::Reference->new( \@rows );
    $tx->param( $defined => $obj );
  }

  return $obj;
}

1;

## no critic (Documentation::RequirePodSections)

__END__

=pod


=head1 TAG - C<E<lt>sqlselectE<gt>>

=head1 PURPOSE

Execute a SQL select statement. Iterates until no rows are returned.

=head1 SYNTAX

  <sqlselect[:name] [options] sql-statement></sqlselect>

=head1 DESCRIPTION

The C<E<lt>sqlselectE<gt>> tag iterates over a record set that is
produced with the given SQL statement.  The columns selected in the
statement are exposed as variables within the scope of the tag.  In
other words if your statement was:

  SELECT ACCT, NAME FROM CUSTOMER

then the variables C<$ACCT> and C<$NAME> would be available with the
scope of the tag and only within that scope.  If you wanted to
preserve the data outside the scope of the tag you would need to
specify the C<--define-var> option.

=head1 OPTIONS

 --arg              = expression
 --bind             = expression
 --db               = "handle-name"
 --define-recordset = "var-name"
 --define-var       = "var-name"
 --meta-info
 --need-rows        = integer|expression
 --raise            = "string"
 --recordset        
 --statement        = "sql-statement"

=over 5

=item --arg

One or more arguments to use as arguments to C<sprintf> using SQL
statement as a format string.  Multiple C<--arg> options may be used
or you may specify and array object as the C<--arg> parameter.

=item --bind

One or more bind variables may be specified using multiple C<--bind>
statements or by specifying an array object as the C<--bind> parameter.
They are bound in the order in which they are defined.

=item --db

Name of the database handle object.  The handle associated with the
most recent C<E<lt>sqlconnectE<gt>> is assumed if this parameter is not
specified.

=item --define-recordset

Name of an object which will be used to store the query results.  The
object return is a Bedrock recordset.

=item --define-var

Name of an object which will be used to store the query results.  The
object return is a Bedrock array.

=item --meta-info

Name of the object that will hold the meta data associated with the
execution of the query.  Meta data may include the following data
elements depending upon the DBI implementation:

=over 10

=item NUM_OF_FIELDS

=item NUM_OF_PARMS

=item STATEMENT

=item FIELDS

=over 15

=item TYPE

=item PRECISION

=item SCALE

=item NULLABLE

=back

=item COUNT

=back

=item --need-rows

Maximum number of rows to return.  The expression should evaluate to an integer.

=item --raise

Exception string to raise if the number of rows specfied by
C<--need-rows> is not returned.

=item --recordset

Return a C<Bedrock::RecordSet> instead of a C<Bedrock::Array> object.

=item --statement

SQL query statement to execute.  The statement can contain bind
variable specifiers C<?> and format specifiers C<%s>.

=back

=head1 NOTES

Bedrock's database layer is implemented using the perl C<DBI> module.
For more information about database behavior see C<perldoc DBI>.

I<The default variable C<$_> will hold a Bedrock hash object which
represents the curren row of data from the query in the body of the tag>

I<C<$rownum> (lower case) will have the value of the curren row being processed.
If you happened to have used that name in one of the columns of your
query, then that value will take precedence.>

I<Note that Oracle returns column names in upper case.>

=head1 EXAMPLE

  <sqlselect:foo "select * from customer">
    <var $NAME> <var $ADDRESS><br>
  </sqlselect>

  <sqlselect --define-var="foo" "select * from customer"></sqlselect>
  
  <foreach $foo>
    <var $_.NAME> <var $_.ADDRESS><br>
  </foreach>

=head1 SEE OTHER

C<E<lt>sqlE<gt>>, C<E<lt>sqlconnectE<gt>>

=cut

