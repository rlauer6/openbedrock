#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#) $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Plugin;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA @INC);
    $VERSION    = 1.01;
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;
use Symbol;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('define-var=s' => undef,
		   'dir-prefix=s' => undef
		   );

    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	&log_message( $self, "$str\n" );
    }

    my $name = $options{'define-var'};
    my $class = shift @argv;
    
    $class =~/^:+([^:]*):?([^:]*)$/;
    $name = $2 unless $name;
    $class = $1;

    unless ( length($name) ) {
	if ( exists $tx->{'VARS'}->{$class} ) {
	  &log_message(undef, "Default name \$class already in use.  You probably want to use --define-var to assign an object name.") if $verbose;
	  $name = $class;
	}
	else {
	  $name = $class;
	}
    }

    if (exists $options{'dir-prefix'}) {
	push @INC, $options{'dir-prefix'} unless grep { $options{'dir-prefix'} } @INC;
    }

    $class = 'BLM::' . $class unless $class =~ /^BLM::/;
    $self->loadModule($class);
    my $obj;

    if ( &UNIVERSAL::can( $class, 'TIEHASH' ) ) {
      &log_message( undef, "$self: creating an object of class $class" ) if $verbose;
      $obj = {};
      tie %{$obj}, $class, @argv;
    } elsif ( &UNIVERSAL::can( $class, 'TIEARRAY' ) ) {
      &log_message( undef, "$self: creating an array of class $class" ) if $verbose;
      $obj = [];
      tie @{$obj}, $class, @argv;
    } elsif ( &UNIVERSAL::can( $class, 'TIEHANDLE' ) ) {
      &log_message( undef, "$self: creating a handle of class $class" ) if $verbose;
      $obj = gensym;
      tie *{$obj}, $class, @argv;
    } elsif ( &UNIVERSAL::can( $class, 'TIESCALAR' ) ) {
      &log_message( undef, "$self: creating a scalar of class $class" ) if $verbose;
      my $scalar;
      $obj = tie $scalar, $class, $argv[0];
    } else {
      die "Attempt to load invalid module: $class.\n";
    }

    bless $obj, $class;
    
    if (&UNIVERSAL::can($class, 'new') && &UNIVERSAL::isa($obj, 'BLM::PLUGIN')) {
      $tx->{'VARS'}->{$name} = $obj->new(@argv)
    }
    else {
      $tx->{'VARS'}->{$name} = $obj;
    }

    return $tx->{'VARS'}->{$name};
}

sub loadModule
{
    my $self = shift;
    my @mods = @_;

    my $verbose = $self->{'config'}->{'verbose'};
    for my $class (@mods) {
	$class =~ s!::!/!g;
	$class =~ s!$!.pm! unless $class =~ /\.pm$/;
	next if $INC{$class};
	require $class;
	&log_message( undef, "$class loaded successfully" ) if $verbose;
    }
}

=head1 TAG - <plugin>

=head1 PURPOSE

Load a Bedrock Plugin.

=head1 SYNTAX

 <plugin:[plugin name][:name] [--define-var="name"] args...>

=head1 OPTIONS

 --define-var = var-name

=over 5

=item --define-var

Name of the object to be created.  If not supplied the plugin can be
accessed using the name of the plugin preceded by the C<$>.

=back

=head1 EXAMPLE

Load the C<BLM::FileIO> plugin and write something to the error log.

 <plugin:FileIO --define-var="fd" "/var/www/mysite.com/logs/error.log" "w+">

 <null $fd.write("Hello World!\n");
 <null $fd.close>

 <plugin:FileIO "/var/www/mysite.com/logs/error.log" "w+">
 <null $FileIO.write("Hello World!\n");
 <null $FileIO.close>

=head1 SEE ALSO

C<BLM::PLUGIN>

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.2  2009/12/31 18:38:36  rlauer
# updated docs
#
# Revision 1.1  2009/12/31 13:01:11  rlauer
# rename Blm.pm -> Plugin.pm
#
# Revision 1.7  2009/12/31 12:43:25  rlauer
# fixed documentation to indicate usage of plugin, etc.
#
# Revision 1.6  2009/12/29 12:21:50  rlauer
# add tied scalars to the list of things that can be loaded as a plugin
#
# Revision 1.5  2009/12/28 23:27:23  rlauer
# allow overwrite of plugin names, but warn to file
#
# Revision 1.4  2009/12/28 12:50:50  rlauer
# invoke method new() for PLUGINs if the class can new()
#
# Revision 1.3  2009/12/15 12:33:49  rlauer
# only warn if reusing $_
#
# Revision 1.2  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.1  2008/11/25 14:32:34  rlauer
# added as part of Bedrock 2.0.0 reorg
#
#

1;
