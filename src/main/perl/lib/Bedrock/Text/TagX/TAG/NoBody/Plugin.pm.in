package TagX::TAG::NoBody::Plugin;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Constants qw(:chars :booleans);
use Bedrock::Dump;
use Bedrock::Hash;
use Bedrock::Plugin;
use English qw(-no_match_vars);
use List::Util qw(any none);
use Symbol;

use parent qw (Exporter TagX::TAG::NoBody);

use Role::Tiny::With;
with 'Bedrock::Logger';

########################################################################
sub define_options {
########################################################################
  return (
    'define-var=s'            => undef,
    'dir-prefix=s'            => undef,
    'define-plugin=s'         => undef,
    'tie'                     => undef,
    'init=s'                  => undef,
    'enable-custom-options=s' => undef,
  );
}

########################################################################
sub option_names {
########################################################################
  my ($self) = @_;

  return map { /(^[^=]+)/xsm && $1; } ( $self->define_options );
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  local $TagX::TAG::PROHIBIT_UNKNOWN_OPTIONS = 0;

  my @argv = $self->parse_options( \%options, @context );

  my %extra_options;

  foreach my $val (@argv) {
    next if $val !~ /^\-\-(.*)$/xsm;

    $extra_options{$1} = undef;
  }

  %options = ( %extra_options, $self->define_options );

  # reset parse_options() so it will re-evaluate arguments with new options
  delete $self->{__args_to_eval};

  @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  $options{'define-var'} //= $UNDERSCORE;
  my $define_var = $options{'define-var'};

  $tx->var_exists($define_var);

  my $config = $tx->config;  # $tx->out_handle->{Handle}->{'CONFIG'};

  my $tag = shift @argv;

  my ( $name, $class ) = $self->parse_tag_name( $tag, $options{'define-plugin'} );
  $tx->var_exists($name);

  my $plugin = $class =~ /^BLM/xsm ? $class : 'BLM::' . $class;

  my @plugin_path;

  # still undecided about this
  if ( exists $options{'dir-prefix'} ) {
    if ( none { $options{'dir-prefix'} eq $_ } @INC ) {
      push @plugin_path, $options{'dir-prefix'};
    }
  }

  # adhoc addition of a PLUGIN path
  if ( $config->{PLUGIN_PATH} ) {
    @plugin_path = split /:/xsm, $config->{PLUGIN_PATH};
    push @plugin_path, $ENV{BEDROCK_PLUGIN_PATH};

    @plugin_path = map { defined $_ && $_ && -d $_ } @plugin_path;

    foreach my $path (@plugin_path) {
      next if any { $path eq $_ } @INC;
      push @INC, $path;
    }
  }

  $class = $self->loadPlugin( $plugin, $class );

  my $plugin_obj
    = eval { return $self->create_plugin_instance( class => $class, argv => \@argv, tie => $options{tie}, ); };

  my $err = $EVAL_ERROR;

  die "unable to  load plugin ($class)\n$err"
    if !$plugin_obj || $err;

  if ( ref $plugin_obj ne $class ) {
    bless $plugin_obj, $class;
  }

  $tx->{VARS}->{$name} = $plugin_obj;

  $tx->{VARS}->{$define_var} = $self->init_plugin(
    { plugin_obj => $plugin_obj,
      options    => \%options,
      argv       => \@argv,
      tx         => $tx,
      context    => \@context,
    }
  );

  return $tx->{VARS}->{$name};
}

########################################################################
sub create_plugin_instance {
########################################################################
  my ( $self, %args ) = @_;

  my ( $class, $argv, $tie ) = @args{qw(class argv tie)};

  ## no critic (ProhibitTies);
  my %subs = (
    new => sub {
      return
        if !$class->can('new') || $tie;

      return $class->new( @{$argv} );
    },
    TIEHASH => sub {
      return
        if !$class->can('TIEHASH');

      my $obj = {};
      tie %{$obj}, $class, @{$argv};
      return $obj;
    },
    TIEARRAY => sub {

      return
        if !$class->can('TIEARRAY');

      my $obj = [];
      tie @{$obj}, $class, @{$argv};
      return $obj;
    },
    TIEHANDLE => sub {

      return
        if !$class->can('TIEHANDLE');

      my $obj = gensym;
      tie *{$obj}, $class, @{$argv};
      return $obj;
    },
    TIESCALAR => sub {

      return
        if !$class->can('TIESCALAR');

      my $obj = $argv->[0];
      tie $obj, $class;
      return $obj;
    },
  );

  my $obj;

  foreach my $type ( keys %subs ) {
    my $obj = $subs{$type}->();

    return $obj
      if $obj;
  }

  die "Attempt to load invalid module: $class.\n";
}

########################################################################
sub init_plugin {
########################################################################
  my ( $self, $args ) = @_;

  my ( $plugin_obj, $options, $argv, $tx, $context )
    = @{$args}{qw(plugin_obj options argv tx context)};

  # call the plugin's init_plugin() if it exists...note that <plugin>
  # can be used to access "some" Perl modules that are not derived
  # from Bedrock::Plugin

  my @params;
  my $init_method;

  # new BLM::Plugin classes get called with different parameters
  # than legacy Bedrock::Plugins...
  my $class = ref $plugin_obj;

  if ( $self->isa_plugin( $class, $options->{init} ) ) {
    $init_method = $options->{init} // 'init_plugin';

    my %valid_options = $self->define_options;

    @params = (
      params        => $argv,
      config        => $tx->config,
      options       => $options,
      context       => $context,
      valid_options => [ keys %valid_options ],
    );
  }
  else {
    # legacy Bedrock::Plugins and others just get the plugin args
    @params      = @{$argv};
    $init_method = 'init_plugin';
  }

  # support legacy plugin's ability to get options
  if ( $options->{'enable-custom-options'} ) {
    if ( my $method = $plugin_obj->can('options') || $plugin_obj->can('set_options') ) {
      $method->( $plugin_obj, Bedrock::Hash->new( %{$options} ) );
    }
  }

  return $TRUE
    if !ref $plugin_obj || !$plugin_obj->can($init_method);

  if ( $plugin_obj->can('verbose') ) {
    $plugin_obj->verbose( $self->verbose );
  }

  return $plugin_obj->$init_method(@params);
}

########################################################################
sub parse_tag_name {
########################################################################
  my ( $self, $tag, $plugin_name ) = @_;

  my ( $name, $type ) = @{ $self->SUPER::parse_tag_name($tag) // {} }{qw(name type)};

  return ( $plugin_name, $name || $type )
    if $plugin_name;

  $name =~ s/:://gxsm;

  return ( $name, $type );
}

########################################################################
sub isa_plugin {
########################################################################
  my ( $self, $class, $init ) = @_;

  return $TRUE
    if $init || $class eq 'BLM::Plugin';

  my $isa = do {
    no strict 'refs';  ## no critic (ProhibitNoStrict)
    \@{ $class . '::ISA' };
  };

  return $init || any { $_ eq 'BLM::Plugin' } @{ $isa || [] };
}

########################################################################
sub loadPlugin {
########################################################################
  my ( $self, $plugin, $class ) = @_;

  # We first look for a BLM, then a class with the name which allows
  # us to use some Perl modules as Plugins.
  if ( $self->loadModule($plugin) ) {
    $class = $plugin;
  }
  elsif ( $self->loadModule($class) ) {
    $self->get_logger->debug(
      sub {
        sprintf 'Successfully loaded Perl class (%s)', $class;
      },
    );
  }
  else {
    die sprintf
      "Could not load module: [%s]. Check your syntax or your plugin path.\n",
      $class;
  }

  return $class;
}

########################################################################
sub loadModule {
########################################################################
  my ( $self, $module ) = @_;

  $module =~ s/::/\//gxsm;

  if ( $module !~ /[.]pm$/xsm ) {
    $module = $module . '.pm';
  }

  return $module
    if $INC{$module};

  my $retval = eval { return require $module; };

  if ( !$retval || $EVAL_ERROR ) {
    $self->get_logger->error(
      sub {
        "module: [$module] not loaded!\n" . $EVAL_ERROR;
      },
    );
  }

  $self->get_logger->debug(
    sub {
      "module: [$module] loaded successfully";
    },
  );

  return $EVAL_ERROR ? undef : $module;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>pluginE<gt>>

=head1 PURPOSE

Load a Bedrock Plugin or Perl module.

=head1 SYNTAX

 <plugin:[plugin name][:name] [--define-var="name"] args...>

=head1 DESCRIPTION

Plugins are one of the ways you can extend Bedrock.  They are
typically used to provide some functionality specific to your
application or add features not found in core Bedrock.

Plugins are used to invoke methods that perform actions or that return
objects or snippets of HTML for assembling your page.

See L<BLM::Plugin> for a detailed guide on building custom plugins.

=head1 OPTIONS

 --define-var    = "var-name"
 --define-plugin = "var-name"
 --dir-prefix    = "path"
 --init          = "sub"
 --tie

=over 5

=item --define-var

Name of the object that will hold the return value of the Plugin's
initialization function.  If not supplied the value will be returned
in C<$_>.

=item --define-plugin

Name of the object that will be instantiated as the given Plugin.
If not supplied the object will have the same name as the Plugin.  Some examples:

 <plugin:Mail>  <=> <plugin:Mail --define-plugin="Mail">

 <plugin:BLM::Mail> <=> <plugin:BLM::Mail --define-plugin="BLMMail">

I<By convention, you we don't use the full package name when
specifying the plugin, although you are more than welcome to do that
if you would like.>

=item --enable-custom-options

Use this option for legacy plugins that would like to now support
custom options. While best to refactor old plugins using
L<BLM::Plugin> that's not always practical. This option allow your old
plugins to access custom tag options.

To access custom options you must implement a setter method
(C<options> or C<set_options>) so that the plugin tag can pass custom
options to your plugin.  This setter should accept a hash reference of
options and values.

=item --tie

Forces the plugin to tie the plugin class rather than invoking a
C<new()> method.  Some Perl classes are designed to be tied, while
others may expect (by convention) that you instantiate them using a
C<new()> method.  This option forces a tie even if the Perl class
contains a C<new()> method.

=item --dir-prefix

Additional path where the plugin might be found. By default, Bedrock
looks for plugins in the path set by the configuration variable
PLUGIN_PATH set in F<tagx.xml>.  You can also set the environment
variable C<BEDROCK_PLUGIN_PATH> to point your own plugin path.

=item --init

Name of the subroutine to call in order to initialize the plugin.

default: init_plugin

I<C<init_plugin()> is only invoked if it exists.>

=back

=head1 NOTES

Plugins are just Perl modules that have implemented a C<new()> method
or ones that can be C<tie>'d.  Bedrock will pass any of the arguments
in the tag to the C<new()> constructor.

You are encouraged however to subclass the Perl C<BLM::Plugin> class.
Typically a plugin will look something like this:

 package BLM::Foo;

 use strict;
 use warnings;

 use parent qw(BLM::Plugin);
 
 sub init_plugin {
   my ($self, $params) = @_;

   ...
   return 1;
 }
 
 sub hello_world {
   my ($self) = @_;

   return 'Hello World!';
 }

 1;

 <plugin:Foo>

 <var $Foo.hello_world()>

=head1 TIPS

=over 5

=item * Returning a value upon initialization

You should override the C<init_plugin> method if you want to return a
value upon instantiation. The value will be available in the default
variable C<$_> or the variable you specified in the C<--define-var>
option.

=item * Passing arguments to the plugin

The plugin tagE<039>s arguments are passed to your initialization
function or the new constructor if your are instantiating a Perl
module.

 <plugin:FileIO "foo.txt" "r">

The C<FileIO> plugin would be called something like this:

 BLM::FileIO->new("foo.txt", "r");

=item * Plugin location

Plugins should be installed somewhere where Perl will find them.
By convention they should be part of the C<BLM> namespace.

 package BLM::Foo;

I<In case you are wondering - C<BLM> = Bedrock Loadable Module.>

If you are running Bedrock as a CGI, you'll want to make sure
the the C<perl.INC> file points to a directory that contains your
plugins.

If you are running C<mod_perl> you'll want to use
C<PerlSwitches> or create a C<startup.pl> script that adds the
necessary paths to C<@INC>.

You can also set the configuration variable C<PLUGIN_PATH> in
F<tagx.xml>.

 <scalar name="PLUGIN_PATH">/var/www/vhosts/mysite.com/share/perl5</scalar>

=item Retrieving custom plugin options

The C<E<lt>pluginE<gt>> tag can accept custom options if you use
C<BLM::Plugin> as your base class or if your plugin contains a setter
named C<options> or C<get_options>. See L<BLM::Plugin> for details.

Custom options passed to the plugin (e.g. --my-custom-option) can be
retrieved using the C<options()> method.

=back

=head1 EXAMPLE

Load the L<BLM::FileIO> plugin and write something to the error log.

 <plugin:FileIO --define-plugin="fd" "/var/www/mysite.com/logs/error.log" "w+">

 <null $fd.write("Hello World!\n");
 <null $fd.close>

 <plugin:FileIO "/var/www/mysite.com/logs/error.log" "w+">
 <null $FileIO.write("Hello World!\n");
 <null $FileIO.close>

=head1 USING OTHER PERL MODULES

Beginning with Bedrock 2.3.1 you can load most Perl modules and use
their methods as if they were a true Bedrock Plugin.  

Keep in mind that objects returned by these Perl modules are B<not>
I<Bedrock> objects.  Use the C<E<lt>hashE<gt>> and C<E<lt>arrayE<gt>>
tags to coerce these objects into Bedrock objects.

Example. Assume method C<bar()> returns an array.

 <plugin:Foo>

 <array:bar --expand-args $Foo.bar()>

Example. Assume method c<bas()> returns a hash reference.

 <plugin:Foo>
 
 <hash:baz $Foo.baz()>

=head1 SEE ALSO

L<BLM::Plugin>, L<Bedrock::Application::Plugin>, L<E<lt>pebbleE<gt>>, 
L<E<lt>hashE<gt>>, L<E<lt>arrayE<gt>>, 

=cut
