#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Plugin;

use strict;
use warnings;

use Bedrock::Constants qw{:chars :booleans};
use Bedrock::Dump;
use Bedrock::Plugin;
use English qw{-no_match_vars};
use List::Util qw{any none};
use Symbol;

use parent qw (Exporter TagX::TAG::NoBody);

use Role::Tiny::With;
with 'Bedrock::Logger';

########################################################################
sub define_options {
########################################################################
  return (
    'define-var=s'    => undef,
    'dir-prefix=s'    => undef,
    'define-plugin=s' => undef,
    'tie'             => undef,
  );

} ## end sub define_options

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;
  my @argv    = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  $options{'define-var'} //= $UNDERSCORE;

  my $config = $tx->out_handle->{Handle}->{'CONFIG'};

  my $tag_name = shift @argv;
  my $tag_opts = $self->parse_tag_name($tag_name);
  my $name;
  my $class;

  if ( exists $options{'define-plugin'} ) {
    $name  = $options{'define-plugin'};
    $class = $tag_opts->{name} || $tag_opts->{type};
  }
  else {
    $name  = $tag_opts->{name};
    $class = $tag_opts->{type};
    $name =~ s/:://gxsm;
  }

  if ( exists $tx->{'VARS'}->{$name} ) {
    $self->get_logger->warn(
      sub {
        sprintf 'plugin name: [%s] conflicts with existing variable.', $name;
      }
    );
  }

  if ( exists $tx->{'VARS'}->{ $options{'define-var'} } ) {
    $self->get_logger->warn(
      sub {
        sprintf
          'return variable name: [%s] conflicts with existing variable.',
          $options{'define-var'};
      }
    );
  }

  # still undecided about this
  if ( exists $options{'dir-prefix'} ) {
    if ( none { $options{'dir-prefix'} eq $_ } @INC ) {
      push @INC, $options{'dir-prefix'};
    }
  }

  # adhoc addition of a PLUGIN path
  if ( $config->{PLUGIN_PATH} ) {
    my @plugin_inc = split /:/xsm, $config->{PLUGIN_PATH};

    foreach my $path (@plugin_inc) {
      next if any { $path eq $_ } @INC;
      push @INC, $path;
    }
  }

  my $plugin = $class =~ /^BLM/xsm ? $class : 'BLM::' . $class;

  if ( $self->loadModule($plugin) ) {
    $class = $plugin;
  }
  elsif ( $self->loadModule($class) ) {
    $self->get_logger->debug(
      sub {
        sprintf 'Successfully loaded perl class (%s)', $class;
      }
    );
  }
  else {
    die sprintf
      "Could not load module: [%s]. Check your syntax [<plugin:%s>] or your plugin path.\n",
      $class, $tag_name;
  }

  my $obj;

  if ( $class->can('new') && !exists $options{tie} ) {  ## no critic (ProhibitCascadingIfElse)
    $self->get_logger->trace(
      sub {
        Bedrock::Dump::compact [ 'args', \@argv ];
      }
    );

    $obj = $class->new(@argv);
  }
  elsif ( $class->can('TIEHASH') ) {
    $self->get_logger->debug(
      sub {
        ref($self) . " creating an object of class $class";
      }
    );

    $obj = {};
    tie %{$obj}, $class, @argv;  ## no critic (ProhibitTies)
  }
  elsif ( $class->can('TIEARRAY') ) {
    $self->get_logger->debug(
      sub {
        ref($self) . "creating an array of class $class";
      }
    );

    $obj = [];
    tie @{$obj}, $class, @argv;  ## no critic (ProhibitTies)
  }
  elsif ( $class->can('TIEHANDLE') ) {
    $self->get_logger->debug(
      sub {
        ref($self) . " creating a handle of class $class";
      }
    );

    $obj = gensym;
    tie *{$obj}, $class, @argv;  ## no critic (ProhibitTies)
  }
  elsif ( $class->can('TIESCALAR') ) {
    $self->get_logger->debug(
      sub {
        ref($self) . " creating a scalar of class $class";
      }
    );

    $obj = $argv[0];
    tie $obj, $class;            ## no critic (ProhibitTies)
  }
  else {
    die "Attempt to load invalid module: $class.\n";
  }

  if ( ref $obj ne $class ) {
    bless $obj, $class;
  }

  # call the plugin's init_plugin() if it exists...note that <plugin>
  # can be used to access "some" Perl modules that are not derived
  # from Bedrock::Plugin

  if ( ref($obj) && $obj->can('init_plugin') ) {
    if ( $obj->can('verbose') ) {
      $obj->verbose( $self->verbose );
    }

    if ( $obj->can('options') ) {
      $obj->options( Bedrock::Hash(%options)->new );
    }

    $tx->{'VARS'}->{ $options{'define-var'} } = $obj->init_plugin(@argv);
  }

  $tx->{'VARS'}->{$name} = $obj;

  return $tx->{'VARS'}->{$name};
}

########################################################################
sub loadModule {
########################################################################
  my ( $self, $module ) = @_;

  $module =~ s/::/\//gxsm;

  if ( $module !~ /[.]pm$/xsm ) {
    $module = $module . '.pm';
  }

  return $module
    if $INC{$module};

  eval { require $module; };

  if ($EVAL_ERROR) {
    $self->get_logger->error(
      sub {
        "module: [$module] not loaded!\n" . $EVAL_ERROR;
      }
    );
  }

  $self->get_logger->debug(
    sub {
      "module: [$module] loaded successfully";
    }
  );

  return $EVAL_ERROR ? undef : $module;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>pluginE<gt>>

=head1 PURPOSE

Load a Bedrock Plugin or Perl module.

=head1 SYNTAX

 <plugin:[plugin name][:name] [--define-var="name"] args...>

=head1 DESCRIPTION

Plugins are one of the ways you can extend Bedrock.  They are
typically used to provide some functionality specific to your
application or add features not found in core Bedrock.

Plugins are used to invoke methods that perform actions or that return
objects or snippets of HTML for assembling your page.

=head1 OPTIONS

 --define-var    = "var-name"
 --define-plugin = "var-name"
 --tie

=over 5

=item --define-var

Name of the object that will hold the return value of the Plugin's
initialization function.  If not supplied the value will be returned
in C<$_>.

=item --define-plugin

Name of the object that will be instantiated as the given Plugin.
If not supplied the object will have the same name as the Plugin.  Some examples:

 <plugin:Mail>  <=> <plugin:Mail --define-plugin="Mail">

 <plugin:BLM::Mail> <=> <plugin:BLM::Mail --define-plugin="BLMMail">

I<By convention, you we don't use the full package name when
specifying the plugin, although you are more than welcome to do that
if you would like.>

=item --tie

Forces the plugin to tie the plugin class rather than invoking a
C<new()> method.  Some Perl classes are designed to be tied, while
others may expect (by convention) that you instantiate them using a
C<new()> method.  This option forces a tie even if the Perl class
contains a C<new()> method.

=back

=head1 NOTES

Plugins are just Perl modules that have implemented a C<new()> method
or ones that can be C<tie>'d.  Bedrock will pass any of the argument
in the tag to the C<new()> constructor.

You can also subclass the Perl C<Bedrock::Plugin> class.  Typically a
plugin will look something like this:

 package BLM::Foo;

 use strict;
 use warnings;

 use parent qw/Bedrock::Plugin/;

 use Bedrock::Hash;
 use Bedrock::Array;
 
 sub init_plugin {
   my $self = shift;
   my @args = @_;

   "Greetings from Foo!";
 }
 
 sub hello_world {
   my $self = shift;

   "Hello World!";
 }

 sub return_a_hash {
   return Bedrock::Hash->new( color => "red", value => 1 );
 }

 sub return_an_array {
   return Bedrock::Array->new( qw/red blue green/ );
 }

 1;


=head1 TIPS

=over 5

=item Returning a value upon initialization

You should override the C<init_plugin> method if you want to return a
value upon instantiation.

=item Passing arguments to the plugin

The plugin tagE<039>s arguments are passed to your initialization
function or the new constructor if your are instantiating a Perl
module.

 <plugin:FileIO "foo.txt" "r">

=item Plugin location

Plugins should be placed in a location where Perl will find them.
They should be part of the C<BLM> namespace.

 package BLM::Foo;

I<In case you are wondering - C<BLM> = Bedrock Loadable Module.>

If you are running Bedrock as a CGI, you probably want to make sure
the the C<perl.INC> file points to a directory that contains your
plugins.

If you are running C<mod_perl> you probably want to use
C<PerlSwitches> or create a C<startup.pl> script that adds the
necessary paths to C<@INC>.

You can also set the configuration variable C<PLUGIN_PATH> in F<tagx.xml>.

 <scalar name="PLUGIN_PATH">/var/www/vhosts/mysite.com/share/perl5</scalar>


=item Retrieving plugin options

Options you might pass to the plugin (e.g. --define-var) can be
retrieved using the C<options()> method> if youE<039>ve subclassed
C<Bedrock::Plugin>

=back

=head1 EXAMPLE

Load the C<BLM::FileIO> plugin and write something to the error log.

 <plugin:FileIO --define-plugin="fd" "/var/www/mysite.com/logs/error.log" "w+">

 <null $fd.write("Hello World!\n");
 <null $fd.close>

 <plugin:FileIO "/var/www/mysite.com/logs/error.log" "w+">
 <null $FileIO.write("Hello World!\n");
 <null $FileIO.close>

=head1 USING OTHER PERL MODULES

Beginning with Bedrock 2.3.1 you can load most Perl modules and use
their methods as if they were a true Bedrock Plugin.  

Keep in mind that objects returned by these Perl modules are B<not>
I<Bedrock> objects.  Use the C<E<lt>hashE<gt>> and C<E<lt>arrayE<gt>>
tags to coerce these objects into Bedrock objects.

Example. Assume method C<bar()> returns an array.

 <plugin:Foo>

 <array:bar --expand-args $Foo.bar()>

Example. Assume method c<bas()> returns a hash reference.

 <plugin:Foo>
 
 <hash:baz $Foo.baz()>

=head1 SEE ALSO

C<Bedrock::Plugin>, C<Bedrock::Application::Plugin>, C<E<lt>pebbleE<gt>>, 
C<E<lt>hashE<gt>>, C<E<lt>arrayE<gt>>, 

=cut
