package TagX::TAG::SQLHandler;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use parent qw(Exporter TagX::TAG::SQLConnector);

use Bedrock::Constants qw(:chars :booleans);
use DBI;
use Data::Dumper;
use English qw( -no_match_vars );
use Scalar::Util qw(reftype);

use Role::Tiny::With;
with 'Bedrock::Logger';

########################################################################
sub get_list_options {
########################################################################
  my ( $self, $option ) = @_;

  my @list;

  if ( defined $option ) {
    if ( ref($option) && reftype($option) eq 'ARRAY' ) {
      push @list, @{$option};
    }
    else {
      push @list, $option;
    }
  }

  return @list;
}

########################################################################
sub get_db_handle {
########################################################################
  my ( $self, $tx, %options ) = @_;

  my $name = $options{dbname};

  if ($name) {
    $self->get_logger->warn('Use of deprecated option --dbname. Use --db instead.');
  }

  $name //= $options{db};

  if ($name) {
    my $dbh = ref $name ? $name : $tx->{DB}->{$name};

    die "unknown database handle $name\n"
      if !$dbh;

    die "$name is not a DBI handle\n"
      if !ref $dbh || ref($dbh) !~ /^DBI::db/xsm;

    return $dbh;
  }

  ($name) = grep { $tx->{DB}->{$_} } ( $self->ANONYMOUS, keys %{ $tx->{DB} // {} } );
  my $dbh = $tx->{DB}->{ $name // $EMPTY };

  if ( !$dbh || !ref $dbh ) {
    no warnings 'uninitialized';

    $self->get_logger->debug('attempting to get connection strings');

    my ( $dsn, $user, $pass, $host, $socket ) = $self->get_dsn( $tx, %options );

    $self->get_logger->debug( sprintf 'get_dsn returned: [%s] [%s] [%s] [%s] [%s]',
      $dsn, $user, $pass, $host, $socket );

    if ($host) {
      $dsn .= ":$host";
      $self->get_logger->debug("dsn now: $dsn");
    }

    if ($socket) {
      $dsn .= ";mysql_socket=$socket";
      $self->get_logger->debug("dsn now: $dsn");
    }

    if ( !$dsn || !$user ) {
      die "No database connection available.\n";
    }

    $self->get_logger->debug(
      sub {
        "attempting to connect to [$dsn] as [$user]";
      }
    );

    $dbh = eval {
      DBI->connect(
        $dsn, $user, $pass,
        { AutoCommit => $options{AutoCommit} // $TRUE,
          PrintError => $options{PrintError} // $TRUE,
          RaiseError => $options{RaiseError} // $TRUE,
          ChopBlanks => $options{ChopBlanks} // $TRUE,
        }
      );
    };

    die sprintf 'Unable to connect to database: %s %s', $DBI::errstr, $EVAL_ERROR
      if !$dbh;

    $self->get_logger->debug(
      sub {
        return sprintf 'Autoconnected to database [%s] as [%s]', $dsn, $user;
      }
    );

    $tx->{'DB'}->{$name} = $dbh;
  }

  die "database is not pingable\n"
    if !$dbh->ping;

  return $dbh;
}

1;

__END__
