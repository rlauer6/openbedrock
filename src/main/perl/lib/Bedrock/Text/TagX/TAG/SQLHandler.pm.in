package TagX::TAG::SQLHandler;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;

BEGIN {
  use Exporter ();
  use Bedrock;

  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter TagX::TAG::SQLConnector);
}

use DBI;

use Data::Dumper;
use English qw( -no_match_vars );

use Scalar::Util qw/reftype/;
use Log::Log4perl qw/:easy/;

sub get_list_options {
  my ($self, $option) = @_;

  my @list;

  if ( defined $option ) {
    if ( ref($option) && reftype($option) eq 'ARRAY' ) {
      push @list, @{$option};
    }
    else {
      push @list, $option;
    }
  }
  
  return @list;
}

sub get_db_handle {
  my ($self, $tx, %options) = @_;

  my $name = $options{'dbname'};

  WARN 'Use of deprecated option --dbname. Use --db instead.'
    if $name;

  my $dbh;

  if ( $options{'db'} ) {
    $dbh = $tx->{DB}->{$options{'db'}};
    
    if ( !ref($dbh) || ref($dbh) !~/DBI::db/ ) {
      die $options{'db'} . " is not a DBI handle\n";
    }
  }
  elsif ($name) {
    $dbh = $tx->{'DB'}->{$name};
    die "Unknown database connection named `$name'.\n"
      if !$dbh;
  }
  else {
    $dbh = $tx->{'DB'}->{$self->ANONYMOUS};
  }

  if ( !$dbh || !ref($dbh) ) {
    my ($dsn, $user, $pass, $host) = $self->get_dsn($tx, %options);
    
    if ( !$dsn || !$user ) {
      die "No database connection available.\n";
    }
    
    DEBUG sub {
      "attempting to connect to [$dsn] as [$user]";
    };
        
    my $name = &ANONYMOUS;

    $dbh = eval {
      DBI->connect(
        $dsn,
        @options{qw(username password)},
        { 'AutoCommit' => 1,
          'PrintError' => 1,
          'RaiseError' => 1,
          'ChopBlanks' => 1
        }
      );
    };
    
    die "Unable to connect to database: ", $DBI::errstr, $EVAL_ERROR, "\n"
      if ! $dbh;

    DEBUG sub {
      "Autoconnected to database [$dsn] as [$user]\n";
    };

    $tx->{'DB'}->{$name} = $dbh;
  }

  if ( !$dbh->ping ) {
    die "database is not pingable\n";
  }

  return $dbh;
}

1;
