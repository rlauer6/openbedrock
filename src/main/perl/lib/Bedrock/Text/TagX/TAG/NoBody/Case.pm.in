#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Case;

use strict;
use warnings;

use Bedrock::Constants qw(:chars :booleans);
use Data::Dumper;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw (Exporter TagX::TAG::NoBody);

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = ();

  my @argv = $self->parse_options( \%options, @context );

  $self->get_logger->debug( Dumper( [ \@argv, \%options ] ) );

  $self->dump_options( \%options, @argv );

  my $output_var;
  my $var;

  if ( $argv[0] =~ /^:([^:]*):?(.*?)$/xsm ) {
    ( $var, $output_var ) = ( $1, $2 );

    $self->get_logger->debug(
      sub {
        sprintf 'ARGV[0] => [%s], 1 =>  [%s], 2 => [%s]', $argv[0], $var, $output_var;
      }
    );

    if ( $var =~ /^[*]/xsm ) {
      $var =~ s/^[*]//xsm;
      $output_var = $var;
    }

    $argv[0] = $tx->{'VARS'}->{$var};
  }

  my $value = shift @argv;

  # <case:foo this>            => return this if foo
  # <case:foo this that>       => return that if foo eq this, else return ''
  # <case:foo this that $foo>  => return that if foo eq this, else $foo

  if ( @argv == 1 ) {
    if ($value) {
      $value = $argv[0];
    }
  }
  elsif ( @argv == 2 ) {
    $self->get_logger->debug( Dumper( [ 'argv=2', $value, \@argv ] ) );
    if ( defined $value && $value eq $argv[0] ) {
      $value = $argv[1];
    }
    else {
      $value = $EMPTY;
    }
  }
  else {
    my $default_value = @argv % 2 ? pop @argv : $EMPTY;

    my %decode_values = @argv;

    $self->get_logger->debug( Dumper( [ 'args>2', \%decode_values, $default_value ] ) );

    $value
      = exists $decode_values{$value}
      ? $decode_values{$value}
      : $default_value;
  }

  $self->get_logger->debug( Dumper( [ 'final:', $output_var, $value ] ) );

  if ($output_var) {
    $tx->param( $output_var => $value );
  }
  else {
    $tx->out_handle->print($value);
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>caseE<gt>>

=head1 PURPOSE

Provides a ternary like tag and a lookup capability.

=head1 SYNTAX

 <case[:var-name | var-name] test-val out-val test-val out-val ... default>

=head1 DESCRIPTION

C<E<lt>caseE<gt>> implements a ternary like tag that allows you to test an input value against multiple values, each associated with a value to output if the test is true.

This tag can be used to eliminate the need for cascading else constructions.

C<E<lt>caseE<gt>> also can be used in
a similar fashion as the C<--decode> option of the C<E<lt>varE<gt>>
tag or the C<decode()> method.

=head1 OPTIONS

None.

=head1 EXAMPLE

=over 5

=item * Output "this" if C<$foo> defined

 <case:foo this>

=item * Output "that" if C<$foo> eq  "this"

 <case:foo this that>

=item * Output "that" if C<$foo> eq "this", else output "none"

 <case:foo this that none>

=item * Output the value paired with the value that matches
C<$foo>. Output "undefined if nothing matches.

 <case:foo a 1 b 2 c 3 d 4 "undefined">

Essentially your list of values is a set of key/pairs that are used as
a lookup table. The last value in the list is the default value if no
match is found.

You can achieve the same things in multiple ways in Bedrock, however
C<E<lt>caseE<gt>> is a bit more succinct.

 <hash:lookup a 1 b 2 c 3 d 4>
 <var $lookup.get($input.foo) --default="undefined">

=back

=head1 NOTES

This has always been an experimental tag that may have limited
value in the real world, although intuitively it should be quite
useful.

 <input type="radio" name="fruits" value="bananas" <case $input.fruits "bananas" 'checked="checked"'>>

=head1 SEE ALSO

C<E<lt>ifE<gt>>
C<E<lt>iifE<gt>>

=cut
