#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Case;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
}

use TagX::Log;
use TagX::TAG::NoBody;

@ISA = qw (TagX::TAG::NoBody);

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = ();
  my @argv = $self->parse_options( \%options, @context );

  my $verbose = $self->verbose;

  $self->dump_options( \%options ) if $verbose;
  my $output_var;

  if ( $argv[0] =~ /^:([^:]*):?(.*?)$/ ) {
    &log_message( $self,
                  sprintf( "ARGV[0] => [%s], 1 =>  [%s], 2 => [%s]",
                           $argv[0], $1, $2
                         )
                ) if $verbose;
    my $var = $1;

    if ( $var =~ /^\*/ ) {
      $var =~ s/^\*//;
      $output_var = $var;
    }

    $argv[0] = $tx->{'VARS'}->{$var};
    $output_var = $output_var || $2;
  }

  my $value = shift @argv;

  &log_message( $self, Bedrock::Dump::compact( $value, @argv ) ) if $verbose;

  # <case:foo this>            => return this if foo
  # <case:foo this that>       => return that if foo eq this, else return ''
  # <case:foo this that $foo>  => return that if foo eq this, else $foo

  if ( @argv == 1 ) {
    $value = $argv[0] if $value;
  }
  else {
    my %decode_values = @argv;
    my $default_value = ( @argv % 2 ) ? pop @argv : '';
    $value =
    exists $decode_values{$value} ? $decode_values{$value} : $default_value;
  }

  if ($output_var) {
    $tx->param( $output_var => $value );
  }
  else {
    $tx->out_handle->print($value);
  }
}

1;

=head1 TAG - C<E<lt>caseE<gt>>

=head1 PURPOSE

Select between alternatives and output or decode output.

=head1 SYNTAX

 <case[:var-name | var-name] test-val out-val test-val out-val ... default>

=head1 DESCRIPTION

C<E<lt>caseE<gt>> is an output tag.  It implements a terser way of
choosing between alternatives than using a series of C<if/elsif/else> tags.  C<E<lt>caseE<gt>> also can be used in
a similar fashion as the C<--decode> option of the C<E<lt>varE<gt>>
tag or the C<decode()> method.

=head1 OPTIONS

None.

=head1 EXAMPLE

=over 5

=item * Output "this"if C<$foo> defined

 <case:foo this>

=item * Output "that" if C<$foo> eq  "this"

 <case:foo this that>

=item * Output "that" if C<$foo> eq "this", else output "none"

 <case:foo this that none>

=item * Look C<$foo> up in a hash or output a default value of "undefined"

 <case:foo a 1 b 2 c 3 d 4 "undefined">

=back

=head1 NOTES

This is an experimental tag that may have limited value in the real
world, although intuitively it should be quite useful.

 <input type="radio" name="fruits" value="bananas" <case $input.fruits "bananas" 'checked="checked"'>>

=head1 SEE ALSO

C<E<lt>ifE<gt>>

=cut

#
# Revision 1.10  2011/09/21 20:29:34  eutl420
# pod fix
#
# Revision 1.9  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.8  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.7  2011/07/13 18:08:57  eutl420
# - optionally sink output to a variable instead of always outputting the value
#
# Revision 1.6  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.5  2010/12/12 17:10:56  eutl420
# - use parse_tag_name
# - use dump_options
# - remove use of Data::Dumper
#
# Revision 1.4  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.3  2010/11/17 02:27:27  rlauer
# - pod cleanup
#
# Revision 1.2  2009/12/31 12:43:27  rlauer
# added docs
#
# Revision 1.1  2009/12/28 13:04:35  rlauer
# src/main/perl/lib/Bedrock/Text/TagX/TAG/NoBody/Case.pm
#
