#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Hash;

use strict;
use warnings;

use Bedrock::Constants qw{:chars :booleans};
use Bedrock::Hash;
use English q{-no_match_vars};
use Scalar::Util qw/reftype/;
use Symbol;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw (Exporter TagX::TAG::NoBody);

########################################################################
sub define_options {
########################################################################
  return (
    'json'       => undef,
    'define-var' => undef
  );
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  my $name = $options{'define-var'} || $UNDERSCORE;

  my $tag_opts = $self->parse_tag_name( $argv[0] );
  if ( $tag_opts->{name} ) {
    shift @argv;
    $name = $tag_opts->{name};
  }

  my $obj;

  if ( exists $options{'json'} ) {
    $obj = $self->decode_json_string( join $EMPTY, @argv );

    die sprintf "Not a hash definition (%s)\n",, $argv[0]
      if !ref($obj) || reftype($obj) ne 'HASH';
  }
  elsif ( @argv == 1 && !ref $argv[0] ) {
    $obj = $self->decode_json_string( $argv[0] );

    die sprintf "Not a hash definition (%s)\n",, $argv[0]
      if !ref($obj) || reftype($obj) ne 'HASH';
  }
  # see if odd number of elements
  elsif ( @argv % 2 ) {
    $self->get_logger->warn(
      sub {
        "Odd number of elements in object creation list, merging in $argv[0]";
      }
    );

    my $aref = $argv[0];

    if ( ref($aref) && reftype($aref) =~ /ARRAY|HASH/xsm ) {
      shift @argv;

      if ( ref($aref) && reftype($aref) eq 'ARRAY' ) {
        $self->get_logger->debug(
          sub {
            "Prepending the following array to (@argv)\n(@{$aref})";
          }
        );

        unshift @argv, @{$aref};
      }
      else {
        $self->get_logger->debug(
          sub {
            "Prepending the following array to (@argv)\n(%{$aref})";
          }
        );

        unshift @argv, %{$aref};
      }
    }
    elsif ( defined( $aref = $argv[-1] )
      && ref($aref)
      && reftype($aref) =~ /ARRAY|HASH/xsm ) {
      pop @argv;

      if ( ref($aref) && reftype($aref) eq 'ARRAY' ) {
        $self->get_logger->debug(
          sub {
            "Appending the following array to (@argv)\n(@{$aref})";
          }
        );

        push @argv, @{$aref};
      }
      else {
        $self->get_logger->debug(
          sub {
            "Appending the following array to (@argv)\n(%{$aref})";
          }
        );

        push @argv, %{$aref};
      }
    }
  }

  $obj = Bedrock::Hash->new;

  while (@argv) {
    my $key = shift @argv;

    if ( ref($key) && reftype($key) eq 'HASH' ) {
      map { $obj->{$_} = $key->{$_} } keys %{$key};
    }
    else {
      $obj->{$key} = shift @argv;
    }
  }

  $obj = Bedrock::Hash->new( %{$obj} );
  $tx->{'VARS'}->{$name} = $obj;

  return $obj;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>hashE<gt>>

=head1 PURPOSE

Create a Bedrock hash object (L<http://en.wikipedia.org/wiki/Associative_array>).

=head1 SYNTAX

 <hash[:name] [options] expression...>

=head1 DESCRIPTION

The C<hash> tag is used to create a hash object.  The expression may
be a simple list, a list of expressions, a JSON string
representation of a hash object, an XML string or a hash object.

=head1 OPTIONS

 --define-var = "var-name"
 --json
 --xml

=over 5

=item --define-var

Name of the hash object being defined

=item --json

Considers the argument(s) to be JSON strings for conversion to a hash object.

=back

=head1 EXAMPLE

=over 5

=item * A simple hash from a list

 <hash:foo red 1 blue 2 green 3>

 <hash --define=var="foo" red 1 blue 2 green 3>

=item * Create a hash from a JSON string

 <hash:foo --json '{foo : 1, blue : 2, green : 3}'>

=item * Create a hash from another hash

 <hash:bar brown 4 yellow 5>
 
 <hash:foo red 1 green 2 blue 3 $bar>

=item * Create a hash from an array ref

 <array:a a 1 b 2 c 2>
 <hash:h $a>

=back

=head1 NOTES

I<Simple hashes are typically created using list notation.>

A simple hash:

  <hash:foo  red 1 green 2 blue 3 >

I<If you pass an odd number of list elements then Bedrock will see if
either the first or last element is itself a hash and consider that a
simple hash to flatten as part of your list. For example:>

  <hash:foo red 1 blue 2>

  <hash:bar $foo green 3>

If your object is deeper than a simple hash (the values themselves are
arrays or hashes), then those values will be added "as-is", in other
words a true recursive flatten is B<not> performed.

I<Using JSON notation you can create arbitrarily complex hashes.>

A complex hash:

  <hash:foo --json '{menu   : ["steak", "potatoes","carrots","peas" ], 
                     desert : ["pie", "cake", "cookies", "ice cream"]
                    }'>

  <pre>
  <trace --output $foo>
  </pre>

If there is only 1 scalar argument then it is considered to be a JSON
string to be interpreted as a hash (the C<--json> is optional).

I<You can also use the E<lt>nullE<gt> and E<lt>sinkE<gt> tags to
create hashes.  Methods also may return hashes.>

I<All hashes are ordered hashes!  WooHoo!  Who the heck wants random hashes?>

I<You can use E<lt>foreachE<gt> to iterate over hashes.>

I<Bedrock hashes have interesting methods that do interesting things.  See below.>

=head1 METHODS

The object created by the C<E<lt>hashE<gt>> tag is a C<Bedrock::Hash>.
You can invoke methods on the object to do some interesting things.

=head2 bedrock_xml

Return the Bedrock XML version of the object.

 <var $foo.bedrock_xml>

=head2 delete

 delete( key )

Deletes the given key from the hash.

=head2 devolve

 devolve()

Hash members may be simple Perl objects or blessed references. This
method attempts to create a hash of pure Perl objects by converting
blessed arrays and hashes into Perl objects.

=head2 find

 find( value ) 

Return the key associated with a given value.

 <var $config.find( 'yes' )>

I<Note that this may not be useful if there are multiple hash members
that have the same value.>

=head2 get

 get( key )

Returns the value of the given key from the hash.

=head2 grep

 grep( pattern )

Returns an array of keys where the hash values match the given
pattern.  The pattern can be a simple string or a string representing
a quoted regular expression.

 <null:found $config.grep('qr/log/i')>


=head2 isEmpty

Returns true if the hash is empty.

=head2 json

Returns a JSON stringified representation of the hash object.

=head2 keys

 keys( [dir, [type]] )

Returns a Bedrock array containing the keys in the order in which you
defined the hash elements.  If you supply sort direction
and sort type the returned array will be sorted.

=over 5

=item dir

Sort direction. C<asc> or C<desc>.

=item type

Sort type.  C<alpha> or C<numeric>.

=back

=head2 map

 map(fmt, ['key'|'value'], ['key'|'value'])

Iterates over an ordered hash taking either the key/value pairs of the
hash and using them arguments to a format string you pass.  The output
of this method is an array.  You define what arguments (and what order
you want them) as the 2nd and 3rd arguments to C<map>.


 <null:keys $foo.map("%s", "key")> 

Would be another way to do:

 <null:keys $foo.keys()>

Likewise:

 <null:value $foo.map("%s", "value")> 

Would be a stupid way to do:

 <null:values $foo.values()>

A more practical example:

  <null:foo --json '{ red: 1, blue : 2, green : 3}'>

  <select name="foo">
    <var $foo.map('<option value="%s"\>%s</option\>', 'value', 'key')>
  </select>

=head2 length

 length()

Returns the number keys in the hash.

=head2 matches

 matches( pattern, [flags] )

Returns the keys where C<pattern> matches the values of hash.  C<flags> is one of:

=over 5

=item i

Ignore case.

=item s

Treat string as single line.

=item m

Treat string as multiple lines.

=back 

=head2 print

 print( [filename] )

Either returns the hash in a dump format to the caller or writes the
output to a file if the optional file argument is given.

=head2 print_compact

 print_compact( [filename] )

Similar to C<print()> but Writes the hash in a I<compact> format.

=head2 set

 set( key, value )

Sets the specified key to the specified value in the hash.

=head2 slice

 slice( key, key, ... )

Returns a subset of the hash based on the passed keys.  Each C<key>
can be a scalar or an array reference.  If the key is an array
refererence then those array members are used as keys to return
additional hash members (this only works 1 level deep).

=head2 sort

 sort( [dir, [type]] )

Returns a sorted listed of the hash keys. See C<keys()>.  By default
the keys are returned in ascending, alphabetic order.

=head2 values

Returns an array of the hash values.

=head2 xml

 xml( options )

Output the object as an XML document.  See the documentation regarding
XML conversion in the E<lt>varE<gt> tag.

=over 5

=item options

A list of key/value pairs of options as documented in the perl module C<XML::Simple>.

=back


=head2 yaml

 yaml()

Output the object as YAML.

=head1 SEE ALSO

C<E<lt>nullE<gt>>, C<E<lt>arrayE<gt>>

=cut
