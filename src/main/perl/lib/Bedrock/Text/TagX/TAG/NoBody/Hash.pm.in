#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#) $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Hash;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @INC);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use TagX::Log;
use TagX::TAG::NoBody;
use Symbol;
use Bedrock::Hash;
use Bedrock::BedrockJSON;

@ISA = qw (TagX::TAG::NoBody);

sub decode_json_string {
  my $json_string = shift;
  my $obj;

  eval {
    $obj = Bedrock::JSON::decode($json_string);
    die "Not a hash definition ($json_string)!"
    unless ( UNIVERSAL::isa( $obj, 'HASH' ) );
  };

  die "possibly invalid JSON string: $@\n"
  if $@;

  return $obj;
}

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = ( 'json'       => undef,
                  'define-var' => undef );

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;
  $self->dump_options( \%options ) if $verbose;

  my $name = $options{'define-var'} || '_';

  my $tag_opts = $self->parse_tag_name( $argv[0] );
  if ( $tag_opts->{name} ) {
    shift @argv;
    $name = $tag_opts->{name};
  }

  my $obj;

  if ( exists $options{'json'} ) {
    $obj = decode_json_string( join( '', @argv ) );
  }
  elsif ( @argv == 1 && !ref( $argv[0] ) ) {
    $obj = decode_json_string( $argv[0] );
  }

  # see if odd number of elements
  elsif ( @argv % 2 ) {
    &log_message( $self,
         "Odd number of elements in object creation list, merging in $argv[0]" )
    if $verbose;
    my $aref = $argv[0];

    if ( &UNIVERSAL::isa( $aref, 'ARRAY' ) || &UNIVERSAL::isa( $aref, 'HASH' ) )
    {

      shift @argv;

      if ( &UNIVERSAL::isa( $aref, 'ARRAY' ) ) {
        &log_message( $self,
                      "Prepending the following array to (@argv)\n(@{$aref})" )
        if $verbose;
        unshift @argv, @{$aref};
      }
      else {
        &log_message( $self,
                      "Prepending the following array to (@argv)\n(%{$aref})" )
        if $verbose;
        unshift @argv, %$aref;
      }
    }
    elsif ( defined( $aref = $argv[-1] )
       and
       ( &UNIVERSAL::isa( $aref, 'ARRAY' ) || &UNIVERSAL::isa( $aref, 'HASH' ) )
    )
    {

      pop @argv;

      if ( &UNIVERSAL::isa( $aref, 'ARRAY' ) ) {
        &log_message( $self,
                      "Appending the following array to (@argv)\n(@{$aref})" )
        if $verbose;
        push @argv, @{$aref};
      }
      else {
        &log_message( $self,
                      "Appending the following array to (@argv)\n(%{$aref})" )
        if $verbose;
        push @argv, %$aref;
      }
    }
  }

  $obj = Bedrock::Hash->new;

  while ( my $key = shift @argv ) {
    if ( &UNIVERSAL::isa( $key, 'HASH' ) ) {
      map { $obj->{$_} = $key->{$_} } keys %$key;
    }
    else {
      $obj->{$key} = shift @argv;
    }
  }

  $obj = Bedrock::Hash->new(%$obj);
  $tx->{'VARS'}->{$name} = $obj;

  return $obj;
}

=head1 TAG - C<E<lt>hashE<gt>>

=head1 PURPOSE

Create a Bedrock hash.

=head1 SYNTAX

 <hash[:name] [options] expression..>

=head1 DESCRIPTION

The C<hash> tag is used to create a hash object.  The expression may
be a simple list, a list of expressions, a JSON string
representation of a hash object, an XML string or a hash object.

=head1 OPTIONS

 --define-var = "var-name"
 --json
 --xml

=over 5

=item --define-var

Name of the hash object being defined

=item --json

Considers the argument(s) to be JSON strings for conversion to a hash object.

=item --xml

Considers the argument(s) to be XML strings for conversion to a hash object.

=back

=head1 EXAMPLE

=over 5

=item * A simple hash

 <hash:foo red 1 blue 2 green 3>

 <hash --define=var="foo" red 1 blue 2 green 3>

=item * Create a jash from a JSON string

 <hash:foo --json '{foo : 1, blue : 2, green : 3}'>

=item * Create a hash from another hash

 <hash:bar brown 4 yello 5>
 
 <hash:foo red 1 green 2 blue 3 $bar>

=back

=head1 NOTES

I<Simple hashes are typically created using list notation.>

A simple hash:

  <hash:foo  red 1 green 2 blue 3 >

I<If you pass an odd number of list elements then Bedrock will see if
either the first or last element is itself a hash and consider that a
simple hash to flatten as part of your list. For example:>

  <hash:foo red 1 blue 2>

  <hash:bar $foo green 3>

If your object is deeper than a simple hash (the values themselves are
arrays or hashes), then those values will be added "as-is", in other
words a true recursive flatten is B<not> performed.

I<Using JSON notation you can create arbitrarily complex hashes.>

A complex hash:

  <hash:foo --json '{menu   : ["steak", "potatoes","carrots","peas" ], 
                     desert : ["pie", "cake", "cookies", "ice cream"]
                    }'>

  <pre>
  <trace --output $foo>
  </pre>

If there is only 1 scalar argument then it is considered to be a JSON
string to be interpreted as a hash (the C<--json> is optional).

I<You can also use the E<lt>nullE<gt> and E<lt>sinkE<gt> tags to
create hashes.  Methods also may return hashes.>

I<All hashes are ordered hashes!  WooHoo!  Who the heck wants random hashes?>

I<You can use E<lt>foreachE<gt> to iterate over hashes.>

I<Hashes have interesting methods that do interesting things.  See below.>

=head1 METHODS

The object created by the C<E<lt>hashE<gt>> tag is a C<Bedrock::Hash>.
You can invoke methods on the object that do interesting things.

=head2 bedrock_xml

Return the Bedrock XML version of the object.

 <var $foo.bedrock_xml>

=head2 delete( key ) 

Deletes the given key from the hash.

=head2 get( key )

Returns the value of the given key from the hash.

=head2 isEmpty

Returns true if the hash is empty.

=head2 json

Returns a JSON stringified representation of the hash object.

=head2 keys

Returns a Bedrock array containing the keys (in the order in which you
defined the hash elements).

=head2 map(fmt, ['key'|'value'], ['key'|'value'])

Iterates over an ordered hash taking either the key/value pairs of the
hash and using them arguments to a format string you pass.  The output
of this method is an array.  You define what arguments (and what order
you want them) as the 2nd and 3rd arguments to C<map>.


 <null:keys $foo.map("%s", "key")> 

Would be a stupid way to do:

 <null:keys $foo.keys()>

Likewise:

 <null:value $foo.map("%s", "value")> 

Would be a stupid way to do:

 <null:values $foo.values()>

A more practical example:

  <null:foo --json '{ red: 1, blue : 2, green : 3}'>

  <select name="foo">
    <var $foo.map('<option value="%s"\>%s</option\>', 'value', 'key')>
  </select>

=head2 matches( pattern, [flags]) 

Returns the keys where C<pattern> matches the values of hash.  C<flags> is one of:

=over 5

=item i

Ignore case.

=item s

Treat string as single line.

=item m

Treat string as multiple lines.

=back 

=head2 print( [filename] )

Either returns the hash in a dump format to the caller or writes the
output to a file if the optional file argument is given.

=head2 print_compact( [filename] )

Similart to C<print()> but Writes the hash in a I<compact> format.

=head2 set( key, value )

Sets the specified key to the specified value in the hash.

=head2 values

Returns an array of the hash values.

=head2 xml( options )

Output the object as an XML document.  See the documentation regarding
XML conversion in the E<lt>varE<gt> tag.

=over 5

=item options

A list of key/value pairs of options as documented in the perl module C<XML::Simple>.

=back

=head1 SEE ALSO

C<E<lt>nullE<gt>>, C<E<lt>arrayE<gt>>

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.22  2011/12/28 16:54:44  eutl420
# - pod tweaks
#
# Revision 1.21  2011/09/21 20:31:37  eutl420
# - pod for matches()
#
# Revision 1.20  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.19  2011/09/09 19:26:41  eutl420
# - document bedrock_xml() method
#
# Revision 1.18  2011/08/16 20:38:31  eutl420
# - allow hash merging
#
# Revision 1.17  2011/08/07 16:12:19  eutl420
# use Bedrock::BedrockJSON instead of Bedrock::JSON to avoid namespace collisions with JSON when use Bedrock; is employed
#
# Revision 1.16  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.15  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.14  2011/03/25 13:51:11  eutl420
# - added method decode_json_string
# - replace inline code with call to new method decode_json_string
# - if only 1 scalar argument, consider that to be a JSON string
#
# Revision 1.13  2010/12/12 17:10:35  eutl420
# - use parse_tag_name
# - use dump_options
#
# Revision 1.12  2010/11/29 15:57:54  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.11  2010/11/17 02:27:29  rlauer
# - pod cleanup
#
# Revision 1.10  2010/11/16 00:17:58  rlauer
# - adding method documentation
#
# Revision 1.9  2010/11/14 21:13:32  rlauer
# - allow odd number of elements for object creation and recognize
#   hash and array refs as valid first and last arguments in that case
# - spruce up docs to describe above
#
# Revision 1.8  2010/11/08 03:14:05  rlauer
# - documentation changes only
#
# Revision 1.7  2010/01/04 02:47:46  rlauer
# add --xml to options section of docs
#
# Revision 1.6  2010/01/04 02:25:11  rlauer
# docs
#
# Revision 1.5  2009/12/31 18:31:12  rlauer
# updating docs
#
# Revision 1.4  2009/12/31 12:43:28  rlauer
# add --json and --define-var options
#
# Revision 1.3  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.2  2009/12/26 15:20:58  rlauer
# all objects now ordered, may remove this experimental tag in final release
#
# Revision 1.1  2009/12/15 13:10:04  rlauer
# first check-in
#
# $Revision $

1;
