#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Sink;

use strict;
use Bedrock::Hash;
use Bedrock::Array;
use Bedrock::BedrockJSON;
use XML::Simple;
use XML::Parser;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use TagX::Log;
use TagX::TAG::WithBody;

@ISA = qw (TagX::TAG::WithBody);

sub closure
{
    '/sink';
}

sub evolve {
  my $this = shift;

  if (ref($this) eq 'HASH') {
    foreach (keys %$this) {
      $this->{$_} = evolve($this->{$_});
    }
    return Bedrock::Hash->new(%$this);
  }
  elsif (ref($this) eq 'ARRAY') {
    for (my $idx=0; $idx<@$this; $idx++) {
      $this->[$idx] = evolve($this->[$idx]);
    }
    return Bedrock::Array->new(@$this);
  }
  else {
    return $this;
  }
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('define-var=s' => undef,
		   'htmlencode'	=> undef,
		   'htmldecode'	=> undef,
		   'json' => undef,
                   'xml' => undef
		  );

    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    $self->dump_options( \%options ) if $verbose;

    my $tag_opts = $self->parse_tag_name( $argv[0] );

    if ( $tag_opts->{name} ) {
       shift @argv;
       $options{'define-var'} = $tag_opts->{name};
    }

    die "Use only one of --HTMLEncode or --HTMLDecode here.\n"
	if $options{'htmlencode'} and $options{'htmldecode'};

    # Create a frame for output. Note very carefully that we assign the frame
    # to a lexical variable. Hence the destructor for the frame is not invoked
    # When the lexical variable goes out of scope, the frame is destructed,
    # and since we didn't invoke $frame->end_frame, the contents of the frame
    # are discarded.
    my $frame = $tx->out_handle->create_frame;
    &log_message( $self, "Entering <SINK> block .." ) if $verbose;
    $self->SUPER::finalize ( $tx, @context );
    &log_message( $self, "Exited <SINK> block" ) if $verbose;

    my $data = $tx->out_handle->frame_data;
    if ( $options{'htmlencode'} ) {
	$data =~ s/\x26/\&amp;/g;
	$data =~ s/\x3c/\&lt;/g;
	$data =~ s/\x3e/\&gt;/g;
	&log_message ( $self, "HTMLEncoded to <$data>" ) if $verbose > 1;
      } elsif ( $options{'htmldecode'} ) {
	$data =~ s/\x26amp;/\x26/g;
	$data =~ s/\x26lt;/\x3c/g;
	$data =~ s/\x26gt;/\x3e/g;
	&log_message ( $self, "HTMLDecoded to <$data>" ) if $verbose > 1;
      } elsif ($options{'json'}) {
	$data = Bedrock::JSON::decode($data);
      } elsif ($options{'xml'}) {
	my $config = $tx->out_handle->{Handle}->{'CONFIG'};
	my $options = $config->{XML}->{in}->devolve;
	my $xml = XML::Simple->new( %{$options} );
	# see if --xml in context of a file handle output
	if (@argv == 1) {
	  die "Use the --xml option of <sink> to decode XML to a Bedrock object.  If you wanted to write XML use <var --xml>."
	}
	# sinking xml to a variable?
	else {
	  # XMLin ?
	  $data = $xml->XMLin($data);
	}
      }
      
    if ( exists $options{'define-var'} ) {
      &log_message( $self, "Assigning contents of <SINK> to $options{'define-var'}" ) if $verbose;
      $tx->param( $options{'define-var'} => $data );
    }
    
    # Expect a single argument which should be a handle to which we print
    # the frame contents to
    if ( @argv == 1 ) {
	my $fd = shift @argv;
# make sure unbuffered i/o
	my $old_handle = select $fd;
	$| = 1;
	select $old_handle;
	print $fd $data;
    }

    # at this point, since we didn't end the frame, the contents should be
    # discarded as soon as we leave here.
}

1;

=pod

=head1 TAG - C<E<lt>sinkE<gt>>

=head1 PURPOSE

Capture the block of text encapsulate by the C<E<lt>sinkE<gt>/E<lt>/sinkE<gt>>
construction.

=head1 SYNTAX

 <sink[:name] [options] [handle]>
 </sink>

=head1 DESCRIPTION

The C<E<lt>sinkE<gt>> tag is used to capture the result of the Bedrock page
parser and redirect it to either a Bedrock object or a handle that has
been previously opened.


=head1 OPTIONS

 --define-var = "var-name"
 --htmlencode
 --htmldecode
 --json 
 --xml

=over 5

=item --define-var

Name of scalar object that will contain the output.

=item --htmlencode

Encode the contents of the sink body as HTML entities.

=item --htmldecode

Interpret the contents of the sink body as HTML entities.

=item --json

The content of the E<lt>sinkE<gt> block is considered to be a JSON string.  Bedrock will convert it
into a Bedrock object or array.

=item --xml

The content of the E<lt>sinkE<gt> block is considered to be an XML
string.  Bedrock will convert it into a Bedrock object or array.
I<See the E<lt>varE<gt> tag for details regarding XML conversions in
Bedrock.>

=item handle

An open handle, typically opened by another BLM.

=back

=head1 NOTES

If no target variable name or hand are provided as options,
C<E<lt>sinkE<gt>> will take the output and direct it to the bit
bucket.

Various tags and plugins will return handles that can be used with the
C<E<lt>sinkE<gt>> tag.  For example, the C<E<lt>openE<gt>> tag returns
a handle to an open file descriptor.

=head1 EXAMPLES

=over 5

=item Sinking text to a scalar object

Initialize a variable with some text:

  <sink --define-var="foo">This is a test of sinking some text to the scalar "foo"</sink>
  <var $foo>

Create a Bedrock array using JSON notation:

  <sink:foo --json>
  [ 
    {item: "chairs", price: "100"},
    {item: "cooler", price: "29.95"},
    {item: "corona", price: "32"}
  ]
  </sink>

Create a Bedrock object usin XML notation:

  <sink:foo --xml>
  <document>
    <item>
      <date>01/03/2010</date>
      <text>This is some text</text>
    </item>
  </document>
  </sink>

=item Sinking text to a handle

  <plugin:FileIO  ($config.LOGDIR+"/foo.bar") "w">
  <sink $FileIO.handle>Write this line to the specified handle</sink>
  <null $FileIO.close()>

=back 

=head1 SEE OTHER

C<E<lt>nullE<gt>>

=cut


#
# Name of Release: $Name$
# $Log$
# Revision 1.27  2011/08/07 16:10:54  eutl420
# - use Bedrock::BedrockJSON instead of Bedrock::JSON to avoid namespace collisions with JSON when use Bedrock; is employed
#
# Revision 1.26  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.25  2011/07/12 19:10:37  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.24  2011/03/02 10:27:32  eutl420
# - typo (old_hande -> old_handle)
#
# Revision 1.23  2011/02/03 17:02:37  eutl420
# - remove close($fd), need to be able to continue to write to handle
# - unbuffer the i/o to the handle
#
# Revision 1.22  2010/12/12 16:26:30  eutl420
# - use parse_tag_name
#
# Revision 1.21  2010/11/29 15:57:54  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.20  2010/11/17 02:27:34  rlauer
# - pod cleanup
#
# Revision 1.19  2010/11/13 17:22:13  rlauer
# - add htmlencode/htmldecode documentation
#
# Revision 1.18  2010/11/08 03:11:06  rlauer
# - documentation changes
# - add TagX::Log
#
# Revision 1.17  2010/01/03 19:21:13  rlauer
# added --xml option
#
# Revision 1.16  2009/12/31 18:38:43  rlauer
# updated docs
#
# Revision 1.15  2009/12/31 12:43:38  rlauer
# docs tweaks
#
# Revision 1.14  2009/12/28 20:31:35  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.13  2009/12/16 23:23:39  rlauer
# use SIS::JSON, docs, sink:name tag syntax
#
# Revision 1.12  2009/12/15 12:39:58  rlauer
# promote objects to bedrock objects with evolve
#
# Revision 1.11  2009/12/09 12:53:23  rlauer
# very loose JSON decode - support bare word keys and embedded new lines
#
# Revision 1.10  2009/12/07 00:34:39  rlauer
# make object from sink tag a SIS::Hash or SIS::Array
#
# Revision 1.9  2009/12/06 23:56:28  rlauer
# JSON support
#
# Revision 1.8  2008/12/03 14:01:21  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.7  2008/11/12 12:51:31  rlauer
# added pod
#
# Revision 1.6  2008/02/28 18:14:43  rlauer
# Applying Rob's patches to make Bedrock work on Apache 2.x
# (plus a few other obvious bug fixes).
#
# Revision 1.5  2002/02/13 17:56:56  sridhar
# File handle arg is not closed.
#
# Revision 1.4  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2000/12/15 14:30:20  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.2  2000/11/21 19:18:05  sridhar
# 1. Added --define-var option to <sink> for defining a variable with the
# contents if <sink></sink>.
# 2. Added --HTMLEncode and --HTMLDecode options to encoding and
# decoding the contents of <sink></sink>
#
# Revision 1.1  2000/10/19 20:57:18  sridhar
# Moved Hush.pm to Sink.pm and added capability for passing an argument
# to <sink> tag which should be a handle to which the output of the body
# of <sink> can be written
#
#
