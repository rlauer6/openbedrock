#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Sink;

use strict;
use warnings;

use Bedrock::Hash;
use Bedrock::Array;
use Bedrock::BedrockJSON;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw (TagX::TAG::WithBody);

########################################################################
sub closure {
########################################################################
  return '/sink';
}

########################################################################
sub evolve {
########################################################################
  my $this = shift;

  if ( ref($this) eq 'HASH' ) {
    foreach ( keys %{$this} ) {
      $this->{$_} = evolve( $this->{$_} );
    }
    return Bedrock::Hash->new( %{$this} );
  }
  elsif ( ref($this) eq 'ARRAY' ) {
    for my $idx ( 0 .. $#{$this} ) {
      $this->[$idx] = evolve( $this->[$idx] );
    }
    return Bedrock::Array->new( @{$this} );
  }
  else {
    return $this;
  }
}

sub define_options {
  return (
    'bedrock-xml'  => undef,
    'define-var=s' => undef,
    'htmlencode'   => undef,
    'htmldecode'   => undef,
    'json'         => undef,
    'serializer=s' => undef,
    'xml'          => undef,
    'yaml'         => undef,
  );
}

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $tag_opts->{name} ) {
    shift @argv;
    $options{'define-var'} = $tag_opts->{name};
  }

  die "Use only one of --HTMLEncode or --HTMLDecode here.\n"
    if $options{'htmlencode'} and $options{'htmldecode'};

  # Create a frame for output. Note very carefully that we assign the frame
  # to a lexical variable. Hence the destructor for the frame is not invoked
  # When the lexical variable goes out of scope, the frame is destructed,
  # and since we didn't invoke $frame->end_frame, the contents of the frame
  # are discarded.
  #
  # Output is sent to the current frame, so that creating a new frame here
  # and then 'finalizing' below, has the effect of writing the contents of the <sink>
  # tag to a frame we are going to throw away (because of above).  Before leaving the scope
  # however, we grab the frame_data because <sink> wants to own the output.
  #
  my $frame = $tx->out_handle->create_frame;

  $self->get_logger->debug('Entering <SINK> block ..');

  $self->SUPER::finalize( $tx, @context );

  $self->get_logger->debug('Exited <SINK> block');

  my $data = $tx->out_handle->frame_data;

  if ( $options{'htmlencode'} ) {  ## no critic (ProhibitCascadingIfElse)
    $data =~ s/\x26/\&amp;/xsmg;
    $data =~ s/\x3c/\&lt;/xsmg;
    $data =~ s/\x3e/\&gt;/xsmg;

    $self->get_logger->trace(
      sub { return sprintf 'HTMLEncoded to <%s>', $data } );
  }
  elsif ( $options{'htmldecode'} ) {
    $data =~ s/\x26amp;/\x26/xsmg;
    $data =~ s/\x26lt;/\x3c/xsmg;
    $data =~ s/\x26gt;/\x3e/xsmg;

    $self->get_logger->trace(
      sub { return sprintf 'HTMLDecoded to <%s>', $data } );

  }
  elsif ( $options{'json'} ) {
    my $handler = $self->io_handler( $tx, 'JSON' );

    $data = $handler->deserialize( $data, {@argv} );
  }
  elsif ( $options{'xml'} ) {
    # see if --xml in context of a file handle output
    die
      "Use the --xml option of <sink> to deserialize XML to a Bedrock object.  If you wanted to write XML use <var --xml>.\n"
      if @argv == 1;

    my $handler = $self->io_handler( $tx, 'XML' );
    $data = $handler->deserialize( $data, {@argv} );
  }
  elsif ( $options{'bedrock-xml'} ) {
    # see if --bedrock-xml in context of a file handle output
    die
      "Use the --xml option of <sink> to deserialize Bedrock XML to a Bedrock object.  If you wanted to write XML use <var --xml>.\n"
      if @argv == 1;

    my $handler = $self->io_handler( $tx, 'BedrockXML' );
    $data = $handler->deserialize( $data, {@argv} );
  }
  elsif ( $options{'yaml'} ) {
    # see if --yaml in context of a file handle output
    die
      "Use the --yaml option of <sink> to deserialize YAML to a Bedrock object.  If you wanted to write YAML use <var --yaml>.\n"
      if @argv == 1;

    my $handler = $self->io_handler( $tx, 'YAML' );
    $data = $handler->deserialize( $data, {@argv} );
  }
  elsif ( $options{'serializer'} ) {
    my $handler = $self->io_handler( $tx, $options{serializer} );
    $data = $handler->deserialize( $data, {@argv} );
  }

  # <sink:foo $fd> probably does not make any sense, so we EITHER
  # store the data to a variable or write the data to a handle
  if ( exists $options{'define-var'} ) {
    $self->get_logger->debug(
      sub {
        sprintf "Assigning contents of <SINK> to %s\n",
          $options{'define-var'};
      }
    );

    $tx->param( $options{'define-var'} => $data );
  }
  elsif ( @argv == 1 ) {
    my $fd = shift @argv;

    $fd->autoflush;

    print {$fd} $data;
  }

  # at this point, since we didn't end the frame, the contents should be
  # discarded as soon as we leave here.
  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>sinkE<gt>>

=head1 PURPOSE

Capture the block of text encapsulate by the C<E<lt>sinkE<gt>/E<lt>/sinkE<gt>>
construction, possibly passing to handle.

=head1 SYNTAX

 <sink[:name] [options] [handle]>
 </sink>

=head1 DESCRIPTION

The C<E<lt>sinkE<gt>> tag is used to capture the result of the Bedrock page
parser and redirect it to either a Bedrock object or a handle that has
been previously opened.

=head1 OPTIONS

 --define-var = "var-name"
 --htmlencode
 --htmldecode
 --json 
 --xml
 --yaml

=over 5

=item --define-var

Name of scalar object that will contain the output.

=item --htmlencode

Encode the contents of the sink body as HTML entities.

=item --htmldecode

Interpret the contents of the sink body as HTML entities.

=item --json

The content of the E<lt>sinkE<gt> block is considered to be a JSON string.  Bedrock will convert it
into a Bedrock object or array.

=item --xml

The content of the E<lt>sinkE<gt> block is considered to be an XML
string.  Bedrock will convert it into a Bedrock object or array.
I<See the E<lt>varE<gt> tag for details regarding XML conversions in
Bedrock.>

=item --yaml

The content of the E<lt>sinkE<gt> block is considered to be a YAML
string.  Bedrock will convert it into a Bedrock object or array.
I<See the E<lt>varE<gt> tag for details regarding YAML conversions in
Bedrock.>

=item handle

An open handle, typically opened by another BLM.

=back

=head1 NOTES

If no target variable name or hand are provided as options,
C<E<lt>sinkE<gt>> will take the output and direct it to the bit
bucket.

Various tags and plugins will return handles that can be used with the
C<E<lt>sinkE<gt>> tag.  For example, the C<E<lt>openE<gt>> tag returns
a handle to an open file descriptor.

=head1 EXAMPLES

=over 5

=item Sinking text to a scalar object

Initialize a variable with some text:

  <sink --define-var="foo">This is a test of sinking some text to the scalar "foo"</sink>
  <var $foo>

Create a Bedrock array of hashes using JSON notation:

  <sink:foo --json>
  [ 
    {item: "chairs", price: "100"},
    {item: "cooler", price: "29.95"},
    {item: "corona", price: "32"}
  ]
  </sink>

Create a Bedrock object usin XML notation:

  <sink:foo --xml>
  <document>
    <item>
      <date>01/03/2010</date>
      <text>This is some text</text>
    </item>
  </document>
  </sink>

=item Sinking text to a handle

  <open:fh --mode="w" ($config.LOGDIR + "/foo.bar")>
  <sink $fh>Write this line to the specified handle</sink>

=back 

=head1 SEE OTHER

C<E<lt>nullE<gt>>

=cut
