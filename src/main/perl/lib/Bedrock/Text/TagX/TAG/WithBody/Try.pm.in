#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Try;

use strict;
use warnings;

use English qw/-no_match_vars/;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw(Exporter TagX::TAG::WithBody);

########################################################################
sub closure {
########################################################################
  return '/try';
}

########################################################################
sub catch {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->{'catch'} = shift @args;

    my $parent_try = $self->{parent_try} || $self;

    $self->{'catch'}->parent_try($parent_try);
    $self->{'catch'}->parent( $self->parent );
  }

  return $self->{'catch'};
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options;

  my @argv = $self->parse_options( \%options, @context );
  $self->dump_options( \%options, @argv );

  my $frame = $tx->out_handle->create_frame;

  $self->get_logger->debug('Entering <TRY> block ..');

  eval { $self->SUPER::finalize( $tx, @context ); };

  $self->get_logger->debug('Exited <TRY> block ..');

  if ($EVAL_ERROR) {
    $self->get_logger->debug(
      sub {
        "Exception in <TRY> block\n" . $EVAL_ERROR;
      }
    );

    $tx->param( q{@} => $EVAL_ERROR );
    $tx->out_handle->empty_frame;

    if ( $self->catch ) {
      $self->get_logger->debug('Entering <CATCH> block ..');

      $self->catch->finalize( $tx, @context );

      $self->get_logger->debug('Exited <CATCH> block ..');
    }
    else {
      $self->get_logger->debug(
        'No exception handler .. propagating exception');

      die;
    }
  }

  $self->get_logger->debug('Completed try/catch sequence successfully');

  return $frame->end;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>tryE<gt>>

=head1 PURPOSE

Begin a try/catch block.

=head1 SYNTAX

  <try>
  ...
  <catch "reg exp1">
  ...
  <catch "reg exp2">
  ...
  <catch>
  ...
  </try>

=head1 OPTIONS

None

=head1 DESCRIPTION

The C<try/catch> construction is used to trap error conditions when
invoking something that will raise an error.  This could be a method
call, a C<E<lt>raiseE<gt>> tag, a Plugin, or perhaps a
C<E<lt>pebbleE<gt>>.

=head1 NOTES

The variable C<$@> will contain the error that was raised.

=head1 EXAMPLE

  <try>
    <pebble:mypeb "arg1">
  <catch>
    Could not execute the pebble for some reason!
  </try>

=head1 SEE ALSO

C<E<lt>catchE<gt>>, C<E<lt>raiseE<gt>> 

=cut
