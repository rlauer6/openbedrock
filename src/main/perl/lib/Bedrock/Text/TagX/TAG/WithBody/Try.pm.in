#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Try;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::TAG::WithBody 1.06;

@ISA = qw (TagX::TAG::WithBody);

sub closure
{
    '/try';
}

sub catch
{
    my $self = shift;
    if ( @_ == 1 ) {
        $self->{'catch'} = shift;
        $self->{'catch'}->parent_try ( exists $self->{'parent_try'} ? $self->{'parent_try'} : $self );
        $self->{'catch'}->parent ( $self->parent );
    }
    $self->{'catch'};
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options;
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are (@argv)";
	&log_message( $self, $str );
    }

    my $frame = $tx->out_handle->create_frame;

    &log_message( $self, "Entering <TRY> block .." ) if $verbose;
    eval {
	$self->SUPER::finalize ( $tx, @context );
    };
    &log_message( $self, "Exited <TRY> block .." ) if $verbose;
    if ( $@ ) {
	&log_message( $self, "Exception in <TRY> block\n$@" ) if $verbose;
	$tx->param ('@' => $@);
	$tx->out_handle->empty_frame;
	if ( $self->catch ) {
	    &log_message( $self, "Entering <CATCH> block .." ) if $verbose;
	    $self->catch->finalize ( $tx, @context );
	    &log_message( $self, "Exited <CATCH> block .." ) if $verbose;
	} else {
	    &log_message( $self, "No exception handler .. propagating exception" )
		if $verbose;
	    die;
	}
    }
    &log_message( $self, "Completed try/catch sequence successfully" ) if $verbose;
    $frame->end;
}



=pod

=head1 TAG try

=head1 PURPOSE

Begin a try/catch block.

=head1 SYNTAX

  <try>
  ...
  <catch "reg exp1">
  ...
  <catch "reg exp2">
  ...
  <catch>
  ...
  </try>

=head1 OPTIONS

None.

=head1 EXAMPLE

  <try>
    <pebble:mypeb "arg1">
  <catch>
    Could not execute the pebble for some reason!
  </try>

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.8  2008/12/02 15:02:32  rlauer
# Added pod for tag reference
#
# Revision 1.7  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.6  2000/12/15 14:30:20  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.5  2000/05/31 14:40:58  sridhar
# Rigorous version numbering and usage
#
# Revision 1.4  2000/04/24 12:49:13  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.3  2000/04/13 15:21:01  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.2  2000/03/13 15:45:12  sridhar
# 1. Bug fix in specifying $@ when exception is caught -- should define
# @ as the error message
# 2. Added --verbose option and more verbose message logging
#
# Revision 1.1  2000/03/09 14:21:01  sridhar
# Adding new class Try for handling <try> tags which is the way to start
# an exception handler block.
#
#

1;
