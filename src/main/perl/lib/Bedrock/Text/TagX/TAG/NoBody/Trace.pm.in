#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::NoBody::Trace;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);
use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub regular_dump
{
    my ($ref, $nspaces, $string) = @_;
    $nspaces = 2 unless defined( $nspaces );
    $string = '' unless defined( $string );
    if ( &isa( $ref, 'HASH') ) {
	$string .= "{\n";
	for my $key (sort keys %$ref) {
	    my $value = $ref->{$key};
	    $string .= ' ' x $nspaces . "$key => ";
	    if ( ref( $value ) ) {
		$string = &regular_dump( $value, $nspaces + 2, $string );
	    } else {
		$string .= defined( $value ) ? "($value)\n" : "*** Undefined ***\n";
	    }
	}
	$string .= ' ' x $nspaces . "}\n";
    } elsif ( &isa( $ref, 'ARRAY' ) ) {
	$string .= "[\n";
	my ($i, $value);
	for ($i = 0 ; $i < @{$ref} ; $i++ ) {
	    $value = $ref->[$i];
	    $string .= ' ' x $nspaces . "[$i] .. ";
	    if ( ref( $value ) ) {
		$string = &regular_dump( $value, $nspaces + 2, $string );
	    } else {
		$string .= "($value)\n";
	    }
	}
	$string .= ' ' x $nspaces . "]\n";
    }
    $string;
}

sub compact_dump
{
    my ($ref, $ctx, $string) = @_;
    $ctx = '' unless defined( $ctx);
    my $l = length( $ctx ); 
    if ( &isa( $ref, 'HASH' ) ) {
	my $i = 0;
	for my $key (sort keys %$ref) {
	    my $value = $ref->{$key};
	    if ( ref( $value ) ) {
		$string = &compact_dump( $value, $ctx ? "$ctx.$key" : $key, $string );
	    } else {
		$string .= ($i ? ' ' x $l . ".$key = " : "$ctx.$key = " ) .
		    (defined( $value ) ? "($value)\n" : "*** Undefined ***\n");
	    }
	    $i++;
	}
    } elsif ( &isa( $ref, 'ARRAY' ) ) {
	my ($i, $value);
	for ($i = 0 ; $i < @$ref ; $i++ ) {
	    $value = $ref->[$i];
	    if ( ref( $value ) ) {
		$string = &compact_dump( $value,
				    $ctx ? ($i > 0 ? (' ' x $l . ".[$i]") : ("$ctx.[$i]")) : "[$i]",
				    $string );
	    } else {
		if ( $i ) {
		    $string .= ' ' x $l . ".[$i] = ($value)\n";
		} else {
		    $string .= "$ctx.[$i] = ($value)\n";
		}
	    }
	}
    }
    $string;
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('output'	=> undef,
		   'dump-vars'	=> undef,
		   'compact'	=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are\n@argv";
	&log_message( $self, $str );
    }

    my $string = $options{'compact'} ?
	&compact_dump ( $tx->{'VARS'} ) : &regular_dump ( $tx->{'VARS'} );
    $tx->out_handle->print($string) if $options{'output'};
    &log_message( $self, "\n$string" );
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.8  2000/06/06 19:56:52  sridhar
# Checking of variable type is done using `isa()' instead of `ref()' to
# take care of the fact that some variables could be objects.
#
# Revision 1.7  2000/05/31 14:58:52  sridhar
# Rigorous version numbering and usage
#
# Revision 1.6  2000/04/24 12:48:28  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:20:37  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.4  2000/03/09 14:18:13  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.3  2000/03/06 18:34:26  sridhar
# 1. Added option --dump-vars which dumps all defined vars into log
# file.
# 2. Have an option --output which can also print variable information
# into the output stream
# 3. Have a --compact option affecting the output of --dump-vars.
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:00  sridhar
# Added TagX
#
#

1;
