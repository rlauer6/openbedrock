
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Trace;

use strict;
use warnings;

use Bedrock::Dump;
use Bedrock::Constants qw{:booleans :chars};

use Role::Tiny::With;
with 'Bedrock::Logger';

use Log::Log4perl::Level;
use Log::Log4perl;

use parent qw{ Exporter TagX::TAG::NoBody };

########################################################################
sub define_options {
########################################################################
  return (
    'output'       => undef,
    'dump-vars'    => undef,
    'htmlencode'   => undef,
    'pebble-cache' => undef,
    'compact'      => undef,
  );

} ## end sub define_options

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  # dump everything if no <trace>
  if ( !@argv ) {
    @argv = $tx->{'VARS'};
  }

  if ( exists $options{'pebble-cache'} ) {
    push @argv, { 'pebble-cache' => $tx->pebble_cache };
  }

  my $string;

  my $func
    = $options{'compact'}
    ? \&Bedrock::Dump::compact
    : \&Bedrock::Dump::regular;

  for my $var (@argv) {
    $string .= $func->( $var, undef, undef, defined $options{htmlencode} );
  }

  if ( $options{'output'} ) {
    $tx->out_handle->print($string);
  }

  # always log <trace>
  my $logger = $self->get_logger;

  # if no appenders, use root logger, always log at fatal to guarantee output to log file
  if ( !$logger->has_appenders() ) {
    $logger = Log::Log4perl->get_logger($EMPTY);  # get root logger
    $logger->fatal($string);
  }
  else {
    my $additivity = $logger->additivity();
    $logger->additivity(0);
    $logger->fatal($string);
    $logger->additivity($additivity);             # reset additivity
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>traceE<gt>>

=head1 PURPOSE

Dump the contents of Bedrock objects.

=head1 SYNTAX

 <trace [options] var-name... >

=head1 DESCRIPTION

Typically this tag is used to help in debugging or while developing
applications. Output can be included in the page and/or written to log
files.

=head1 OPTIONS

=over 5

=item --compact

An easier to read, non-Perlish output.

=item --htmlencode

HTML encode the output of dumped variables. Useful if a variable has
tag-like variables.

=item --output

Include this output in the page being processed. B<If this option is
not used the data is only written to the log file.>

=item --pebble-cache

Include the pebble cache in the output.

=back

=head1 NOTES

If no variable names are specified, all of the variables
in the current namespace will be dumped, prefaced by their names.

=head1 EXAMPLE

 <trace --output $input>

=cut
