#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Trace;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use Bedrock::Dump;

use TagX::TAG::NoBody;

use Log::Log4perl qw/:easy/;

@ISA = qw (TagX::TAG::NoBody);

sub define_options {
  return (
    'output'       => undef,
    'dump-vars'    => undef,
    'htmlencode'   => undef,
    'pebble-cache' => undef,
    'compact'      => undef
  );

} ## end sub define_options

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;
  
  my @argv = $self->parse_options( \%options, @context );
  
  $self->dump_options( \%options, @argv );

  # dump everything if no <trace>
  @argv = $tx->{'VARS'}
    if !@argv;

  if ( exists $options{'pebble-cache'} ) {
    push @argv, { 'pebble-cache' => $tx->pebble_cache };
  }

  my $string;

  my $func =
  $options{'compact'} ? \&Bedrock::Dump::compact : \&Bedrock::Dump::regular;

  for my $var (@argv) {
    $string .= $func->( $var, undef, undef, defined $options{htmlencode} );
  }

  $tx->out_handle->print($string)
    if $options{'output'};
  
  INFO $string;
}

=pod

=head1 TAG - C<E<lt>traceE<gt>>

=head1 PURPOSE

Dump the contents of Bedrock objects.

=head1 SYNTAX

 <trace [options] var-name...>

=head1 DESCRIPTION

Typically this tag is used to help in debugging or while developing
applications.  Output can be included in the page and/or written to log files.

=head1 OPTIONS

=over 5

=item --compact

An easier to read, non-perlish output.

=item --htmlencode

HTML encode the output of dumped variables. Useful if a variable has tag-like variables.

=item --output

Output to the page.  If not present, the data is only written to the log file.

=item --pebble-cache

Dumps the contents of the pebble-cache.

=back

=head1 NOTES

If no variable names are specified, all the variables
in the namespace will be dumped, prefaced by their names.

=head1 EXAMPLE

 <trace --output $input>

=cut


1;
