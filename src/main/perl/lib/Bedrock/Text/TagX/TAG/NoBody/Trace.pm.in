#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Trace;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.14;
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);
use Bedrock::Dump;

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('output'	=> undef,
		   'dump-vars'	=> undef,
		   'htmlencode' => undef,
		   'compact'	=> undef,
		  );

    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    $self->dump_options( \%options ) if $verbose;

    @argv = $tx->{'VARS'} unless @argv > 0;

    my $func = $options{'compact'} ? \&Bedrock::Dump::compact : \&Bedrock::Dump::regular;

    my $string;
    for (@argv) {
      $string .= $func->( $_, undef, undef, defined $options{htmlencode} ) ;
    }

    $tx->out_handle->print($string) if $options{'output'};
    &log_message( $self, "\n$string" );
}

=pod

=head1 TAG - C<E<lt>traceE<gt>>

=head1 PURPOSE

Dump the contents of Bedrock objects.

=head1 SYNTAX

 <trace [options] var-name...>

=head1 DESCRIPTION

Typically this tag is used to help in debugging or while developing
applications.  Output can be included in the page and/or written to log files.

=head1 OPTIONS

=over 5

=item --compact

An easier to read, non-perlish output.

=item --htmlencode

HTML encode the output of dumped variables. Useful if a variable has tag-like variables.

=item --output

Output to the page.  If not present, the data is only written to the log file.

=back

=head1 NOTES

If no variable names are specified, all the variables
in the namespace will be dumped, prefaced by their names.

=head1 EXAMPLE

 <trace --output $input>

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.21  2010/12/12 17:03:42  eutl420
# - dump_options, not dump_keys
#
# Revision 1.20  2010/12/06 14:18:53  rlauer
# - add --htmlencode option to encode output
#
# Revision 1.19  2010/11/29 15:57:54  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.18  2010/11/17 02:29:08  rlauer
# - pod cleanup
# - compact was default, but really did not give a choice
#
# Revision 1.17  2009/12/31 18:38:39  rlauer
# updated docs
#
# Revision 1.16  2009/12/31 12:43:35  rlauer
# docs tweaks
#
# Revision 1.15  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.14  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.13  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.12  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.11  2000/11/01 19:58:17  sridhar
# `compact' option is default.
#
# Revision 1.10  2000/08/22 14:13:30  sridhar
# Support named variable dumping for use like <trace $input>
#
# Revision 1.9  2000/07/05 17:57:24  sridhar
# Moved out compact_dump and regular_dump functions to a module.
#
# Revision 1.8  2000/06/06 19:56:52  sridhar
# Checking of variable type is done using `isa()' instead of `ref()' to
# take care of the fact that some variables could be objects.
#
# Revision 1.7  2000/05/31 14:58:52  sridhar
# Rigorous version numbering and usage
#
# Revision 1.6  2000/04/24 12:48:28  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:20:37  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.4  2000/03/09 14:18:13  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.3  2000/03/06 18:34:26  sridhar
# 1. Added option --dump-vars which dumps all defined vars into log
# file.
# 2. Have an option --output which can also print variable information
# into the output stream
# 3. Have a --compact option affecting the output of --dump-vars.
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:00  sridhar
# Added TagX
#
#

1;
