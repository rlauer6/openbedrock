#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::NoBody::Trace;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);
use SIS::Dump;

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('output'	=> undef,
		   'dump-vars'	=> undef,
		   'compact'	=> 1);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are\n@argv";
	&log_message( $self, $str );
    }

    @argv = $tx->{'VARS'} unless @argv > 0;

    my $func = $options{'compact'} ? \&SIS::Dump::compact : \&SIS::Dump::regular;

    my $string;
    for (@argv) {
	$string .= $func->( $_ );
    }
    $tx->out_handle->print($string) if $options{'output'};
    &log_message( $self, "\n$string" );
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.11  2000/11/01 19:58:17  sridhar
# `compact' option is default.
#
# Revision 1.10  2000/08/22 14:13:30  sridhar
# Support named variable dumping for use like <trace $input>
#
# Revision 1.9  2000/07/05 17:57:24  sridhar
# Moved out compact_dump and regular_dump functions to a module.
#
# Revision 1.8  2000/06/06 19:56:52  sridhar
# Checking of variable type is done using `isa()' instead of `ref()' to
# take care of the fact that some variables could be objects.
#
# Revision 1.7  2000/05/31 14:58:52  sridhar
# Rigorous version numbering and usage
#
# Revision 1.6  2000/04/24 12:48:28  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:20:37  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.4  2000/03/09 14:18:13  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.3  2000/03/06 18:34:26  sridhar
# 1. Added option --dump-vars which dumps all defined vars into log
# file.
# 2. Have an option --output which can also print variable information
# into the output stream
# 3. Have a --compact option affecting the output of --dump-vars.
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:00  sridhar
# Added TagX
#
#

1;
