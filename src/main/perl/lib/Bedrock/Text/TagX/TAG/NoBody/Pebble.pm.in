#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Pebble;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use vars qw($PWD);

use Bedrock::Array;
use TagX::Log;
use TagX::TAG::NoBody;
use Bedrock::BufferStream;
use Cwd;

@ISA = qw (TagX::TAG::NoBody);

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = ( 'file=s'      => undef,
                  'object=s'    => undef,
                  'pebble=s'    => undef,
                  'expand-args' => undef
                );

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  $self->dump_options( \%options ) if $verbose;

  my $pwd = fastcwd;
  my $input;
  my $pebble_text;
  my $pebble_name = 'anonymous';

  if ( exists $options{'file'} ) {
    $pebble_name = $options{'file'};
    $pebble_text =
    $tx->pebble( $pebble_name, '.peb', $pwd,
                 @ENV{qw(PEBBLE_DIR BEDROCK_PEBBLE_DIR)} );
  }
  elsif ( exists $options{'pebble'} ) {
    $pebble_name = $options{'pebble'};
    $pebble_text =
    $tx->pebble( $pebble_name, '.peb',
                 @ENV{qw(PEBBLE_DIR BEDROCK_PEBBLE_DIR)} );
  }
  elsif ( $argv[0] =~ /^:/ ) {
    my $tag_opts = $self->parse_tag_name( shift @argv );

    $tag_opts->{name} =~ s/^(.*?)(\.peb)?$/$1/;
    $pebble_name = $1;
    $pebble_text =
    $tx->pebble( $pebble_name, '.peb',
                 @ENV{qw(PEBBLE_DIR BEDROCK_PEBBLE_DIR)} );
  }
  elsif ( exists $options{'object'} ) {
    $pebble_text = $options{'object'};
    &log_message( $self, "Preparing to exec object [$input]" ) if $verbose;
  }
  elsif (@argv) {
    $pebble_text = shift @argv;
  }
  else {
    die "Must specify file or buffer as argument to <pebble>.\n";
  }

  if ( $verbose > 1 ) {
    &log_message( $self,
                  "Preparing to exec the following buffer ("
                  . length($pebble_text)
                  . " bytes)\n"
                  . $pebble_text
                );
  }
  elsif ($verbose) {
    &log_message( $self,
                  "Preparing to exec the following buffer ("
                  . length($pebble_text)
                  . " bytes)\n"
                  . substr( $pebble_text, 0, 200 ) . "...."
                ) if $verbose;
  }

  $input = Bedrock::BufferStream->new($pebble_text);
  $tx->store_pebble( $pebble_name, $input );

  &log_message( $self, "Created a buffer stream object [$input]" )
  if $verbose;

  die "Unable to find specified pebble ([$pebble_name].\n"
  unless $input;

  my $subform = $tx->new($input);
  $tx->{'VARS'}->new_frame;

  my @expanded;
  if ( $options{'expand-args'} ) {
    my $str = "Expanding arguments for <pebble>\n" if $verbose;
    my $i = 0;
    for my $item (@argv) {
      if ( ref($item) && &UNIVERSAL::isa( $item, 'ARRAY' ) ) {
        $str .= "Item [$i] is an array -- expanded ..\n" if $verbose;
        push @expanded, @{$item};
      }
      else {
        $str .= "Item [$i] is not an array -- pushed ..\n" if $verbose;
        push @expanded, $item;
      }
      $i++;
    }
    &log_message( $self, $str ) if $verbose;
  }
  else {
    @expanded = @argv;
  }

  $tx->param( 'ARGV' => Bedrock::Array->new(@expanded) );

  &log_message( $self, "Starting the exec with [$subform] .." ) if $verbose;
  $subform->output;
  &log_message( $self, "Completed exec with [$subform] .." ) if $verbose;

  $tx->{'VARS'}->end_frame;
}

=head1 TAG - C<E<lt>pebbleE<gt>>

=head1 PURPOSE

Invoke a Bedrock macro.

=head1 SYNTAX

  <pebble[:pebble-name] [options] expression ...>

=head1 DESCRIPTION

The C<E<lt>pebbleE<gt>> tag is used to include small Bedrock page or
snippet at the insertion point of the tag.  Additionally, the Bedrock
snippet is passed the value of the expressions in the tag as an array
object named C<$ARGV>.  The Bedrock snippet is evaluated in it's own
namespace thus providing a Bedrock I<macro> creation facility.

=head1 OPTIONS

 --file        = file name
 --pebble      = pebble name
 --expand-args

=over 5

=item --file

Fully qualified name of a file.  If the file is of the form
C<~/filename> then the file is taken to be relative to the
C<DOCUMENT_ROOT>.

=item --pebble

The name of a file with a C<.peb> extension in either the current
working directory, site pebble directory (C<PEBBLE_DIR>) or the
Bedrock global pebble directory (C<BEDROCK_PEBBLE_DIR>).

=item --expand-args

Expand arrays being passing as arguments to the pebble.  In essence,
array references are sent as lists, rather than 1 element scalars.

=back

=head1 NOTES

The C<E<lt>pebbleE<gt>> tag will create a separate namespace within
which a set of Bedrock statements will be executed.  Pebbles (files
with a C<.peb> extension) should normally be installed in the site's
pebble directory specified in the F<tagx.xml> file (C<PEBBLE_DIR>),
however they can be located in your document hierarchy as well.

As a rule of thumb, application specific pebbles may be better
positioned within your application hierarchy while more generalized
site pebbles should exist in the site's C<PEBBLE_DIR>.

In practice, pebbles can be a pre-cursor to a plugin.  You may find it
convenient to prototype a snippet of functionality as a pebble, but
find it deserves a more robust treatment as a plugin.

Bedrock installs a handful of example pebbles located in the system
pebble directory (C<BEDROCK_PEBBLE_DIR>).

Bedrock will use the following protocol when looking for pebbles to
execute:

=over 5

=item 1. 

A fully qualified filename specified by the C<--file=> option.

=item 2.

A file with a C<.peb> extension specified with the C<--pebble=>
directive located in the C<PEBBLE_DIR> as specfied in F<tagx.xml>.

=item 3.

A file with a C<.peb> extension whose name is specified after the
colon in the tag name, starting first in the current working directory
and then proceeding to look in the C<PEBBLE_DIR> as specified in
F<tagx.xml>.

=back

When a pebble is invoked, the arguments in the tag are passed to the
pebble in an array named C<$ARGV>.  Hence, within your pebble,
arguments are available by accessing elements of the C<$ARGV> array.

As previously stated, variables within the context of your pebble
occupy their own namespace, thus you do not have to be concerned about
name collision.

Suppose you want a simple pebble to create an unordered list from an
array.  Let's suppose the pebble's interface is defined thusly:

 <pebble:ul id-name class-name list>

Here's what your pebble might look like:

 <ul id="<var $ARGV.shift()>" class="<var $ARGV.shift()>">
 <foreach $ARGV>
   <li><var $_></li>
 </foreach>
 </ul>

Invoke the pebble as follows:

 <pebble:ul foo foo_class here there everywhere>

=head1 EXAMPLE

=over 5

=item * Invoke a pebble in the system pebble directory

Invoke the pebble C<mypeb.peb>, located in the system pebble directory
passing the arguments 1 and C<$input.hack>.

  <pebble:mypeb "1" $input.hack>
  <pebble --pebble="mypeb" "1" $input.hack>

=item * Invoke a pebble in the current working directory

Invoke the pebble C<mypeb.inc>, located in the current working
directory passing the arguments 1 and C<$input.hack>.

  <pebble --file="mypeb.inc" "1" $input.hack>

=item * Expand an array and pass as arguments

Invoke the pebble C<mypeb.peb>, located in the sytem pebble directory
passing the elements of the array C<$args> as a list as opposed to a
singleton whose value is an array reference.

  <pebble:mypeb --expand-args $args>

=item * Invoke a pebble and pass an object

Invoke the pebble C<mypeb.peb>, located in the sytem pebble directory
passing the C<$args> as a singleton whose value is an array reference.

  <pebble:mypeb $args>

=head1 SEE OTHER

C<E<lt>includeE<gt>>

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.14  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.13  2011/09/14 19:13:03  eutl420
# - pebbles are now stored in a cache, we look for the cached pebble first
#
# Revision 1.12  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.11  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.10  2011/07/06 15:54:25  eutl420
# - pod tweak (new line)
#
# Revision 1.9  2010/12/12 17:06:37  eutl420
# - use dump_options
# - use parse_tag_name
#
# Revision 1.8  2010/11/29 15:57:54  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.7  2010/11/17 02:27:32  rlauer
# - pod cleanup
#
# Revision 1.6  2010/11/14 21:04:27  rlauer
# - remove commented out debug statement, make it a log_message
# - minor documentation change
#
# Revision 1.5  2009/12/31 18:38:35  rlauer
# updated docs
#
# Revision 1.4  2009/12/31 12:43:31  rlauer
# much more robust documentation that explains pebble usage
#
# Revision 1.3  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.2  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.1  2008/11/25 14:32:36  rlauer
# added as part of Bedrock 2.0.0 reorg
#
#

1;
