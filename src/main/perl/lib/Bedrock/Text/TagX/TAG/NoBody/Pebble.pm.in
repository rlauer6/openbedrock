#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Pebble;

use strict;
use warnings;

use Bedrock qw(:booleans);
use Bedrock::Array;
use Bedrock::BufferStream;
use Bedrock::Constants qw(:chars :booleans);
use Bedrock::Dump;
use Cwd;
use English qw{-no_match_vars};
use Scalar::Util qw/reftype/;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw{ Exporter TagX::TAG::NoBody };

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = (
    'file=s'        => undef,
    'define-var=s'  => undef,
    'return-var=s', => undef,
    'object=s'      => undef,
    'pebble=s'      => undef,
    'expand-args'   => undef,
    'json'          => undef,
  );

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  my $define_var = $options{'define-var'};

  my $pwd = fastcwd;

  my $input;
  my $pebble_text;
  my $pebble_name = 'anonymous';

  if ( $options{file} ) {
    $self->get_logger->warn('--file option is no longer supported');
    $options{pebble} = $options{file};
  }

  my @search_paths = (
    getcwd, $ENV{PEBBLE_DIR},
    @{ $self->config }{qw( PEBBLE_DIR BEDROCK_PEBBLE_DIR)}
  );

  $self->get_logger->error( Dumper( \@search_paths ) );

  if ( exists $options{'pebble'} ) {
    die "use :name or --pebble but not both\n"
      if $argv[0] =~ /\A:/xsm;

    $pebble_name = $options{'pebble'};
    $pebble_text = $tx->pebble( $pebble_name, @search_paths );
  }
  elsif ( $argv[0] =~ /\A:/xsm ) {
    my $tag_opts = $self->parse_tag_name( shift @argv );

    $pebble_name = $tag_opts->{name};

    $pebble_text = $tx->pebble( $pebble_name, @search_paths );
  }
  elsif ( exists $options{'object'} ) {
    die "use :name or --object but not both\n"
      if $argv[0] =~ /\A:/xsm;

    $pebble_text = $options{'object'};

    $self->get_logger->debug(
      sub {
        return sprintf 'Preparing to exec object [%s]', $input // $EMPTY;
      }
    );

  }
  elsif (@argv) {
    $pebble_text = shift @argv;
  }
  else {
    die "Must specify pebble name or string as argument to <pebble>.\n";
  }

  $self->get_logger->trace(
    sub {
      return sprintf 'Preparing to exec the following buffer (%d bytes)',
        length($pebble_text), substr( $pebble_text, 0, 200 ) . '...';
    }
  );

  $input = Bedrock::BufferStream->new($pebble_text);
  $tx->store_pebble( $pebble_name, $input );

  $self->get_logger->debug(
    sub {
      sprintf 'Created a buffer stream object [%s]', $input;
    }
  );

  die "Unable to find specified pebble ([$pebble_name].\n"
    if !$input;

  my $output = $EMPTY;

  my $fh;

  if ( $options{'define-var'} ) {
    $fh = IO::Scalar->new( \$output );
  }

  my $subform = $tx->new( $input, $fh );

  $tx->{'VARS'}->new_frame;

  if ( exists $options{'json'} ) {
    eval { @argv = ( $self->decode_json_string( join $EMPTY, @argv ) ); };

    die sprintf "invalid JSON string\n", join $EMPTY, @argv
      if $EVAL_ERROR;
  }

  my $ARGV = Bedrock::Array->new(@argv);

  $self->get_logger->debug( Dumper( [ 'ARGV: ', $ARGV ] ) );

  $tx->param(
    _ARGV => $ARGV,
    ARGV  => $options{'expand-args'} ? expand_args(@argv) : $ARGV
  );

  $self->get_logger->debug(
    sub {
      sprintf 'Starting the exec with [%s]', $subform;
    }
  );

  $subform->output;

  if ($fh) {
    $fh->close;
  }

  $self->get_logger->debug(
    sub {
      sprintf "Completed exec with [%s]\n%s", $subform, $output;
    }
  );

  my ( $return_var, $return_var_as ) = split /:/xsm,
    $options{'return-var'} // q{};

  $return_var_as //= $return_var;

  my $return_val;

  if ( $return_var && exists $tx->{VARS}->{$return_var} ) {
    $return_val = $tx->{VARS}->{$return_var};
  }

  $tx->{'VARS'}->end_frame;

  # set vars in global namespace
  if ($define_var) {
    $tx->{'VARS'}->{$define_var} = $output;
  }

  if ($return_var) {
    $tx->{'VARS'}->{$return_var_as} = $return_val;
  }

  return;
}

########################################################################
sub expand_args {
########################################################################
  my (@args) = @_;

  my @expanded;

  for my $item (@args) {
    if ( is_array($item) ) {
      push @expanded, @{$item};
    }
    else {
      push @expanded, $item;
    }
  }

  return Bedrock::Array->new(@expanded);
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>pebbleE<gt>>

=head1 PURPOSE

Invoke a Bedrock pebble..

=head1 SYNTAX

  <pebble[:pebble-name] [options] expression ...>

=head1 DESCRIPTION

The C<E<lt>pebbleE<gt>> tag is used to execute a small Bedrock snippet
at the insertion point of the tag. The Bedrock snippet is passed the
value of the expressions in the tag as an array object named C<$ARGV>.
Unlike the C<E<lt>includeE<gt>> tag, the Bedrock snippet is evaluated
in itE<039>s own namespace thus providing a mechanism to essentially
create Bedrock I<macros> (affectionately known as I<pebbles>).

=head1 OPTIONS

 --define-var  = variable to sink output to
 --expand-args
 --file        = file name
 --object      = name of Bedrock object containging the pebble
 --pebble      = pebble name
 --return-var  = variable to hold a return object

=over 5

=item --define-var

Name of a variable that will hold the ouput of the pebble. Normally
output is inserted at the point where pebble tag is located.  This
allows you to capture the output and prevent the text from showing up
at that location. You can then use this text in other parts of your
page. Equivalent to:

 <sink:foo><pebble:poo 1 2 3</sink>

=item --expand-args

If an array is being passed as an argument to the pebble, this options
directs Bedrock to create a list from the array rather than passing a
scalar reference to the array.

=item --file

B<For security reasons, this option is no longer supported.>

=item --json

Indicates that the input arguments to the pebble are a JSON
string. The string will be converted into a Perl object and become the
input to the pebble (C<$ARGV.[0]>).

 <pebbledef:leepoo>
 <trace --output $ARGV.[0]>
 </pebbledef>

 <pebble:leepoo --json '[ 1,2,3]'>

=item --object

You can pass the pebble macro as Bedrock object using this option.

  <sink:macro --noexec>
  <var $env.PATH>
  </sink>
  <pebble --object=$macro>

=item --pebble

The name of a pebble.

Pebbles can be stored in a file with a C<.peb>
extension in which case the name of the pebble corresponds to the name
portion of the file.

Pebble should be located in either the same directory as the page
being processed, the site's pebble directory (C<PEBBLE_DIR>) or
Bedrock's global pebble directory (C<BEDROCK_PEBBLE_DIR>).

Bedrock object's can also be used to store a pebble. Pass the object
directly, not the name of the object using the C<--object> option.

The pebble name can also be the name used when you defined a pebble
using the C<E<lt>pebbledefE<gt>> tag.

=item --return-var

You can return a value as a Bedrock variable by setting the same named
variable in your Pebble's namespace. This allows you to create
Bedrock objects in your pebbles for use in your global namespace.

 <pebbledef:foo>
 <null:boo 1 2 3>
 </pebbledef>

 <pebble:foo --return-var=boo>
 <var $boo>

If you want to create a variable of a different name use a colon to separate the name of the variable in your pebble and the name you want to create in the gobal namespace.

 <pebble:foo --return-var=boo:biz>
 <var $biz>

=back

=head1 NOTES

=over 5

=item 1. The C<E<lt>pebbleE<gt>> tag will create a separate namespace
when it is being executed.

=item 2. Arguments are passed as a list which you can access in your
pebble through the variable C<$ARG>.

=item 3. Values are passed as is, array references are not expanded
unless you specify the C<--expand-args> option. The unexpanded version of
your argument list is available as C<$_ARGV>.

=item 4. Pebbles should be installed in the siteE<039>s
pebble directory specified in the F<tagx.xml> file (C<PEBBLE_DIR>),
however they can be located in your document hierarchy as well.

=item 5. As a rule of thumb, application specific pebbles may be better
positioned within your application hierarchy while more generalized
site pebbles should exist in the siteE<039>s C<PEBBLE_DIR>.

=back

=head2 Prototyping

Pebbles can be use to prototype some functionality that
might later be converted into a Plugin. Any pebble that becomes too
complex is better implemented as a Plugin.

=head2 Examples

Bedrock includes handful of example pebbles located in the system
pebble directory (C<BEDROCK_PEBBLE_DIR>).

=head2 Locating Your Pebble

Bedrock uses the following search paths when looking for pebbles:

=over 5

=item 0. If the pebble name does not have an extension it is assumed to be .peb

=item 1. Current working directory (same directory as page being processed)

=item 2. PEBBLE_DIR as defined in the environment

=item 3. PEBBLE_DIR as defined in F<tagx.xml>

=item 4. BEDROCK_PEBBLE_DIR as defined in F<tagx.xml>

=back

When a pebble is invoked, the arguments in the tag are passed to the
pebble in an array named C<$ARGV>.  Hence, within your pebble,
arguments are available by accessing elements of the C<$ARGV> array.

As previously stated, variables within the context of your pebble
occupy their own namespace, thus you do not have to be concerned about
name collision.

Let's suppose you want a to build a simple pebble to create an
unordered list from an array.  LetE<039>s suppose the pebbleE<039>s
interface is defined thusly:

 <pebble:ul id-name class-name list>

HereE<039>s what your pebble might look like:

 <ul id="<var $ARGV.shift()>" class="<var $ARGV.shift()>">
 <foreach $ARGV>
   <li><var $_></li>
 </foreach>
 </ul>

Invoke the pebble as follows:

 <pebble:ul foo foo_class here there everywhere>

=head1 EXAMPLES

=over 5

=item * Invoke a pebble in the system pebble directory

Invoke the pebble C<mypeb.peb>, located in the system pebble directory
passing the arguments 1 and C<$input.hack>.

  <pebble:mypeb "1" $input.hack>
  <pebble --pebble="mypeb" "1" $input.hack>

=item * Invoke a pebble in the current working directory

Invoke the pebble C<mypeb.inc>, located in the current working
directory passing the arguments 1 and C<$input.name>.

  <pebble --file="mypeb.peb" 1 $input.name>

=item * Expand an array and pass as arguments

Invoke the pebble C<mypeb.peb>, located in the sytem pebble directory
passing the elements of the array C<$args> as a list as opposed to a
singleton whose value is an array reference.

  <pebble:mypeb --expand-args $args>

=item * Invoke a pebble and pass an object

Invoke the pebble C<mypeb.peb>, located in the sytem pebble directory
passing the C<$args> as a single object whose value is an array reference.

  <pebble:mypeb $args>

=back

=head1 SEE OTHER

C<E<lt>includeE<gt>>

=cut
