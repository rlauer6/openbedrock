#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::NoBody::Exec;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;
use SIS::BufferStream;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('file=s'	=> undef,
		   'object=s'	=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are\n@argv";
	&log_message( $self, $str );
    }

    my $input;
    if ( exists $options{'file'} ) {
	$input = $options{'file'};
	&log_message( $self, "Preparing to exec file [$input]" ) if $verbose;
    } elsif ( exists $options{'object'} ) {
	$input = $options{'object'};
	&log_message( $self, "Preparing to exec object [$input]" ) if $verbose;
    } elsif ( @argv == 1 ) {
	if ( $verbose > 1 ) {
	    &log_message( $self, "Preparing to exec the following buffer (" . length( $argv[0] ) . " bytes)\n"
			  . $argv[0] );
	} elsif ( $verbose ) {
	    &log_message( $self, "Preparing to exec the following buffer (" . length( $argv[0] ) . " bytes)\n"
			  . substr( $argv[0], 0, 200 ) . "...." ) if $verbose;
	}
	$input = SIS::BufferStream->new(@argv);
	&log_message( $self, "Created a buffer stream object [$input]" ) if $verbose;
    } elsif ( @argv > 1 ) {
	&log_message( $self, "Multiple arguments encountered while expecting a single argument\n\t(@argv)" );
	return;
    } else {
	&log_message( $self, "No file/object/buffer specified" );
	return;
    }

    my $subform = $tx->new ( $input );
    &log_message( $self, "Starting the exec with [$subform] .." ) if $verbose;

    # need to localize this since this is re-used in the $subform->output();
    local($_);
    $subform->output;

    &log_message( $self, "Completed exec with [$subform] .." ) if $verbose;
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.2  2000/10/31 21:47:39  sridhar
# Bug fix: characters following the closing '>' after <exec> and <include>
# were being discarded due to $_ being clobbered when `output()' was
# reinvoked with new file.
#
# Revision 1.1  2000/08/17 17:22:50  sridhar
# Adding support for <exec> tag for executing bedrock code from files or
# from variables.
#
#

1;
