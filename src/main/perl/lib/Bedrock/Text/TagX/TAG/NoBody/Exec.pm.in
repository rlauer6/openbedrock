#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::NoBody::Exec;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use SIS::Array;
use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;
use SIS::BufferStream;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('file=s'		=> undef,
		   'object=s'		=> undef,
		   'pebble=s'		=> undef,
		   'expand-args=s'	=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are\n@argv";
	&log_message( $self, $str );
    }

    my $input;
    if ( exists $options{'file'} ) {
	$input = $options{'file'};
	die "No file to exec.\n" unless length($input);
	$input =~ s/^\~/$ENV{'DOCUMENT_ROOT'}/;
	die "Cannot exec `$input': is a directory.\n" if -d $input;
	&log_message( $self, "Preparing to exec file [$input]" ) if $verbose;
    } elsif ( exists $options{'object'} ) {
	$input = $options{'object'};
	&log_message( $self, "Preparing to exec object [$input]" ) if $verbose;
    } elsif ( exists $options{'pebble'} ) {
	$input = $options{'pebble'};
	die "Specify name of the pebble to exec.\n" unless length($input);
	my $dir;
	die "PEBBLE_DIR not specified in config: cannot exec pebble `$input'\n"
	    unless $dir = $tx->getoption('PEBBLE_DIR');
	my $file = $dir . '/' . $input;
	die "Cannot exec pebble `$input': not found.\n" unless -f $file;
	$input = $file;
    } elsif ( @argv ) {
	my $buf = "@argv";
	if ( $verbose > 1 ) {
	    &log_message( $self, "Preparing to exec the following buffer (" . length( $buf ) . " bytes)\n"
			  . $buf);
	} elsif ( $verbose ) {
	    &log_message( $self, "Preparing to exec the following buffer (" . length( $buf ) . " bytes)\n"
			  . substr( $buf, 0, 200 ) . "...." ) if $verbose;
	}
	$input = SIS::BufferStream->new($buf);
	&log_message( $self, "Created a buffer stream object [$input]" ) if $verbose;
    } else {
	die "Must specify file or buffer as argument to <exec>.\n";
    }

    my $subform = $tx->new ( $input );
    $tx->{'VARS'}->new_frame;

    my @expanded;
    if ( $options{'expand-args'} ) {
	my $str = "Expanding arguments for <exec>\n" if $verbose;
	my $i = 0;
	for my $item ( @argv ) {
	    if ( ref($item) && &UNIVERSAL::isa($item, 'ARRAY') ) {
		$str .= "Item [$i] is an array -- expanded ..\n" if $verbose;
		push @expanded, @{$item};
	    } else {
		$str .= "Item [$i] is not an array -- pushed ..\n" if $verbose;
		push @expanded, $item;
	    }
	    $i++;
	}
	&log_message( $self, $str ) if $verbose;
    } else {
	@expanded = @argv;
    }

    $tx->param('ARGV' => SIS::Array->new( @expanded ));

    &log_message( $self, "Starting the exec with [$subform] .." ) if $verbose;
    $subform->output;
    &log_message( $self, "Completed exec with [$subform] .." ) if $verbose;

    $tx->{'VARS'}->end_frame;
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.7  2000/11/29 20:58:34  sridhar
# 1. Support for pebbles -- file to be included is taken from a
# directory which is configured as PEBBLE_DIR
# 2. No expanding of arguments by default. --expand-args must be
# specified to expand any array arguments.
#
# Revision 1.6  2000/11/22 15:29:29  sridhar
# 1. Parameters can now be passed to <exec>.
# 2. Exec is more like a subroutine call in that a stack frame is
# created on invocation which goes away when the exec is done. Variables
# are created in the current stack frame and do not clobber global or
# variables from parent's stack frames.
#
# Revision 1.5  2000/11/16 19:09:13  sridhar
# Fixed error messages so location of error in perl source is not
# visible.
#
# Revision 1.4  2000/11/01 16:09:00  sridhar
# Yuck! Previous commit had a syntax error
#
# Revision 1.3  2000/11/01 16:05:25  sridhar
# Croaking if arg to --file is a directory
#
# Revision 1.2  2000/10/31 21:47:39  sridhar
# Bug fix: characters following the closing '>' after <exec> and <include>
# were being discarded due to $_ being clobbered when `output()' was
# reinvoked with new file.
#
# Revision 1.1  2000/08/17 17:22:50  sridhar
# Adding support for <exec> tag for executing bedrock code from files or
# from variables.
#
#

1;
