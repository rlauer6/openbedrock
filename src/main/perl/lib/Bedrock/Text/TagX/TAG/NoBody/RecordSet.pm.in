#!@PERL@ -w

# ident "@(#) $Header: /archive/cvsroot/bedrock/src/main/perl/lib/Bedrock/Text/TagX/TAG/NoBody/Array.pm,v 1.9 2010/11/17 02:27:26 rlauer Exp"
# ident "@(#) $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::RecordSet;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @INC);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

@ISA = qw (TagX::TAG::NoBody::Array);

sub parse_options {
  my $self = shift;
  my $options = shift;

  my @argv = $self->SUPER::parse_options( $options, @_ );
  $options->{recordset} = 1;
  $options->{expand} = 1;

  return @argv;
}

# $Log$
# Revision 1.3  2013/01/04 02:08:54  rlauer
# - added pod for push() method
#
# Revision 1.2  2012/07/30 13:32:16  lauerrc
# - pod tweaks
#
# Revision 1.1  2012/07/29 16:20:32  lauerrc
# - first check-in
#

1;

=pod

=head1 TAG - C<E<lt>recordsetE<gt>>

=head1 PURPOSE

Create a Bedrock recordset.

=head1 SYNTAX

 <recordset:[recordset name] [options] expression ...>

=head1 DESCRIPTION

Creates a Bedrock recordset object from the expression contained in
the tag.  The expression can be an array object, a list of array or
recordset objects, or the return value from a method call.

Bedrock recordsets are essentially Bedrock arrays where each element
is a hash object. Arrays of hashes are typically returned by
functions that read rows from a database for instance.  It is
sometimes desirable to do things like:

=over 5

=item * sort the record set by a specific key (column)

 <null:sorted $recordset.sort('lastname')>

You can specify the sort order and sort type and multiple
sorts...by using triplets of specifiers

 <null:sorted $recordset('team', 'asc', 'alpha', 
                         'wins', 'asc', 'numeric'
                        )>

=item * find or filter the set based on the value of one of the columns using a regular expression

 <null:foo $recordset.grep('lname', 'qr/^l/i')>

You can create recordsets in various ways:

 <recordset:rs $array>
 
 <null:rs --recordset $array>
 
 <array:rs --recordset $array>
 
 <sqlselect --define-var="rs" --recordset "select * from customer"></sqlselect>
 
 <sqlselect --define-recordset="rs" "select * from customer"></sqlselect>
 
 <null:rs $array.recordset()>

=back

=head1 OPTIONS

See the C<E<lt>arrayE<gt>> tag documentation since recordset's are
derived from Bedrock arrays.

=head1 METHODS

=head2 sort

 sort( key, dir, type, ... )

The C<sort()> method allows you to sort the recordset based on a triplet of
specifiers.  Each triplet specifies a sort key, the direction and the
type of sort to be performed.  The default sort order is ascending and
the default type is alphabetic.

 <null:sorted $list.sort('lastname', 'asc', 'alpha')>

...which would be the same as...

 <null:sorted $list.sort('lastname')>

..or

 <null:sorted $list.sort('lastname', '', '')>

Multiple sort keys are allowed

 <null:sorted $list.sort('lastname', '', '', 'firstname', '', '')>

=head3 Options

=over 5

=item dir

B<asc> - sort in ascending order

B<desc> - sort in descending order

=item type

B<alpha> - do an alphabetic (ascii) sort

B<numeric> - do a numeric sort

=back

=head2 push

 push( array )
 push( hash )
 push( key, value, key, value, ... )

Push a new element onto the recordset.  Since each element of a record
set is a hash, you can directly add a new row to the record set by
passing a hash reference.  If the argument is an array, then the
elements of the array should themselves be hash references and they
are all added to the recordset.  You can also pass a list of key/value
pairs that will be turned into a hash reference and then added to the
recordset.

=head2 grep

 grep( key, pattern )

Return a recordset that is filtered using the regular expression
pattern.  See the C<E<lt>arrayE<gt>> tagE<039>s C<grep()>
documentation.

 <sqlselect --define-recordset="rs" "select * from customer"></sqlselect>

 <null:new_rs $rs.grep('lname', 'qr/^l/i')>


=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=cut
