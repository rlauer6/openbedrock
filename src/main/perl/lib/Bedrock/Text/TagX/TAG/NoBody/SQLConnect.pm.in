#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::SQLConnect;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use DBI;

use TagX::Log;
use TagX::TAG::NoBody;

@ISA = qw (TagX::TAG::NoBody);

sub ANONYMOUS {
  '*anonymous*';
}

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = ( 'AutoCommit=s'  => 1,
                  'PrintError=s'  => 1,
                  'RaiseError=s'  => 1,
                  'ChopBlanks=s'  => 1,
                  'dbname=s'      => undef,
                  'db=s'          => undef,
                  'data-source=s' => undef,
                  'dsn=s'         => undef,
                  'username=s'    => undef,
                  'password=s'    => undef
                );
  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  my $config  = $tx->out_handle->{Handle}->{'CONFIG'};
  my $dbnames = $config->{'_dbnames'};

  $self->dump_options( \%options ) if $verbose;

  die "Specify the DSN using `--data-source' option or as argument, not both.\n"
  if exists $options{'data-source'} and @argv;

  my $dsn;

  foreach (qw/db data-source username password/) {
    die "option --" . $_ . " specified and it has no value!\n"
    if ( exists $options{$_} && ( !defined $options{$_} || !$options{$_} ) );
  }

  if ( length( $options{'data-source'} ) ) {
    $dsn = $options{'data-source'};
  }
  elsif (@argv) {
    $dsn = "@argv";
  }
  elsif ( length( $options{dsn} ) && defined $dbnames ) {
    if ( &UNIVERSAL::isa( $dbnames, 'HASH' )
         && exists $dbnames->{ $options{dsn} } )
    {
      $dsn               = $dbnames->{ $options{dsn} }->{DBI_DSN};
      $options{username} = $dbnames->{ $options{dsn} }->{DBI_USER};
      $options{password} = $dbnames->{ $options{dsn} }->{DBI_PASS};
    }
    else {
      die "No named connection '" . $options{dsn} . "' found.\n";
    }
  }
  elsif ( length( $ENV{'DBI_DSN'} ) ) {
    $dsn = $ENV{'DBI_DSN'};
    $options{username} = $options{username} || $ENV{DBI_USER};
    $options{password} = $options{password} || $ENV{DBI_PASS};
  }
  elsif ( $config->{DBI_DSN} ) {
    &log_message( $self, "DSN will be taken from configuration..." )
    if $verbose;
    $dsn = $config->{DBI_DSN};
    $options{username} = $options{username} || $config->{DBI_USER};
    $options{password} = $options{password} || $config->{DBI_PASS};
    &log_message( $self,
                  "DSN: $dsn username: "
                  . $options{username}
                  . " password: "
                  . $options{password}
                ) if $verbose;
  }

  die "Data source not specified.\n" unless length($dsn);

  $tx->{'DB'} = {} unless exists $tx->{'DB'};

  &log_message( $self, "deprecated use of --dbname, use --db instead." );
  my $name = $options{'dbname'} || $options{'db'};
  if ( length($name) ) {
    die
    "Cannot assign database connection to `$name': variable already exists.\n"
    if exists $tx->{'VARS'}->{$name};
  }
  else {
    $name = &ANONYMOUS;
  }

  if ( exists $tx->{'DB'}->{$name} ) {
    &log_message( $self,
                  "Disconnecting previous DB connection named ($name)\n" )
    if $verbose;
    $tx->{'DB'}->{$name}->disconnect;
    delete $tx->{'DB'}->{$name};
    delete $tx->{'VARS'}->{$name};
  }

  my $dbh = DBI->connect( $dsn,
                          @options{qw(username password)},
                          { 'AutoCommit' => $options{AutoCommit},
                            'PrintError' => $options{PrintError},
                            'RaiseError' => $options{RaiseError},
                            'ChopBlanks' => $options{ChopBlanks}
                          }
                        );
  die "Unable to connect to database: ", $DBI::errstr, "\n" unless $dbh;

  &log_message( $self, "Connected to database, handle = <$dbh>\n" ) if $verbose;

  $tx->{'DB'}->{$name} = $dbh;
  $tx->{'VARS'}->{$name} = $dbh unless $name eq &ANONYMOUS;
}

=head1 TAG - C<E<lt>sqlconnectE<gt>>

=head1 PURPOSE

Connect to a database source.

=head1 SYNTAX

  <sqlconnect [options] [data-source]>

=head1 data-source

Connection string, ala perl's C<DBI> connection strings.  You can
optionally specify the connection string as a tag argument
(I<deprecated>) or by using the C<--data-source> or C<--dsn> option.

=head1 OPTIONS

 --data-source  = data-source
 --dsn          = named connection
 --db           = database connection handle
 --username     = database user
 --password     = user password
 --ChopBlanks   = 1|0
 --PrintError   = 1|0
 --AutoCommit   = 1|0
 --RaiseError   = 1|0

=over 5

=head1 dsn

Specifies a named connection that you created in the F<data-sources.xml>
file that you dropped in either the C<$ENV{BEDROCK_CONFIG_PATH}> or
C<$ENV{CONFIG_PATH}> directories.

Example:

 <sqlconnect --dsn="sales">

...then in F<data-soures.xml>

 <object>
   <object name="sales">
     <scalar name="DBI_DSN">dbi:Oracle:sales_prod</scalar>
     <scalar name="DBI_USER">zig</scalar>
     <scalar name="DBI_PASS">ziglar</scalar>
   </object>
 </object>

=item --data-source

Data source name of the form:

C<dbi:database-type:database-name>

Example:

  dbi:Oracle:name_devl
  dbi:mysql:bedrock

=item --db

Optional name of an object that will store the database handle used in subsequent database related calls.

=item --username

Username to authenticate with on opening the database.

=item --password

Password to  authenticate with on opening the database.

=item --ChopBlanks

Remove trailing blanks from fields.

=item --PrintError

Print the DBI error message if an error occurs.

=item --AutoCommit

Set C<AutoCommit> on.

=item --RaiseErrror

Raise an error if an SQL statement results in an error.

=back

=head1 NOTES

Bedrock's database layer is implemented using the perl C<DBI> module.
For more information regarding the behavior of C<DBI> see C<perldoc
DBI>.

The environment variable C<DBI_DSN> can also be used to specify the
connect string. If the username and password arguments are undefined
C<DBI> will also look for C<DBI_USER> and C<DBI_PASS> in the
environment to use as the username and password respectively.

Bedrock will verify that you have the C<DBI_DSN> environment variable
defined if you do not specify a connect string, otherwise Bedrock will
look in it's configuration object for a data-source, username and
password defined using the same variables (C<DBI_DSN>, C<DBI_USER>,
C<DBI_PASS>). If Bedrock still can't find a data-source it will throw an
exception.

The configuration object is initially read from F<tagx.xml> so you
could specify those variable there.  You can alternately set them in your
Bedrock page by invoking the C<set> method of the C<$config> object.

 <null $config.set('DBI_DSN', 'dbi:mysql:bedrock')>
 <null $config.set('DBI_USER', 'fred')>
 <null $config.set('DBI_PASS', 'flintstone')>

Still another way is to use the C<merge> method of the C<$config>
object and merge a customer configuration file with the system
configuration file.

 <null $config.merge("bedrock-connect.xml")>

Yet another way, would be to create a directory specific configuration
in F<tagx_apps.xml> which is merged with the system configuration as
well.

 <object>
   <object name="/accounting">
     <scalar name="DBI_DSN">dbi:Oracle:name_devl</scalar>
     <scalar name="DBI_USER">ACCTN</scalar>
     <scalar name="DBI_PASS">ACCTN</scalar>
   </object>
 </object>

As discussed previously, you can force Bedrock to export configuration
variables to the environment using the C<export_env="yes"> attribute
of a Bedrock XML C<E<lt>scalarE<gt>> tag.

  <scalar export_env="yes"  name="DBI_DSN">dbi:mysql:bedrock;host=localhost</scalar>
  <scalar export_env="yes"  name="DBI_USER">fred</scalar>
  <scalar export_env="yes"  name="DBI_PASS">bedrock</scalar>

I<Even though DBI and Bedrock support this, exporting usernames and
passwords is probably not something you want to do.>

=head1 EXAMPLE

  <sqlconnect --data-source="dbi:Oracle:name_devl"  --username="srch" --password="srch">

  <sqlselect "select * from custmr where acct < 999">
   <var $ACCT> <var $NAME><br>
  </sqlselect>

=head1 SEE ALSO

C<E<lt>sqlE<gt>>, C<E<lt>sqlselectE<gt>>, C<BLM::Startup::Config>

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.30  2011/12/28 16:54:36  eutl420
# - pod tweaks
#
# Revision 1.29  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.28  2011/08/22 23:23:07  eutl420
# - use named connections via the --dsn option
#
# Revision 1.27  2011/08/18 21:52:45  eutl420
# - added option --dns= to support access of DNS names set in dbnames.xml
#
# Revision 1.26  2011/07/17 16:50:27  eutl420
# @PERL@, log_message if verbose
#
# Revision 1.25  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.24  2011/07/06 15:53:48  eutl420
# - typo needed an extra paren when testing connect options
#
# Revision 1.23  2011/07/05 21:25:34  eutl420
# - check the options to see if the option for connection may have been specified but no valid
#   value is provide.  This might happen if for example you are taking values from an object for
#   a connect string and it is undefined.  Because Bedrock 2 drops back to defaults DBI_DSN for example
#   you probably only want to drop back in the event you don't specify the options at all
#
# Revision 1.22  2010/12/12 16:22:17  eutl420
# - dump_options, not dump_keys
# - use environment DBI_USER, DBI_PASS if available
#
# Revision 1.21  2010/12/06 14:18:26  rlauer
# - use DBI_DSN, DBI_USER, DBI_PASS from Bedrock's configuration
# - lot's of pod to explain above
#
# Revision 1.20  2010/11/29 15:57:54  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.19  2010/11/19 19:14:31  rlauer
# - documentation edits
#
# Revision 1.18  2010/11/17 02:27:42  rlauer
# - pod cleanup
#
# Revision 1.17  2010/11/11 21:41:33  rlauer
# - type log_mesas
#
# Revision 1.16  2009/12/31 18:38:38  rlauer
# updated docs
#
# Revision 1.15  2009/12/31 12:43:34  rlauer
# docs tweaks
#
# Revision 1.14  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.13  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.12  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.11  2000/11/21 19:27:33  sridhar
# Database connection exported to the script if --dbname option is used.
#
# Revision 1.10  2000/11/16 19:11:36  sridhar
# 1. Fixed error messages so exceptions don't have perl source code
# locations in them.
# 2. RaiseError and PrintError turned off -- we will explicitly check
# for return code and show a suitable error message
#
# Revision 1.9  2000/09/22 20:21:17  sridhar
# 1. RaiseError defaults to 1 (on)
# 2. Argument if present is treated as the data source to connect to if
# --data-source is not used.
#
# Revision 1.8  2000/08/04 17:13:07  sridhar
# BUG Fix: Return from DBI->connect was not being verified presuming
# exception would be thrown -- has been fixed.
#
# Revision 1.7  2000/05/31 14:58:03  sridhar
# Rigorous version numbering and usage
#
# Revision 1.6  2000/05/30 17:50:32  sridhar
# Options hash was specified wrongly without '=s' when it was needed.
#
# Revision 1.5  2000/04/24 12:48:27  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.4  2000/04/13 15:20:37  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.3  2000/03/06 18:32:00  sridhar
# Replaced all ad-hoc message logging with message logging only on demand
# -- via --verbose flag specified as a tag option
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:00  sridhar
# Added TagX
#
#

1;
