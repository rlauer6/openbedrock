#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::SQLConnect;

use strict;
use warnings;

use TagX::TAG::NoBody;
use TagX::TAG::SQLConnector;

use parent qw (Exporter TagX::TAG::NoBody TagX::TAG::SQLConnector);

use DBI;
use Data::Dumper;
use Scalar::Util qw(reftype);
use List::Util qw( pairs );
use Bedrock::Constants qw(:chars :booleans);
use Log::Log4perl::Level;

use Role::Tiny::With;
with 'Bedrock::Logger';

########################################################################
sub check_options {
########################################################################
  my ( $self, $tx, $name, %options ) = @_;

  foreach (qw/db data-source username password/) {
    die sprintf "sqlconnect: option --%s requires a value.\n", $_
      if exists $options{$_} && !$options{$_};
  }

  if ( exists $tx->{'VARS'}->{$name} ) {
    die sprintf
      "cannot assign database connection to `%s': variable already exists.\n",
      $name;
  }
}

########################################################################
sub check_for_existing_connection {
########################################################################
  my ( $self, $tx, $name, %options ) = @_;

  my $dbh = $tx->{DB}->{$name};

  return
    if !$dbh;

  if ( ref($dbh) =~ /DBI::db/xsm ) {
    if ( $dbh->ping ) {
      $dbh->disconnect;
    }

    delete $tx->{DB}->{$name};
    delete $tx->{VARS}->{$name};
  }

  return $name;
}

########################################################################
sub define_options {
########################################################################
  return (
    'AutoCommit=s'  => $TRUE,
    'PrintError=s'  => $TRUE,
    'RaiseError=s'  => $TRUE,
    'ChopBlanks=s'  => $TRUE,
    'dbname=s'      => undef,
    'db=s'          => undef,
    'data-source=s' => undef,
    'dsn=s'         => undef,
    'username=s'    => undef,
    'password=s'    => undef,
    'hostname=s'    => undef,
  );
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my $logger = $self->get_logger;

  # --- parse options
  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  # --- parse tag and determine name of variable for storing dbi handle
  my $tag_opts = $self->parse_tag_name( $argv[0] );

  my $name;

  if ( $tag_opts->{name} ) {
    $name = $tag_opts->{name};
    shift @argv;
  }
  elsif ( $options{'dbname'} ) {
    $name = $options{'dbname'};

    $logger->warn('deprecated use of --dbname, use --define-var instead.');
  }
  elsif ( $options{'db'} ) {
    $name = $options{'db'};
  }
  else {
    $name = $self->ANONYMOUS;
  }

  # --- check option consistency
  $self->check_options( $tx, $name, %options );

  # --- check for user of overlapping dsn
  if ( exists $options{'data-source'} and @argv ) {
    die "Specify the DSN using the `--data-source' option or as argument, but not both.\n";
  }
  elsif (@argv) {
    $logger->debug( Dumper( [ 'argv:', \@argv ] ) );

    if ( ref $argv[0] ) {
      @argv = @{ $argv[0] };
    }

    $logger->debug( Dumper( [ 'argv:', \@argv ] ) );

    # if we have a dsn, then the next arguments are just connect string options
    if ( !$options{dsn} ) {
      $options{'data-source'} = shift @argv;
    }

    if (@argv) {
      die "additional options must be key/value pairs\n"
        if @argv % 2;
    }
  }

  $logger->debug( Dumper( [ 'options:', \%options ] ) );

  # --- check for existing connection
  $tx->{DB} //= $tx->{DB};

  if ( $self->check_for_existing_connection( $tx, $name, %options ) ) {
    $logger->warn(
      sub {
        'disconnected previous connection';
      }
    );
  }

  my ( $dsn, $user, $pass, $host, $socket ) = $self->get_dsn( $tx, %options );

  $logger->debug(
    sprintf 'dsn:[%s] user:[%s], pass:[%s], host:[%s], socket:[%s]',
    $dsn,  $user, ( $ASTERISK x length $pass ),
    $host, $socket
  );

  # --- connect to database

  # note: password can be optional...
  die "no dsn found from any source\n"
    if !$dsn;

  die "no user found from any source\n"
    if !$user;

  if ( !$pass ) {
    $logger->warn('no password');
  }

  if ( !$socket || $dsn !~ /socket/xsmi && $host =~ /localhost/xsmi ) {
    $self->get_logger->debug( sprintf 'host was %s now 127.0.0.1', $host );
    $host = '127.0.0.1';
  }

  if ($host) {
    $dsn = "$dsn:host=$host";
  }

  if ( $socket && $dsn =~ /mysql/xsm && $dsn !~ /mysql_socket/xsm ) {
    $dsn .= ";mysql_socket=$socket";
    $self->get_logger->debug("dsn now: $dsn");
  }
  elsif ($socket) {
    die "socket only valid for MySQL\n";
  }

  if (@argv) {

    my @extra_options;

    $self->get_logger->debug( Dumper( [ argv => \@argv ] ) );

    foreach my $p ( pairs @argv ) {
      my ( $key, $value ) = @{$p};
      next if $dsn =~ /$key=/xsm;
      $value //= $EMPTY;  # this should probably be an error?
      push @extra_options, "$key=$value";
    }

    $self->get_logger->debug( Dumper( [ extra_options => \@extra_options, dsn => $dsn ] ) );
    $dsn = join $SEMICOLON, $dsn, @extra_options;
  }

  $logger->debug(
    sub {
      return
        sprintf 'attempting to connect to: [%s] with user: [%s]',
        $dsn,
        $user;
    }
  );

  my $dbh = DBI->connect(
    $dsn, $user, $pass,
    { 'AutoCommit' => $options{AutoCommit},
      'PrintError' => $options{PrintError},
      'RaiseError' => $options{RaiseError},
      'ChopBlanks' => $options{ChopBlanks}
    }
  );

  if ($dbh) {

    $logger->info(
      sub {
        return
          sprintf 'successfully connected to database (%s) using connection parameters from %s',
          $dsn,
          $tx->{DB_DSN_SOURCE};
      }
    );

    # save for other <sql..> operations
    $tx->{'DB'}->{$name} = $dbh;

    # add $name to namespace
    if ( $name ne $self->ANONYMOUS ) {
      $tx->{'VARS'}->{$name} = $dbh;
    }
  }
  else {
    die sprintf "unable to connect to database: %s\n", $DBI::errstr;  ## no critic (ProhibitPackageVars)
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>sqlconnectE<gt>>

=head1 PURPOSE

Connect to a database source.

=head1 SYNTAX

 <sqlconnect [options] [data-source]>

=head2 data-source

Connection string, ala Perl's C<DBI> connection strings.  You can
optionally specify the connection string as a tag argument
(I<deprecated>) or by using the C<--data-source> or C<--dsn> options.

If you specify the connection string as an argument or you use the
C<--data-source> option, then B<all arguments required to connect mudst be specified as
options>. In other words, you can't mix & match!

=head2 options

 --data-source  = data-source
 --dsn          = named connection
 --db           = database connection handle name
 --username     = database user
 --password     = user password
 --ChopBlanks   = 1|0
 --PrintError   = 1|0
 --AutoCommit   = 1|0
 --RaiseError   = 1|0

=over 5

=item --dsn

Specifies a named connection that you created in the
F<data-sources.xml> file that you dropped in either the
C<$ENV{BEDROCK_CONFIG_PATH}> or C<$ENV{CONFIG_PATH}> directories.

See L</Using a Data Sources XML File>

=item --data-source

Data source name of the form:

C<dbi:database-type:database-name[:hostname]>

Example:

 dbi:Oracle:name_devl

 dbi:mysql:bedrock:localhost

=item --db

Optional name of an object that will store the database handle used in
subsequent database related calls.

=item --hostname

Optional name of the host.  If this value is present it will be
appended to the connection string.

=item --username

Username to authenticate with on opening the database.

=item --password

Password to  authenticate with on opening the database.

=item --ChopBlanks

Remove trailing blanks from fields.

=item --PrintError

Print the DBI error message if an error occurs.

=item --AutoCommit

Set C<AutoCommit> on.

=item --RaiseErrror

Raise an error if an SQL statement results in an error.

=back

=head1 NOTES

Bedrock's database layer is implemented using the Perl C<DBI> module.
For more information regarding the behavior of C<DBI> see C<perldoc
DBI>.

To connect to the database you must supply the connection information
in one of the ways described below. The order in which Bedrock will
look for connection information is:

=over 5

=item 1. options

=item 2. data sources file

=item 3. Environment variables

=item 4. Configuration object

=back

=head2 Specifying Connection Parameters in the Tag

Specify the username, password and connection string using options to
the C<E<lt>sqlconnectE<gt>> tag.

 <sqlconnect --username fred --password flintstone dbi:mysql:bedrock>
 <sqlconnect --username fred --password flintstone --hostname=localhost dbi:mysql:bedrock>
 <sqlconnect --username fred --password flintstone --data-source=dbi:mysql:bedrock>

=head2 Using a Data Sources XML File

Using the C<--dsn> option you can specify the name of a set of
connection parameters found in the F<data-sources.xml> file.  Create a
file named F<data-sources.xml> similar to the one below and copy it
Bedrock's configuration path.

 <object>
  <object name="customers">
   <scalar name="DBI_DSN">dbi:mysql:customers</scalar>
   <scalar name="DBI_USER">some-user</scalar>
   <scalar name="DBI_PASS">some-password</scalar>
  </object>
 </object>

Then, to connect to the database:

 <sqlconnect --dsn="customers">

This becomes the default connection when you use the
C<E<lt>sqlselectE<gt>> or C<E<lt>sqlE<gt>> tags.

=head3 Constructing a DSN from Parts

An alternate format for the F<data-sources.xml> file can be provided
that allows you to specify the individual components of the DSN.

Create an object named 'data_source' with the individual components
as shown below:

 <object>
   <object name="bedrock">
     <scalar name="driver">mysql</scalary>
     <scalar name="username">fred</scalar>
     <scalar name="password">Fl1nt$t0ne</scalar>
     <scalar name="host">localhost</scalar>
     <scalar name="database">bedrock</scalar>
   </object>
 </object>

Any additional values appended to the 'data_source' object will be
appended to the DSN. For example, if you add:

 <scalar name="mysql_ssl">1</scalar>

...the resulting DSN would be:

 dbi:mysql:bedrock:localhost;mysql=1

The default 'host' value is 'localhost'.
The default 'driver' is 'mysql'.

=head2 Using Environment Variables to Specify Connection Parameters

As discussed previously, you can force Bedrock to export configuration
variables to the environment using the C<export_env="yes"> attribute
of a Bedrock XML C<E<lt>scalarE<gt>> tag.

 <scalar export_env="yes"  name="DBI_DSN">dbi:mysql:bedrock;host=localhost</scalar>
 <scalar export_env="yes"  name="DBI_USER">fred</scalar>
 <scalar export_env="yes"  name="DBI_PASS">bedrock</scalar>

=head2 Specifying Connection Parameters in a Configuration File

Bedrock will also look for connection information in the the configuration
object if no options are given in the tag.  The configuration object
is the result of merging any C<.xml> files in Bedrock's configuraiton
paths, so placing the variables:

 DBI_DSN
 DBI_USER
 DBI_PASS
 DBI_HOST

...in any of C<.xml> file will create a default database connection
configuration.

You can alternately set them in your Bedrock page by invoking the
C<set> method of the C<$config> object.

 <null $config.set('DBI_DSN', 'dbi:mysql:bedrock')>
 <null $config.set('DBI_USER', 'fred')>
 <null $config.set('DBI_PASS', 'flintstone')>

Still another way is to use the C<merge> method of the C<$config>
object and merge a customer configuration file with the system
configuration file.

 <null $config.merge("bedrock-connect.xml")>

=head2 Using Directory Specific Connection Parameters

Yet another way to provide connection information to Bedrock is to
create a directory specific configuration in F<tagx_apps.xml>.  This
file will be merged with the system configuration when Bedrock serves
a page from the directory specified as one of the keys in
F<tagx_apps.xml> file.

 <object>
  <object name="/accounting">
   <scalar name="DBI_DSN">dbi:mysql:accounting</scalar>
   <scalar name="DBI_USER">fred</scalar>
   <scalar name="DBI_PASS">flintstone</scalar>
  </object>
 </object>

=head1 EXAMPLE

 <sqlconnect --data-source="dbi:mysql:bedrock:10.1.1.1"  --username="srch" --password="srch">

 <sqlselect "select * from custmr where acct < 999">
  <var $ACCT> <var $NAME><br>
 </sqlselect>

=head1 SEE ALSO

C<E<lt>sqlE<gt>>, C<E<lt>sqlselectE<gt>>, C<BLM::Startup::Config>

=cut
