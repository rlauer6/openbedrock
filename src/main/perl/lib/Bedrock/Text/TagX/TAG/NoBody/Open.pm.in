#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#) $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Open;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.01;
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;
use IO::File;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('define-var=s' => "_",
		   'mode=s' => undef,
		   'file=s' => undef
		   );

    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	&log_message( $self, "$str\n" );
    }

    my $name = $options{'define-var'} || '_';

    $argv[0] =~/^:([^:]*)$/;
    if ($1) {
      $name = $1;
      shift @argv;
    }

    die "Specify the file to open using `--file' option or as argument, not both.\n"
	if exists $options{'file'} and @argv;

    my $file;
    if ( length($options{'file'}) ) {
	$file = $options{'file'};
    } elsif ( @argv ) {
	$file = "@argv";
    }

    die "File not specified.\n" unless length($file);

    unless ( length($name) ) {
      die "No file handle specified. Use --define-var to assign a file handle name.";
    }

    my $mode = $options{'mode'} || "r";
    my $fh = IO::File->new($file, $mode);

    die "Could not open file $file with mode = $mode" unless defined $fh;

    $tx->{'VARS'}->{$name} = $fh;
}

=pod

=head1 TAG

 <open>

=head1 PURPOSE

Open a file for reading or writing.  Similar to C<&lt;plugin:FileIO&gt;>,
but the object created is an C<IO::File> handle.

=head1 SYNTAX

 <open[:name] [options]>

I<Note: Although the name of the object can be defaulted to "$_" by
omitting the C<--define-var> option, this may be less than useful if
you use the C<open> tag before entering a C<while> loop,something typically done when reading a file as shown in the example.

The C<while> tag will reset C<$_> to the value of the term in quotes
when it is evaluated each time through the loop. Caveat Emptor>.

=head1 OPTIONS

 --define-var="name" default="$_"
 --mode="file mode"
 --file="path"

=over 5

=item --define-var

Name of the object created.

=item --mode

The open mode of the file.  Can be one of:

     "r" -> read
     "w" -> write/clobber
     "a" -> append
     "r+" -> reading/writing

=item --file

Fully qualified path of file to open.

=back

=head1 METHODS

See perldoc C<IO::Handle> for details.

=head1 EXAMPLE

 <open:fd --file=($env.BEDROCK_CONFIG_PATH + "/tagx.xml") --mode="r">
 <pre>
 <while "$fd.getline()"><var $_></while>
 </pre>
 <null $fd.close()>

=head1 NOTES

You are discouraged from using these kinds of constructions in pages.
They are "programmatic" and not in the spirit of template development.
A better alternative to reading a file, if you really need to do that,
might be to use C<BLM::File> plugin.

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.3  2009/12/31 12:43:30  rlauer
# docs tweaks, correct workable example
#
# Revision 1.2  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.1  2008/11/25 14:32:35  rlauer
# added as part of Bedrock 2.0.0 reorg
#
#

1;
