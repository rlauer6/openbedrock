#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Open;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use TagX::Log;
use TagX::TAG::NoBody;
use IO::File;
use Text::CSV_XS;
use Symbol;

@ISA = qw (TagX::TAG::NoBody);

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = ( 'define-var=s' => "_",
                  'mode=s'       => undef,
                  'file=s'       => undef,
		  'filter=s'     => undef,
		  'slurp'        => undef
                );

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  $self->dump_options( \%options ) if $verbose;

  my $name = $options{'define-var'} || '_';
  my $tag_opts = $self->parse_tag_name( $argv[0] );

  if ( $tag_opts->{name} ) {
    shift @argv;
    $name = $tag_opts->{name};
  }

  die "Specify the file to open using `--file' option or as argument, not both.\n"
    if exists $options{'file'} and @argv;

  my $file;

  if ( exists $options{file} && $options{file} ) {
    $file = $options{'file'};
  }
  else {
    $file = shift @argv;
  }

  die "File not specified.\n" unless length($file);

  unless ( length($name) ) {
    die "No file handle specified. Use --define-var to assign a file handle name.";
  }

  my $mode = $options{'mode'} || "r";

  my $fh;

  if ( exists $options{'filter'} ) {
    die "--filter requires a filter name\n"
      unless $options{filter};

    my $filter = "BLM::Filter::" . $options{filter};

    eval "require $filter;";
    die "unknown or malformed filter: ". $options{filter} . "\n"
      if $@;

    $fh = gensym;
    tie *{$fh},$filter,  $file, $mode, @argv;
    bless $fh, $filter;
  }
  else {
    $fh = IO::File->new( $file, $mode );
  }

  die "Could not open file $file with mode = $mode" 
    unless defined $fh;

  # slurp file?
  if ( $options{slurp} ) {
    local $/ = undef;
    my $contents = <$fh>;
    $tx->{'VARS'}->{$name} = $contents;
    $fh->close;
  }
  else {
    $tx->{'VARS'}->{$name} = $fh;
  }
}

=pod

=head1 TAG - C<E<lt>openE<gt>>

=head1 PURPOSE

Open a file for reading or writing.  Similar to C<E<lt>plugin:FileIOE<gt>>,
but the object created is an C<IO::File> handle.

=head1 SYNTAX

 <open[:name] [options] filename >

=head1 DESCRIPTION

You can use the C<E<lt>openE<gt>> tag to return a handle to a file
that can be used with other tags ( C<E<lt>sinkE<gt>>) or plugins that
accept handles as arguments.

I<Note: Although the name of the object can be defaulted to C<$_> by
omitting the C<--define-var> option, this may be less than useful if
you use the C<open> tag before entering a C<while> loop, something
typically done when reading a file as shown in the example.>

I<The C<E<lt>whileE<gt>> tag will reset C<$_> to the value of the term
in quotes when it is evaluated each time through the loop. Caveat
Emptor>.

=head1 OPTIONS

 --define-var       = "var-name" (default="_")
 --mode             = "mode"
 --file             = "filename"
 --slurp

=over 5

=item --define-var

Name of the object created.

=item --mode

The open mode of the file.  Can be one of:

     "r" -> read
     "w" -> write/clobber
     "a" -> append
     "r+" -> reading/writing

=item --file

Fully qualified path of the file to open.

=item --slurp

The file is slurped into a variable.  The file is subsequently closed.

 <open:foo --slurp "foo.txt">

If you want to include a file at a given point in your template, use
C<E<lt>includeE<gt>>.

If you want to read a file in order to deserialize the contents, use
C<E<lt>null --fileE<gt>>.

=back

=head1 METHODS

See perldoc C<IO::Handle> for an explanation of the possible methods
that you can invoke on an open file handle.

=head1 EXAMPLE

 <open:fh --mode="r" $env.BEDROCK_CONFIG_PATH.format(q{%s/tagx.xml})>
 <pre>
 <while $fh><var --htmlencode $_></while>
 </pre>

 <open:fh --mode="w" "foo.txt">
 <null $fh.printf("Hello World!\n")>
 <null $fh.close()>

 <open:fh --mode="w" "foo.txt">
 <sink $fh>
 Hello World!
 </sink>

=head1 SEE OTHER

C<IO::Handle>

=cut

#
# Revision 1.15  2012/02/27 13:59:00  eutl420
# - allow tag to take more than 1 argument to support filters that might require that
#
# Revision 1.14  2012/02/08 13:52:06  eutl420
# - move filters into BLM namespace
#
# Revision 1.13  2012/02/06 22:17:51  eutl420
# - add --filter option
#
# Revision 1.12  2011/09/21 20:35:05  eutl420
# -pod fix
#
# Revision 1.11  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.10  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.9  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.8  2010/12/12 17:08:33  eutl420
# - use parse_tag_name
# - use dump_options
#
# Revision 1.7  2010/11/29 15:57:54  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.6  2010/11/17 02:27:31  rlauer
# - pod cleanup
#
# Revision 1.5  2010/11/08 03:11:52  rlauer
# - documentation changes only
#
# Revision 1.4  2009/12/31 18:38:34  rlauer
# updated docs
#
# Revision 1.3  2009/12/31 12:43:30  rlauer
# docs tweaks, correct workable example
#
# Revision 1.2  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.1  2008/11/25 14:32:35  rlauer
# added as part of Bedrock 2.0.0 reorg
#
#

1;
