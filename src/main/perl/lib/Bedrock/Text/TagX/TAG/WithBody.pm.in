#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use TagX::TAG;

@ISA = qw (TagX::TAG);

sub finalize_children {
  my ( $aref, $tx, @context ) = @_;
  my $nobjs = @{$aref};
  my $child;
  while ( defined( $child = shift @{$aref} ) ) {
    $nobjs--;
    if ( ref($child) ) {
      $tx->error->location( $child->start_location );
      $child->finalize( $tx, @context );
    }
    else {
      $tx->out_handle->print($child);
    }
  }
  $nobjs;
}

sub new {
  my $class = shift;
  my $self = bless TagX::TAG->new(@_), $class;
  $self->{'finalize_children'} = \&finalize_children;
  $self;
}

sub options {
  my $self = shift;
  $self->SUPER::options(@_);
  $self;
}

sub parent {
  my $self = shift;
  if ( @_ == 1 ) {
    my $parent = shift;
    $self->{'parent'}            = $parent;
    $self->{'finalize_children'} = $parent->{'finalize_children'};
  }
  $self->{'parent'};
}

sub closure {
  my $self = shift;
  die "Bedrock Internal Error: Class ", ref($self),
  " should override `closure()'.\n";
}

sub new_child {
  my $self  = shift;
  my $child = shift;
  push @{ $self->{'subobjs'} }, $child;
  $self->{'nobjs'}++;
  $child->parent($self);
  $child;
}

sub end_child {
  my $self = shift;
  $self->{'parent'};
}

sub text {
  my $self = shift;
  my $text = shift;
  $self->{'nobjs'}++;
  push @{ $self->{'subobjs'} }, $text;
}

sub finalize {
  my $self = shift;
  return unless $self->{'nobjs'} > 0;
  my $tx      = @_ > 0 ? shift : $self->{'TagX'};
  my @context = @_ > 0 ? @_    : ( $tx->{'VARS'} );
  $self->{'nobjs'} =
  $self->{'finalize_children'}->( $self->{'subobjs'}, $tx, @context );
}

#
# Revision 1.17  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.16  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.15  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.14  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.13  2010/11/08 03:15:20  rlauer
# - bump version
# - bump version of Text::TAGX required
#
# Revision 1.12  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.11  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.10  2000/12/15 14:27:49  sridhar
# Added default method `closure()' which croaks if subclass does not
# override it.
#
# Revision 1.9  2000/11/16 19:14:13  sridhar
# Set the error location in the TagX object just before invoking a
# child's finalize handler so we can know where in the source file the
# error occured.
#
# Revision 1.8  2000/11/13 18:46:49  sridhar
# Vastly simplified method `text()'. Basically children are appended to
# subobjects list. No finalization when text is specified.
#
# Revision 1.7  2000/07/20 20:18:30  sridhar
# Fixed TagX::TAG version being used.
#
# Revision 1.6  2000/05/31 14:36:35  sridhar
# Rigorous version numbering and usage
#
# Revision 1.5  2000/03/10 13:50:17  sridhar
# Bug fix -- Improper handling of list of children while finalizing
# (checking for true value of a child instead of checking if it is defined.)
#
# Revision 1.4  2000/03/09 14:14:26  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.3  2000/03/02 14:51:46  sridhar
# 1. Have a function `finalize_children' which is inherited by container
# objects from parent, except subclasses of Loop, which specify thier
# own finalize_children.
# 2. finalize_children is initialized during construction
# 3. overridden to parent's finalize_children when adding a child
# 4. finalize_children loops thru' list of children finalizing one by
# one and *getting rid of them*, as opposed to Loop's finalize_children
# which does not get rid of children after finalizing.
#
# Revision 1.2  2000/02/08 15:37:44  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:24:58  sridhar
# Added TagX
#
#

1;
