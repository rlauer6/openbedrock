#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody;

use strict;
use warnings;

use parent qw(TagX::TAG);

use Role::Tiny::With;
with 'Bedrock::Logger';

########################################################################
sub finalize_children {
########################################################################
  my ( $aref, $tx, @context ) = @_;

  my $nobjs = @{$aref};

  my $child;

  while ( defined( $child = shift @{$aref} ) ) {
    $nobjs--;

    if ( ref $child ) {
      $tx->error->location( $child->start_location );

      $child->finalize( $tx, @context );
    }
    else {
      $tx->out_handle->print($child);
    }
  }

  return $nobjs;
}

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless TagX::TAG->new(@args), $class;

  $self->{'finalize_children'} = \&finalize_children;

  return $self;
}

########################################################################
sub options {
########################################################################
  my ( $self, @args ) = @_;

  $self->SUPER::options(@args);

  return $self;
}

########################################################################
sub parent {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args == 1 ) {
    my $parent = shift @args;

    $self->{'parent'} = $parent;

    $self->{'finalize_children'} = $parent->{'finalize_children'};
  }

  return $self->{'parent'};
}

########################################################################
sub closure {
########################################################################
  my ($self) = @_;

  die 'Bedrock Internal Error: Class ', ref($self), " should override `closure()'.\n";
}

########################################################################
sub new_child {
########################################################################
  my ( $self, $child ) = @_;

  push @{ $self->{'subobjs'} }, $child;

  $self->{'nobjs'}++;

  $child->parent($self);

  return $child;
}

########################################################################
sub end_child {
########################################################################
  my ($self) = @_;

  return $self->{'parent'};
}

########################################################################
sub text {
########################################################################
  my ( $self, $text ) = @_;

  $self->{'nobjs'}++;

  return push @{ $self->{'subobjs'} }, $text;
}

########################################################################
sub finalize {
########################################################################
  my ( $self, @args ) = @_;

  return if $self->{'nobjs'} <= 0;

  my $tx = @args > 0 ? shift @args : $self->{'TagX'};

  my @context = @args > 0 ? @args : ( $tx->{'VARS'} );

  return $self->{'nobjs'}
    = $self->{'finalize_children'}->( $self->{'subobjs'}, $tx, @context );
}

1;

__END__
