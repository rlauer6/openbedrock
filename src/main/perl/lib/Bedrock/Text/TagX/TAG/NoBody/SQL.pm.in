#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::SQL;

use strict;
use warnings;

use TagX::TAG::NoBody;

use DBI;
use Bedrock::Constants qw{:chars};
use English qw{-no_match_vars};

use Role::Tiny::With;
with 'Bedrock::Logger';

use Scalar::Util qw/reftype/;

use parent qw{ Exporter TagX::TAG::NoBody TagX::TAG::SQLHandler };

sub define_options {
  return (
    'dbname=s'        => undef,
    'db=s',           => undef,
    'statement=s'     => undef,
    'bind=s'          => undef,
    'arg=s'           => undef,
    'define-var=s'    => $UNDERSCORE,
    'define-handle=s' => undef,
  );
} ## end sub define_options

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  $self->dump_options( \%options, @argv );

  @argv = $self->get_name( \%options, @argv );

  my $dbh = $self->get_db_handle( $tx, %options );

  die "Specify SQL statement using --statement or as argument, not both.\n"
    if exists $options{'statement'} && @argv > 0;

  my $statement;
  my $sth;

  if ( exists $options{'statement'} ) {
    $statement = delete $options{'statement'};
  }
  else {

    if ( @argv == 1 && ref $argv[0] ) {
      $sth = shift @argv;
    }
    else {
      $statement = "@argv";
    }
  }

  if ( !$sth ) {
    die "<sql>: no statement specified.\n"
      if !length $statement;

    if ( exists $options{'arg'} ) {
      my @args
        = ( ref( $options{arg} ) && reftype( $options{arg} ) eq 'ARRAY' )
        ? @{ $options{arg} }
        : $options{arg};

      $self->get_logger->debug(
        sub {
          "Substituting following args into statement:\n" . @args;
        }
      );

      $statement = sprintf $statement, @args;

      $self->get_logger->debug(
        sub {
          "Statement after arg-substitution\n" . $statement;
        }
      );
    }

    $sth = $dbh->prepare($statement);

    die sprintf "Error in SQL Statement: `%s - %s\n", $dbh->errstr, $statement
      if !$sth;

    if ( exists $options{'define-handle'} ) {

      # future maintainers, note that the fact that we are storing
      # the reference in Bedrock's "symbol table", means $sth will
      # not be DESTROY'd when we leave this method.  Unlike the
      # old-school use of the <sql> tag which did not allow for
      # reusing the statement handle, and just let it go out of
      # scope (without so much as a $sth->finish).
      $tx->param( $options{'define-handle'} => $sth );

      return;
    }
  }

  my $nParams = $sth->{NUM_OF_PARAMS};

  my @bind;

  if ( exists $options{'bind'} ) {
    die "Extra bind variables specified.\n"
      if !$nParams;

    my $bind = $options{'bind'};

    if ( ref($bind) && reftype($bind) eq 'ARRAY' ) {
      for my $item ( @{$bind} ) {
        if ( ref($item) && reftype($item) eq 'ARRAY' ) {
          push @bind, @{$item};
        }
        else {
          push @bind, $item;
        }
      }
    }
    else {
      @bind = ($bind);
    }

    if ( $nParams < @bind ) {
      die @bind - $nParams, " extra bind variable(s) specified.\n";
    }
    elsif ( $nParams > @bind ) {
      die sprintf "Insufficient bind variables: need %d more\n",
        $nParams - @bind;
    }
  }
  elsif ($nParams) {
    die "SQL statement needs $nParams bind variable(s).\n";
  }

  my $idx = 0;

  for my $bindval (@bind) {
    ++$idx;

    my $type = $EMPTY;

    if ( defined $bindval && $bindval =~ s/[(][%]\s*(\d+)\s*[%][)]\s*$//xsm )
    {
      $type = $1;
    }

    if ($type) {
      $sth->bind_param( $idx, $bindval, { TYPE => $type } )
        or die "Failure binding param $idx, TYPE $type: `", $sth->errstr,
        "'\n";
    }
    else {
      $sth->bind_param( $idx, $bindval )
        or die "Failure binding param $idx: `", $sth->errstr, "'\n";
    }

    $self->get_logger->debug(
      sub {
        return sprintf 'Bound (%s, %s, %s)', $idx, $type, $bindval;
      }
    );
  }

  my $rows = $sth->execute;

  die sprintf "Error executing SQL statement: %s - %s\n", $sth->errstr,
    $statement
    if !defined $rows;

  $self->get_logger->debug(
    sub {
      return sprintf 'Number of rows affected by statement is %d', $rows;
    }
  );

  # keep user's copy of handle up to date
  if ( exists $options{dbname} ) {
    $tx->{DB}->{ $options{dbname} } = $dbh;
  }

  $tx->param( $options{'define-var'} => $rows );

  return $rows;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>sqlE<gt>>

=head1 PURPOSE

Execute a SQL statement.

=head1 SYNTAX

 <sql[:var-name] [options] sql-statement>

=head1 DESCRIPTION

The C<E<lt>sqlE<gt>> tag is used to execute a SQL statement such as
C<UPDATE> or C<DELETE>. Use C<E<lt>sqlselectE<gt>> to execute SQL
<SELECT> statements.

=head1 OPTIONS

  --db            = database-handle
  --define-handle = "var-name" 
  --define-var    = "var-name"
  --statement     = "sql-statement"
  --bind          = expression
  --arg           = "format-string

=over 5

=item --db

Name of the database handle object. If not provided then the default
database handle is used if one is available.

=item --define-handle

Name of the variable to hold the "cursor" or "handle" that can be used
in subsequent C<E<lt>sqlE<gt>> statements.  Keep in mind if your
Bedrock page starts to look like a perl script, you should consider
writing an Application Plugin.

=item --define-var

Name of the variable to hold the return value (number of rows
updated).  This value will be "0E0" if no rows are updated.  If you
don't supply a name, the number of rows will be returned in the
default variable (C<$_>).

=item --statement

Statement to execute

=item --bind

One or more bind variables may be specified by these options.  They
are bound in the order in which they are defined.  You can also use an
array to specify more than 1 bind variable rather than using multiple
C<--bind> options.

=item --arg

One or more values to use as arguments to replace the format
strings (C<%s>) in your SQL statement.  This is useful for example
where a bind value would otherwise be illegal - for example table
names.  The order in which the options appear should correspond to the
order in which you want the values replace in SQL statement.

  <sql "update %s set %s where acct = ?"
       --arg=$table
       --arg=$field
       --bind=$acct >

You can use multiple C<--arg> options or you can specify an array
object.

Be careful not to use variables that are returned as part of HTML
forms as argument to @code{--arg} unless you are extremely confident
you are not introducing malicious statements or have sanitized the
input.

=back

=head1 EXAMPLE

  <sql "select %s from custmr where acct = ?" 
       --bind="1" 
       --arg="name" > 

=head1 SEE ALSO

C<E<lt>sqlselectE<gt>>, C<E<lt>sqlconnectE<gt>> 

=cut
