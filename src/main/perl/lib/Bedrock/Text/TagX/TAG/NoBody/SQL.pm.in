#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::SQL;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.14;
    @ISA	= qw (Exporter);
}

use DBI;

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub ANONYMOUS
{
    '*anonymous*';
}


sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('dbname=s'		=> undef,
		   'db=s',		=> undef,
		   'statement=s'	=> undef,
		   'bind=s'		=> undef,
		   'arg=s'		=> undef,
		   'define-var=s'       => undef
		  );

    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	&log_message( $self, $str );
    }

    @argv = $self->get_name(\%options, @argv);

    my $name = $options{'dbname'};
    &log_message( "Use of deprecated option `--dbname'. Use `--db' instead.\n" )
	if $name;

    my $dbh;
    if ( $options{'db'} ) {
	$dbh = $options{'db'};
    } elsif ( $name ) {
	$dbh = $tx->{'DB'}->{$name};
	die "Unknown database connection named `$name'.\n" unless $dbh;
    } else {
	$dbh = $tx->{'DB'}->{&ANONYMOUS};
    }

    die "No database connection to execute SQL statement.\n"
	unless defined($dbh) and ref($dbh);

    &log_message ( $self, "Using database handle ($dbh)")
	if $verbose;

    die "Specify SQL statement using --statement or as argument, not both.\n"
	if exists $options{'statement'} and @argv > 0;

    my $statement;
    if ( exists $options{'statement'} ) {
	$statement = delete $options{'statement'};
    } else {
	$statement = "@argv";
    }

    die "<sql>: no statement specified.\n" unless length($statement);

    if ( exists $options{'arg'} ) {
	my @args = &UNIVERSAL::isa( $options{'arg'}, 'ARRAY')  ? @{$options{'arg'}} : ($options{'arg'});
	&log_message( $self, "Substituting following args into statement:\n@args" ) if $verbose;
	$statement = sprintf ($statement, @args);
	&log_message( $self, "Statement after arg-substitution\n$statement" ) if $verbose;
    }

    my $sth = $dbh->prepare ( $statement );
    die "Error in SQL Statement: `", $dbh->errstr, "'\n$statement\n" unless $sth;

    my $nParams = $sth->{NUM_OF_PARAMS};

    my @bind;
    if ( exists $options{'bind'} ) {
	die "Extra bind variables specified.\n" unless $nParams;
	my $bind = $options{'bind'};
	if ( ref( $bind ) and &UNIVERSAL::isa($bind, 'ARRAY') ) {
	    for my $item (@{$bind}) {
		if ( ref( $item ) and &UNIVERSAL::isa($item, 'ARRAY') ) {
		    push @bind, @{$item};
		} else {
		    push @bind, $item;
		}
	    }
	} else {
	    @bind = ($bind);
	}

	if ( $nParams < @bind ) {
	    die @bind - $nParams, " extra bind variable(s) specified.\n";
	} elsif ( $nParams > @bind ) {
	    die "Insufficient bind variables: need ", $nParams - @bind, " more.\n";
	}

    } elsif ( $nParams ) {
	die "SQL statement needs $nParams bind variable(s).\n";
    }

    my $i = 1;
    for my $bindval (@bind) {
	my $type = $1 if defined($bindval) and $bindval =~ s/\(\%\s*(\d+)\s*\%\)\s*$//;

	if ( defined( $type ) ) {
	    $sth->bind_param ( $i, $bindval, {TYPE => $type}) ||
		die "Failure binding param $i, TYPE $type: `", $sth->errstr, "'\n";
	} else {
	    $sth->bind_param ( $i, $bindval ) ||
		die "Failure binding param $i: `", $sth->errstr, "'\n";
	}

	&log_message( $self, "Bound ($i, $type, $bindval)" ) if $verbose;
    } continue {
	$i++;
    }

    my $rows = $sth->execute;
    die "Error executing SQL statement: ", $sth->errstr, "\n$statement\n"
	unless defined( $rows );
    &log_message( $self, "Number of rows affected by statement is <$rows>" ) if $verbose;

    $tx->{VARS}->{$options{'define-var'}} = $rows;

    $rows;
}

=head1 TAG - C<E<lt>sqlE<gt>>

=head1 PURPOSE

Execute a SQL statement.

=head1 SYNTAX

 <sql[:var-name] [options] sql-statement>

=head1 DESCRIPTION

The C<E<lt>sqlE<gt>> tag is used to execute a SQL statement such as
C<UPDATE> or C<DELETE>. Use C<E<lt>sqlselectE<gt>> to execute SQL
<SELECT> statements.

=head1 OPTIONS

  --db         = database-handle 
  --define-var = "var-name"
  --statement  = "sql-statement"
  --bind       = expression
  --arg        = "format-string

=over 5

=item --db

Name of the database handle object. If not provided then the default
database handle is used if one is available.

=item --define-var

Name of the variable to hold the return value (number of rows
updated).  This value will be "0E0" if no rows are updated.

=item --statement

Statement to execute

=item --bind

One or more bind variables may be specified by these options.  They
are bound in the order in which they are defined.  You can also use an
array to specify more than 1 bind variable rather than using multiple
C<--bind> options.

=item --arg

One or more arguments to use as arguments to C<sprintf> applied using
the SQL statement as the format string.  This is useful for example
where a bind value would otherwise be illegal - for example table
names.

  <sql "update %s set %s where acct = ?"
       --arg=$table
       --arg=$field
       --bind=$acct >

You can use multiple C<--arg> options or you can specify an array object.

=back

=head1 EXAMPLE

  <sql "select %s from custmr where acct = ?" 
       --bind="1" 
       --arg="name" > 

=head1 SEE ALSO

C<E<lt>sqlselectE<gt>>, C<E<lt>sqlconnectE<gt>> 

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.17  2010/11/17 02:31:04  rlauer
# - pod cleanup
# - return number of rows affected by statement in $_ or --define-var
#
# Revision 1.16  2009/12/31 12:43:33  rlauer
# docs tweaks
#
# Revision 1.15  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.14  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.13  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.12  2000/11/21 19:25:56  sridhar
# 1. Support for passing a database handle using the option --db.
# 2. --dbname option deprecated.
#
# Revision 1.11  2000/11/16 19:13:15  sridhar
# 1. Fixed error messages so exceptions don't have perl source code
# locations in them.
# 2. Explicitly catching error code from DBI routine to show suitable
# error message.
# 3. Checking for Incorrect number of bind vars being specified with
# statement.
#
# Revision 1.10  2000/10/25 17:26:41  sridhar
# Argument to --bind can be an array. The array is expanded and used with
# the other bind arguments appropriately.
#
# Revision 1.9  2000/09/22 20:19:50  sridhar
# Argument to <sql> is treated as statement to execute if --statement is
# not used.
#
# Revision 1.8  2000/05/31 14:56:51  sridhar
# Rigorous version numbering and usage
#
# Revision 1.7  2000/04/27 20:01:05  sridhar
# Execute was returning undef and *NOT* throwing an exception due to an SQL
# error. Has been fixed now.
#
# Revision 1.6  2000/04/24 12:48:27  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:20:36  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.4  2000/03/06 18:32:00  sridhar
# Replaced all ad-hoc message logging with message logging only on demand
# -- via --verbose flag specified as a tag option
#
# Revision 1.3  2000/02/23 13:42:03  sridhar
# 1. More logging
# 2. Support for binding value with type specification
#
# Revision 1.2  2000/02/08 15:37:44  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:24:59  sridhar
# Added TagX
#
#

1;
