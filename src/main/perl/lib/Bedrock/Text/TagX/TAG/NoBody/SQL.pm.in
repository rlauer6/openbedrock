#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::NoBody::SQL;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use DBI;

use TagX::Log 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('dbname=s'		=> '_anonymous_',
		   'statement=s'	=> undef,
		   'bind=s'		=> undef,
		   'arg=s'		=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	&log_message( $self, $str );
    }

    my $name = $options{'dbname'};
    my $dbh = $tx->{'DB'}->{$name};
    die "No database connection to execute SQL statement.\n"
	unless defined($dbh) and ref($dbh);

    &log_message ( $self, "Using database handle named ($name) .. ($dbh)")
	if $verbose;

    die "Specify SQL statement using --statement or as argument, not both.\n"
	if exists $options{'statement'} and @argv > 0;

    my $statement;
    if ( exists $options{'statement'} ) {
	$statement = delete $options{'statement'};
    } else {
	$statement = "@argv";
    }

    die "<sql>: no statement specified.\n" unless length($statement);

    if ( exists $options{'arg'} ) {
	my @args = ref( $options{'arg'} ) eq 'ARRAY' ? @{$options{'arg'}} : ($options{'arg'});
	&log_message( $self, "Substituting following args into statement:\n@args" ) if $verbose;
	$statement = sprintf ($statement, @args);
	&log_message( $self, "Statement after arg-substitution\n$statement" ) if $verbose;
    }

    my $sth = $dbh->prepare ( $statement );
    die "Error in SQL Statement: `", $dbh->errstr, "'\n$statement\n" unless $sth;

    my $nParams = $sth->{NUM_OF_PARAMS};

    my @bind;
    if ( exists $options{'bind'} ) {
	die "Extra bind variables specified.\n" unless $nParams;
	my $bind = $options{'bind'};
	if ( ref( $bind ) and &UNIVERSAL::isa($bind, 'ARRAY') ) {
	    for my $item (@{$bind}) {
		if ( ref( $item ) and &UNIVERSAL::isa($item, 'ARRAY') ) {
		    push @bind, @{$item};
		} else {
		    push @bind, $item;
		}
	    }
	} else {
	    @bind = ($bind);
	}

	if ( $nParams < @bind ) {
	    die @bind - $nParams, " extra bind variable(s) specified.\n";
	} elsif ( $nParams > @bind ) {
	    die "Insufficient bind variables: need ", $nParams - @bind, " more.\n";
	}

    } elsif ( $nParams ) {
	die "SQL statement needs $nParams bind variable(s).\n";
    }

    my $i = 1;
    for my $bindval (@bind) {
	my $type = $1 if defined($bindval) and $bindval =~ s/\(\%\s*(\d+)\s*\%\)\s*$//;

	if ( defined( $type ) ) {
	    $sth->bind_param ( $i, $bindval, {TYPE => $type}) ||
		die "Failure binding param $i, TYPE $type: `", $sth->errstr, "'\n";
	} else {
	    $sth->bind_param ( $i, $bindval ) ||
		die "Failure binding param $i: `", $sth->errstr, "'\n";
	}

	&log_message( $self, "Bound ($i, $type, $bindval)" ) if $verbose;
    } continue {
	$i++;
    }

    my $rows = $sth->execute;
    die "Error executing SQL statement: ", $sth->errstr, "\n$statement\n"
	unless defined( $rows );
    &log_message( $self, "Number of rows affected by statement is <$rows>" ) if $verbose;
    $rows;
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.11  2000/11/16 19:13:15  sridhar
# 1. Fixed error messages so exceptions don't have perl source code
# locations in them.
# 2. Explicitly catching error code from DBI routine to show suitable
# error message.
# 3. Checking for Incorrect number of bind vars being specified with
# statement.
#
# Revision 1.10  2000/10/25 17:26:41  sridhar
# Argument to --bind can be an array. The array is expanded and used with
# the other bind arguments appropriately.
#
# Revision 1.9  2000/09/22 20:19:50  sridhar
# Argument to <sql> is treated as statement to execute if --statement is
# not used.
#
# Revision 1.8  2000/05/31 14:56:51  sridhar
# Rigorous version numbering and usage
#
# Revision 1.7  2000/04/27 20:01:05  sridhar
# Execute was returning undef and *NOT* throwing an exception due to an SQL
# error. Has been fixed now.
#
# Revision 1.6  2000/04/24 12:48:27  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.5  2000/04/13 15:20:36  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.4  2000/03/06 18:32:00  sridhar
# Replaced all ad-hoc message logging with message logging only on demand
# -- via --verbose flag specified as a tag option
#
# Revision 1.3  2000/02/23 13:42:03  sridhar
# 1. More logging
# 2. Support for binding value with type specification
#
# Revision 1.2  2000/02/08 15:37:44  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:24:59  sridhar
# Added TagX
#
#

1;
