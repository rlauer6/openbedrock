#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Loop::Foreach;

use strict;
use warnings;

use Bedrock qw{:booleans};

use Scalar::Util qw/reftype/;
use Bedrock::Constants qw{:booleans :chars};
use Data::Dumper;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw (Exporter TagX::TAG::WithBody::Loop);

########################################################################
sub closure {
########################################################################
  return '/foreach';
}

########################################################################
sub define_options {
########################################################################
  return (
    'alias=s'             => undef,
    'counter-increment=i' => 1,
    'counter-start=i'     => 0,
    'define-counter=s'    => undef,
    'define-index=s'      => undef,
    'define-var=s'        => $UNDERSCORE,
    'end-index=i'         => undef,
    'max-items=i'         => undef,
    'range=s'             => undef,
    'start-index=i'       => undef,

  );

} ## end sub define_options

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = $self->define_options;

  my @argv = $self->parse_options( \%options, @context );

  my $logger = $self->get_logger( ref $self );

  $self->dump_options( \%options, @argv );

  my @children = @{ $self->{'subobjs'} };

  my ( $start, $end, $nItems, $data );

  if ( @argv > 1 ) {

    $logger->trace(
      sub {
        sprintf 'More than one argument found -- forced into an array: (%s)',
          join $COMMA, @argv;
      }
    );

    $data   = \@argv;
    $start  = 0;
    $nItems = @argv;
    $end    = $nItems - 1;
  }
  elsif ( @argv == 1 ) {
    $data = $argv[0];

    if ( !defined $data ) {
      $logger->warn('argument s undefined');

      return;
    }

    if ( !is_array($data) ) {
      $logger->debug(
        sub { sprintf 'argument [%s] is not an array', Dumper $data; } );

      my $alias = $options{'alias'} || $options{'define-var'};

      # --define-var='key,value,index'
      my $key;
      my $value;
      my $index;

      if ( $alias =~ /,/xsm ) {
        $alias =~ s/\s//xsmg;
        ( $key, $value, $index ) = split $COMMA, $alias;
      }

      $key   = $key   || 'key';
      $value = $value || 'value';
      $index = $index || 'index';

      # iterate over a hash where $_ eq {}
      if ( is_hash($data) ) {
        $logger->debug(
          sub { sprintf 'argument [%s] is a hash', Dumper $data } );

        my $idx = 0;
        my $tmp = [];

        foreach my $k ( keys %{$data} ) {
          push @{$tmp},
            {
            $index => $idx++,
            $key   => $k,
            $value => $data->{$k}
            };
        }

        $data = $tmp;
      }

      # promote a scalar to 1 element array
      else {
        $data = [$data];
      }
    }

    # defaults
    $nItems = @{$data};
  }

  #
  # Defining these things as options override defaults
  #
  if ( defined $options{'start-index'} ) {
    $start = $options{'start-index'};
  }

  my $increment = $options{'counter-increment'};

  my $counter_start = $options{'counter-start'};

  if ( defined $options{'end-index'} ) {
    $end = $options{'end-index'};
  }
  elsif ( defined $options{'max-items'} ) {
    $nItems = $options{'max-items'};
    $end    = $start + $nItems - 1;
  }

  my $define_index;

  if ( exists $options{'define-index'} ) {
    $define_index = $options{'define-index'};
  }

  my $counter;

  if ( exists $options{'define-counter'} ) {
    $counter = $options{'define-counter'};
  }

  if ( !defined $start && !defined $end && $options{range} ) {
    ( $start, $end ) = split /\s*[,:]\s*/xsm, $options{range};

    die "invalid range\n"
      if $start > $end || ( $nItems && $end > $nItems - 1 );
  }

  my $alias = $options{'alias'} || $options{'define-var'};

  $start //= 0;
  $end   //= $nItems - 1;

  $logger->trace(
    sub {
      my @args = map { defined $_ ? $_ : $EMPTY } $data, $start, $end,
        $define_index, $counter, $increment, $alias;

      sprintf "begin loop with data = [%s]\n"
        . "start        => [%s]\n"
        . "end          => [%s]\n"
        . "define-index => [%s]\n"
        . "counter      => [%s]\n"
        . "increment    => [%s]\n"
        . "alias        => [%s]\n",
        @args;
    }
  );

  my $counter_idx = $counter_start;

  for my $i ( $start .. $end ) {

    # Begin building the arg list for children
    my @loop_args = ($tx);

    # Get the current element from the array
    my $loop_data = defined $data ? $data->[$i] : $i;

    # Create a hashref for storing loop vars
    # Alias the current element; note that alias is present even
    # if the current element is undefined. This way, the alias
    # evaluates to undef.
    my $loop_vars = { $alias => $loop_data };

    # Store index in loop vars hash if defined
    if ( defined $define_index ) {
      $loop_vars->{$define_index} = $i;
    }

    if ( defined $counter ) {
      $loop_vars->{$counter} = $counter_idx;
    }

    $counter_idx += $increment;
    push @loop_args, $loop_vars;

    # Store the current element too in the loop args list
    if ( is_hash($loop_data) ) {
      push @loop_args, $loop_data;

      # echo the loop data if requested
      $logger->trace(
        sub {
          my @str = "Loop $i >>";

          for my $key ( sort keys %{$loop_data} ) {
            push @str, '    ' . $key . '=> ' . $loop_data->{$key};
          }

          join "\n", @str;
        }
      );
    }

    $self->{'finalize_children'}
      ->( $self->{'subobjs'}, @loop_args, @context );
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>foreachE<gt>>

=head1 PURPOSE

Iterate over an array (list) or hash.

=head1 SYNTAX

  <foreach [options] array|hash|list>
  </foreach>

=head1 DESCRIPTION

Use the C<foreach> tag to iterate over an array, hash, recordsets or lists.

=head1 OPTIONS

 --alias             = "var-name" (deprecated)
 --counter-increment = integer|expression
 --counter-start     = integer|expression
 --define-counter    = "var-name"
 --define-index      = "var-name"
 --define-var        = "var-name" (default = '_') | "key,value,[index]"
 --end-index         = integer|expression
 --max-items         = integer|expression
 --range             = "start,stop"
 --start-index       = integer|expression

=over 5

=item --alias

Deprecated option.  Equivalent to C<--define-var>.

=item --define-var

Name of the scalar object use to hold each element of the object in turn.  If not provided, Bedrock will use the defaultvariable (C<$_>) to hold the current data element of the object.

When iterating over hashes, you can you specify variable names to hold the I<key>, I<value> and
I<index>. Separate the names with comma. Note that these variables are local in scope.

 <hash:fruit apple 1 pear 2 orange 3>

 <foreach --define-var="k,v,i" $fruit>
   <var $k> : <var $v> : <var $i></foreach>

  apple : 1 : 0
  pear : 2 : 1
  orange : 3 : 2

=item --counter-increment

Increment to use for the counter variable. Default is 1.
=item --define-index

Name of a variable which will be incremented by the counter increment
(default is 1) each time through the loop.

=item --counter-start

Start value of the counter variable.

=item --define-counter

Name of a variable to use as an alternate indexing variable. The default is C<$_>.

=item --define-index

Name of a variable which will be incremented by the counter increment
(default is 1) each time through the loop.

=item --end-index

Index that will cause the loop to end.

=item --max-items

Maximum number of times to execute the loop.

=item --range

Defines the start and stop of the loop. Separate the start and end
with either a comma (C<,>) or a colon (C<:>).

 <foreach --range="1,9"><var $_></foreach>

=item --start-index

Offset into the array to begin the iteration.


=back

=head1 NOTES

=over 5

=item * Limiting loop execution

You can limit the number of times the loop is executed using the
various options described above.  Specifically, you can use these
options to control the number of times the block is processed.

  --end-index  => last index to execute

  --max-items  => total number of times to execute the block

If no limit is placed, then the entire list, starting at the start
index (default 0) will be processed.

=item * Iterating over hashes

Iterating over hashes entails traversing the hash in key order
I<(which in Bedrock 2 happens to be the order in which the hash was
defined)> and presenting a three-element hash (C<$_>) within the scope of the
loop.  The hash members are named  C<key> and C<value>, and C<index>.

  $_.key   => the current hash key 
  $_.value => the current hash value associate with that key
  $_.index => index of the current element

Assuming C<$data> is a hash that you would like to traverse, the perl
equivalent would look something like:

 my @loop_data = map { { key => $_, value => $data->{$_} } } keys %$data;
 foreach (@loop_data) {
   print $_->key . ': . $_->value . "\n";
 } 

I<All hashes are ordered hashes, thus they are traversed in the
order in which they were defined.>

The key and value are store in the default variable C<$_> unless you
override that using C<--define-var>. In that case the
key, value and index are scalars with the names you have provided.

 <foreach --define-var="key,value,index">
   [<var $index>] <var $key> => <var $value></foreach>

These variables ($key, $value, $index) are lexically scoped within the
body of the C<foreach> tag.

=item * Iterating over Recordsets

The  I<recordset> object is an array of hashes. Recordsets are returned when using the Bedrock
C<E<lt>sqlselectE<gt>> tag.

 <sqlselect "select * from customer" --define-var="rs"></sqlselect>

Recordsets are also returned by the C<BLM::IndexedTableHandler> C<select_list()> method.

 <null:list $customer.select_list("select * from customer where state='PA')>

Recordset objects provide a number of useful methods.  (See the L<E<lt>recordsetE<gt>> tag for more information).

You can iterate over recordsets using the C<E<lt>foreachE<gt>> tag.
When iterating over recordsets the hash members of each array element
are exposed as scalars.  These scalars are I<lexically scoped>, that
is, they only exist within the context of the C<E<lt>foreachE<gt>>
tag.  Each array element in the recordset is a hash.  Along with the
scalars the hash itself is exposed as either the default variable ($_)
or as a nmae that you specified using the C<--define-var> option.

 <null:list $customer.select_list("select * from customer where state='PA')>

 <foreach $list>
   <var $name>
   <var $address>
   <var $city>, <var $state> <var $zip></foreach>

 <foreach $list>
   <var $_.name>
   <var $_.address>
   <var $_.city>, <var $_.state> <var $_.zip></foreach>

 <foreach --define-var="c" $list>
   <var $c.name>
   <var $c.address>
   <var $c.city>, <var $c.state> <var $c.zip></foreach>

=back

=head1 EXAMPLES

=over 5

=item * Iterate over an array

  <array:foo 1 2 3>

  <foreach $foo> 
    <var $_><br>
  </foreach>

=item * Iterate over a hash

  <foreach $input>
     <var $_.key>:<var $_.value><br>
  </foreach>

  <foreach $input>
     <var $key>:<var $value><br>
  </foreach>

  <hash:fruits 1 apple 2 pear 3 banana>

  <select name="fruits">
  <foreach --define-var="item,id" $fruits>
     <option value="<var $id>"><var $item></option></foreach>
  </select>

=item * Iterate over a simple list

  <b>Who's your favorite Pep Boy?</b>
  <ol>
  <foreach Manny Moe Jack>
    <li><input type="radio" name="pep_boy" value="<var $_>">&nbsp;<var $_></li>
  </foreach>
  </ol>

=back

=head1 SEE ALSO

C<E<lt>whileE<gt>> C<E<lt>recordsetE<gt>>

=cut
