#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::WithBody::Loop::Foreach;

use strict;

BEGIN
{
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use TagX::Log;
use TagX::TAG::WithBody::Loop;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('name=s'		=> undef,
		   'define-index=s'	=> undef,
		   'start-index=i'	=> undef,
		   'end-index=i'	=> undef,
		   'max-items=i'	=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are (@argv)";
	&log_message( $self, $str );
    }

    if ( @argv != 1 ) {
	&log_message( $self, "Invalid number of argument(@{[scalar(@argv)]}):\n\t(@argv)");
	return;
    }

    my $data = shift @argv;
    unless ( defined ($data) ) {
	&log_message( $self, "array not defined" );
	return;
    }

    unless ( ref($data) eq 'ARRAY' ) {
	&log_message( $self, "argument is not an array" );
	return;
    }

    my @children = @{$self->{'subobjs'}};
    my $nItems = scalar( @{$data} );

    my $start = 0;
    if ( exists $options{'start-index'} ) {
	$start = $options{'start-index'};
	$start = 0 unless defined($start) and $start > 0;
    }

    my $end = $nItems - 1;
    if ( exists $options{'end-index'} ) {
	$end = $options{'end-index'};
	$end = $nItems - 1 unless defined( $end ) and $end >=0 and $end < $nItems;
    }

    if ( exists $options{'max-items'} ) {
	my $max = $options{'max-items'};
	$end = defined($max) ? $start + $max - 1 : $end;
	$end = $nItems - 1 if $end >= $nItems;
    }

    my $define_index = $options{'define-index'} if exists $options{'define-index'};
    for (my $i = $start ; $i <= $end ; $i++ ) {
	my $loop_data = $data->[$i];

	if ( defined( $define_index ) ) {
	    my %hash = %{$loop_data};
	    $hash{$define_index} = $i;
	    $loop_data = \%hash;
	}

	for my $child (@children) {
	    next unless $child;
	    if ( ref ($child) ) {
		$child->finalize ( $tx, $loop_data, @context );
	    } else {
		$tx->out_handle->print( $child );
	    }
	}
    }
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2000/04/24 12:49:33  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.3  2000/04/13 15:21:07  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.2  2000/03/09 14:21:22  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.1  2000/03/02 14:57:26  sridhar
# Moved WithBody/Foreach.pm to WithBody/Loop/Foreach.pm. Changed Class
# heirarchy accordingly. Loop.pm overrides `parent' method to force own
# finalize_children function
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:01  sridhar
# Added TagX
#
#

1;
