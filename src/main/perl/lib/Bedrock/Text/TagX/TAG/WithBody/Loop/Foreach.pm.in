#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::WithBody::Loop::Foreach;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);
use TagX::Log 1.01;
use TagX::TAG::WithBody::Loop 1.03;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('name=s'		=> undef,
		   'define-index=s'	=> undef,
		   'start-index=i'	=> undef,
		   'end-index=i'	=> undef,
		   'max-items=i'	=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are (@argv)";
	&log_message( $self, $str );
    }

    if ( @argv > 1 ) {
	&log_message( $self, "Invalid number of argument(@{[scalar(@argv)]}):\n\t(@argv)");
	return;
    }

    my @children = @{$self->{'subobjs'}};

    my ($start, $end, $nItems, $data);
    if ( @argv == 1 ) {
	$data = $argv[0];
	unless ( defined ($data) and &isa( $data, 'ARRAY' ) ) {
	    &log_message( $self, "argument [$data] is undefined or not an array" );
	    return;
	}

	$start = 0;
	$nItems = @{$data};
	$end = $nItems - 1;
    }

    #
    # Defining these things as options override defaults
    #
    $start = $options{'start-index'} if defined( $options{'start-index'} );
    if ( defined( $options{'end-index'} ) ) {
	$end = $options{'end-index'};
    } elsif ( defined( $options{'max-items'} ) ) {
	$nItems = $options{'max-items'};
	$end = $start + $nItems - 1;
    }
    my $define_index = $options{'define-index'} if exists $options{'define-index'};
    &log_message( $self, "begin loop with data = [$data], start = [$start], end = [$end], define-index = [$define_index]" )
	if $verbose;

    for (my $i = $start ; $i <= $end ; $i++ ) {
	my $loop_data = $data->[$i] if defined( $data );

	if ( defined( $define_index ) ) {
	    if ( defined( $loop_data ) and &isa( $loop_data, 'HASH') ) {
		my %hash = %{$loop_data};
		$hash{$define_index} = $i;
		$loop_data = \%hash;
	    } else {
		$loop_data = {$define_index => $i};
	    }
	}

	if ( defined($verbose) and $verbose > 1 ) {
	    my $str = "Loop $i >>\n";
	    for my $key (sort keys %{$loop_data}) {
		$str .= "    $key => $loop_data->{$key}\n";
	    }
	    &log_message( $self, $str );
	}

	for my $child (@children) {
	    next unless $child;
	    if ( ref ($child) ) {
		$child->finalize ( $tx, $loop_data, @context );
	    } else {
		$tx->out_handle->print( $child );
	    }
	}
    }
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.11  2000/06/27 15:11:28  sridhar
# Finally, a foreach which doesn't need an array and can loop over start
# and end indices.
#
# Revision 1.10  2000/06/21 16:07:20  sridhar
# 1. Using isa() to check reference instead of ref()
# 2. verbose level > 1 means more detailed logging
#
# Revision 1.9  2000/06/16 14:51:07  sridhar
# Combined two conditions into one in quest for speed.
#
# Revision 1.8  2000/06/07 18:39:15  sridhar
# Yuck! fixed a compile error
#
# Revision 1.7  2000/06/07 15:38:47  sridhar
# *** empty log message ***
#
# Revision 1.6  2000/06/06 19:55:02  sridhar
# 1. More log messages
# 2. Check reference of variable using isa() instead of ref()
# 3. Looping over array of ordinary elements now supported
#
# Revision 1.5  2000/05/31 14:46:32  sridhar
# Rigorous version numbering and usage
#
# Revision 1.4  2000/04/24 12:49:33  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.3  2000/04/13 15:21:07  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.2  2000/03/09 14:21:22  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.1  2000/03/02 14:57:26  sridhar
# Moved WithBody/Foreach.pm to WithBody/Loop/Foreach.pm. Changed Class
# heirarchy accordingly. Loop.pm overrides `parent' method to force own
# finalize_children function
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:01  sridhar
# Added TagX
#
#

1;
