#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::TAG::WithBody::Loop::Foreach;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);
use TagX::Log 1.01;
use TagX::TAG::WithBody::Loop 1.03;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub closure
{
    '/foreach';
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('define-index=s'	=> undef,
		   'start-index=i'	=> undef,
		   'end-index=i'	=> undef,
		   'max-items=i'	=> undef,
		   'alias=s'		=> '_');
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are (@argv)";
	&log_message( $self, $str );
    }

    my @children = @{$self->{'subobjs'}};

    my ($start, $end, $nItems, $data);
    if ( @argv > 1 ) {
	# Force the argument list into an array
	&log_message( $self, "More than one args found -- forced into an array: (@argv)" )
	    if $verbose > 1;
	$data = \@argv;
	$start = 0;
	$nItems = @argv;
	$end = $nItems - 1;
    } elsif ( @argv == 1 ) {
	$data = $argv[0];
	unless ( defined ($data) ) {
	    &log_message( $self, "argument [$data] is undefined" );
	    return;
	}

	unless ( &UNIVERSAL::isa( $data, 'ARRAY' ) ) {
	    &log_message( $self, "argument [$data] was not an array .. forced into one" )
		if $verbose;
	    $data = [$data];
	}

	$start = 0;
	$nItems = @{$data};
	$end = $nItems - 1;
    } else {
	$start = 0;
    }

    #
    # Defining these things as options override defaults
    #
    $start = $options{'start-index'} if defined( $options{'start-index'} );
    if ( defined( $options{'end-index'} ) ) {
	$end = $options{'end-index'};
    } elsif ( defined( $options{'max-items'} ) ) {
	$nItems = $options{'max-items'};
	$end = $start + $nItems - 1;
    }
    my $define_index = $options{'define-index'} if exists $options{'define-index'};
    my $alias = $options{'alias'};
    &log_message( $self,
		  "begin loop with data = [$data]\n"
		  . "start = [$start]\n"
		  . "end = [$end]\n"
		  . "define-index = [$define_index]\n"
		  . "alias = [$alias]" ) if $verbose;

    for (my $i = $start ; $i <= $end ; $i++ ) {
	# Begin building the arg list for children
	my @loop_args = ($tx);

	# Get the current element from the array
	my $loop_data = defined($data) ? $data->[$i] : $i;

	# Create a hashref for storing loop vars
	# Alias the current element; note that alias is present even
	# if the current element is undefined. This way, the alias
	# evaluates to undef.
	my $loop_vars = {$alias => $loop_data};

	# Store index in loop vars hash if defined
	$loop_vars->{$define_index} = $i if defined($define_index);
	push @loop_args, $loop_vars;

	# Store the current element too in the loop args list
	if ( defined( $loop_data ) and &UNIVERSAL::isa( $loop_data, 'HASH') ) {
	    push @loop_args, $loop_data;

	    # echo the loop data if requested
	    if ( defined($verbose) and $verbose > 1 ) {
		my $str = "Loop $i >>\n";
		for my $key (sort keys %{$loop_data}) {
		    $str .= "    $key => $loop_data->{$key}\n";
		}
		&log_message( $self, $str );
	    }
	}

	$self->{'finalize_children'}->($self->{'subobjs'}, @loop_args, @context );
    }
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.17  2000/12/15 14:30:26  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.16  2000/11/16 19:05:48  sridhar
# Using function stored under `finalize-children' which is set by the
# parent object.
#
# Revision 1.15  2000/09/25 18:31:55  sridhar
# 1. Default value for --start-index when there are no arguments to
# <foreach>.
# 2. Loop data is the index when there are no arguments to loop or the
# argument is undefined.
#
# Revision 1.14  2000/09/15 18:56:03  sridhar
# 1. Bug fix -- since arrays of ordinary scalars are supported, need to
# make sure context array passed to children are all hashes.
# 2. If more than one arg to <foreach>, they are coerced into an array.
#
# Revision 1.13  2000/08/31 17:03:32  sridhar
# 1. Added long-needed `--alias = "name"' option to <foreach>
# 2. If <foreach> is invoked on a non-array, the item is pushed into an
# anonymous array
#
# Revision 1.12  2000/07/20 20:07:23  sridhar
# Removed `name' option.
#
# Revision 1.11  2000/06/27 15:11:28  sridhar
# Finally, a foreach which doesn't need an array and can loop over start
# and end indices.
#
# Revision 1.10  2000/06/21 16:07:20  sridhar
# 1. Using isa() to check reference instead of ref()
# 2. verbose level > 1 means more detailed logging
#
# Revision 1.9  2000/06/16 14:51:07  sridhar
# Combined two conditions into one in quest for speed.
#
# Revision 1.8  2000/06/07 18:39:15  sridhar
# Yuck! fixed a compile error
#
# Revision 1.7  2000/06/07 15:38:47  sridhar
# *** empty log message ***
#
# Revision 1.6  2000/06/06 19:55:02  sridhar
# 1. More log messages
# 2. Check reference of variable using isa() instead of ref()
# 3. Looping over array of ordinary elements now supported
#
# Revision 1.5  2000/05/31 14:46:32  sridhar
# Rigorous version numbering and usage
#
# Revision 1.4  2000/04/24 12:49:33  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.3  2000/04/13 15:21:07  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.2  2000/03/09 14:21:22  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.1  2000/03/02 14:57:26  sridhar
# Moved WithBody/Foreach.pm to WithBody/Loop/Foreach.pm. Changed Class
# heirarchy accordingly. Loop.pm overrides `parent' method to force own
# finalize_children function
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:01  sridhar
# Added TagX
#
#

1;
