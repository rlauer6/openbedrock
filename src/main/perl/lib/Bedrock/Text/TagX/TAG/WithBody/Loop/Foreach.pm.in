#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Loop::Foreach;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use UNIVERSAL qw (isa);
use TagX::Log;
use TagX::TAG::WithBody::Loop;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub closure {
  '/foreach';
}

sub finalize {
  my ( $self, $tx, @context ) = @_;

  my %options = ( 'define-index=s'      => undef,
                  'start-index=i'       => undef,
                  'end-index=i'         => undef,
                  'max-items=i'         => undef,
                  'counter-start=i'     => 0,
                  'counter-increment=i' => 1,
                  'define-counter=s'    => undef,
                  'alias=s'             => undef,
                  'define-var=s'        => '_'
                );

  my @argv = $self->parse_options( \%options, @context );
  my $verbose = $self->verbose;

  $self->dump_options( \%options ) if $verbose;

  my @children = @{ $self->{'subobjs'} };

  my ( $start, $end, $nItems, $data );
  if ( @argv > 1 ) {

    # Force the argument list into an array
    &log_message( $self,
                  "More than one args found -- forced into an array: (@argv)" )
      if $verbose > 1;
    $data   = \@argv;
    $start  = 0;
    $nItems = @argv;
    $end    = $nItems - 1;
  }
  elsif ( @argv == 1 ) {
    $data = $argv[0];
    unless ( defined($data) ) {
      &log_message( $self, "argument [$data] is undefined" );
      return;
    }

    unless ( &UNIVERSAL::isa( $data, 'ARRAY' ) ) {
      &log_message(
        $self,
"argument [$data] was not an array .. Bedrock I would have forced into one"
      ) if $verbose;

      # iterate over a hash where $_ eq {}
      if ( &UNIVERSAL::isa( $data, 'HASH' ) ) {
        &log_message( $self, "argument [$data] was is a hash .." ) if $verbose;
        my $idx = 0;
        my @tmp = map {
          { index => $idx++, key => $_, value => $data->{$_} };
        } keys %$data;
        $data = \@tmp;
      }

      # promote a scalar to 1 element array
      else {
        $data = [$data];
      }
    }

    # defaults
    $start  = 0;
    $nItems = @{$data};
    $end    = $nItems - 1;
  }
  else {
    $start = 0;
  }

  #
  # Defining these things as options override defaults
  #
  $start = $options{'start-index'} 
    if defined( $options{'start-index'} );

  my $increment     = $options{'counter-increment'};
  my $counter_start = $options{'counter-start'};

  if ( defined( $options{'end-index'} ) ) {
    $end = $options{'end-index'};
  }
  elsif ( defined( $options{'max-items'} ) ) {
    $nItems = $options{'max-items'};
    $end    = $start + $nItems - 1;
  }

  my $define_index = $options{'define-index'}
    if exists $options{'define-index'};

  my $counter = $options{'define-counter'} 
    if exists $options{'define-counter'};

  my $alias = $options{'alias'} || $options{'define-var'};

  &log_message( $self,
                "begin loop with data = [$data]\n"
                . "start = [$start]\n"
                . "end = [$end]\n"
                . "define-index = [$define_index]\n"
                . "counter = [$counter]\n"
                . "increment = [$increment]\n"
                . "alias = [$alias]"
              ) if $verbose;

  my $counter_idx = $counter_start;
  my $index       = 1;

  for ( my $i = $start ; $i <= $end ; $i++ ) {

    # Begin building the arg list for children
    my @loop_args = ($tx);

    # Get the current element from the array
    my $loop_data = defined($data) ? $data->[$i] : $i;

    # Create a hashref for storing loop vars
    # Alias the current element; note that alias is present even
    # if the current element is undefined. This way, the alias
    # evaluates to undef.
    my $loop_vars = { $alias => $loop_data };

    # Store index in loop vars hash if defined
    $loop_vars->{$define_index} = $i if defined($define_index);
    $loop_vars->{$counter} = $counter_idx;

    $counter_idx += $increment;
    push @loop_args, $loop_vars;

    # Store the current element too in the loop args list
    if ( defined($loop_data) and &UNIVERSAL::isa( $loop_data, 'HASH' ) ) {
      push @loop_args, $loop_data;

      # echo the loop data if requested
      if ( defined($verbose) and $verbose > 1 ) {
        my $str = "Loop $i >>\n";
        for my $key ( sort keys %{$loop_data} ) {
          $str .= "    $key => $loop_data->{$key}\n";
        }
        &log_message( $self, $str );
      }
    }

    $self->{'finalize_children'}->( $self->{'subobjs'}, @loop_args, @context );
  }
}

=pod

=head1 TAG - C<E<lt>foreachE<gt>>

=head1 PURPOSE

Iterate over an array (list) or hash.

=head1 SYNTAX

  <foreach [options] array|hash|list>
  </foreach>

=head1 DESCRIPTION

Use the C<foreach> tag to iterate over arrays, lists, or hashes.

=head1 OPTIONS

 --define-var        = "var-name" (default = '_')
 --alias             = "var-name" (deprecated)
 --define-index      = "var-name"
 --start-index       = integer|expression
 --end-index         = integer|expression
 --max-items         = integer|expression
 --define-counter    = "var-name"
 --counter-start     = integer|expression
 --counter-increment = integer|expression

=over 5

=item --define-var

Name of the scalar value of the current iteration.  Formerly "alias".  If not provided, the variable is C<$_>.

=item --define-index

Name of a variable which will be incremented by 1 each time through the loop.

=item --start-index

Offset into the array to start iterating over.

=item --end-index

Index of last value in array to iterate over.

=item --max-items

Maximum number of times to iterate.

=item --define-counter

Name of a variable to use as an alternate indexing variable.

=item --counter-start

Start value of the counter variable.

=item --counter-increment

Increment to use for the counter variable.

=item --alias

Deprecated option.  Equivalent to C<--define-var>.

=back

=head1 NOTES

=over 5

=item * Limiting loop execution

You can limit the number of times the loop is executed using the
various options described above.  Specifically, you can use these
options to control the number of times the block is processed.

  --end-index  => last index to execute

  --max-items  => total number of times to execute the block

=item * Iterating over hashes

Iterating over hashes entails traversing the hash in key order I<(which
in Bedrock 2 happens to be the order in which the hash was defined)>
and presenting a two-element hash within the scope of the loop.  The
hash members are naturally 'key' and 'value'.

  $_.key   => the current hash key 
  $_.value => the current hash value associate with that key

Assuming C<$data> was your hash to iterate over, the perl equivalent
would look something like:

 my @loop_data = map { { key => $_, value => $data->{$_} } } keys %$data;
 foreach (@loop_data) {
   print $_->key . ': . $_->value . "\n";
 } 

I<All hashes are ordered hashes, thus they are iterated over in the
order in which they were defined.>

The name of the two-element hash by default is C<$_> however you can
change that using C<--define-alias>.

When iterating over hashes the key C<index> is exposed that indicates
the 0 based index of the current hash element.

=back

=head1 EXAMPLE

=over 5

=item * Iterate over an array

  <array:foo 1 2 3>

  <foreach $foo> 
    <var $_><br>
  </foreach>

=item * Iterate over a hash

  <foreach $input>
     <var $_.key>:<var $_.value><br>
  </foreach>

=item * Iterate over a simple list

  <b>Who's your favorite Pep Boy?</b>
  <ol>
  <foreach Manny Moe Jack>
    <li><input type="radio" name="pep_boy" value="<var $_>">&nbsp;<var $_></li>
  </foreach>
  </ol>

=back

=head1 SEE ALSO

C<E<lt>whileE<gt>>

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.37  2013/11/02 21:44:04  rlauer
# - pod tweak
#
# Revision 1.36  2013/03/21 16:32:51  rlauer
# - --counter-start option of <foreach> was not defined properly causing the tag handler to consider
#   the option value as the first element of the iteration object
#
# Revision 1.35  2011/09/21 20:42:54  eutl420
# - pod fix
#
# Revision 1.34  2011/09/15 16:05:33  eutl420
# - perl tidy
#
# Revision 1.33  2011/07/17 16:50:31  eutl420
# @PERL@, log_message if verbose
#
# Revision 1.32  2011/07/12 19:10:37  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.31  2010/12/06 14:20:15  rlauer
# - isHash unnecessary
# - remove duplication of --max-items
#
# Revision 1.30  2010/11/29 15:57:55  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.29  2010/11/20 04:11:46  rlauer
# - add index element to hash for iterating over hashes
# - document that feature
#
# Revision 1.28  2010/11/19 13:36:56  rlauer
# - implement iteration on hashes as iterating over a list of hashes where each hash
#   has a 'key' and 'value' member exposing the key and value of the hash
#
# Revision 1.27  2010/11/17 02:27:40  rlauer
# - pod cleanup
#
# Revision 1.26  2010/11/14 21:06:04  rlauer
# - minor formatting change
#
# Revision 1.25  2010/11/08 03:10:21  rlauer
# - documentation changes only
#
# Revision 1.24  2009/12/31 18:35:53  rlauer
# added _index as a localized system variable accessible to pages, updated docs
#
# Revision 1.23  2009/12/31 12:43:39  rlauer
# docs tweaks, explain hash iteration
#
# Revision 1.22  2009/12/23 00:57:45  rlauer
# exposes keys, values
#
# Revision 1.21  2009/12/18 12:50:58  rlauer
# use the keys of a hash as the default for a foreach loop?
#
# Revision 1.20  2008/12/03 14:01:21  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.19  2008/11/12 12:46:43  rlauer
# added counters; added pod
#
# Revision 1.18  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.17  2000/12/15 14:30:26  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.16  2000/11/16 19:05:48  sridhar
# Using function stored under `finalize-children' which is set by the
# parent object.
#
# Revision 1.15  2000/09/25 18:31:55  sridhar
# 1. Default value for --start-index when there are no arguments to
# <foreach>.
# 2. Loop data is the index when there are no arguments to loop or the
# argument is undefined.
#
# Revision 1.14  2000/09/15 18:56:03  sridhar
# 1. Bug fix -- since arrays of ordinary scalars are supported, need to
# make sure context array passed to children are all hashes.
# 2. If more than one arg to <foreach>, they are coerced into an array.
#
# Revision 1.13  2000/08/31 17:03:32  sridhar
# 1. Added long-needed `--alias = "name"' option to <foreach>
# 2. If <foreach> is invoked on a non-array, the item is pushed into an
# anonymous array
#
# Revision 1.12  2000/07/20 20:07:23  sridhar
# Removed `name' option.
#
# Revision 1.11  2000/06/27 15:11:28  sridhar
# Finally, a foreach which doesn't need an array and can loop over start
# and end indices.
#
# Revision 1.10  2000/06/21 16:07:20  sridhar
# 1. Using isa() to check reference instead of ref()
# 2. verbose level > 1 means more detailed logging
#
# Revision 1.9  2000/06/16 14:51:07  sridhar
# Combined two conditions into one in quest for speed.
#
# Revision 1.8  2000/06/07 18:39:15  sridhar
# Yuck! fixed a compile error
#
# Revision 1.7  2000/06/07 15:38:47  sridhar
# *** empty log message ***
#
# Revision 1.6  2000/06/06 19:55:02  sridhar
# 1. More log messages
# 2. Check reference of variable using isa() instead of ref()
# 3. Looping over array of ordinary elements now supported
#
# Revision 1.5  2000/05/31 14:46:32  sridhar
# Rigorous version numbering and usage
#
# Revision 1.4  2000/04/24 12:49:33  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.3  2000/04/13 15:21:07  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.2  2000/03/09 14:21:22  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.1  2000/03/02 14:57:26  sridhar
# Moved WithBody/Foreach.pm to WithBody/Loop/Foreach.pm. Changed Class
# heirarchy accordingly. Loop.pm overrides `parent' method to force own
# finalize_children function
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:01  sridhar
# Added TagX
#
#

1;
