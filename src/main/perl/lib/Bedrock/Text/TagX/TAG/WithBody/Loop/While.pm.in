#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Loop::While;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.09;
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);
use TagX::Log 1.01;
use TagX::TAG::WithBody::Loop 1.03;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub closure
{
    '/while';
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('define-index=s'	=> undef,
		   'define-var=s'	=> '_',
		   'start-index=i'	=> undef,
		   'end-index=i'	=> undef,
		   'max-items=i'	=> undef);
    my @argv = $self->parse_options (\%options, @context);
    my $verbose = $self->verbose;

    if ( $verbose ) {
	my ($key, $value);
	my $str = "$self: Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments are (@argv)";
	&log_message( $self, $str );
    }

    if ( @argv != 1 ) {
	&log_message( $self, "Invalid number of argument(@{[scalar(@argv)]}):\n\t(@argv)");
	return;
    } elsif ( ref($argv[0]) ) {
	&log_message( $self, "Invalid type of argument (must be a string):\n\t(@argv)");
	return;
    }

    unless ( exists $self->{'__term'} ) {
	local($_) = $argv[0];
	$self->{'__term'} = &TagX::Parser::parse_stm;
	&log_message( $self, "[$argv[0]] parsed to $self->{'__term'}" )
	    if $verbose;
    }
    my $term = $self->{'__term'};
    my @children = @{$self->{'subobjs'}};

    my $start = defined( $options{'start-index'} ) ? $options{'start-index'} : 0;

    #
    # Defining these things as options override defaults
    #
    my $end;
    if ( defined( $options{'end-index'} ) ) {
	$end = $options{'end-index'};
    } elsif ( defined( $options{'max-items'} ) ) {
	my $nItems = $options{'max-items'};
	$end = $start + $nItems - 1;
    }
    my $define_index = $options{'define-index'} if exists $options{'define-index'};
    my $define_var = $options{'define-var'} if exists $options{'define-var'};
    &log_message( $self, "begin loop with term = [$argv[0]], start = [$start], end = [$end], define-index = [$define_index], define-var = [$define_var]" ) if $verbose;

    for (my $i = 0 ;
	 ;
	 $i++ ) {
	last if defined( $end ) and $i > $end;
	my $data = defined( $define_index ) ? $term->eval( {$define_index => $i}, @context )
	    : $term->eval( @context );
	&log_message( $self, "Loop $i: Condition [$argv[0]] evaluated to [$data] ("
		      . (defined( $data ) ? "defined" : "undefined") . ")" ) if $verbose;
	last unless defined( $data ) and $data;
	next if $i < $start;

	my $loop_data = {};
	$loop_data->{$define_var} = $data if defined( $define_var );
	$loop_data->{$define_index} = $i if defined( $define_index );
	if ( defined($verbose) and $verbose > 1 ) {
	    my $str = "Loop $i >>\n";
	    for my $key (sort keys %{$loop_data}) {
		$str .= "    $key => $loop_data->{$key}\n";
	    }
	    &log_message( $self, $str );
	}

	$self->{'finalize_children'}->($self->{'subobjs'}, $tx, $loop_data, @context );
    }
}

=pod

=head1 TAG while

=head1 PURPOSE

Iterate over a block while a condition is true.

=head1 SYNTAX

  <while [--define-var="name"]
         [--define-index="name"]
         [--start-index="integer"]
         [--end-index="integer"]
         [--max-items="integer"] "term" >
  ...
  </while>

=head1 OPTIONS

=over 5

=item --define-var

Variable to hold the term value that is evaluated each time through the loop (default = "_")

=item --define-index

Variable name to hold index value

=item --start-index

Starting index value for loop

=item --end-index

Ending index value for loop

=item --max-items

Maximum number of iterations

=item "term"

An expression that when evaluated to false will terminate the loop

=back

=head1 EXAMPLE

  <while "$array.shift()">
    <var $_>
  </while>

=cut


#
# Name of Release: $Name$
# $Log$
# Revision 1.10  2008/12/03 14:01:21  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.9  2008/12/02 15:20:16  rlauer
# Added pod for tag reference
#
# Revision 1.8  2008/12/02 15:19:40  rlauer
# Added pod for tag reference
#
# Revision 1.7  2008/12/02 15:18:31  rlauer
# Added pod for tag reference
#
# Revision 1.6  2008/12/02 15:00:57  rlauer
# Added pod for tag reference
#
# Revision 1.5  2001/02/14 15:35:51  sridhar
# Added copyright and GPL notice
#
# Revision 1.4  2000/12/15 14:30:26  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.3  2000/11/16 19:05:49  sridhar
# Using function stored under `finalize-children' which is set by the
# parent object.
#
# Revision 1.2  2000/09/12 16:41:08  sridhar
# 1. Default name for var is $_
# 2. Condition for loop should evaluate to false for termination
# (earlier it was undef)
#
# Revision 1.1  2000/07/20 20:09:58  sridhar
# Adding While.pm -- basically implements logic for <while>.
#
#

1;
