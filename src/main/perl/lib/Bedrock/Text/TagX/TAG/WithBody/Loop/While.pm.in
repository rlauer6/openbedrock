#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::WithBody::Loop::While;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);

use TagX::Log;
use TagX::TAG::WithBody::Loop;
use Data::Dumper;

@ISA = qw (TagX::TAG::WithBody::Loop);

sub closure
{
    '/while';
}

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('define-index=s'	=> undef,
		   'define-var=s'	=> '_',
		   'start-index=i'	=> undef,
		   'end-index=i'	=> undef,
		   'max-items=i'	=> undef,
		  );

    my @argv = $self->parse_options (\%options, @context);

    my $verbose = $self->verbose;
    $self->dump_options( \%options ) if $verbose;

    # <while "expression"> : expression must be non-null
    # <while ref --op term> 
    # <while handle>       : valid
    # <while 0 >           : valid
    # <while "" >          : invalid
    if ( @argv > 1 ) {
      $self->{'__term'} = TagX::Expr->new( @argv );
    }
    else {
      if ( ref($argv[0]) =~/(string|var)/i) {
	$argv[0] = $argv[0]->eval( @context );
	&log_message(undef, "eval: $argv[0]");
      }
      # so we either parse the expression to get something that can be eval'd, say
      # a TagX::Term or TagX::Expr or we have a (hopefully) a handle
      unless ( ref($argv[0]) || exists $self->{'__term'} || ! @argv || ! length($argv[0]) ) {
	# force the argument to <while> to be an expression
	local($_) = ($argv[0]=~/^\s*\(/) ? $argv[0] : "(" . $argv[0] . ")";
	
	$self->{'__term'} = &TagX::Parser::parse_stm;
	&log_message( $self, "[$argv[0]] parsed to $self->{'__term'}" )
	  if $verbose;
      }
      else {
	$self->{'__term'} = $argv[0];
	&log_message( $self, "__term set to [$argv[0]]" )
	if $verbose;
      }
    }

    my $term = $self->{'__term'};
    if ( $term && $term->can('verbose') ) {
	$term->verbose( $verbose );
      }

    my @children = @{$self->{'subobjs'}};
    
    my $start = defined( $options{'start-index'} ) ? $options{'start-index'} : 0;
    
    #
    # Defining these things as options override defaults
    #
    my $end;
    if ( defined( $options{'end-index'} ) ) {
      $end = $options{'end-index'};
    } elsif ( defined( $options{'max-items'} ) ) {
      my $nItems = $options{'max-items'};
	$end = $start + $nItems - 1;
    }
    my $define_index = $options{'define-index'} if exists $options{'define-index'};
    my $define_var = $options{'define-var'} if exists $options{'define-var'};

    &log_message( $self, 
		  "begin loop with term = [$argv[0]], " . 
		  "start = [$start], " .
		  "end = [$end], " .
		  "define-index = [$define_index], " . 
		  "define-var = [$define_var]" )
      if $verbose;

    unless (defined $end || defined $term) {
      die "usage: <while> requires either a handle, an expression to evaluate, --max-items, or --end-index\n";
    }

    for (my $i = 0 ;; $i++ ) {
      last if defined( $end ) and $i > $end;
      my $data;

      &log_message($self, "term: ". Bedrock::Dump::compact([$term])) 
	if $verbose;

      # if there is no term to evaluate then don't
      if ( $term ) {

	if ( $term->can('eval') ) {
	  $data = defined ( $define_index ) ? $term->eval( {$define_index => $i}, @context ) : $term->eval( @context );
	}
	elsif ( -r $term || $term->can('getline') ) {
          &log_message(undef, "..reading from handle")
	    if $verbose;
	  $data = <$term>;
	}

	&log_message( $self, 
		      sprintf("Loop %d : Condition [%s] evaluated to [%s] (%s)",
			      $i, 
			      $argv[0], 
			      $data, 
			      defined( $data ) ? "defined" : "undefined"
			     )
		    )
	  if $verbose;

	last unless defined( $data ) and $data;
      }

      next if $i < $start;
      
      my $loop_data = {};

      # make the while var the value of the expression or the value of the iterator
      $loop_data->{$define_var} = (defined $term) ? $data : $i;

      $loop_data->{$define_index} = $i if defined( $define_index );

      # verbose debugging
      if ( defined($verbose) and $verbose > 1 ) {
	my $str = "Loop $i >>\n";
	for my $key (sort keys %{$loop_data}) {
	  $str .= "    $key => $loop_data->{$key}\n";
	}
	&log_message( $self, $str );
      }
      
      $self->{'finalize_children'}->($self->{'subobjs'}, $tx, $loop_data, @context );
    }
}

=pod

=head1 TAG - C<E<lt>whileE<gt>>

=head1 PURPOSE

Iterate over a block while a condition is true.

=head1 SYNTAX

  <while [options] [expression|handle]>
  </while>

=head1 DESCRIPTION

The C<E<lt>whileE<gt>> tag will iterate over an expression until it is
evaluated to be false.  It can also iterate over a handle until
end-of-file.

=head1 OPTIONS

 --define-var="name"
 --define-index="name"
 --start-index="integer"
 --end-index="integer"
 --max-items="integer"

=over 5

=item --define-var

Variable to hold the expression's value that is evaluated each time
through the loop (default = "_").  Note that if no expression is given
the loop variable will take on the value of the iterator.

=item --define-index

Variable name to hold index value

=item --start-index

Starting index value for loop

=item --end-index

Ending index value for loop

=item --max-items

Maximum number of iterations

=item "expression"

A Bedrock expression that will be evaluated to a true or false value.

=item handle

A handle object that at least implements the C<eof()> and C<getline()>
methods (for example the C<FileIO> plugin).

 <plugin:FileIO "/usr/lib/bedrock/config/tagx.xml">
 <while $FileIO.handle><var $_></while>

=back

=head1 EXAMPLE

  <while "$array.shift()">
    <var $_>
  </while>

  <while "$array.length() --gt 5">
    <var $array.shift()>
  </while>

=head1 NOTE

The C<E<lt>whileE<gt>> tag straddles the line between page assembly
and programming. Abuse of this tag will land you on the programming
side.  There are usually better ways to accomplish the task than to
resort to using this tag, however it may find some benign uses.

=head1 SEE OTHER

C<E<lt>foreachE<gt>>

=cut


#
# Name of Release: $Name$
# $Log$
# Revision 1.20  2011/09/09 20:11:25  eutl420
# - log message if verbose only
#
# Revision 1.19  2011/09/09 19:58:13  eutl420
# - the new while tag is here! it looks and smells like <if>, to get there we made a host of changes regarding
#   the way the arguments are processed.  Now the tag arguments (options) are processed in a similar way as
#   <if>, i.e. all options are arguments, except we modified TAG class so that the eval_args method would not
#   evaluate arguments if the TAG isa while tag.
#
#   This means instead of seeing the evaluated arguments we see Bedrock classes like Terms and Vars.
#   We then convert them to an expression since that's essentially what they should be. If there was only 1 argument,
#   it could way we allow it to be a file handle or it may be an old school expression. If it's not a handle, then we
#   put parens around the argument anyway to force the statement parser to create an expression.
#   The expression is evaluated or we read from the handle, each time through the loop. It seems to work.
#
# Revision 1.18  2011/09/04 21:49:14  eutl420
# - turn verbosity on for object if it can('verbose')
#
# Revision 1.17  2011/07/17 16:56:09  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.16  2011/07/12 19:10:37  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.15  2010/12/12 16:23:02  eutl420
# - use dump_options
# - remove use of Data::Dumper, use Bedrock::Dump
#
# Revision 1.14  2010/11/29 15:57:55  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.13  2010/11/17 02:27:41  rlauer
# - pod cleanup
#
# Revision 1.12  2010/11/14 21:09:53  rlauer
# - allow 0 arguments (naked while)
# - if no arguments, then insist on an end-index either as a result
#   of --max-items or --end-index
# - also some formatting changes to hopefully make this mess a bit more
#   readable
#
# Revision 1.11  2009/12/31 12:43:45  rlauer
# better explanation of <while>
#
# Revision 1.10  2008/12/03 14:01:21  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.9  2008/12/02 15:20:16  rlauer
# Added pod for tag reference
#
# Revision 1.8  2008/12/02 15:19:40  rlauer
# Added pod for tag reference
#
# Revision 1.7  2008/12/02 15:18:31  rlauer
# Added pod for tag reference
#
# Revision 1.6  2008/12/02 15:00:57  rlauer
# Added pod for tag reference
#
# Revision 1.5  2001/02/14 15:35:51  sridhar
# Added copyright and GPL notice
#
# Revision 1.4  2000/12/15 14:30:26  sridhar
# Subclass overrides method `closure()' to report the correct way for
# closing the tag.
#
# Revision 1.3  2000/11/16 19:05:49  sridhar
# Using function stored under `finalize-children' which is set by the
# parent object.
#
# Revision 1.2  2000/09/12 16:41:08  sridhar
# 1. Default name for var is $_
# 2. Condition for loop should evaluate to false for termination
# (earlier it was undef)
#
# Revision 1.1  2000/07/20 20:09:58  sridhar
# Adding While.pm -- basically implements logic for <while>.
#
#

1;
