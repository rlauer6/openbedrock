package TagX::TAG::WithBody::Loop::While;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Constants qw(:chars);
use Scalar::Util qw(reftype);

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw( Exporter TagX::TAG::WithBody::Loop);

########################################################################
sub closure {
########################################################################
  return '/while';
}

########################################################################
sub finalize {
########################################################################
  my ( $self, $tx, @context ) = @_;

  my %options = (
    'define-index=s' => undef,
    'define-var=s'   => $UNDERSCORE,
    'start-index=i'  => undef,
    'end-index=i'    => undef,
    'max-items=i'    => undef,
  );

  my @argv = $self->parse_options( \%options, @context );

  my $verbose = $self->verbose;
  $self->dump_options( \%options );

  # <while "expression"> : expression must be non-null
  # <while ref --op term>
  # <while handle>       : valid
  # <while 0 >           : valid
  # <while "" >          : invalid
  if ( @argv > 1 ) {
    $self->{'__term'} = TagX::Expr->new(@argv);
  }
  else {
    $self->get_logger->debug( 'ref: ' . ref $argv[0] );

    if ( ref( $argv[0] ) =~ /string|var/xsmi ) {
      $argv[0] = $argv[0]->eval(@context);

      $self->get_logger->debug("eval: $argv[0]");
    }

    # so we either parse the expression to get something that can be eval'd, say
    # a TagX::Term or TagX::Expr or we have a (hopefully) a handle
    #    unless ( ref( $argv[0] )
    #      || exists $self->{'__term'}
    #      || !@argv
    #      || !length $argv[0] ) {
    if ( !ref $argv[0]
      && !exists $self->{'__term'}
      && @argv
      && length $argv[0] ) {

      # force the argument to <while> to be an expression
      local ($_) = ( $argv[0] =~ /^\s*[(]/xsm ) ? $argv[0] : "($argv[0])";

      $self->{'__term'} = TagX::Parser::parse_stm;

      $self->get_logger->debug("[$argv[0]] parsed to $self->{'__term'}");
    }
    else {
      $self->{'__term'} = $argv[0];

      $self->get_logger->debug("__term set to [$argv[0]]");
    }
  }

  my $term = $self->{'__term'};

  if ( $term && $term->can('verbose') ) {
    $term->verbose($verbose);
  }

  my @children = @{ $self->{'subobjs'} };

  my $start
    = defined( $options{'start-index'} ) ? $options{'start-index'} : 0;

  #
  # Defining these things as options override defaults
  #
  my $end;
  if ( defined $options{'end-index'} ) {
    $end = $options{'end-index'};
  }
  elsif ( defined $options{'max-items'} ) {
    my $nItems = $options{'max-items'};
    $end = $start + $nItems - 1;
  }

  my $define_index = $options{'define-index'};

  my $define_var = $options{'define-var'};

  $self->get_logger->debug(
    sub {
      sprintf
        'begin loop with term = [%s], start = [%s], end = [%s], define-index = [%s], define-var = [%s]',
        $argv[0], $start,
        map { defined $_ ? $_ : 'undef' } ( $end, $define_index, $define_var );
    }
  );

  if ( !defined $end && !defined $term ) {
    die "usage: <while> requires either a handle, an expression to evaluate, --max-items, or --end-index\n";
  }

  for ( my $i = 0;; $i++ ) {
    last if defined $end && $i > $end;

    my $data;

    $self->get_logger->debug( sub { 'term: ' . Bedrock::Dump::compact( [$term] ) } );

    # if there is no term to evaluate then don't
    if ($term) {

      if ( $term->can('eval') ) {
        $data
          = defined $define_index ? $term->eval( { $define_index => $i }, @context ) : $term->eval(@context);
        if ( reftype($data) eq 'CODE' ) {
          $data = $data->($tx);
        }
      }
      elsif ( ref $term && -r fileno $term || $term->can('getline') ) {
        $self->get_logger->debug('..reading from handle');
        $data = <$term>;
      }

      $self->get_logger->debug(
        sub {
          return sprintf 'Loop %d : Condition [%s] evaluated to [%s]',
            $i, $argv[0], defined($data) ? 'defined' : 'undefined';
        }
      );

      last if !defined $data || !$data;
    }

    next if $i < $start;

    my $loop_data = {};

    # make the while var the value of the expression or the value of the iterator
    $loop_data->{$define_var} = ( defined $term ) ? $data : $i;

    if ( defined $define_index ) {
      $loop_data->{$define_index} = $i;
    }

    $self->get_logger->debug(
      sub {
        my @message = sprintf 'Loop %s >>', $i;

        push @message, map { sprintf '    %s => %s', $_, $loop_data->{$_} }
          sort keys %{$loop_data};

        return join "\n", @message;
      }
    );

    $self->{'finalize_children'}->( $self->{'subobjs'}, $tx, $loop_data, @context );
  }

  return;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 TAG - C<E<lt>whileE<gt>>

=head1 PURPOSE

Iterate over a block while a condition is true.

=head1 SYNTAX

  <while [options] [expression|handle]>
  </while>

=head1 DESCRIPTION

The C<E<lt>whileE<gt>> tag will iterate over a block until some
expression is evaluated to be false.  It can also iterate over a
handle until end-of-file.

=head1 OPTIONS

 --define-var="name"
 --define-index="name"
 --start-index="integer"
 --end-index="integer"
 --max-items="integer"

=over 5

=item --define-var

Variable to hold the expressionE<039>s value that is evaluated each time
through the loop (default = "_").  Note that if no expression is given
the loop variable will take on the value of the iterator.

=item --define-index

Variable name to hold index value

=item --start-index

Starting index value for loop

=item --end-index

Ending index value for loop

=item --max-items

Maximum number of iterations

=item "expression"

A Bedrock expression that will be evaluated to a true or false value.

=item handle

A handle object that at least implements the C<eof()> and C<getline()>
methods (for example the C<FileIO> plugin).

 <plugin:FileIO "@configdir@/tagx.xml">
 <while $FileIO.handle><var $_></while>

=back

=head1 EXAMPLE

  <while "$array.shift()">
    <var $_>
  </while>

  <while "$array.length() --gt 5">
    <var $array.shift()>
  </while>

=head1 NOTE

The C<E<lt>whileE<gt>> tag straddles the line between page assembly
and programming. Abuse of this tag will land you on the programming
side. There are usually better ways to accomplish the task than to
resort to using this tag.

=head1 SEE OTHER

C<E<lt>foreachE<gt>>

=AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=cut
