#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Term::JSON;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use TagX::Term::String;
use Bedrock::BedrockJSON;

@ISA = qw (TagX::Term::String);

sub eval {
  my $self = shift;

  Bedrock::JSON::decode $$self;
}


package TagX::Parser;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

use Carp;
use TagX::Term::Var;
use TagX::Term::String;
use TagX::Expr;
use TagX::Func;
use Data::Dumper;

my $Verbose;

#
# Arg separators are single-quote, double quote, ..
# Note the following ascii codes
# " (double-quote)	=> \x22
# ' (single-quote)	=> \x27
# ( (open-paren)	=> \x28
# ) (close-paren)	=> \x29
# [ (open-bracket)	=> \x5b
# ] (close-bracket)	=> \x5d
# { (open-brace)	=> \x7b
# } (close-brace)	=> \x7d
# : (colon)		=> \x3a
my $_delimiters = "([\x22\x27]|qq?[\x28\x5b\x7b\x3a])";
my %_delimiter_end = ( "\x22" => "\x22",
                       "\x27" => "\x27",
                       "q("   => ")",
                       "q["   => "]",
                       "q{"   => "}",
                       "q:"   => ":",
                       "qq("  => ")",
                       "qq["  => "]",
                       "qq{"  => "}",
                       "qq:"  => ":"
                     );

sub parse_stm {
  s/^\s*//;

  /^([\[\{](.*?)[\]\}])\s*$/ && do {
    my $val = TagX::Term::JSON->new( $1 );
    $_ = undef;
    return $val;
  };

  if (s/^\$//) {

    # Could be a var or a func

    # first component must be a valid name
    my $name;
    if (s/^([a-z_]\w*|@)//i) {
      $name = "\x24" . $1;
    }
    else {
      die "Syntax error at `$_'\n";
    }

    while (length) {

      # end of name if not followed by a period
      last unless s/^\.//;

      # check for valid name or array ref
      if (s/^([a-z_]\w*|\x5b-?\d+\x5d|\x5b\$[^\x5d]+\x5d)//i) {
        $name .= ".$1";
        next;
      }

      # croak due to error
      die "Syntax error at `$_'\n";
    }

    # if followed by "(", it is a func invocation
    if ( length && s/^\x28// ) {
      my @args;
	    
      /^\s*([\[\{](.*?)[\]\}])\s*\)\s*$/ && do {
	push @args, TagX::Term::JSON->new( $1 );
	$_ = undef;
      };

      while (length) {
        last if s/^\s*\x29//;
        push @args, &parse_stm;
        next if s/^\s*,//;
        last if s/^\s*\x29//;
        die "Syntax error following function argument at `$_'\n";
      }
      die "Illegal method invocation\n" unless $name =~ s/\.([^.]+)$//;
      my $func = $1;
      return TagX::Func->new( TagX::Term::Var->new($name), $func, @args );
    }
    else {
      return TagX::Term::Var->new( $name, $Verbose );
    }
  }
  elsif (s/^$_delimiters//oi) {

    # is a string
    die "Could not find string terminator: $_\n"
    unless s/^([^\Q$_delimiter_end{$1}\E]*)\Q$_delimiter_end{$1}\E//;
    return TagX::Term::String->new($1);
  }
  elsif (s/^(-?(\d+\.\d+|\d+\.|\.\d+|\d+))(?=\W)//) {

    # is a number
    return TagX::Term::String->new($1);
  }
  elsif (s/^\x28//) {

    /^\s*([\[\{](.*?)[\]\}])\s*\)\s*$/ && do {
      my $val = TagX::Term::JSON->new( $1 );
      $_ = undef;
      return $val;
    };

    # is an expr
    my @expr;

    while (length) {
      s/^\s+// and next;

      if (/^\x28/) {
        push @expr, &parse_stm;
        next;
      }

      if (/^\$/) {
        push @expr, &parse_stm;
        next;
      }

      if (
/^(--(not|defined|exists|eq|file|ne|gt|ge|lt|le|re|ref|or|and|array|scalar|object)|[\+\.\-\*\/])(?=\W)/i
      )
      {
        s///;
        push @expr, lc($1);
        next;
      }

      if (/^$_delimiters/oi) {
        push @expr, &parse_stm;
        next;
      }

      if (/^-?[\d.]+/) {
        push @expr, &parse_stm;
        next;
      }

      if (/^\x29/) {
        s///;
        return TagX::Expr->new(@expr);
      }

      die "Invalid token encountered: $_\n";
    }
    die "Expression not properly terminated -- probably missing a `)'\n";
  }
  elsif (s/^([^\s\x28\x29\x2c]+)//) {
    return TagX::Term::String->new($1);
  }
  else {
    die "Token `$_' illegal here.\n";
  }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.21  2013/01/21 00:08:03  rlauer
# - support for --file operator
#
# Revision 1.20  2013/01/03 01:29:13  rlauer
# - allow JSON strings as expressions
#
# Revision 1.19  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.18  2011/09/05 16:47:19  eutl420
# - send $Verbose flag to Var object
#
# Revision 1.17  2011/08/31 02:46:51  eutl420
# - allow --defined
#
# Revision 1.16  2011/08/22 23:33:18  eutl420
# - allow negative indexing
#
# Revision 1.15  2011/08/18 21:56:17  eutl420
# src/main/perl/lib/Bedrock/Text/TagX/Expr.pm.in
#
# Revision 1.14  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.13  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.12  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.11  2008/12/11 13:30:40  rlauer
# support for new unary operartors and ref
#
# Revision 1.10  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.9  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.8  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.7  2000/11/17 14:03:29  sridhar
# Had a bug in string parsing: was parsing successfully even though
# there was no string terminator.
#
# Revision 1.6  2000/11/16 19:23:15  sridhar
# 1. Cleaner error handling.
# 2. Fixed error messages so exceptions don't have perl source code
# locations in them.
#
# Revision 1.5  2000/08/17 18:14:31  sridhar
# Implementation of $@ was broken due to inconsistent handling of $@ as
# compared to $joe.
#
# Revision 1.4  2000/07/20 20:15:32  sridhar
# Fixed versions being used.
#
# Revision 1.3  2000/06/06 20:06:18  sridhar
# Using correct version of Func.pm
#
# Revision 1.2  2000/06/06 20:05:33  sridhar
# 1. $@ was not being recognized as a variable -- fixed.
# 2. Variable index in array supported
# 3. Bug fix for recognizing object methods with no params
#
# Revision 1.1  2000/06/01 18:42:20  sridhar
# Brand new package for parsing expression, statements, etc.
#
#
