#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Term::Anon;
# implements a class for handling JSON or Perl data structures
# represented as strings in things like tag arguments or arguments to
# method calls:
#
#  <null:foo { 'x', 1, 'y', 2} >
#
#  <null:foo { x =\> 1 ,  y =\> 2 } >
#
#  <null:foo [ 1,2,3,4 ] >
#
#  <null $foo.method({ 'x', 1, 'y', 2})>
#
#  <null:foo { x : 1, y : 2, z : "test"}>
#
#  etc, etc, etc
#

use strict;
use warnings;

use TagX::Term::String;
use Data::Dumper;
use English qw{-no_match_vars};

use parent qw (TagX::Term::String);

########################################################################
sub eval {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  my $logger = $self->get_logger( ref $self );

  my $term = ${$self};

  $logger->debug("evaluating $term");

  # see if we recognize the data structure as JSON or Perl...at this
  # point in the parsing we are being asked to evaluate the object so
  # it has already been determined that that object is an 'anonymous'
  # something by virtue of its form -> {} or [].

  # JSON?
  my $val = eval { Bedrock::JSON::decode ${$self}; };

  # caveat emptor: as you can see if the JSON decode fails, we then
  # move on to try to evaluate the structure as Perl data structure,
  # but what if the string WAS in fact meant to be a JSON string and
  # the user just screwed up the JSON syntax????
  return $val if !$EVAL_ERROR;

  my $err = $EVAL_ERROR;

  # Perl data structure?
  use Safe;

  my $s = Safe->new('bedrock');

  # add Bedrock variables to namespace from context frames, converting
  # any Bedrock::Array or Bedrock::Hash objects into simple hash or
  # array references.  We do this because otherwise we would have to
  # allow method invocations in our evaluation namespace and we might
  # not want to do that.
  foreach my $ctx (@args) {
    map { ${ $s->varglob($_) } = devolve( $ctx->{$_} ); } keys %{$ctx};
  }

  # limit what can be evaluated to bare minimum in order to compile
  # anonymous hash and array reference creation.
  #
  # The list of permitted op codes passed to `permit_only()' was
  # empirically derived by trial and error.
  #
  # see: perl -MOpcode=opdump -e opdump | less
  #
  # It is true that there may be ways of attempting to execute code
  # that is not covered in those op codes...method invocations on
  # objects comes to mind...the question has to be raised
  # though..."How much do we want a web developer to be able to
  # evaluate? Do we want to recreate PHP?"

  $s->permit_only(
    qw/aelem helem padany lineseq const rv2hv leaveloop rv2av rv2sv pushmark list anonlist anonhash leaveeval/
  );

  $val = $s->reval($term);

  # we have to decided whether to display the JSON error or the Perl eval error (log both)
  warn "could not parse statement: $term\n$EVAL_ERROR\$err\n"
    if $EVAL_ERROR;

  die "$err\n"
    if $EVAL_ERROR;

  return $val;
}

# devolve object into hash or array references if strict (no method
# invocations)
########################################################################
sub devolve {
########################################################################
  my ($obj) = @_;

  return ( ref($obj) =~ /Bedrock::(Hash|Array)/ ) ? $obj->devolve : $obj;
}

########################################################################
package TagX::Parser;

use strict;
use warnings;

use parent qw{Exporter};

use Carp;
use TagX::Term::Var;
use TagX::Term::String;
use TagX::Expr;
use TagX::Func;
use Data::Dumper;
use Bedrock::Constants qw{:chars};

use Role::Tiny::With;
with 'Bedrock::Logger';

my $Verbose;

#
# Arg separators are single-quote, double quote, ..
# Note the following ascii codes
# " (double-quote)	=> \x22
# ' (single-quote)	=> \x27
# ( (open-paren)	=> \x28
# ) (close-paren)	=> \x29
# [ (open-bracket)	=> \x5b
# ] (close-bracket)	=> \x5d
# { (open-brace)	=> \x7b
# } (close-brace)	=> \x7d
# : (colon)		=> \x3a
my $_delimiters    = "([\x22\x27]|qq?[\x28\x5b\x7b\x3a])";
my %_delimiter_end = (
  "\x22" => "\x22",
  "\x27" => "\x27",
  "q("   => ")",
  "q["   => "]",
  "q{"   => "}",
  "q:"   => ":",
  "qq("  => ")",
  "qq["  => "]",
  "qq{"  => "}",
  "qq:"  => ":"
);

########################################################################
sub parse_stm {
########################################################################

  # we'll revisit enabling perlcritic when we get better unit testing...

  ## no critic

  s/^\s*//;

  /^([\[{](.*?)[\]}])\s*$/ && do {

    my $val = TagX::Term::Anon->new($1);

    $_ = undef;
    return $val;
  };

  if (s/^[\$]//) {

    # Could be a var or a func

    # first component must be a valid name
    my $name;
    if (s/^([[:lower:]_]\w*|@)//i) {
      $name = $DOLLAR_SIGN . $1;
    }
    else {
      die "Syntax error at `$_'\n";
    }

    while (length) {

      # end of name if not followed by a period
      last if !s/^[.]//;

      # check for valid name or array ref
      if (s/^([[:lower:]_]\w*|\x5b-?\d+\x5d|\x5b\$[^\x5d]+\x5d)//i) {
        $name .= ".$1";
        next;
      }

      # croak due to error
      die "Syntax error at `$_'\n";
    }

    # if followed by "(", it is a func invocation
    if ( length && s/^\x28// ) {
      my @args;

      /^\s*([\[\{](.*?)[\]\}])\s*\)\s*$/ && do {
        push @args, TagX::Term::Anon->new($1);
        $_ = undef;
      };

      while (length) {
        last if s/^\s*\x29//;
        push @args, &parse_stm;
        next if s/^\s*,//;
        last if s/^\s*\x29//;
        die "Syntax error following function argument at `$_'\n";
      }

      if ( $name =~ s/[.]([^.]+)$// ) {
        my $func = $1;
        return TagX::Func->new( TagX::Term::Var->new($name), $func, @args );
      }

      die "Illegal method invocation\n";
    }
    else {
      return TagX::Term::Var->new( $name, $Verbose );
    }
  }
  # ref - .i.e. Given: <null:bar test> <null:foo bar> <var @foo> we get "test"
  elsif (s/^[*]//) {

    my $name;

    if (s/^([[:lower:]_]\w*)$//i) {
      $name = $ASTERISK . $1;

      return TagX::Term::Var->new( $name, $Verbose );
    }
    else {
      die "Syntax error at `*$_' - dereference using scalars.\n";
    }
  }
  # string?
  elsif (s/^$_delimiters//oi) {

    # is a string
    if (s/^([^\Q$_delimiter_end{$1}\E]*)\Q$_delimiter_end{$1}\E//x) {
      return TagX::Term::String->new($1);
    }

    die "Could not find string terminator: $_\n";
  }
  # number ?
  elsif (s/^(-?(\d+[.]\d+|\d+[.]|[.]\d+|\d+))(?=\W)//x) {

    # is a number
    return TagX::Term::String->new($1);
  }
  # (
  elsif (s/^\x28//xsm) {

    if (/^\s*([\[\{](.*?)[\]\}])\s*\)\s*$/x) {
      my $val = TagX::Term::Anon->new($1);
      $_ = undef;
      return $val;
    }

    # is an expr
    my @expr;

    while (length) {
      s/^\s+//xsm and next;

      if (/^\x28/xsm) {
        push @expr, parse_stm();
        next;
      }

      if (/^[\$]/xsm) {
        push @expr, parse_stm();
        next;
      }

      if (
        /^(--(not|defined|exists|eq|file|ne|gt|ge|lt|le|re|ref|reftype|or|and|array|hash|scalar|object)|[\+.\-\*\/])(?=\W)/i
      ) {
        push @expr, lc $1;

        s///;
        next;
      }

      if (/^$_delimiters/oi) {
        push @expr, parse_stm();
        next;
      }

      if (/^-?[\d.]+/x) {
        push @expr, parse_stm();
        next;
      }

      if (/^\x29/) {
        s///;
        return TagX::Expr->new(@expr);
      }

      # could be a file test operator
      if (/^\-[rwxoRWXOezsfdlpSbctugkTBMAC]\s+/) {
        push @expr, parse_stm();
        next;
      }

      die "Invalid token encountered: $_\n";
    }

    die "Expression not properly terminated -- probably missing a `)'\n";
  }
  # bareword but not (),<>
  elsif (s/^([^\s\x28\x29\x2c\x3c\x3e]+)//) {
    return TagX::Term::String->new($1);
  }
  else {
    die "Token `$_' illegal here.\n";
  }
}

1;

__END__
