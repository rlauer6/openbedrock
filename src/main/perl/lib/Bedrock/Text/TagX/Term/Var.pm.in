#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::TAG::NoBody::Var;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = 1.13;
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use Text::URLEncode 1.01;
use TagX::TAG::NoBody 1.03;

@ISA = qw (TagX::TAG::NoBody);

sub finalize
{
    my ($self, $tx, @context) = @_;

    my %options = ('name=s'	=> undef,
		   'urlencode'	=> undef,
		   'htmlencode'	=> undef,
		   'format=s'	=> undef,
		   'decode=s'	=> undef,
		   'toggle=s'	=> undef,
		   'default=s'	=> undef);
    my @argv = $self->parse_options (\%options, @context);

    my $verbose = $self->verbose;
    if ( $verbose ) {
	my ($key, $value);
	my $str = "Options are\n";
	while (($key, $value) = each %options) {
	    $str .= "\t$key .. ($value)\n";
	}
	$str .= "Arguments ..(@argv)";
	&log_message( $self, $str );
    }

    my $value;
    if ( exists $options{'name'} ) {
	$value = $options{'name'};
    } elsif ( @argv == 0 ) {
	&log_message( $self, "No variable specified" );
	return;
    } else {
	$value = shift @argv;
    }

    &log_message( $self, "Value = <$value>" ) if $verbose;

    unless ( defined ( $value ) ) {
	&log_message ( $self, "Value not defined, default is <$options{'default'}>" )
	    if $verbose;
	$value = $options{'default'} if exists $options{'default'};
    }
    return unless defined( $value );

    if ( exists $options{'urlencode'} and $options{'urlencode'} > 0 ) {
	&Text::URLEncode::encode( $value );
	&log_message ( $self, "URLEncoded to <$value>" ) if $verbose;
    }

    if ( $options{'htmlencode'} ) {
	$value =~ s/\x26/&amp;/g;
	$value =~ s/\x3c/&lt;/g;
	$value =~ s/\x3e/&gt;/g;
	&log_message ( $self, "HTMLEncoded to <$value>" ) if $verbose;
    }

    if ( defined($options{'format'}) ) {
	$value = sprintf $options{'format'}, $value;
    }

    if ( defined($options{'decode'}) ) {
        my @list = split /\s*,\s*/, $options{'decode'};
	my $default_value = pop @list;
        &log_message($self, join("|", @list));
        &log_message($self, $default_value);
        &log_message($self,  $value);
        my %decode_list = @list;
	$value = (exists $decode_list{$value}) ? $decode_list{$value} : $default_value;
    }

    if ( defined($options{'toggle'}) ) {
        my ($a,$b) = split /\s*,\s*/, $options{'toggle'};
	$value = ($value eq $a) ? $b : $a;
    }

    $tx->out_handle->print($value);
}

=pod

=head1 TAG var

=head1 PURPOSE

Include the value of a Bedrock expression.

=head1 SYNTAX

  <var $session.username>

=head1 OPTIONS

=over 5

=item --urlencode

=item --htmlencode

=item --format=s

=item --default=s

=head1 EXAMPLE

  <var --default="Please enter a value" $input.fname>
  <var --format="%5.2d" $input.cost>

=back

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.6  2009/12/08 21:20:52  rlauer
# decode/toggle methods
#
# Revision 1.14  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.13  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.12  2001/02/14 15:35:50  sridhar
# Added copyright and GPL notice
#
# Revision 1.11  2000/08/21 18:14:21  sridhar
# Added --format option to <var>
#
# Revision 1.10  2000/07/11 20:57:45  sridhar
# Added --HTMLEncode option to encode [<>&] in output.
#
# Revision 1.9  2000/05/31 15:00:21  sridhar
# Rigorous version numbering and usage
#
# Revision 1.8  2000/04/24 12:48:28  sridhar
# Using TagX::Log for logging messages
#
# Revision 1.7  2000/04/13 15:20:37  sridhar
# Using new parse_options method with support for expressions
#
# Revision 1.6  2000/03/23 20:40:47  sridhar
# Can be used as <var $name>, in addition to the yet-supported
# <var --name = "$name">.
#
# Revision 1.5  2000/03/13 15:43:33  sridhar
# More verbose message logging.
#
# Revision 1.4  2000/03/09 14:18:34  sridhar
# Using Output handle object for printing which enables buffering.
#
# Revision 1.3  2000/03/06 18:32:00  sridhar
# Replaced all ad-hoc message logging with message logging only on demand
# -- via --verbose flag specified as a tag option
#
# Revision 1.2  2000/02/08 15:37:45  sridhar
# Added support for being able to use Exporter version numbers
#
# Revision 1.1  2000/02/08 15:25:00  sridhar
# Added TagX
#
#

1;
