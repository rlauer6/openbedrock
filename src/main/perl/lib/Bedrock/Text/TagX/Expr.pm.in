#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::Expr;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use TagX::Log 1.01;
use TagX::Term 1.06;
use TagX::Term::Var 1.02;
use TagX::Term::String 1.02;

use vars qw($_delimiters %_delimiter_end);
my $Verbose;

#
# Arg separators are single-quote, double quote, ..
# Note the following ascii codes
# " (double-quote)	=> \x22
# ' (single-quote)	=> \x27
# ( (open-paren)	=> \x28
# ) (close-paren)	=> \x29
# [ (open-bracket)	=> \x5b
# ] (close-bracket)	=> \x5d
# { (open-brace)	=> \x7b
# } (close-brace)	=> \x7d
# : (colon)		=> \x3a
$_delimiters		= "([\x22\x27]|qq?[\x28\x5b\x7b\x3a])";
%_delimiter_end		= ("\x22"	=> "\x22",
			   "\x27"	=> "\x27",
			   "q("		=> ")",
			   "q["		=> "]",
			   "q{"		=> "}",
			   "q:"		=> ":",			   
			   "qq("	=> ")",
			   "qq["	=> "]",
			   "qq{"	=> "}",
			   "qq:"	=> ":");

sub new
{
    my $class = shift;
    my $self = bless [], $class;
    while ( length ) {
	s/^\s*//;

	# beginning of new expr with '('
	if ( s/^\x28\s*//oi ) {
	    push @{$self}, TagX::Expr->new;
	    next;
	}

	# end current expr with ')'
	if ( s/^\x29\s*//oi ) {
	    return $self;
	}

	# Check for operator
	if ( s/^(--(not|exists|eq|ne|gt|ge|lt|le|re|or|and)|\+)(?=\W)//oi ) {
	    push @{$self}, lc($1);
	    next;
	}

	# arg value delimited by special chars
	if ( s/^$_delimiters//oi ) {

	    # Yup, check for ending delimiter
	    if ( s/^([^\Q$_delimiter_end{$1}\E]*)\Q$_delimiter_end{$1}\E?// ) {
		push @{$self}, TagX::Term::String->new( $1 );
	    } else {
		push @{$self}, TagX::Term::String->new( $_ );
	    }
	    next;
	}

	# arg delimited by spaces
	if ( s/^([^\s\x28\x29]+)//oi ) {
	    my $arg = $1;
	    push @{$self}, ($arg =~ /^\$/o ? TagX::Term::Var->new( $arg ) : TagX::Term::String->new( $arg ));
	    next;
	}
    }
    $self;
}

sub verbose
{
    my $self = shift;
    if ( @_ ) {
	$Verbose = shift;
    }
    $Verbose;
}

sub eval
{
    my $self = shift;
    my ($l, $op, $r);

    &log_message( undef, "$self: begin eval with @{[scalar(@{$self})]} items: (@{$self})" )
	if $Verbose;

    $l = shift @{$self};
    if ( defined( $l ) && ref( $l ) ) {
	&log_message( undef, "LHS [$l] is an object" ) if $Verbose;
	if ( @{$self} > 0 ) {
	    # binary operators
	    $op = shift @{$self};
	    die "invalid operator `$op'.\n"
		unless $op =~ /^(--(eq|ne|gt|ge|lt|le|re|or|and)|\+)$/i;
	    $op = lc($1);
	    die "required arg after `$op' missing.\n" unless @{$self} > 0;
	    &log_message( undef, "op is [$op]" ) if $Verbose;
	    if ( $op eq '+' ) {
		$l->verbose(1) if $Verbose;
		my $str = $l->eval( @_ );
		$l->verbose(0) if $Verbose;
		&log_message( undef, "$l eval'ed to [$str]" ) if $Verbose;
		do {
		    $l = shift @{$self};
		    die "illegal token `$l' encountered.\n" unless ref( $l );
		    $l->verbose(1) if $Verbose;
		    $str .= $l->eval( @_ );
		    $l->verbose(0) if $Verbose;
		    if ( @{$self} > 1 ) {
			$op = shift @{$self};
			die "invalid operator `$op' -- must be `+' only.\n"
			    unless $op eq '+';
		    }
		} while ( @{$self} > 0 );
		return $str;
	    } else {
		die "extra args after RHS expr.\n" if @{$self} > 1;
		$r = shift @{$self};
		$l->verbose(1) if $Verbose;
		my $lval = $l->eval( @_ );
		$l->verbose(0) if $Verbose;
		$r->verbose(1) if $Verbose;
		my $rval = $r->eval( @_ );
		$r->verbose(0) if $Verbose;
		for ($op) {
		    $_ eq '--gt' and return $lval gt $rval;
		    $_ eq '--ge' and return $lval ge $rval;
		    $_ eq '--lt' and return $lval lt $rval;
		    $_ eq '--le' and return $lval le $rval;
		    $_ eq '--eq' and return $lval eq $rval;
		    $_ eq '--ne' and return $lval ne $rval;
		    $_ eq '--and' and return $lval && $rval;
		    $_ eq '--or' and return $lval || $rval;
		    $_ eq '--re' and return $lval =~ /$rval/ ? 1 : 0;
		}
	    }
	} else {
	    $l->verbose(1) if $Verbose;
	    my $v = $l->eval(@_);
	    $l->verbose(0) if $Verbose;
	    return $v;
	}
    } elsif ( $l && $l =~ /^--(not|exists)$/oi ) {
	&log_message( undef, "LHS [$l] is an operator" ) if $Verbose;
	# unary operators
	$op = lc( $l );
	die "no expression after unary(`$op') operator.\n" unless @{$self} > 0;
	die "extra args specified for unary(`$op') operator.\n" if @{$self} > 1;
	$l = shift @{$self};
	&log_message( undef, "Argument to unary(`op') operator is [$l]" ) if $Verbose;
	if ( $op eq '--exists' ) {
	    die "invalid argument for `--exists' operator.\n" unless isa($l, 'Term');
	    $l->verbose(1) if $Verbose;
	    my $value = $l->eval (@_);
	    $l->verbose(0) if $Verbose;
	    return defined($value) ? 1 : 0;
	} else {
	    die "invalid argument for unary(`$op') operator.\n" unless $l->can('eval');
	    $l->verbose(1) if $Verbose;
	    my $value = $l->eval (@_);
	    $l->verbose(0) if $Verbose;
	    &log_message( undef, "Argument to unary(`op') operator evaluated to [$value]" )
		if $Verbose;
	    return defined($value) && $value ? 0 : 1;
	}
    } else {
	die "unsupported unary operator: $l\n";
    }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.7  2000/05/31 14:31:52  sridhar
# Yuck! compilation error for not declaring @ISA
#
# Revision 1.6  2000/05/31 14:26:23  sridhar
# Rigorous version numbering and usage
#
# Revision 1.5  2000/05/31 13:37:06  sridhar
# 1. Removed `--verbose' option to expressions
# 2. Added a `verbose' method which is invoked with an on or off flag
# when the expression is being finalized
# 3. More verbose message logging
#
# Revision 1.4  2000/05/25 18:30:21  sridhar
# Support for concatenation of strings.
#
# Revision 1.3  2000/05/18 13:47:18  sridhar
# 1. Added possibility of debugging with --verbose option to
# expressions.
# 2. More logging to go with it.
#
# Revision 1.2  2000/05/02 12:48:33  sridhar
# Fixed invocation of Expr->new().
#
# Revision 1.1  2000/04/13 15:12:25  sridhar
# Adding TagX::Expr -- class for processing expressions
#
#
