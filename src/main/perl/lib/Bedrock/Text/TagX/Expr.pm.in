#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::Expr;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION    = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw (isa);
use TagX::Log 1.01;

my $Verbose;

sub new
{
    my $class = shift;
    my $self = bless [], $class;
    my $nargs = @_;

    # Check whether unary or binary operator
    my $op_or_lhs = shift @_;
    if ( ref( $op_or_lhs ) ) {
	my $op = shift @_;
	die "Expr->new: Invalid operator ($op)" if ref( $op );
	if ( $op eq '+' ) {
	    die "Expr->new: Invalid number of arguments($nargs) to operator `$op'"
		unless $nargs > 2;
	    @{$self} = ($op_or_lhs, $op);
	    while ( @_ > 0 ) {
		$op_or_lhs = shift @_;
		die "Expr->new: Illegal token `$op_or_lhs' encountered."
		    unless ref( $op_or_lhs );
		push @{$self}, $op_or_lhs;
		if ( @_ > 1 ) {
		    $op_or_lhs = shift @_;
		    die "Expr->new: Invalid operator `$op_or_lhs' -- must be `+' only"
			if ref( $op_or_lhs ) or $op_or_lhs ne '+';
		    push @{$self}, $op_or_lhs;
		}
	    }
	} elsif ( $op =~ /^--(eq|ne|gt|ge|lt|le|re|or|and)$/i ) {
	    die "Expr->new: Invalid number of arguments ($nargs) to operator `$op'"
		if $nargs != 3;
	    my $rhs = shift @_;
	    die "Expr->new: Invalid RHS ($rhs)" unless ref( $rhs );
	    @{$self} = ($op_or_lhs, $op, $rhs);
	} else {
	    die "Expr->new: Invalid operator ($op)";
	}
    } else {
	die "Expr->new: Invalid number of arguments ($nargs): must be 2"
	    unless $nargs == 2;
	my $rhs = shift @_;
	die "Expr->new: Unsupported or invalid operator($op_or_lhs)" 
 	    unless $op_or_lhs =~ /^--(not|exists)$/i;
	die "Expr->new: Invalid RHS ($rhs)" unless ref( $rhs );
	@{$self} = ($op_or_lhs, $rhs);
    }
    $self;
}

sub verbose
{
    my $self = shift;
    if ( @_ ) {
	$Verbose = shift;
    }
    $Verbose;
}

sub eval
{
    my $self = shift;
    my ($l, $op, $r);

    my @args = @{$self};
    &log_message( undef, "$self: begin eval with @{[scalar(@args)]} items: (@args)" )
	if $Verbose;

    $l = shift @args;
    if ( defined( $l ) && ref( $l ) ) {
	&log_message( undef, "LHS [$l] is an object" ) if $Verbose;
	if ( @args > 0 ) {
	    # binary operators
	    $op = shift @args;
	    die "invalid operator `$op'.\n"
		unless $op =~ /^(--(eq|ne|gt|ge|lt|le|re|or|and)|\+)$/i;
	    $op = lc($1);
	    die "required arg after `$op' missing.\n" unless @args > 0;
	    &log_message( undef, "op is [$op]" ) if $Verbose;
	    if ( $op eq '+' ) {
		$l->verbose(1) if $Verbose;
		my $str = $l->eval( @_ );
		$l->verbose(0) if $Verbose;
		&log_message( undef, "$l eval'ed to [$str]" ) if $Verbose;
		do {
		    $l = shift @args;
		    die "illegal token `$l' encountered.\n" unless ref( $l );
		    $l->verbose(1) if $Verbose;
		    $str .= $l->eval( @_ );
		    $l->verbose(0) if $Verbose;
		    if ( @args > 1 ) {
			$op = shift @args;
			die "invalid operator `$op' -- must be `+' only.\n"
			    unless $op eq '+';
		    }
		} while ( @args > 0 );
		return $str;
	    } else {
		die "extra args after RHS expr.\n" if @args > 1;
		$r = shift @args;
		$l->verbose(1) if $Verbose;
		my $lval = $l->eval( @_ );
		$l->verbose(0) if $Verbose;
		$r->verbose(1) if $Verbose;
		my $rval = $r->eval( @_ );
		$r->verbose(0) if $Verbose;
		for ($op) {
		    $_ eq '--gt' and return $lval gt $rval;
		    $_ eq '--ge' and return $lval ge $rval;
		    $_ eq '--lt' and return $lval lt $rval;
		    $_ eq '--le' and return $lval le $rval;
		    $_ eq '--eq' and return $lval eq $rval;
		    $_ eq '--ne' and return $lval ne $rval;
		    $_ eq '--and' and return $lval && $rval;
		    $_ eq '--or' and return $lval || $rval;
		    $_ eq '--re' and return $lval =~ /$rval/ ? 1 : 0;
		}
	    }
	} else {
	    $l->verbose(1) if $Verbose;
	    my $v = $l->eval(@_);
	    $l->verbose(0) if $Verbose;
	    return $v;
	}
    } elsif ( $l && $l =~ /^--(not|exists)$/oi ) {
	&log_message( undef, "LHS [$l] is an operator" ) if $Verbose;
	# unary operators
	$op = lc( $l );
	die "no expression after unary(`$op') operator.\n" unless @args > 0;
	die "extra args specified for unary(`$op') operator.\n" if @args > 1;
	$l = shift @args;
	&log_message( undef, "Argument to unary(`op') operator is [$l]" ) if $Verbose;
	if ( $op eq '--exists' ) {
	    die "invalid argument for `--exists' operator.\n" unless isa($l, 'Term');
	    $l->verbose(1) if $Verbose;
	    my $value = $l->eval (@_);
	    $l->verbose(0) if $Verbose;
	    return defined($value) ? 1 : 0;
	} else {
	    die "invalid argument for unary(`$op') operator.\n" unless $l->can('eval');
	    $l->verbose(1) if $Verbose;
	    my $value = $l->eval (@_);
	    $l->verbose(0) if $Verbose;
	    &log_message( undef, "Argument to unary(`op') operator evaluated to [$value]" )
		if $Verbose;
	    return defined($value) && $value ? 0 : 1;
	}
    } else {
	my @caller = caller;
	warn "Caller is (@caller)";
	die "unsupported unary operator: $l\n";
    }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.10  2000/06/27 12:52:00  sridhar
# BUG Fix: Expression was not working properly in a loop, due to
# `shift'ing of expression arguments. Fixed by copying the expression
# arguments to an array before shifting it.
#
# Revision 1.9  2000/06/21 15:59:17  sridhar
# Declaration for UNIVERSAL::isa() was missing
#
# Revision 1.8  2000/06/01 18:36:53  sridhar
# Brand new version with
# 1. Use of a package for parsing statements
# 2. Support for invocation of object methods
#
# Revision 1.7  2000/05/31 14:31:52  sridhar
# Yuck! compilation error for not declaring @ISA
#
# Revision 1.6  2000/05/31 14:26:23  sridhar
# Rigorous version numbering and usage
#
# Revision 1.5  2000/05/31 13:37:06  sridhar
# 1. Removed `--verbose' option to expressions
# 2. Added a `verbose' method which is invoked with an on or off flag
# when the expression is being finalized
# 3. More verbose message logging
#
# Revision 1.4  2000/05/25 18:30:21  sridhar
# Support for concatenation of strings.
#
# Revision 1.3  2000/05/18 13:47:18  sridhar
# 1. Added possibility of debugging with --verbose option to
# expressions.
# 2. More logging to go with it.
#
# Revision 1.2  2000/05/02 12:48:33  sridhar
# Fixed invocation of Expr->new().
#
# Revision 1.1  2000/04/13 15:12:25  sridhar
# Adding TagX::Expr -- class for processing expressions
#
#
