#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Expr;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use TagX::Log;
use Scalar::Util qw(looks_like_number reftype);
use Data::Dumper;
use Cwd;

my $Verbose;

my %STRING_CMP = ( '--gt'   => sub { my ($a, $b) = map { $_ // "" } @_; return $a gt $b; },
                   '--ge'   => sub { my ($a, $b) = map { $_ // "" } @_; return $a ge $b; },
                   '--lt'   => sub { my ($a, $b) = map { $_ // "" } @_; return $a lt $b; },
                   '--le'   => sub { my ($a, $b) = map { $_ // "" } @_; return $a le $b; },
                   '--eq'   => sub { my ($a, $b) = map { $_ // "" } @_; return $a eq $b; },
                   '--ne'   => sub { my ($a, $b) = map { $_ // "" } @_; return $a ne $b; },
                   '--and'  => sub { my ($a, $b) = map { $_ // "" } @_; return $a && $b; },
                   '--or'   => sub { my ($a, $b) = map { $_ // "" } @_; return $a || $b; },
                   '--file' => sub {
		     my $file;

		     if ( $_[1] =~/^(\S*)/ ) {
		       $file = $1;
		     }
		     else {
		       die "no filename specified: usage: filename --file file-test-op\n";
		     }

		     for ( $file )  {
		       /^\~([^~]*)$/  && do {
			 $file = getcwd() . '/' . $1;
			 last;
		       };
		       
		       /^[^\/~]/ && do {
			 $file = $ENV{DOCUMENT_ROOT} . '/' . $file;
			 last;
		       }; 
		     }
		     
		     $_[0] =~/^-?([rwxoRWXOezsfdlpSbctugkTBMAC])/ && do {
		       return eval "-$1 \"". $file ."\" ? 1 : 0"; 
		     };

		     die "invalid file test operation: '$_[0] $_[1]'";
		   },

                   '--ref' => sub { return (ref($_[0]) =~ /$_[1]/) ? 1 : 0; },

                   '--reftype' => sub { return (ref($_[0]) && reftype($_[0]) eq $_[1]) ? 1 : 0; },

                   '--re' => sub {
		     # $lhs may be undef
		     my ($lhs, $rhs) = @_;
                     $lhs = $lhs // "";
                     
		     my $re = ($rhs =~ /^qr/) ? eval $rhs : eval "qr/\$rhs/";
		     
		     # capture groups supported for perl >= 5.10
		     if ( $^V ge 'v5.10') {
		       return $lhs =~ /$re/ ? (1, eval { my %cg = %+; \%cg; }) : undef;
		     }
		     else {
		       return $lhs =~ /$re/;
		     }
		   },

		   '--exists' => sub {
		     my ($lhs, $rhs) = @_;
		     die "invalid argument for '--exists': HASH --exists KEY\n"
		       unless ref($lhs) && reftype($lhs) eq 'HASH';
		     
		     return ( exists $lhs->{$rhs} ) ? 1 : 0;
		   }

                 );

my %NUMBER_CMP = (
		  '--gt'  => sub { my ($a, $b) = map { $_ || 0 } @_; return $a >  $b; },
		  '--ge'  => sub { my ($a, $b) = map { $_ || 0 } @_; return $a >= $b; },
		  '--lt'  => sub { my ($a, $b) = map { $_ || 0 } @_; return $a <  $b; },
		  '--le'  => sub { my ($a, $b) = map { $_ || 0 } @_; return $a <= $b; },
		  '--eq'  => sub { my ($a, $b) = map { $_ || 0 } @_; return $a == $b; },
		  '--ne'  => sub { my ($a, $b) = map { $_ || 0 } @_; return $a != $b; },
		  '--and' => sub { my ($a, $b) = map { $_ || 0 } @_; return $a && $b; },
		  '--or'  => sub { my ($a, $b) = map { $_ || 0 } @_; return $a || $b; },
                 );

sub new {
  my $class = shift;
  my $self  = bless [], $class;
  my $nargs = @_;

  # Check whether unary or binary operator
  my $op_or_lhs = shift @_;

  if ( ref($op_or_lhs) ) {
    my $op = shift @_;

    die "Invalid operator in expression\n" 
      if ref($op);

    if ( $op =~ /^[\+\-\.\*\/]$/ ) {
      die "Insufficient number of arguments(",  $nargs - 1, ") to operator `$op'\n"
	unless $nargs > 2;

      @{$self} = ( $op_or_lhs, $op );

      while ( @_ > 0 ) {
        $op_or_lhs = shift @_;

        die "Operator `$op_or_lhs' is illegal here.\n"
	  unless ref($op_or_lhs);
	
        push @{$self}, $op_or_lhs;

        if ( @_ > 1 ) {
          $op_or_lhs = shift @_;

          die "Operator `$op_or_lhs' is illegal here: must be `+' only.\n"
	    if ref($op_or_lhs)
	      or ( $op_or_lhs ne '+' && $op_or_lhs ne '.' );

          push @{$self}, $op_or_lhs;
        }
      }
    }
    elsif ( $op =~ /^--(eq|ne|gt|ge|lt|le|re|or|and|ref|file|exists)$/i ) {
      die "Invalid number of arguments(", $nargs - 1, ") for operator `$op'.\n"
	if $nargs != 3;

      my $rhs = shift @_;
      die "Token `$rhs' is illegal here.\n"
	unless ref($rhs);

      @{$self} = ( $op_or_lhs, $op, $rhs );
    }
    elsif ( $nargs == 1 ) {
      @{$self} = ($op_or_lhs);
    }
    else {
      die "Token `$op' is illegal here.\n";
    }
  }
  elsif ( $op_or_lhs =~ /^--(not|defined|exists|array|scalar|hash|object)$/i ) {
    die "Unary operator `$op_or_lhs' requires a single argument: found ", $nargs - 1, " instead.\n"
      unless $nargs == 2;

    my $rhs = shift @_;

    die "Token `$rhs' is not a valid argument to unary operator `$op_or_lhs'.\n"
      unless ref($rhs);

    @{$self} = ( $op_or_lhs, $rhs );
  }
  else {
    die "Token `$op_or_lhs' is not a valid unary operator.\n";
  }

  $self;
}

sub verbose {
  my $self = shift;

  if (@_) {
    $Verbose = shift;
  }
  
  $Verbose;
}

sub eval {
  my $self = shift;
  my ( $l, $op, $r );

  my @args = @{$self};
  &log_message( undef, "$self: begin eval with @{[scalar(@args)]} items: (@args)" )
    if $Verbose;

  $l = shift @args;

  if ( defined($l) && ref($l) ) {
    &log_message( undef, "LHS [$l] is an object" ) 
      if $Verbose;

    if ( @args > 0 ) {

      # binary operators
      $op = shift @args;
      die "Invalid operator `$op'.\n"
	unless $op =~ /^(--(eq|ne|gt|ge|lt|le|or|and|reftype|ref|re|file|exists)|[\+\.\-\*\/])$/i;

      $op = lc($1);

      &log_message( undef, "op is [$op]" ) 
	if $Verbose;

      if ( $op =~ /^[\+\-\.\*\/]$/ ) {
        $l->verbose(1) 
	  if $Verbose;

        my $str = $l->eval(@_);
        $l->verbose(0) 
	  if $Verbose;

        &log_message( undef, "$l eval'ed to [$str]" ) 
	  if $Verbose;

        do {
          $l = shift @args;
        
	  $l->verbose(1) 
	    if $Verbose;

          my $str2 = $l->eval(@_);

          for ($op) {

            # arithmetic addition or string catenation
            /\+/ && do {
              if ( looks_like_number($str) && looks_like_number($str2) ) {
                $str = $str + $str2;
              }
              else {
                $str .= $str2;
              }
              last;
            };

            # multiplication or string replication
            /\*/ && do {
              if ( looks_like_number($str) && looks_like_number($str2) ) {
                $str = $str * $str2;
              }
              elsif ( looks_like_number($str2) ) {
                $str = $str x $str2;
              }
              next;
            };

            # division or string reduction?
            /\// && do {
              if ( looks_like_number($str) && looks_like_number($str2) ) {
                $str = $str / $str2 if $str2;
              }
              else {
                $str =~ s/$str2//g;
              }
              last;
            };

            # subtraction or replacement (at end) with null
            /\-/ && do {
              if ( looks_like_number($str) && looks_like_number($str2) ) {
                $str = $str - $str2;
              }
              else {
                $str =~ s/${str2}$//g;    # "barfoobar" - "bar" = "barfoo" ?
              }
              last;
            };

            # string catenation
            /\./ && do {
              $str .= $str2;
              last;
            };
          }

          $l->verbose(0) 
	    if $Verbose;
 
         $op = shift @args 
	   if @args > 1;

        } while ( @args > 0 );

        return $str;
      }
      else {
        $r = shift @args;

        $l->verbose(1) 
	  if $Verbose;

        my $lval = $l->eval(@_);

        $l->verbose(0) 
	  if $Verbose;

        $r->verbose(1) 
	  if $Verbose;

        my $rval = $r->eval(@_);

        $r->verbose(0)
	  if $Verbose;

        &log_message( undef, "RHS: [$rval]" )
	  if $Verbose;

        my $result;

        eval {
          if ( looks_like_number($lval) && looks_like_number($rval) ) {
            &log_message( undef, "result: " . $NUMBER_CMP{$op}( $lval, $rval ) )
	      if $Verbose;
	    
            $result = $NUMBER_CMP{$op}( $lval, $rval );
          }
          else {
            &log_message( undef, "result: " . $STRING_CMP{$op}( $lval, $rval ) )
	      if $Verbose;
	    
	    my $cg;
            ($result, $cg) = $STRING_CMP{$op}( $lval, $rval );

	    # grab capture group from regular expression if op is --re
 	    if ( $result && $op --eq '--re' ) {
	      map { $_[0]->{$_} = $cg->{$_};} keys %{$cg};
	    }
          }
        };

        die "internal error evaluating expression op: $op lval:[$lval] rval:[$rval]\n$@\n"
	  if $@;

        return $result;
      }
    }
    else {
      $l->verbose(1) 
	if $Verbose;

      my $v = $l->eval(@_);

      $l->verbose(0) 
	if $Verbose;

      return $v;
    }
  }
  elsif ( $l && $l =~ /^--(not|defined|array|scalar|object|hash|exists)$/oi ) {
    &log_message( undef, "LHS [$l] is an operator" ) 
      if $Verbose;

    # unary operators
    $op = lc($l);
    $l  = shift @args;

    &log_message( undef, "Argument to unary(`op') operator is [$l]" )
      if $Verbose;

    if ( $op eq '--exists' ) {
      die "Invalid argument for `--exists' operator.\n"
	unless ref($l) eq 'TagX::Term::Var';

      $l->verbose(1) 
	if $Verbose;

      my $exists = $l->exists(@_);

      $l->verbose(0) 
	if $Verbose;

      return $exists;
    }
    elsif ( $op eq '--defined' ) {
      die "Invalid argument for `--defined' operator.\n"
	unless ref($l) eq 'TagX::Term::Var';

      $l->verbose(1) 
	if $Verbose;

      my $defined = $l->defined(@_);

      $l->verbose(0) 
	if $Verbose;

      return $defined;
    }
    elsif ( $op eq '--scalar' ) {
      die "invalid argument for unary(`$op') operator.\n"
	unless $l->can('eval');

      $l->verbose(1) 
	if $Verbose;

      my $value = $l->eval(@_);

      $l->verbose(0) 
	if $Verbose;

      &log_message( undef, "Argument to unary(`op') operator evaluated to [$value]" )
	if $Verbose;

      return (ref($value) && reftype($value) eq 'SCALAR') ? 1 : 0;
    }
    elsif ( $op eq '--array' ) {
      die "invalid argument for unary(`$op') operator.\n"
	unless $l->can('eval');

      $l->verbose(1) 
	if $Verbose;

      my $value = $l->eval(@_);
 
     $l->verbose(0) 
       if $Verbose;

      &log_message( undef, "Argument to unary(`op') operator evaluated to [$value]" )
	if $Verbose;

      return (ref($value) && reftype($value) eq 'ARRAY') ? 1 : 0;
    }
    elsif ( $op eq '--hash' ) {
      die "invalid argument for unary(`$op') operator.\n"
	unless $l->can('eval');

      $l->verbose(1) 
	if $Verbose;

      my $value = $l->eval(@_);

      $l->verbose(0) 
	if $Verbose;

      &log_message( undef, "Argument to unary(`op') operator evaluated to [$value]" )
	if $Verbose;

      return (ref($value) && reftype($value) eq 'HASH') ? 1 : 0;
    }
    elsif ( $op eq '--object' ) {
      die "invalid argument for unary(`$op') operator.\n"
	unless $l->can('eval');

      $l->verbose(1) 
	if $Verbose;

      my $value = $l->eval(@_);

      $l->verbose(0) 
	if $Verbose;

      &log_message( undef, "Argument to unary(`op') operator evaluated to [$value]" )
	if $Verbose;

      return (ref($value)  && reftype($value) eq 'HASH') ? 1 : 0;
    }
    else {
      die "invalid argument for unary(`$op') operator.\n"
	unless $l->can('eval');

      $l->verbose(1) 
	if $Verbose;

      my $value = $l->eval(@_);

      $l->verbose(0)
	if $Verbose;

      &log_message( undef, "Argument to unary(`op') operator evaluated to [$value]" )
	if $Verbose;

      return defined($value) && $value ? 0 : 1;
    }
  }
  else {
    die "unsupported unary operator: $l\n";
  }
}

1;
