#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::Term;

use strict;

sub new
{
    my $class = shift;
    my $term = shift;
    bless \$term, $class;
}

sub resolve_var
{
    my $self = shift;
    my $name = shift;

    $name =~ s/^\$//;
    my @components = split /\./oi, $name;
    my $first = shift @components;
    return undef unless $first and $first =~ /^\w+$/o;

    my $found;
    for my $context (@_) {
	if ( exists $context->{$first} ) {
	    $found = $context->{$first};
	    last;
	}
    }
    return undef unless defined( $found );

    for (@components) {
	if ( /^\Q[\E(\d+)\Q]\E/oi ) {
	    # array element
	    return undef unless ref( $found ) eq 'ARRAY';
	    $found = $found->[$1];
	    next;
	}

	if ( /^{(.*?)}/oi or /^([^.]+)/oi ) {
	    # hash element
	    if ( ref( $found ) eq 'HASH' ) {
		$found = $found->{$1};
	    } else {
		# Support syntax for accessing hash contained in an array
		# if the array contains only one element
		# Other cases are failures
		return undef unless ref( $found ) eq 'ARRAY' and @{$found} == 1;
		$found = $found->[0]->{$1};
	    }
	    next;
	}

	# illegal
	return undef;
    }
    $found;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/04/13 15:13:00  sridhar
# Added TagX::Term -- class for handling terms -- component parts of an
# expression.
#
#
