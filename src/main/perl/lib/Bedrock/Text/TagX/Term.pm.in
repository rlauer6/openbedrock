#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Term;

use strict;
use Carp;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use UNIVERSAL;
use TagX::Log;

my $Verbose = 0;

sub new {
  my $class   = shift;
  my $term    = shift;
  my $verbose = shift;

  bless \$term, $class;
}

sub verbose {
  my $self = shift;

  if (@_) {
    $Verbose = shift;
  }

  $Verbose;
}

sub _find_in_context {
  my $self = shift;
  my $name = shift;

  my $found;

  for my $context (@_) {
    if ( exists $context->{$name} ) {
      $found = $context->{$name};

      &log_message( undef, "$self: [$name] found as [$found] in [$context]" )
	if $Verbose > 1;
      last;
    }
  }

  return $found;
}

sub resolve_var {
  my $self = shift;
  my $name = shift;

  &Carp::cluck("$self->resolve_var(@_) invoked") if $Verbose > 2;

  &log_message( undef, "$self: begin eval with ($name, @_)" ) if $Verbose > 1;

  $name =~ s/^\$//;
  my @components = split /\./oi, $name;

  &log_message( undef, "$self: components of name are (@components)" )
    if $Verbose > 1;

  my $first = shift @components;

  unless ($first) {
    &log_message( undef,
               "$self: First component [$first] of name [$name] is undefined." )
      if $Verbose;

    return undef;
  }

  if (@components) {
    unless ( $first =~ /^\w+$/o ) {
      &log_message( undef,
              "$self: First component [$first] of name [$name] is not a word." )
	if $Verbose;

      return undef;
    }
  }
  else {
    unless ( $first =~ /^(\w+|\@)$/o ) {
      &log_message(
        undef,
        "$self: First component [$first] of name [$name] is not a word or `\@'."
      ) if $Verbose;

      return undef;
    }
  }

  my $found = $self->_find_in_context( $first, @_ );

  &log_message( undef, "$self: Value of [$first] is [$found]" ) if $Verbose;
  return undef unless defined($found);

  for (@components) {
    if (/^\Q[\E(-?\d+)\Q]\E/oi) {

      # array element
      my $i = $1;
      &log_message( undef, "$self: looking for array item with index [$i]" )
	if $Verbose > 1;

      unless ( &UNIVERSAL::isa( $found, 'ARRAY' ) ) {
        &log_message( undef, "$self: [$found] is not an array." ) if $Verbose;

        return undef;
      }

      &log_message( undef, "$self: [$found] is an array" ) if $Verbose > 1;
      $found = $found->[$i];
      next;
    }

    # simple scalar variable indexing supported $foo.[$i]
    elsif (/^\Q[\E\$([a-z_]\w*)\Q]\E/oi) {

      my $i = $self->_find_in_context( $1, @_ );

      die "undefined index [\$" . "]\n"
	unless defined $i;

      die "invalid index value [", $i, "]\n"
	unless $i =~ /^-?[\d]+$/;
      
      &log_message( undef, "$self: looking for array item with index [$i]" )
	if $Verbose > 1;

      unless ( &UNIVERSAL::isa( $found, 'ARRAY' ) ) {
        &log_message( undef, "$self: [$found] is not an array." ) if $Verbose;

        return undef;
      }

      &log_message( undef, "$self: [$found] is an array" ) if $Verbose > 1;
      $found = $found->[$i];
      next;
    }

    if ( /^{(.*?)}/oi or /^([^.]+)/oi ) {

      # hash element
      my $key = $1;
      &log_message( undef,
                    "$self: looking for a hash component [$key] in [$found]" )
	if $Verbose > 1;

      if ( &UNIVERSAL::isa( $found, 'HASH' ) ) {
        &log_message( undef, "$self: [$found] is a hash" ) if $Verbose > 1;
        $found = $found->{$key};
      }
      else {

        # Support syntax for accessing hash contained in an array
        # if the array contains only one element
        # Other cases are failures
        unless ( &UNIVERSAL::isa( $found, 'ARRAY' ) and @{$found} == 1 ) {

          # perhaps one other case?  TIE'd SCALAR?
          if ( &UNIVERSAL::isa( $found, 'SCALAR' ) && $found->can('get') ) {
            $found = $found->get($key);

            &log_message( undef, "$self: found component [$found]" )
	      if $Verbose > 1;

            next;
          }
          else {
            &log_message( undef,
                "$self: [$found] is an array containing more than one element\n"
                . ".. cannot access it as a hash" )
	      if $Verbose;

            return undef;
          }
        }

        &log_message( undef,
                      "$self: [$found] is an array with a single element\n"
                      . ".. can access it as a hash"
                    ) if $Verbose > 1;

        $found = $found->[0]->{$key};
      }

      &log_message( undef, "$self: found component [$found]" ) if $Verbose > 1;
      next;
    }

    # illegal
    return undef;
  }

  return $found;
}

sub var_exists {
  my $self = shift;
  my $name = shift;

  # Remove leading `$'
  $name =~ s/^\$//;

  # Split name into components
  my @components = split /\./oi, $name;

  &log_message( undef, "$self: components of name are (@components)" )
    if $Verbose > 1;

  my $first = shift @components;

  unless ($first) {
    &log_message( undef,
               "$self: First component [$first] of name [$name] is undefined." )
      if $Verbose;

    return undef;
  }

  if (@components) {
    unless ( $first =~ /^\w+$/o ) {
      &log_message( undef,
              "$self: First component [$first] of name [$name] is not a word." )
	if $Verbose;

      return undef;
    }
  }
  else {
    unless ( $first =~ /^(\w+|\@)$/o ) {
      &log_message(
		   undef,
		   "$self: First component [$first] of name [$name] is not a word or `\@'."
		  ) if $Verbose;
      
      return undef;
    }
  }

  my $found;
  my $exists;

  for my $context (@_) {
    if ( exists $context->{$first} ) {
      $found  = $context->{$first};
      $exists = 1;

      &log_message( undef, "$self: [$first] found as [$found] in [$context]" )
	if $Verbose > 1;

      last;
    }
  }

  &log_message( undef, "$self: Value of [$first] is [$found]" ) if $Verbose;

  # return 0 if found but undefined, undef if does not exist
  if ( $exists && !@components ) {
    return defined $found ? 1 : 0;
  }
  elsif ( !@components ) {
    return undef;
  }

  for (@components) {

    # return 0 unless defined( $found );

    if (/^\Q[\E(\d+)\Q]\E/oi) {

      # array element
      my $i = $1;
      &log_message( undef, "$self: looking for array item with index [$i]" )
	if $Verbose > 1;

      unless ( &UNIVERSAL::isa( $found, 'ARRAY' ) ) {
        &log_message( undef, "$self: [$found] is not an array." ) if $Verbose;

        return undef;
      }

      &log_message( undef, "$self: [$found] is an array" ) if $Verbose > 1;

      $found = $found->[$i];
      return 0 unless defined($found);

      next;
    }

    if ( /^{(.*?)}/oi or /^([^.]+)/oi ) {

      # hash element
      my $key = $1;
      &log_message( undef,
                    "$self: looking for a hash component [$key] in [$found]" )
	if $Verbose > 1;

      if ( &UNIVERSAL::isa( $found, 'HASH' ) ) {
        &log_message( undef, "$self: [$found] is a hash" ) if $Verbose > 1;

        &log_message( undef, "$self: found [$key] in [$found]" )
	  if exists $found->{$key} and $Verbose > 1;

        return 0 unless exists $found->{$key};
        $found = $found->{$key};
      }
      else {

        # Support syntax for accessing hash contained in an array
        # if the array contains only one element
        # Other cases are failures
        unless ( &UNIVERSAL::isa( $found, 'ARRAY' ) and @{$found} == 1 ) {
          &log_message(
		       undef,
		       "$self: [$found] is an array containing more than one element\n"
		       . ".. cannot access it as a hash"
		      ) if $Verbose;
	  
          return undef;
        }

        &log_message( undef,
                      "$self: [$found] is an array with a single element\n"
                      . ".. can access it as a hash"
                    ) if $Verbose > 1;

        return 0 unless exists $found->[0]->{$key};
        $found = $found->[0]->{$key};
      }

      &log_message( undef, "$self: found component [$found]" ) if $Verbose > 1;
      next;
    }

    # illegal
    return undef;
  }

  1;
}

1;

#
# Revision 1.23  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.22  2011/09/05 16:51:34  eutl420
# - support for indexing arrays using simple scalar variables added ($foo.[$i])
#
# Revision 1.21  2011/08/31 02:52:12  eutl420
# - fixed --exists, and added support for --defined
#
# Revision 1.20  2011/08/22 23:31:26  eutl420
# - allow negative indexing
#
# Revision 1.19  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.18  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.17  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.16  2009/12/30 00:16:10  rlauer
# support for accessing properties of tied scalars
#
# Revision 1.15  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.14  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.13  2000/11/16 19:23:56  sridhar
# Added method `var_exists'.
#
# Revision 1.12  2000/09/15 18:57:01  sridhar
# When verbose level is >= 2, calling stack is printed using
# Carp::cluck().
#
# Revision 1.11  2000/09/08 14:05:02  sridhar
# 1. Using `isa()' and UNIVERSAL::isa() as recommended
# 2. Logging messages for scripter at verbose level 1, and for bedrock
# maintainer at levels greater that 1
#
# Revision 1.10  2000/06/07 18:00:21  sridhar
# Removed support for $joe.[$i] due to problems
#
# Revision 1.9  2000/06/07 15:38:55  sridhar
# *** empty log message ***
#
# Revision 1.8  2000/06/06 20:03:53  sridhar
# 1. Replaced object checking using ref() with isa()
# 2. Supports variable as an array index
#
# Revision 1.7  2000/05/31 15:36:42  sridhar
# Yuck! Compilation error (using `+' to add strings instead of `.')
#
# Revision 1.6  2000/05/31 14:21:12  sridhar
# Rigorous version numbering and usage
#
# Revision 1.5  2000/05/31 14:13:40  sridhar
# Rigorous version numbering and usage
#
# Revision 1.4  2000/05/31 14:06:21  sridhar
# Oops that contained some syntax errors
#
# Revision 1.3  2000/05/31 13:30:00  sridhar
# 1. Added a method `verbose' for turning on message logging
# 2. More verbose messages
#
# Revision 1.2  2000/04/19 20:05:31  sridhar
# BUG fix for resolving $@
#
# Revision 1.1  2000/04/13 15:13:00  sridhar
# Added TagX::Term -- class for handling terms -- component parts of an
# expression.
#
#
