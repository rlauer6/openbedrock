
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Term;

use strict;
use warnings;

use Carp;
use Scalar::Util qw{reftype blessed};

use Bedrock qw{:booleans};
use Bedrock::Constants qw{:chars :booleans};

use English qw{-no_match_vars};
use Log::Log4perl::Level;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw{Exporter};

########################################################################
sub new {
########################################################################
  my ( $class, $term, $verbose ) = @_;

  my $self = bless \$term, $class;

  if ($verbose) {
    $self->get_logger->level($DEBUG);
  }

  return $self;
}

########################################################################
sub verbose {
########################################################################
  my ($self) = @_;

  return $self->get_logger->level eq $DEBUG;
}

########################################################################
sub _find_in_context {
########################################################################
  my ( $self, $name, @context ) = @_;

  my $found;

  for my $context (@context) {
    if ( exists $context->{$name} ) {
      $found = $context->{$name};

      $self->get_logger->debug(
        sub {
          sprintf '[%s] found as [%s] in [%s]', $name,
            ( defined $found ? $found : 'undef' ),
            $context;
        }
      );
      last;
    }
  }

  return $found;
}

########################################################################
# IMPORTANT NOTE:
#
# This method explicitly returns 'undef' because of the way
# Text::TAG::eval_arg() calls Text::TagX::Term::Var::eval() in list context.
#
#   push @optvals, $arg->eval(@eval_args);
#
# ...the method is NOT returning a failure value when it executes 'return
# undef', it is returning the value of the resolved variable which can
# be 'undef'.  Failing to explicitly return 'undef' will result in
# subtle but devastingly difficult bugs to find...YOU HAVE BEEN
# WARNED!!
#
########################################################################
sub resolve_var {
########################################################################
  my ( $self, $name, @args ) = @_;

  $self->get_logger->debug("begin eval with ($name, @args)");

  if ( $name =~ s/^[*]//xsm ) {
    $name = $self->resolve_var( $DOLLAR_SIGN . $name, @args );
  }
  else {
    $name =~ s/^\$//xsm;
  }

  my @components = split /[.]/oixsm, $name;

  $self->get_logger->debug("components of name are (@components)");

  my $first = shift @components;

  ## see important note above
  ## no critic (ProhibitExplicitReturnUndef)

  if ( !$first ) {
    $self->get_logger->debug(
      "$self: First component [$first] of name [$name] is undefined.");

    return undef;
  }

  if (@components) {
    if ( $first !~ /^\w+$/oxsm ) {
      $self->get_logger->debug(
        "$self: First component [$first] of name [$name] is not a word.");

      return undef;
    }
  }
  else {
    if ( $first !~ /^\w+|\@$/oxsm ) {
      $self->get_logger->debug(
        "$self: First component [$first] of name [$name] is not a word or `\@'."
      );

      return undef;
    }
  }

  my $found = $self->_find_in_context( $first, @args );

  return undef
    if !defined $found;

  $self->get_logger->debug( sprintf 'Value of [%s] is [%s]',
    $first, $found // $EMPTY );

  for (@components) {
    if (/^\Q[\E(-?\d+)\Q]\E/xsmoi) {

      # array element
      my $i = $1;
      $self->get_logger->debug(
        sprintf 'looking for array item with index [%s]', $i );

      if ( !is_array($found) ) {
        $self->get_logger->debug( sprintf '[%s] is not an array.', $found );

        return undef;
      }

      $self->get_logger->debug( sprintf '[%s] is an array', $found );

      $found = $found->[$i];
      next;
    }

    # simple scalar variable indexing supported $foo.[$i]
    elsif (/^\Q[\E\$([[:lower:]_]\w*)\Q]\E/oixsm) {

      my $i = $self->_find_in_context( $1, @args );

      die "undefined index\n"
        if !defined $i;

      die sprintf "invalid index value [%s]\n", $i
        if $i !~ /^-?[\d]+$/xsm;

      $self->get_logger->debug(
        sprintf 'looking for array item with index [%s]', $i );

      if ( !is_array($found) ) {
        $self->get_logger->debug( sprintf '[%s] is not an array.', $found );

        return undef;
      }

      $self->get_logger->debug( sprintf '[%s] is an array', $found );

      $found = $found->[$i];
      next;
    }

    if ( /^[{](.*?)[}]/oixsm or /^([^.]+)/oixsm ) {

      # hash element
      my $key = $1;
      $self->get_logger->debug(
        sprintf 'looking for a hash component [%s] in [%s]',
        $key, $found // '<undef>' );

      if ( is_hash($found) ) {
        $self->get_logger->debug( sprintf '[%s] is a hash', $found );
        $found = $found->{$key};
      }
      else {

        # Support syntax for accessing hash contained in an array
        # if the array contains only one element
        # Other cases are failures
        if ( !is_array($found) || @{$found} != 1 ) {

          # perhaps one other case?  TIE'd SCALAR?
          if ( blessed($found) && $found->can('get') ) {
            $found = $found->get($key);

            $self->get_logger->debug( sprintf 'found component [%s]',
              $found );

            next;
          }
          else {
            $self->get_logger->debug(
              sub {
                sprintf
                  '[%s] is an array containing more than one element...cannot access it as a hash',
                  $found // '<undef>';
              }
            );

            return undef;
          }
        }

        $self->get_logger->debug(
          sub {
            sprintf
              '[%s] is an array with a single element...can access it as a hash',
              $found;
          }
        );

        $found = $found->[0]->{$key};
      }

      $self->get_logger->debug(
        sub { sprintf 'found component [%s]', $found // '<undef>' } );

      next;
    }

    # illegal, probably should throw an exception here?
    $self->get_logger->warn( sprintf 'illegal construction found: [%s]',
      $name );

    return undef;
  }

  return $found;
}

########################################################################
sub var_exists {
########################################################################
  my ( $self, $name, @context_vars ) = @_;

  # Remove leading `$'
  $name =~ s/^\$//xsm;

  # Split name into components
  my @components = split /[.]/oixsm, $name;

  $self->get_logger->debug(
    sub { sprintf 'components of name are (%s)', join $SPACE, @components } );

  my $first = shift @components;

  if ( !$first ) {
    $self->get_logger->debug(
      sub {
        sprintf 'First component [%s] of name [%s] is undefined.', $first,
          $name;
      }
    );

    return;
  }

  if (@components) {
    if ( $first !~ /^\w+$/o ) {
      $self->get_logger->debug(
        sub {
          sprintf 'First component [%s] of name [%s] is not a word.', $first,
            $name;
        }
      );

      return;
    }
  }
  else {
    if ( $first !~ /^(\w+|[\@])$/oxsm ) {
      $self->get_logger->debug(
        sub {
          sprintf 'First component [%s] of name [%s] is not a word or @.',
            $first, $name;
        }
      );

      return;
    }
  }

  my $found;
  my $exists;

  for my $context (@context_vars) {
    if ( exists $context->{$first} ) {

      $found  = $context->{$first};
      $exists = $TRUE;

      $self->get_logger->debug(
        sub { sprintf '[%s] found as [%s] in [%s]', $first, $found, $context }
      );

      last;
    }
  }

  $self->get_logger->debug(
    sub { sprintf 'Value of [%s] is [%s]', $first, $found // 'undef' } );

  # return 0 if found but undefined, undef if does not exist
  if ( $exists && !@components ) {
    return defined $found ? $TRUE : $FALSE;
  }
  elsif ( !@components ) {
    return;
  }

  for my $component (@components) {

    # return 0 unless defined( $found );

    if ( $component =~ /^\Q[\E(\d+)\Q]\E/oi ) {

      # array element
      my $i = $1;
      $self->get_logger->debug(
        sub { sprintf 'looking for array item with index [%s]', $i } );

      if ( !is_array($found) ) {
        $self->get_logger->debug(
          sub { sprintf '[%s] is not an array.', $found } );

        return;
      }

      $self->get_logger->debug( sub { sprintf '[%s] is an array.', $found } );

      $found = $found->[$i];

      return $FALSE
        if !defined $found;

      next;
    }

    if ( $component =~ /^{(.*?)}/oi or /^([^.]+)/oi ) {

      # hash element
      my $key = $1;
      $self->get_logger->debug(
        sprintf 'looking for a hash component [%s] in [%s]',
        $key, $found );

      if ( is_hash($found) ) {
        $self->get_logger->debug( sprintf '[%s] is a hash', $found );

        if ( exists $found->{$key} ) {
          $self->get_logger->debug(
            sub { sprintf 'found [%s] in [%s]', $key, $found } );
        }

        return $FALSE
          if !exists $found->{$key};

        $found = $found->{$key};
      }
      else {

        # Support syntax for accessing hash contained in an array
        # if the array contains only one element
        # Other cases are failures
        if ( !is_array($found) || @{$found} > 1 ) {
          $self->get_logger->debug(
            sub {
              sprintf
                '[%s] is an array containing more than one element...cannot access it as a hash',
                $found;
            }
          );

          return;
        }

        $self->get_logger->debug(
          sub {
            sprintf
              '[%s] is an array with a single element...can access it as a hash',
              $found;
          }
        );

        return $FALSE
          if !exists $found->[0]->{$key};

        $found = $found->[0]->{$key};
      }

      $self->get_logger->debug( sub { sprintf 'found component [%s]', $found }
      );

      next;
    }

    # illegal
    return;
  }

  return $TRUE;
}

1;
