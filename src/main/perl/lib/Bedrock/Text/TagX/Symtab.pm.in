#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Symtab;

use strict;
use Tie::Hash;
@TagX::Symtab::ISA = qw ( Tie::StdHash );

sub TIEHANDLE
{
    my $class = shift;
    my $self = bless {}, $class;
    $self->{'data'} = {};
    $self->{'code'} = {};
    $self;
}

sub FETCH
{
    my ($self, $key) = @_;

    # Check to see if frames exist and requested key has an entry in
    # the topmost frame, and return that if available
    if ( exists $self->{'frames'} and exists $self->{'frames'}->[0]->{$key} ) {
	return $self->{'frames'}->[0]->{$key};
    }

    # Else check in the actual symbol table for the value
    if ( exists $self->{'data'}->{$key} ) {
	return $self->{'data'}->{$key};
    } elsif ( exists $self->{'code'}->{$key} ) {
	# Else do the code ref symbol table
	my $code = delete $self->{'code'}->{$key};
	return $self->{'data'}->{$key} = $code->();
    } else {
	# failure everywhere
	return undef;
    }
}

sub STORE
{
    my ($self, $key, $value) = @_;

    # If frames exists, store in topmost frame -- presumes no values are code refs
    if ( exists $self->{'frames'} ) {
	$self->{'frames'}->[0]->{$key} = $value;
	return $value;
    }

    # If value is a code-ref, store in code ref symbol table,
    # else store in the actual symbol table
    if ( &UNIVERSAL::isa($value, 'CODE') ) {
	$self->{'code'}->{$key} = $value;
    } else {
	$self->{'data'}->{$key} = $value;
    }
    $value;
}

sub DELETE
{
    my ($self, $key) = @_;

    # Delete from frame if frames exist
    if ( exists $self->{'frames'} ) {
	return delete $self->{'frames'}->[0]->{$key};
    }

    # delete from symbol table or code-ref table
    if ( exists $self->{'data'}->{$key} ) {
	return delete $self->{'data'}->{$key};
    } elsif ( exists $self->{'code'}->{$key} ) {
	return delete $self->{'data'}->{$key};
    } else {
	return undef;
    }
}

sub CLEAR
{
    my $self = shift;

    # Clear frame if frames exist
    if ( exists $self->{'frames'} ) {
	%{$self->{'frames'}->[0]} = ();
	return;
    }

    %{$self->{'data'}} = ();
    %{$self->{'code'}} = ();
}

sub EXISTS
{
    my ($self, $key) = @_;
    if ( exists $self->{'frames'} and exists $self->{'frames'}->[0]->{$key} ) {
	return 1;
    } elsif ( exists $self->{'data'}->{$key} ) {
	return 1;
    } elsif ( exists $self->{'code'}->{$key} ) {
	return 1;
    } else {
	return 0;
    }
}

sub FIRSTKEY
{
    my $self = shift;
    delete $self->{'keys'};

    if ( exists $self->{'frames'} ) {
	my $k = {};
	%{$k} = (%{$self->{'frames'}->[0]});
	for my $name (keys %{$self->{'data'}}) {
	    next if exists $k->{$name};
	    $k->{$name} = $self->{'data'}->{$name};
	}
	$self->{'keys'} = $k;
    } else {
	$self->{'keys'} = $self->{'data'};
    }

    my $a = keys %{$self->{'keys'}};
    each %{$self->{'keys'}};
}

sub NEXTKEY
{
    each %{$_[0]->{'keys'}};
}

sub new
{
    my $class = shift;
    my $self = bless {}, $class;
    tie %{$self}, $class;
    $self;
}

sub close
{
    my $obj = shift;
    my $self = tied(%{$obj});
    delete $self->{'keys'};
    for my $name (keys %{$self->{'data'}}) {
	my $value = $self->{'data'}->{$name};

	# No destruction if value is not an object
	next unless ref($value);

	# No destruction unless the object has a `closeBLM()' method
	next unless &UNIVERSAL::can($value, 'closeBLM');

	# Close it
	$value->closeBLM;
    } continue {
	delete $self->{'data'}->{$name};
    }
}

sub new_frame
{
    my $obj = shift;
    my $self = tied(%{$obj});
    $self->{'frames'} = [] unless exists $self->{'frames'};
    unshift @{$self->{'frames'}}, {};
}

sub end_frame
{
    my $obj = shift;
    my $self = tied(%{$obj});
    shift @{$self->{'frames'}} if exists $self->{'frames'};
    delete $self->{'frames'} if @{$self->{'frames'}} == 0;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.6  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.5  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.4  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2000/11/22 15:26:35  sridhar
# 1. Keeps separate lists for variables which need to constructed on
# first reference and variable which have been constructed.
# 2. Support for Bedrock stack frames -- Caller can invoked
# `new_frame()' method when required and `end_frame()' method when
# done. All variables created between `new_frame()' and `end_frame()' go
# away after `end_frame()'
# 3. when one does a `keys' on the symbol table, only variables which
# have been constructed are returned. Variables which are bound to code
# to be constructed on first reference are not returned. So one can
# safely do a dump without constructing unconstructed objects.
#
# Revision 1.2  2000/11/20 18:07:26  sridhar
# If error occurs, need to invoke `handle_error()' method so variables
# bound to code can be deleted so they are not constructed when the
# error page asks for them.
#
# Revision 1.1  2000/11/07 13:58:14  sridhar
# The Bedrock symbol table finally has a class of its own. Has an
# optimization: a variable can be bound with a `sub' which is invoked if
# the variable is referenced. This constructs the object. Might save
# some cycles for scripts which don't use many Bedrock objects.
#
#
