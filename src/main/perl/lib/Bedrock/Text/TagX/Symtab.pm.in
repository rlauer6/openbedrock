package TagX::Symtab;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2025, TBC Developmentgroup, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Scalar::Util qw(blessed reftype);
use Tie::Hash;

@TagX::Symtab::ISA = qw ( Tie::StdHash );

########################################################################
sub TIEHANDLE {
########################################################################
  my ($class) = @_;

  my $self = bless {}, $class;

  $self->{data} = {};
  $self->{code} = {};

  return $self;
}

########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;

  # Check to see if frames exist and requested key has an entry in
  # the topmost frame, and return that if available
  if ( exists $self->{frames} and exists $self->{frames}->[0]->{$key} ) {
    return $self->{frames}->[0]->{$key};
  }

  # Else check in the actual symbol table for the value
  if ( exists $self->{data}->{$key} ) {
    return $self->{data}->{$key};
  }
  elsif ( exists $self->{code}->{$key} ) {

    # Else do the code ref symbol table
    my $code = delete $self->{code}->{$key};
    return $self->{data}->{$key} = $code->($self);
  }
  else {
    # failure everywhere
    return;
  }
}

########################################################################
sub define {
########################################################################
  my ( $self, $k, $v ) = @_;

  my $stash = reftype( $v // q{} ) eq 'CODE' ? 'code' : 'data';

  return $self->{$stash}{$k} = $v;
}

########################################################################
sub STORE {
########################################################################
  my ( $self, $key, $value ) = @_;

  # If frames exists, store in topmost frame -- presumes no values are code refs
  if ( exists $self->{frames} ) {
    $self->{frames}->[0]->{$key} = $value;
    return $value;
  }

  # If value is a code-ref, store in code ref symbol table,
  # else store in the actual symbol table
  if ( ref($value) eq 'CODE' ) {
    $self->{code}->{$key} = $value;
  }
  else {
    $self->{data}->{$key} = $value;
  }

  return $value;
}

########################################################################
sub DELETE {
########################################################################
  my ( $self, $key ) = @_;

  # Delete from frame if frames exist
  if ( exists $self->{frames} ) {
    return delete $self->{frames}->[0]->{$key};
  }

  # delete from symbol table or code-ref table
  if ( exists $self->{data}->{$key} ) {
    return delete $self->{data}->{$key};
  }
  elsif ( exists $self->{code}->{$key} ) {
    return delete $self->{data}->{$key};
  }

  return;
}

########################################################################
sub CLEAR {
########################################################################
  my ($self) = @_;

  # Clear frame if frames exist
  if ( exists $self->{frames} ) {
    %{ $self->{frames}->[0] } = ();
    return;
  }

  %{ $self->{data} } = ();
  %{ $self->{code} } = ();

  return;
}

########################################################################
sub EXISTS {
########################################################################
  my ( $self, $key ) = @_;

  if ( exists $self->{frames} and exists $self->{frames}->[0]->{$key} ) {
    return 1;
  }
  elsif ( exists $self->{data}->{$key} ) {
    return 1;
  }
  elsif ( exists $self->{code}->{$key} ) {
    return 1;
  }
  else {
    return 0;
  }
}

########################################################################
sub FIRSTKEY {
########################################################################
  my ($self) = @_;

  delete $self->{keys};

  if ( exists $self->{frames} ) {
    my $k = {};
    %{$k} = ( %{ $self->{frames}->[0] } );

    for my $name ( keys %{ $self->{data} } ) {
      next if exists $k->{$name};
      $k->{$name} = $self->{data}->{$name};
    }
    $self->{keys} = $k;
  }
  else {
    $self->{keys} = $self->{data};
  }

  my $a = keys %{ $self->{keys} };

  return each %{ $self->{keys} };
}

########################################################################
sub NEXTKEY {
########################################################################
  return each %{ $_[0]->{keys} };
}

########################################################################
sub new {
########################################################################
  my ($class) = @_;

  my $self = bless {}, $class;
  tie %{$self}, $class;  ## no critic

  return $self;
}

########################################################################
sub close {  ## no critic
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  delete $self->{keys};
  my %objects_to_close;

  for my $name ( keys %{ $self->{data} } ) {
    my $value = $self->{data}->{$name};

    # No destruction if value is not an object
    next if !ref $value;

    # skip if we've already called this object's destructor
    next if exists $objects_to_close{$value};

    # No destruction unless the object has a `closeBLM()' method
    next if !( blessed $value && $value->can('closeBLM') );

    $objects_to_close{$value} = 1;

    # Close it
    $value->closeBLM;
  }

  continue {
    delete $self->{data}->{$name};
  }

  return;
}

########################################################################
sub new_frame {
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  if ( exists $self->{frames} ) {
    $self->{'frames'} = [];
  }

  return unshift @{ $self->{frames} }, {};
}

########################################################################
sub end_frame {
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  if ( exists $self->{frames} ) {
    shift @{ $self->{frames} };
  }

  if ( @{ $self->{frames} } == 0 ) {
    delete $self->{frames};
  }

  return;
}

1;

__END__
