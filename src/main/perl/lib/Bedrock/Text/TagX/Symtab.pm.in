#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package TagX::Symtab;

use Tie::Hash;
@TagX::Symtab::ISA = qw ( Tie::StdHash );

sub new
{
    my $class = shift;
    my $self = bless {}, $class;
    tie %{$self}, $class;
    $self;
}

sub close
{
    my $obj = shift;
    my $self = tied(%{$obj});
    for my $name (keys %{$self}) {
	my $value = $self->{$name};
	my $rv = ref($value);

	# No destruction if value is not an object, or the value is a
	# code ref, which means the object was not constructed at all
	next unless $rv;
	next if $rv eq 'CODE';

	# No destruction unless the object has a `closeBLM()' method
	next unless &UNIVERSAL::can($value, 'closeBLM');

	# Close it
	$value->closeBLM;
    } continue {
	delete $self->{$name};
    }
}

sub FETCH
{
    my ($self, $key) = @_;
    return undef unless exists $self->{$key};
    if ( &UNIVERSAL::isa($self->{$key}, 'CODE') ) {
	$self->{$key} = $self->{$key}->();
    }
    $self->{$key};
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/11/07 13:58:14  sridhar
# The Bedrock symbol table finally has a class of its own. Has an
# optimization: a variable can be bound with a `sub' which is invoked if
# the variable is referenced. This constructs the object. Might save
# some cycles for scripts which don't use many Bedrock objects.
#
#
