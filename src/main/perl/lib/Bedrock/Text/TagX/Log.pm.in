#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Log;
# should no longer be used...replaced with Bedrock::Logger

use strict;
use warnings;

use Bedrock::Constants qw(:booleans :chars);
use English qw(-no_match_vars);
use Date::Format;
use Data::Dumper;

use parent qw(Exporter);

our @EXPORT    = qw (log_message);
our @EXPORT_OK = qw (start_logger);

use Scalar::Util qw(reftype blessed);

my %options = (
  LOG_MAXSIZE  => 100_000,
  LOG_WARNINGS => 'off',
  LOG_ERRORS   => 'off',
  LOG_FORMAT   => '%m/%d/%Y %H:%M:%S'
);

########################################################################
sub start_logger {
########################################################################
  my %args = @_;

  if ( !$args{LOG_FILE} && !$args{LOG_SPOOLER} ) {
    return $FALSE;
  }

  # override default options
  @options{ keys %args } = values %args;

  my ( $logfile, $maxsize ) = @options{qw(LOG_FILE LOG_MAXSIZE)};

  if ( $logfile && $logfile ne 'STDERR' ) {
    if ( -e $logfile ) {
      # truncate log unless LOG_MAXSIZE < 0
      if ( $maxsize == 0 || ( $maxsize > 0 && ( stat $logfile )[7] > $maxsize ) ) {
        open my $fh, '>', $logfile;
        close $fh;
      }
    }

    # Redirect STDERR too to append to logfile
    if ( !open( STDERR, '>>', $logfile ) ) {
      warn __PACKAGE__, " unable to append to log file [$logfile]: $OS_ERROR";
      return;
    }

    my $fd = IO::Handle->new_from_fd( 'STDERR', 'a' );
    $fd->autoflush(1);
    $fd->close;
  }

  # log warnings/errors to page log, unless in eval {}
  $SIG{__DIE__} = $SIG{__WARN__} = sub {
    # don't log if we are in an eval {}
    return
      if $EXCEPTIONS_BEING_CAUGHT;

    unshift @_, undef;
    goto &log_message;
  };

  log_message( undef, 'started logger' );

  return;
}

########################################################################
sub log_message {
########################################################################
  my ( $obj, @raw_message ) = @_;

  if ( !$options{LOG_FILE} && !$options{LOG_SPOOLER} ) {
    return 0;
  }

  # -- get caller
  my ( $pack, $filename, $line ) = caller;

  # -- set page
  my $page = eval {
    if ( $ENV{BEDROCK_URI} ) {
      $ENV{BEDROCK_URI};
    }
    elsif ( $ENV{BEDROCK_FILE} ) {
      $ENV{BEDROCK_FILE};
    }
    else {
      my @stack;
      my $i = 0;

      while ( my @details = caller( $i++ ) ) {
        push @stack, \@details;
      }
      ( pop @stack )->[1];
    }
  };

  # -- set loc input location tracking
  my $loc = $EMPTY;

  if ( blessed($obj) && $obj->can('start_location') ) {
    $loc = sprintf "[%s]\n[%s]\n", $obj->start_location, $obj;
  }

  # -- set time, default: %m/%d/%Y %H:%M:%S
  my $time = time2str( $options{LOG_FORMAT}, time );

  # -- create log message
  my $message = sprintf "%s [%s]\t[%s]\t%s(%s)\n%s%s\n", $time, $PID, $page, $filename, $line, $loc,
    "@raw_message";

  # -- write log message to file, stderr, or spooler
  if ( $options{LOG_FILE} && $options{LOG_FILE} ne 'STDERR' ) {
    my $logfile = $options{LOG_FILE};

    open my $fh, '>>', $logfile
      or do {
      warn sprintf '%s could not open log file: [%s]: %s', __PACKAGE__, $logfile, $OS_ERROR;
      return;
      };

    print {$fh} $message;

    close $fh;
  }
  elsif ( $options{LOG_FILE} eq 'STDERR' ) {
    print {*STDERR} $message;
  }
  elsif ( $options{LOG_SPOOLER} ) {
    require Bedrock::Log::Spooler;

    my %spooler_options = ( channel => "bedrock/log$page" );

    # note LOG_SPOOLER can override channel
    #
    # <object name="HTML_LOGSPOOLER">
    #   <scalar name="channel">mychannel</scalar>
    # </object>
    #
    if ( ref( $options{LOG_SPOOLER} ) && reftype( $options{LOG_SPOOLER} ) eq 'HASH' ) {
      @spooler_options{ keys %{ $options{LOG_SPOOLER} } } = values %{ $options{LOG_SPOOLER} };
    }

    eval {
      my $spooler = Bedrock::Log::Spooler->instance(%spooler_options);

      $spooler->publish(
        \@raw_message,
        page     => $page,
        line     => $line,
        loc      => $loc,
        filename => $filename
      );
    };

    if ($EVAL_ERROR) {
      print {*STDERR} 'error spooling log message: ' . $EVAL_ERROR;
      print {*STDERR} $message;
    }
  }

  return;
}

1;

__END__
