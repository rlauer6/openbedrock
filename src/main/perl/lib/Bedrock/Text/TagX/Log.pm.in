#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Log;

use strict;
use warnings;

use Date::Format;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @EXPORT @EXPORT_OK);
  @ISA = qw (Exporter);
}

@EXPORT = qw (log_message);
@EXPORT_OK = qw (start_logger);

use Scalar::Util qw/reftype blessed/;

my %options = (
	       'LOG_MAXSIZE'  => 100000,
	       'LOG_WARNINGS' => 'off',
	       'LOG_ERRORS'   => 'off',
	       'LOG_FORMAT'   => '%m/%d/%Y %H:%M:%S'
	      );

sub start_logger {
  my %args = @_;
  
  return unless $args{LOG_FILE};

  # override default options
  @options{keys %args} = values %args;
  
  my ( $logfile, $maxsize ) = @options{qw(LOG_FILE LOG_MAXSIZE)};
  
  # truncate log unless LOG_MAXSIZE < 0
  if ( $maxsize == 0 || ( $maxsize > 0 && ( stat($logfile) )[7] > $maxsize ) ) {
    open( FILE, ">$logfile" );
    close FILE;
  }

  # Redirect STDERR too to append to logfile
  unless ( open( STDERR, ">> $logfile" ) ) {
    warn __PACKAGE__,
    ":start_logger(): Unable to append to log file $logfile: $!\n";
    return;
  }
  
  my $fd = IO::Handle->new_from_fd( 'STDERR', 'a' );
  $fd->autoflush(1);
  $fd->close;

  # log warnings/errors to page log, unless in eval {}
  $SIG{__DIE__} = $SIG{__WARN__} = sub {
    # don't log if we are in an eval {}
    return unless defined $^S and $^S == 0;
    
    unshift @_, undef;
    goto &log_message
  };
 
  &log_message( undef, "started logger");
}


sub log_message {
  my $obj = shift;
  
  return unless exists $options{LOG_FILE};

  my $logfile = $options{LOG_FILE};
  open( LOG, ">> $logfile" ) or return;
   
  # Make caller
  my ( $pack, $filename, $line ) = caller;

  # Input location tracking
  my $loc = '';
  if ( blessed($obj) && $obj->can('start_location') ) {
    $loc = "[" . $obj->start_location . "]\n[$obj]\n";
  }

  # default: %m/%d/%Y %H:%M:%S
  my $time = time2str($options{LOG_FORMAT}, time);

  # And print message
  my $page = eval {
    if ( $ENV{BEDROCK_URI} ) {
      $ENV{BEDROCK_URI};
    }
    elsif ( $ENV{BEDROCK_FILE} ) {
      $ENV{BEDROCK_FILE};
    }
    else {
      'unknown';
    }
  };
  
  print LOG "$time \[$$\]\t[$page]\t$filename($line)\n$loc@_\n";

  close LOG;
}

1;
