#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package TagX::Log;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @EXPORT @EXPORT_OK);
  @ISA = qw (Exporter);
}

@EXPORT = qw (log_message);
@EXPORT_OK = qw (start_logger);

use Scalar::Util qw/reftype blessed/;

my %options = ( 'LOG_MAXSIZE' => 100000 );

sub start_logger {
  my %args = @_;
  return unless $args{LOG_FILE};

  my ( $key, $value );
  while ( ( $key, $value ) = each %args ) {
    $options{$key} = $args{$key};
  }

  my ( $logfile, $maxsize ) = @options{qw(LOG_FILE LOG_MAXSIZE)};
  if ( ( stat($logfile) )[7] > $maxsize ) {
    open( FILE, ">$logfile" );
    close FILE;
  }

  # Redirect STDERR too to append to logfile
  unless ( open( STDERR, ">> $logfile" ) ) {
    warn __PACKAGE__,
    ":start_logger(): Unable to append to log file $logfile: $!\n";
    return;
  }
  my $fd = IO::Handle->new_from_fd( 'STDERR', 'a' );
  $fd->autoflush(1);
  $fd->close;
  print STDERR
"================================================================================";

  # And log a sample message
  &log_message( undef, "started logger" );
  $SIG{__WARN__} = $SIG{__DIE__} = sub { unshift @_, undef; goto &log_message };
}

sub log_message {
  my $obj = shift;
  return unless exists $options{LOG_FILE};

  my $logfile = $options{LOG_FILE};
  open( LOG, ">> $logfile" ) or return;

  # Make time
  my @t = localtime;
  my $time = sprintf "%02d/%02d/%4d %02d:%02d:%02d", $t[4] + 1, $t[3],
  1900 + $t[5], $t[2], $t[1], $t[0];

  # Make caller
  my ( $pack, $filename, $line ) = caller;

  # Input location tracking
  my $loc = '';
  if ( blessed($obj) && $obj->can('start_location') ) {
    $loc = "[" . $obj->start_location . "]\n[$obj]\n";
  }

  # And print message
  print LOG "\n$time \[$$\]\t\t$filename($line)\n$loc@_\n";
  close LOG;
}

1;

#
# Revision 1.9  2012/07/29 18:35:30  lauerrc
# - avoid calling the 'start_location' method if an object was not passed to the log_message method
#
# Revision 1.8  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.7  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.6  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.5  2010/11/29 15:57:53  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.4  2008/12/03 14:01:20  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.3  2001/02/14 15:35:49  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/10/17 15:37:38  sridhar
# Complains loudly (using `warn') if unable to open log file.
#
# Revision 1.1  2000/04/24 12:45:46  sridhar
# Added TagX::Log for logging messages
#
#
