#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Text::URLEncode;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA @EXPORT_OK);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
    @EXPORT_OK  = qw (&Encode &encode &Decode &decode);
}

#
# Package for encoding URLs
#

#
# We need this hash to avoid expensive sprintfs for each character
#
my %escapes;
for my $num (0..255) {
    $escapes{chr($num)} = sprintf "%02x", $num;
}

#
# Routine modifies the arguments to escape the characters. Pass one or more
# arguments. The arguments are URLencoded.
# Modifications are done as follows: Refer to RFC 2396 for details.
# The following classes of characters are escaped:
#    Reserved chars: ;/?:@&=+$,
#    Excluded chars: < >, a space char
#    Delimiters: <>#%"
#    Unwise characters: {}|\^[]`
# The following class is not included, but could be included if need arises
#    Unreserved marks: -_.!~*'()
# In addition, chars in the range \x00 - \x1f and \x7f should be escaped, but
# need hasn't arisen for that yet.
# Update: I added support for \x0a (newline) because the need has arisen. -Al
# NOTE: Routine doesn't return anything. The arguments are modified directly
# 
sub encode
{
    for (@_) {
	s/([\;\n\/\?\:\@\&\=\+\$\,\<\>\#\%\"\{\}\|\\\^\[\]\`])/%$escapes{$1}/g;
	s/ /%20/g;
    }
}

#
# This is a routine which encodes without modifying the input value
#
sub Encode
{
    my $data = shift;
    &encode ( $data );
    $data;
}

#
# Routine to decode a URL encoded string -- modifies input
#
sub decode
{
    for (@_) {
	s/\+/ /g;
	s/%([0-9a-f]{2})/chr(hex($1))/ieg;
    }
}

#
# This is a routine which decodes without modifying the input value
#
sub Decode
{
    my $data = shift;
    &decode ( $data );
    $data;
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2005/02/22 20:12:54  aviert
# The following changes have been taken from the current production environment, located
# on cjx-devl. There are minor differences between what's currently in the repository
# and what's there, due to ad-hoc bug fixes that never made their way back into cvs.
#
# Revision 1.3  2001/02/14 15:35:48  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/06/01 17:24:30  sridhar
# 1. Added Decode functions for decoding encoded URIs
# 2. Defined @EXPORT_OK tags for optional exports.
#
# Revision 1.1  2000/02/04 16:05:44  sridhar
# teca`í¢∂ôÙ%Jn@ÓOê◊8éD˘|©=·:‰8‚S˘ÈÈ±æ
#
#

1;
