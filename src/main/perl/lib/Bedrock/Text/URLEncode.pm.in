#!/usr/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package Text::URLEncode;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

#
# Package for encoding URLs
#

#
# We need this hash to avoid expensive sprintfs for each character
#
my %escapes;
for my $num (0..255) {
    $escapes{chr($num)} = sprintf "%02x", $num;
}

#
# Routine modifies the arguments to escape the characters. Pass one or more
# arguments. The arguments are URLencoded.
# Modifications are done as follows: Refer to RFC 2396 for details.
# The following classes of characters are escaped:
#    Reserved chars: ;/?:@&=+$,
#    Excluded chars: < >, a space char
#    Delimiters: <>#%"
#    Unwise characters: {}|\^[]`
# The following class is not included, but could be included if need arises
#    Unreserved marks: -_.!~*'()
# In addition, chars in the range \x00 - \x1f and \x7f should be escaped, but
# need hasn't arisen for that yet.
# NOTE: Routine doesn't return anything. The arguments are modified directly
# 
sub encode
{
    for (@_) {
	s/([\;\/\?\:\@\&\=\+\$\,\<\>\#\%\"\{\}\|\\\^\[\]\`])/%$escapes{$1}/g;
	s/ /+/g;
    }
}

sub Encode
{
    my $data = shift;
    &encode ( $data );
    $data;
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/02/04 16:05:44  sridhar
# teca`í¢∂ôÙ%Jn@ÓOê◊8éD˘|©=·:‰8‚S˘ÈÈ±æ
#
#

1;
