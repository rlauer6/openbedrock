#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Text::URLEncode;

use strict;
use warnings;

use Bedrock;

use parent qw{ Exporter };

our @EXPORT_OK = qw(Encode encode Decode decode htmlencode Htmlencode);

our %EXPORT_TAGS = (
  'all'    => [@EXPORT_OK],
  'decode' => [qw(decode Decode)],
  'encode' => [qw(encode Encode htmlencode Htmlencode)],
);

my %escapes = map { chr $_ => sprintf '%02x', $_; } ( 0 .. 255 );

## no critic (RequireArgUnpacking);

########################################################################
sub encode {
########################################################################
  for (@_) {
    s/([\;\n\/\?\:\@\&\=\+\$\,\<\>\#\%\"\{\}\|\\\^\[\]\`])/%$escapes{$1}/xsmg;
    s/\s/%20/xsmg;
  }

  return;
}

########################################################################
sub Encode {
########################################################################
  my ($data) = @_;

  encode($data);

  return $data;
}

########################################################################
sub decode {
########################################################################
  for (@_) {
    s/[+]/ /xsmg;
    s/%([\d[:lower:]]{2})/chr(hex($1))/ixsmeg;
  }

  return;
}

########################################################################
sub Decode {
########################################################################
  my ($data) = @_;

  decode($data);

  return $data;
}

########################################################################
sub htmlencode {
########################################################################

  for (@_) {
    s/\&/\&amp;/xsmg;
    s/\</\&lt;/xsmg;
    s/\>/\&gt;/xsmg;
    s/\"/\&quot;/xsmg;    # &quot;
    s/\x27/\&\#39;/xsmg;  # &apos;
    s/\`/\&\#96;/xsmg;    # &grave;
  }

  return;
}

########################################################################
sub Htmlencode {
########################################################################
  my ($data) = @_;

  htmlencode($data);

  return $data;
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 NAME

Bedrock::Text::URLEncode - methods to URL encode/decode strings

=head1 SYNOPSIS

 use Bedrock;
 use Text::URLEncode qw(encode decode);

 encode($url);

 decode($url);

=head1 DESCRIPTION

Methods for encoding/decoding string. Modifications are done as
follows: Refer to L<RFC 2396|https://www.rfc-editor.org/rfc/rfc2396> for details.

The following classes of characters are escaped:

=over 5

=item Reserved chars

  ;/?:@&=+$,

=item Excluded chars

 < >, a space char

=item Delimiters

 <>#%"

=item Unwise characters

 {}|\^[]`

=item Unreserved marks

The following class is not included, but could be included if need
arises:

 -_.!~*'()

In addition, chars in the range \x00 - \x1f and \x7f should be
escaped, but the need hasn't arisen for that yet.

=head1 METHODS AND SUBROUTINES

Exports nothing.

=head2 Export Tags

=over 5

=item :all

 encode Encode decode Decode htmlencode Htmlencode

=item :encode

 encode Encode htmlencode Htmlencode

=item :decode

 decode Decode

=back

I<NOTE: Methods that begin with lowercase letters modify the input.  Uppercase methods do not.>

=head2 Encode

Routine to encode a URL.

 my $encode_url = Encode($url);

=head2 encode

 encode($url);

=head2 Decode

Routine to decode a URL encoded string.

 my $decode_url = Decode($url);

=head2 decode

 decode($url);

=head2 Htmlencode

Routine to encode a string as HTML. Encodes the following characters to HTML.

    '&' => &amp;
    '<' => &lt;
    '>' => &gt;
    '"' => &#34;
    '   => &#39; ( apostrophe, single quote)
    `   => &#180; (acute )

 my $html = Htmlencode($str);

=head2 htmlencode

 htmlencode($str);

=head1 AUTHOR

J.Sridar

=head1 SEE OTHER

=cut
