#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Text::URLEncode;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @EXPORT_OK);
  @ISA       = qw (Exporter);
  @EXPORT_OK = qw (&Encode &encode &Decode &decode &htmlencode &Htmlencode);
  use lib '@perl5_pkglibdir@/Bedrock';
}

#
# Package for encoding URLs
#

#
# We need this hash to avoid expensive sprintfs for each character
#
my %escapes;
for my $num ( 0 .. 255 ) {
  $escapes{ chr($num) } = sprintf "%02x", $num;
}

#
# Routine modifies the arguments to escape the characters. Pass one or more
# arguments. The arguments are URLencoded.
# Modifications are done as follows: Refer to RFC 2396 for details.
# The following classes of characters are escaped:
#    Reserved chars: ;/?:@&=+$,
#    Excluded chars: < >, a space char
#    Delimiters: <>#%"
#    Unwise characters: {}|\^[]`
# The following class is not included, but could be included if need arises
#    Unreserved marks: -_.!~*'()
# In addition, chars in the range \x00 - \x1f and \x7f should be escaped, but
# need hasn't arisen for that yet.
# Update: I added support for \x0a (newline) because the need has arisen. -Al
# NOTE: Routine doesn't return anything. The arguments are modified directly
#
sub encode {
  for (@_) {
    s/([\;\n\/\?\:\@\&\=\+\$\,\<\>\#\%\"\{\}\|\\\^\[\]\`])/%$escapes{$1}/g;
    s/ /%20/g;
  }
}

#
# This is a routine which encodes without modifying the input value
#
sub Encode {
  my $data = shift;
  &encode($data);
  $data;
}

#
# Routine to decode a URL encoded string -- modifies input
#
sub decode {
  for (@_) {
    s/\+/ /g;
    s/%([0-9a-f]{2})/chr(hex($1))/ieg;
  }
}

#
# This is a routine which decodes without modifying the input value
#
sub Decode {
  my $data = shift;
  &decode($data);
  $data;
}

sub htmlencode {
  for (@_) {
    s/\&/\&amp;/g;
    s/\</\&lt;/g;
    s/\>/\&gt;/g;
    s/\"/\&\#34;/g;      # &quot;
    s/\x27/\&\#39;/g;    # &apos;
    s/\'/\&\#180;/g;     # &acute;
  }
}

sub Htmlencode {
  my $data = shift;
  &htmlencode($data);
  $data;
}

1;
