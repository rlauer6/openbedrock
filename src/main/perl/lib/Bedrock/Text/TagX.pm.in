#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Text::TagX;

use strict;
use warnings;

use Carp;
use IO::Scalar;
use File::Basename;
use Scalar::Util qw/reftype/;

use TagX::Error;
use TagX::Expr;
use TagX::Func;
use TagX::Log;
use TagX::Output;
use TagX::Parser;
use TagX::Scalar;
use TagX::Symtab;
use TagX::TAG;
use TagX::TAG::NoBody;
use TagX::TAG::NoBody::Array;
use TagX::TAG::NoBody::Exec;
use TagX::TAG::NoBody::Flush;
use TagX::TAG::NoBody::Comment;
use TagX::TAG::NoBody::Pebble;
use TagX::TAG::NoBody::Include;
use TagX::TAG::NoBody::Hash;
use TagX::TAG::NoBody::NULL;
use TagX::TAG::NoBody::Raise;
use TagX::TAG::NoBody::SQL;
use TagX::TAG::NoBody::SQLCommit;
use TagX::TAG::NoBody::SQLRollback;
use TagX::TAG::NoBody::SQLConnect;
use TagX::TAG::NoBody::SQLTable;
use TagX::TAG::NoBody::Open;
use TagX::TAG::NoBody::Plugin; 
use TagX::TAG::NoBody::RecordSet;
use TagX::TAG::NoBody::Case;
use TagX::TAG::NoBody::Trace;
use TagX::TAG::NoBody::Var;
use TagX::TAG::WithBody;
use TagX::TAG::WithBody::Cache;
use TagX::TAG::WithBody::Catch;
use TagX::TAG::WithBody::If;
use TagX::TAG::NoBody::Iif;
use TagX::TAG::WithBody::Unless;
use TagX::TAG::WithBody::If::Else;
use TagX::TAG::WithBody::Loop;
use TagX::TAG::WithBody::Loop::Foreach;
use TagX::TAG::WithBody::Loop::SQLSelect;
use TagX::TAG::WithBody::Loop::While;
use TagX::TAG::WithBody::NoExec;
use TagX::TAG::WithBody::PebbleDef;
use TagX::TAG::WithBody::Sink;
use TagX::TAG::WithBody::Snippet;
use TagX::TAG::WithBody::Try;
use TagX::Term;
use TagX::Term::String;
use TagX::Term::Var;

use Data::Dumper;

$Text::TagX::Opentag_expr =
'^(\#|\?|array|case|noexec|pebble|plugin|var|hash|include|sink|snippet|sql|sqlrollback|sqlcommit|sqlconnect|sqltable|trace|foreach|sqlselect|while|iif|if|unless|else?if|try|catch|raise|recordset|else|null|exec|open|pebbledef|flush)(?=\W)';
$Text::TagX::Closetag_expr =
'^(/sink|/snippet|/sqlselect|/noexec|/pebbledef|/foreach|/while|/if|/unless|/try)>';
$Text::TagX::Options_expr = '^\s*(([^>\\\\]|\\\\.)*)>';

sub parse {
  my $self    = shift;
  my $newscan = 1;

  my $obj = TagX::TAG::WithBody::Cache->new($self);
  
  my $input = $self->{'input'};

  my $optstring = '';

  my $text = '';
  my $line = 0;
  my $file = $self->{'error'}->file;

  local ($_);
  my $raw;

  INPUT:
  while (<$input>) {
    # bedrock shell shebang
    next if $line == 0 && /^#!/;

    $self->{'error'}->line( ++$line );
    MAIN: {

      #
      # Check whether we are into a new scan or collecting options
      # for a matched tag
      #
      unless ($newscan) {

        # Collecting options for a matched tag -- Look for tag end which is
        # an un-escaped '>'
        if (s/$Text::TagX::Options_expr//o) {

	  # Found an un-escaped '>', which terminates the current tag and its options
	  # $optstring contains the options collected so far
          $optstring .= $1;

          # Remove escapes from the option string
          $optstring =~ s/\\([^\\])/$1/g;
          $optstring =~ s/\\\\/\\/g;

          # And set the current object options
          $obj = $obj->options($optstring);

          # Start a new scan after this
          $newscan = 1;

          # Handle possible left over stuff after the '>'
          redo MAIN;
        }
        else {

          # No terminating '>' in entire line -- start by reading input again
          $optstring .= $_;
          next INPUT;
        }
      }

      # New scan from here -- scan afresh for tags.
      # if no '<' found in line, skip line
      unless (s/^(.*?)<//oi) {
        $text .= $_ if length;
        next INPUT;
      }

      $text .= $1 if length($1);

      # We did find a '<' -- could be we have a possible supported tag next
      # Check if we have a supported tag
      my $tag = $_;

      if ( !$raw && s/$Text::TagX::Opentag_expr//oi ) {
        # Yes we do
        # The text before the '<' needs to be processed.
        if ( length($text) ) {
          $obj->text($text);
          $text = '';
        }

        for ($1) {
	  # experimental feature - flushes output buffer to /dev/null
	  /^flush$/oi and do {
	    $obj = $obj->new_child( TagX::TAG::NoBody::Flush->new );
	    last;
	  };

          /^var$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Var->new );
            last;
          };

          /^#$/ and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Comment->new );
            last;
          };

          /^case$/oi and do {
            $tag =~ /case:(.*?)\s+/i;
            $obj = $obj->new_child( TagX::TAG::NoBody::Case->new );
            last;
          };

          /^plugin$/oi and do {
            $tag =~ /plugin:(.*?)\s+/i;
            $obj = $obj->new_child( TagX::TAG::NoBody::Plugin->new );
            last;
          };

          /^sqlconnect$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLConnect->new );
            last;
          };

          /^open$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Open->new );
            last;
          };

          /^iif$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Iif->new );
            last;
          };

          /^sql$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQL->new );
            last;
          };

          /^sqlcommit$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLCommit->new );
            last;
          };

          /^sqlrollback$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLRollback->new );
            last;
          };

          /^sqltable$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLTable->new );
            last;
          };

          /^include$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Include->new );
            last;
          };

          /^foreach$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Loop::Foreach->new );
            last;
          };

          /^sink$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Sink->new );
            last;
          };

          /^snippet$/oi and do {
            die
"<snippet> is not enabled on your server. Set <scalar name='ALLOW_SNIPPET_TAG'>yes</scalar> in your tagx.xml file."
            unless $self->getoption('ALLOW_SNIPPET_TAG') =~ /^(yes|y|1)$/i;
            $obj = $obj->new_child( TagX::TAG::WithBody::Snippet->new );
            last;
          };

          /^sqlselect$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Loop::SQLSelect->new );
            last;
          };

          /^while$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Loop::While->new );
            last;
          };

          /^if$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::If->new );
            last;
          };
          /^unless$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Unless->new );
            last;
          };

          /^else?if$/oi and do {
            die "Tag is not valid here.\n" unless ref($obj) =~ /::(If|Unless)/;
            $obj = $obj->else_obj( TagX::TAG::WithBody::If::Else->new );
            last;
          };

          /^else/oi and do {
            die "Tag is not valid here.\n" unless ref($obj) =~ /::(If|Unless)/;
            $obj = $obj->else_obj( TagX::TAG::WithBody::If::Else->new );
            last;
          };

          /^trace$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Trace->new );
            last;
          };

          /^raise$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Raise->new );
            last;
          };

          /^try$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Try->new );
            last;
          };

          /^catch$/oi and do {
            die "Tag is not valid here.\n"
            unless ref($obj) =~ /TagX::TAG::WithBody::(Try|Catch)/;
            $obj = $obj->catch( TagX::TAG::WithBody::Catch->new );
            last;
          };

          /^null$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::NULL->new );
            last;
          };

	  # the null tag = ?
          /^\?$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::NULL->new );
            last;
          };

          /^exec$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Pebble->new );
            last;
          };

          /^pebble$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Pebble->new );
            last;
          };

          /^pebbledef$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::PebbleDef->new );
            $raw = 1;
            last;
          };

          /^noexec$/oi and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::NoExec->new );
            $raw = 1;
            last;
          };

          /^hash$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Hash->new );
            last;
          };

          /^array$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Array->new );
            last;
          };

          /^recordset$/oi and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::RecordSet->new );
            last;
          };

          die "Tag <$_> not implemented";
        }

        $obj->start_location( $file, $line );

        # After creating object of suitable type depending on the tag, check
        # if the tag ends on the same line. Tag ending is an un-escaped '>'.
        if (s/$Text::TagX::Options_expr//oi) {

	  if ( ref($obj) eq 'TagX::TAG::NoBody::Comment' && /$/ ) {
	    $_ = '';
	  }

          # The tag definition ended on same line -- all options specified on
          # one line
          my $options = $1;

          # Unescape the options
          $options =~ s/\\([^\\])/$1/g;
          $options =~ s/\\\\/\\/g;

          # And set the current object options
          $obj = $obj->options($options);

        # And rescan the string for more tags -- Note that $newscan is unchanged
        # from its value of 1, so we don't need to set it here
          redo MAIN;
        }
        else {

       # Tag definition did not end on one line -- Further input is consumed for
       # looking for the tag ending
          $newscan = 0;

          # Start collection of the options string
          $optstring = $_;
        }

      }
      elsif (s/$Text::TagX::Closetag_expr//oi) {

        my $end = lc($1);
        if ( $raw ) {
          if ( $end =~/\/(pebbledef|noexec)/ ) {
            $obj->text($text);
            $obj = $obj->end_child;
            $raw = 0;
	    $text = '';
          }
          else {
            $text .= '<' . $1 . '>';
          }
          redo MAIN;
        }
        else {
          die "Illegal tag-end encountered.\n" unless $obj->parent;
          $end = '/if' if $end eq '/unless';

          $self->improper_end( $obj, $end )
	    unless $obj->closure eq $end;

          # A tag has ended. The text before the '<' needs to be processed.
          if ( length($text) ) {
            $obj->text($text);
            $text = '';
          }

          # Check whether we have hit a tag-body-ending tag
          # and if so, end the current object
          $obj = $obj->end_child;

          # And rescan string for more tags
          redo MAIN;
        }
      }
      else {

        # Unsupported tag hit -- output the '<' since we don't consume it
        $text .= '<';

        # And rescan for more tags
        redo MAIN;
      }
    }
  }

  if ( $obj->parent ) {
    my ( $file, $line ) = $obj->start_location;
    die "Tag on line $line not closed properly.\n";
  }

  if ( length($text) ) {
    $obj->text($text);
    $text = '';
  }

  $obj->finalize;
}

sub improper_end {
  my $self    = shift;
  my $obj     = shift;
  my $endexpr = shift;

  my $iObj = $obj;
  while ( $iObj->parent ) {
    my $closure = $iObj->closure;
    if ( $endexpr eq $closure ) {
      my ( $file, $line ) = $obj->start_location;
      die "Tag on line $line should be closed here.\n";
    }
    $iObj = $iObj->parent;
  }

  die "Illegal tag-end encountered.\n";
}

sub output {
  my $self = shift;

  eval { $self->parse };

  $self->{'__input_opened'}->close if $self->{'__input_opened'};

  if ($@) {
    chomp $@;
    $self->error->mesg($@);
    die "$@\n";
  }
  else {
    $self->error->endLevel;
  }
}

sub show_error {
  my $self    = shift;
  my $errfile = shift;

  local (*FILE);

  unless ( open( FILE, $errfile ) ) {
    warn "Unable to open $errfile: $!\n";
    my $err                = $self->{error}->mesg;
    my $html_error_message = <<eot;
<html>
<head>
<title>Bedrock Error</title>
</head>
<body>
The following Bedrock error has been encountered:
<pre style="color:brown;">
$err
</pre>
<hr>
<div style="color:red;font-style:italic;">
Something's also wrong with your Bedrock configuration.  You've specfied an <b>ERROR_LOCATION</b> or 
<b>BEDROCK_ERROR_LOCATION</b> ($errfile) but it appears the file does not exist.  
Please check your <b><i>tagx.xml</i></b>.
</div>

<pre>
<b>$errfile</b> is empty or does not exist.
</pre>

</body>
</html>
eot
    my $fh = IO::Scalar->new( \$html_error_message );
    $self->{'input'} = $fh;
    $self->output;
    $fh->close;
  }
  else {
    eval {
      $self->{'input'} = *FILE;
      my $error = $self->{'error'};
      $self->{'error'} = TagX::Error->new($errfile);
      $self->param( 'ERROR' => $error );
      $self->output;
      close FILE;
    };
    if ($@) {
      warn "Error in error handler: $@";
    }
  }
}

sub error {
  $_[0]->{'error'};
}

sub define_name {
  my ( $self, $name, $value ) = @_;
  my @components = split /\./oi, $name;
  return unless @components;

  &log_message( undef, "$self: components are (@components)" );
  my $found = $self->{'VARS'};
  for (@components) {
    if (/^\Q[\E(\d+)\Q]\E/) {

      # array element
      if ( reftype($found) eq 'ARRAY' ) {
        $found = $found->[$1];
        next;
      }
      else {
        &log_message( undef, "Cannot define [$_] component in $name: $found is not an array" );
	return;
      }
    }

    if (/^(\w+)/) {

      # hash element
      my $key = $1;
      if ( reftype($found) eq 'HASH' ) {
        $found = $found->{$key};
      }
      else {

        # Support syntax for accessing hash contained in an array
        # if the array contains only one element
        unless ( (reftype($found) eq 'ARRAY')  and @{$found} == 1 ) {
          &log_message(undef, "Cannot define [$_] component in [$name]: $found is an array\n"
		       . "containing more than one element .. cannot access it as a hash"
		      );
          return undef;
        }
        $found = $found->[0]->{$key};
      }
      next;
    }

    # illegal
    return;
  }
  &log_message( undef, "$self: finally found [$found]" );
  $found = $value;
}

sub define_pebble {
  my $self = shift;
  my %args = @_;
  my ( $name, $value );

  while ( ( $name, $value ) = each %args ) {
    if ( exists $self->pebble_cache->{$name} ) {
      &log_message( undef, "redefining pebble: [$name]" );
    }
    if ($value) {
      $self->store_pebble( $name, $value );
    }
    else {
      &log_message( undef, "WARNING: undefined pebble: [$name]" );
    }
  }
}

# return the pebble text or the pebble name from cache or file
sub pebble {
  my $self = shift;

  my $pebble;
  if ( ref( $_[0] ) ) {
    foreach $pebble ( keys %{ $self->pebble_cache } ) {
      return $pebble if $_[0] == $self->pebble_cache->{$pebble}->{handle};
    }
    return 'anonymous';
  }
  else {
    $pebble = $self->fetch_pebble( $_[0] );    # look in cache, first

    unless ($pebble) {
      my $file = $self->find_file( @_ );
      die "could not find pebble:" . $_[0] . "\n"
	unless $file;

      $pebble = $self->fetch_pebble( $_[0], $file );
    }
  }

  return $pebble;
}

# return a value from Bedrock's config or the config object
sub config {
  my $self = shift;

  return $self->ctx && $self->ctx->can('config') ? $self->ctx->config(@_) : undef;
}

sub store_pebble {
  my $self = shift;
  my ( $name, $value ) = @_;

  $self->pebble_cache->{$name} = {} unless $self->pebble_cache->{$name};
  $self->pebble_cache->{$name}->{name} = $name;
  $self->pebble_cache->{$name}->{ ref($value) ? 'handle' : 'value' } = $value;
}

sub pebble_cache {
  $_[0]->{PEBBLE_CACHE} || do { $_[0]->{PEBBLE_CACHE} = {} };
}

sub fetch_pebble {
  my $self        = shift;
  my $pebble      = shift;
  my $pebble_file = shift;

  # see if pebble is in cache
  return $self->pebble_cache->{$pebble}->{value}
  if exists $self->pebble_cache->{$pebble};

  return undef
  unless "$pebble_file" && -s $pebble_file;

  open PEBBLE, "<$pebble_file";
  my $pebble_text = do { local $/; <PEBBLE> };
  close PEBBLE;

  # save in cache
  $self->store_pebble( $pebble, $pebble_text );

  $pebble_text;
}

# find a file using a progression locations to search
# returns the fqp or undef
sub find_file {
  my $self = shift;
  my $file = shift;
  my $ext  = shift;

  # ~ (tilde) means DOCUMENT_ROOT

  $file =~ s/^\~/$ENV{'DOCUMENT_ROOT'}\//;

  # if given an extension, then if the name does not have that
  # extension, add it
  if ( defined $ext && $file !~ /\.(.*?)$/ ) {
    $file .= $ext;
  }

  # @dirs is a list of directories to search
  my @dirs = @_;

  return -e $file ? $file : undef if $file =~ /^\//;
  my @all_dirs = map { split /:/ } @dirs;

  foreach ( map { $_ . '/' . $file } @all_dirs ) {
    return $_ if -e $_;
  }

  return undef;
}

sub param {
  my $self = shift;
  my %args = @_;
  my ( $name, $value );
  while ( ( $name, $value ) = each %args ) {
    if ( $name =~ /\./oi ) {

      # more expensive resolve operation
      $self->define_name( $name, $value );
    }
    else {
      $self->{'VARS'}->{$name} = $value;
    }
  }
}

sub out_handle {
  my $self = shift;
  $self->{'out_handle'} = shift if @_ == 1;
  $self->{'out_handle'};
}

#
# Constructor -- Invoked as follows
#    $Class_or_Object->new( $Input_Handle [, $Output_Handle [, $Error_Handler ] ] )
#    $Class_or_Object->new( $file, $ctx );
# Return the constructed object
#
sub new {
  my $proto         = shift;
  my $input         = shift;
  my $output        = shift;
  my $error_handler = shift;

  my %args = @_;

  my ( $class, $self );

  if ( $class = ref($proto) ) {
    $self = bless { 'error' => {} }, $class;
    if ($output) {
      $self->out_handle( TagX::Output->new($output) );
    }
    else {
      $self->out_handle( $proto->out_handle );
    }

    $self->{'VARS'}    = $proto->{'VARS'};
    $self->{'error'}   = $proto->{'error'}->newLevel($input);
    $self->{'DB'}      = $proto->{'DB'} if exists $proto->{'DB'};
    $self->{'options'} = $proto->{'options'} if exists $proto->{'options'};
  }
  else {
    $self = bless {}, $proto;
    $self->out_handle( TagX::Output->new($output) );
    $self->{'VARS'}  = TagX::Symtab->new;
    $self->{'error'} = TagX::Error->new($input);
    $self->{'DB'}    = {};
  }

  unless ( ref($input) ) {
    my $file_or_fd = $input;
    $input = ref($file_or_fd) ? IO::Handle->new_from_fd($file_or_fd) : IO::File->new($file_or_fd);
    $self->{'__input_opened'} = $input;
    die "Unable to open [$file_or_fd] for input: $!\n" unless $input;
  }

  $self->{'input'} = $input;
  $self->ctx($output);

  for ( keys %args ) {
    $self->{'VARS'}->{$_} = $args{$_};
  }

  $self;
}

#
# Hook for passing options to TagX.
# Takes an array which maps into a hash as arguments.
# valid options are
#   LOG_PREFIX          Directory and filename prefix for log file. An
#                       extension of `.log' is attached to this prefix
#   LOG_MAXSIZE         Maximum size of log file in bytes. If file is larger than
#                       this, it is truncated.
#   HEADER		Object for outputting headers.
#   PAGE                Filename of the Bedrock page
# Returns: Nothing.
sub options {
  my $self = shift;

  # Setting options
  my %args = @_;

  if ( defined $args{'LOG_PREFIX'} || defined $args{LOG_SPOOLER}) {
    my $pre = delete $args{'LOG_PREFIX'};
    my $max = delete $args{'LOG_MAXSIZE'};
    $max = 100000 unless defined($max);
    
    eval {
      &TagX::Log::start_logger( LOG_FILE    => $pre ? $pre . '.log' : '',
				LOG_MAXSIZE => $max,
				exists $args{LOG_SPOOLER} ? (LOG_SPOOLER => $args{LOG_SPOOLER}) : (),
				exists $args{PAGE} ? (PAGE => $args{PAGE}) : (),
			      );
    };
    
    print STDERR $@ if $@;
      
  }

  if ( exists $args{'HEADER'} ) {
    $self->out_handle->header( delete $args{'HEADER'} );
  }
  
  my %options;
  
  if ( exists $self->{options} ) {
    if ( ref($self->{options}) && reftype($self->{options}) eq 'HASH') {
      %options = %{$self->{options}};
    }
  }

  # merge options
  map { $options{$_} = $args{$_}; } keys %args;

  if ( keys %options ) {
    $self->{'options'} = \%options;
  }

  $self->{'options'};
}

sub getoption {
  my $self = shift;
  return unless exists $self->{'options'};

  # Getting options
  my $name = shift;
  return $self->{'options'}->{$name};
}

sub ctx {
  my $self = shift;

  if ( @_ ) {
    $self->{ctx} = shift;
  }

  return $self->{ctx};
}

sub close {
  my $self = shift;

  # Close any database handles left behind
  my @keys = keys %{ $self->{'DB'} };
  for my $name (@keys) {
    my $dbh = $self->{'DB'}->{$name};
    my $rc  = $dbh->disconnect;
    &log_message( undef,
         "Error shutting down db connection [$name]\n\t[" . $dbh->errstr . "]" )
    unless $rc;
    delete $self->{'DB'}->{$name};
  }

  # Clean up symbol table.
  $self->{'VARS'}->close;
  delete $self->{'VARS'};
}

1;
