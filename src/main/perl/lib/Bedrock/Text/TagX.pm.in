package Text::TagX;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

# TODO: add pod

use strict;
use warnings;

use Bedrock            qw(slurp_file :booleans);
use Bedrock::Constants qw(:booleans :chars :regexp);
use Carp;
use Cwd;
use English qw(-no_match_vars);
use File::Basename;
use IO::Scalar;
use List::Util   qw(pairs);
use Scalar::Util qw(reftype blessed);

use Role::Tiny::With;
with 'Bedrock::Logger';

use TagX::Error;
use TagX::Expr;
use TagX::Func;
use TagX::Output;
use TagX::Parser;
use TagX::Scalar;
use TagX::Symtab;
use TagX::TAG;
use TagX::TAG::NoBody;
use TagX::TAG::NoBody::Array;
use TagX::TAG::NoBody::Exec;
use TagX::TAG::NoBody::Flush;
use TagX::TAG::NoBody::Comment;
use TagX::TAG::NoBody::Pebble;
use TagX::TAG::NoBody::Include;
use TagX::TAG::NoBody::Hash;
use TagX::TAG::NoBody::NULL;
use TagX::TAG::NoBody::Raise;
use TagX::TAG::NoBody::SQL;
use TagX::TAG::NoBody::SQLCommit;
use TagX::TAG::NoBody::SQLRollback;
use TagX::TAG::NoBody::SQLConnect;
use TagX::TAG::NoBody::SQLTable;
use TagX::TAG::NoBody::Open;
use TagX::TAG::NoBody::Plugin;
use TagX::TAG::NoBody::RecordSet;
use TagX::TAG::NoBody::Case;
use TagX::TAG::NoBody::Trace;
use TagX::TAG::NoBody::Var;
use TagX::TAG::WithBody;
use TagX::TAG::WithBody::Cache;
use TagX::TAG::WithBody::Catch;
use TagX::TAG::WithBody::If;
use TagX::TAG::NoBody::Iif;
use TagX::TAG::WithBody::Unless;
use TagX::TAG::WithBody::If::Else;
use TagX::TAG::WithBody::Loop;
use TagX::TAG::WithBody::Loop::Foreach;
use TagX::TAG::WithBody::Loop::SQLSelect;
use TagX::TAG::WithBody::Loop::While;
use TagX::TAG::WithBody::NoExec;
use TagX::TAG::WithBody::PebbleDef;
use TagX::TAG::WithBody::Sink;
use TagX::TAG::WithBody::Snippet;
use TagX::TAG::WithBody::Try;
use TagX::Term;
use TagX::Term::String;
use TagX::Term::Var;

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

# NOTE: logging during parsing is unaffected by --verbose option
# if you want to see some debugging output you need to set the log level
# of the TagX category directly in the Lo::Log4perl configuration file
########################################################################
sub parse {
########################################################################
  my ($self) = @_;

  my $optstring = $EMPTY;

  my $text = $EMPTY;

  my $line = 0;

  my $file = $self->{'error'}->file;

  local $_ = undef;

  my $raw = $FALSE;

  my $obj = TagX::TAG::WithBody::Cache->new($self);

  my $newscan = $TRUE;

  my $input = $self->{'input'};

  INPUT:
  while (<$input>) {

    # bedrock shell shebang
    next if $line == 0 && /^[#]!/xsm;

    $self->{'error'}->line( ++$line );
    MAIN: {

      #
      # Check whether we are into a new scan or collecting options
      # for a matched tag
      #
      if ( !$newscan ) {

        # Collecting options for a matched tag -- Look for tag end which is
        # an un-escaped '>'
        if (s/$OPTIONS_EXPR//xsmo) {

          # Found an un-escaped '>', which terminates the current tag and its options
          # $optstring contains the options collected so far
          $optstring .= $1;

          # Remove escapes from the option string
          $optstring =~ s/\\([^\\])/$1/xsmg;
          $optstring =~ s/\\\\/\\/xsmg;

          # And set the current object options
          $obj = $obj->options($optstring);

          $self->get_logger->trace( 'options string: ', $optstring );

          if ( $optstring =~ /--noexec/xsm ) {
            $raw = $TRUE;
          }

          # Start a new scan after this
          $newscan = $TRUE;

          # Handle possible left over stuff after the '>'
          redo MAIN;
        }
        else {

          # No terminating '>' in entire line -- start by reading input again
          $optstring .= $_;
          next INPUT;
        }
      }

      # New scan from here -- scan afresh for tags.
      # if no '<' found in line, skip line
      if ( !s/^(.*?)<//xsmoi ) {

        if (length) {
          $text .= $_;
        }

        next INPUT;
      }

      if ( length $1 ) {
        $text .= $1;
      }

      # We did find a '<' -- could be we have a possible supported tag next
      # Check if we have a supported tag
      my $tag = $_;

      if ( !$raw && s/$OPENTAG_EXPR//xsmoi ) {
        # Yes we do
        # The text before the '<' needs to be processed.
        if ( length $text ) {
          $obj->text($text);
          $text = $EMPTY;
        }

        my $tag_name = $1;

        for ($1) {
          # experimental feature - flushes output buffer to /dev/null
          /^flush$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Flush->new );
            last;
          };

          /^var$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Var->new );
            last;
          };

          /^[#]$/oxsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Comment->new );
            last;
          };

          /^case$/oixsm and do {
            $tag =~ /case:(.*?)\s+/ixsm;
            $obj = $obj->new_child( TagX::TAG::NoBody::Case->new );
            last;
          };

          /^plugin$/oixsm and do {
            $tag =~ /plugin:(.*?)\s+/ixsm;
            $obj = $obj->new_child( TagX::TAG::NoBody::Plugin->new );
            last;
          };

          /^sqlconnect$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLConnect->new );
            last;
          };

          /^open$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Open->new );
            last;
          };

          /^iif$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Iif->new );
            last;
          };

          /^sql$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQL->new );
            last;
          };

          /^sqlcommit$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLCommit->new );
            last;
          };

          /^sqlrollback$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLRollback->new );
            last;
          };

          /^sqltable$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::SQLTable->new );
            last;
          };

          /^include$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Include->new );
            last;
          };

          /^foreach$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Loop::Foreach->new );
            last;
          };

          /^sink$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Sink->new );
            last;
          };

          /^snippet$/oixsm and do {
            die
              q{<snippet> is not enabled on your server. Set <scalar name='ALLOW_SNIPPET_TAG'>yes</scalar> in your tagx.xml file.}
              if $self->getoption('ALLOW_SNIPPET_TAG') !~ /^yes|[y1]$/ixsm;

            $obj = $obj->new_child( TagX::TAG::WithBody::Snippet->new );
            last;
          };

          /^sqlselect$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Loop::SQLSelect->new );
            last;
          };

          /^while$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Loop::While->new );
            last;
          };

          /^if$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::If->new );
            last;
          };
          /^unless$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Unless->new );
            last;
          };

          /^else?if$/oixsm and do {
            die "Tag is not valid here.\n"
              if ref($obj) !~ /::If|Unless/xsm;

            $obj = $obj->else_obj( TagX::TAG::WithBody::If::Else->new );

            last;
          };

          /^else/oixsm and do {
            die "Tag is not valid here.\n"
              if ref($obj) !~ /::If|Unless/xsm;

            $obj = $obj->else_obj( TagX::TAG::WithBody::If::Else->new );

            last;
          };

          /^trace$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Trace->new );
            last;
          };

          /^raise$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Raise->new );
            last;
          };

          /^try$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::Try->new );
            last;
          };

          /^catch$/oixsm and do {
            die "Tag is not valid here.\n"
              if ref($obj) !~ /TagX::TAG::WithBody::Try|Catch/xsm;

            $obj = $obj->catch( TagX::TAG::WithBody::Catch->new );

            last;
          };

          /^null$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::NULL->new );
            last;
          };

          # the null tag = ?
          /^[?]$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::NULL->new );
            last;
          };

          /^exec$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Pebble->new );
            last;
          };

          /^pebble$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Pebble->new );
            last;
          };

          /^pebbledef$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::PebbleDef->new );
            $raw = 1;
            last;
          };

          /^noexec$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::WithBody::NoExec->new );
            $raw = 1;
            last;
          };

          /^hash$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Hash->new );
            last;
          };

          /^array$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::Array->new );
            last;
          };

          /^recordset$/oixsm and do {
            $obj = $obj->new_child( TagX::TAG::NoBody::RecordSet->new );
            last;
          };

          die "Tag <$_> not implemented";
        }

        $obj->name($tag_name);

        $obj->start_location( $file, $line );

        # After creating object of suitable type depending on the tag, check
        # if the tag ends on the same line. Tag ending is an un-escaped '>'.
        if (s/$OPTIONS_EXPR//oixsm) {
          my $options = $1;

          $self->get_logger->trace( 'options string: ', $1 );

          if ( $1 =~ /--noexec/xsm ) {
            $raw = $TRUE;
          }

          if ( ref($obj) eq 'TagX::TAG::NoBody::Comment' && /$/xsm ) {
            $_ = $EMPTY;
          }

          # The tag definition ended on same line -- all options specified on
          # one line

          $options =~ s/\/$//xsm;  # allow /> for nobody tags

          # Unescape the options
          $options =~ s/\\([^\\])/$1/xsmg;
          $options =~ s/\\\\/\\/xsmg;

          # And set the current object options
          $obj = $obj->options($options);

          # And rescan the string for more tags -- Note that $newscan is unchanged
          # from its value of 1, so we don't need to set it here
          redo MAIN;
        }
        else {

          # Tag definition did not end on one line -- Further input is consumed for
          # looking for the tag ending
          $newscan = 0;

          # Start collection of the options string
          $optstring = $_;
        }

      }
      elsif (s/$CLOSETAG_EXPR//oixsm) {

        my $end = lc $1;

        if ($raw) {

          if ( $end =~ /\/(pebbledef|sink|noexec)/xsm ) {
            $obj->text($text);
            $obj  = $obj->end_child;
            $raw  = $FALSE;
            $text = $EMPTY;
          }
          else {
            $text .= '<' . $1 . '>';
          }
          redo MAIN;
        }
        else {
          die "Illegal tag-end encountered.\n"
            if !$obj->parent;

          if ( $end eq '/unless' ) {
            $end = '/if';
          }

          if ( $obj->closure ne $end ) {
            $self->improper_end( $obj, $end );
          }

          # A tag has ended. The text before the '<' needs to be processed.
          if ( length $text ) {
            $obj->text($text);
            $text = $EMPTY;
          }

          # Check whether we have hit a tag-body-ending tag
          # and if so, end the current object
          $obj = $obj->end_child;

          # And rescan string for more tags
          redo MAIN;
        }
      }
      else {

        # Unsupported tag hit -- output the '<' since we don't consume it
        $text .= q{<};

        # And rescan for more tags
        redo MAIN;
      }
    }
  }

  if ( $obj->parent ) {
    my ( $file, $line ) = $obj->start_location;
    die "Tag on line $line not closed properly.\n";
  }

  if ( length $text ) {
    $obj->text($text);
    $text = $EMPTY;
  }

  return $obj->finalize;
}

########################################################################
sub improper_end {
########################################################################
  my ( $self, $obj, $endexpr ) = @_;

  my $iObj = $obj;

  while ( $iObj->parent ) {
    my $closure = $iObj->closure;

    if ( $endexpr eq $closure ) {
      my ( $file, $line ) = $obj->start_location;
      die "Tag on line $line should be closed here.\n";
    }
    $iObj = $iObj->parent;
  }

  die "Illegal tag-end encountered.\n";

  return;
}

########################################################################
sub output {
########################################################################
  my $self = shift;

  eval { $self->parse };
  my $err = $EVAL_ERROR;

  if ( $self->{'__input_opened'} ) {
    $self->{'__input_opened'}->close;
  }

  if ($err) {
    chomp $err;
    $self->error->mesg($err);

    die "$err\n";
  }
  else {
    return $self->error->endLevel;
  }

  return;
}

########################################################################
sub show_error {
########################################################################
  my ( $self, $errfile ) = @_;

  my $fh;

  open $fh, '<', $errfile or  ## no critic (RequireBriefOpen)
    carp "Unable to open $errfile: $OS_ERROR";

  if ($fh) {
    eval {
      $self->{'input'} = $fh;

      my $error = $self->{'error'};

      $self->{'error'} = TagX::Error->new($errfile);
      $self->param( 'ERROR' => $error );
      $self->output;

      close $fh;
    };

    if ($EVAL_ERROR) {
      carp "Error in error handler: $EVAL_ERROR";
    }
  }
  else {
    my $err = $self->{error}->mesg;

    my $html_error_message = <<"EOT";
<html>
  <head>
    <title>Bedrock Error</title>
  </head>

  <body>
  The following Bedrock error has been encountered:

  <pre style="color:brown;">
    $err
  </pre>

  <hr>

  <div style="color:red;font-style:italic;">

     Something's also wrong with your Bedrock configuration.  You've
     specfied an <b>ERROR_LOCATION</b> or
     <b>BEDROCK_ERROR_LOCATION</b> ($errfile) but it appears the file
     does not exist.  Please check your <b><i>tagx.xml</i></b>.

  </div>

  <pre>
    <b>$errfile</b> is empty or does not exist.
  </pre>

  </body>
</html>
EOT

    my $fh = IO::Scalar->new( \$html_error_message );

    $self->{'input'} = $fh;
    $self->output;

    $fh->close;
  }

  return;
}

########################################################################
sub error {
########################################################################
  my ($self) = @_;

  return $self->{'error'};
}

########################################################################
sub var_exists {
########################################################################
  my ( $self, $name ) = @_;

  return
    if !$name || $name eq '_';

  my $var_exists = exists $self->{VARS}->{$name};

  return $FALSE
    if !$var_exists;

  $self->get_logger->warn(
    sub {
      sprintf '[%s] conflicts with existing variable.', $name;
    }
  );

  return $TRUE;
}

########################################################################
sub define_name {
########################################################################
  my ( $self, $name, $value ) = @_;

  my @components = split /[.]/oixsm, $name || $EMPTY;

  return
    if !@components;

  $self->get_logger->debug(
    sub {
      return sprintf 'components are (%s):', join $SPACE, @components;
    }
  );

  my $found = $self->{'VARS'};

  for (@components) {
    if (/^\Q[\E(\d+)\Q]\E/xsm) {

      # array element
      if ( is_array($found) ) {
        $found = $found->[$1];
        next;
      }
      else {
        $self->get_logger->error(
          sub {
            return sprintf 'Cannot define [%s] component in %s: %s is not an array', $_,
              $name, $found;
          }
        );

        return;
      }
    }

    if (/^(\w+)/xsm) {

      # hash element
      my $key = $1;

      if ( is_hash($found) ) {
        $found = $found->{$key};
      }
      else {

        # Support syntax for accessing hash contained in an array
        # if the array contains only one element
        if ( !is_array($found) || @{$found} != 1 ) {

          $self->get_logger->error(
            sub {
              sprintf "Cannot define [%s] component in [%s]: %s is an array\n"
                . "containing more than one element .. cannot access it as a hash\n",
                $_, $name, $found;
            }
          );

          return;
        }

        $found = $found->[0]->{$key};
      }

      next;
    }

    # illegal
    return;
  }

  $self->get_logger->debug(
    sub {
      return sprintf 'finally found [%s]', $found;
    }
  );

  return $value;
}

########################################################################
sub define_pebble {
########################################################################
  my ( $self, @args ) = @_;

  foreach my $p ( pairs @args ) {
    my ( $name, $value ) = @{$p};

    if ( exists $self->pebble_cache->{$name} ) {
      $self->get_logger->debug( sub { return sprintf 'redefining pebble: [%s]', $name } );
    }

    if ($value) {
      $self->store_pebble( $name, $value );
    }
    else {
      $self->get_logger->warn(
        sub {
          return sprintf 'undefined pebble: [%s]', $name;
        }
      );
    }
  }

  return;
}

# return the pebble text or the pebble name from cache or file
########################################################################
sub pebble {
########################################################################
  my ( $self, $pebble_name, @search_path ) = @_;

  if ( ref $pebble_name ) {
    foreach my $pebble ( keys %{ $self->pebble_cache } ) {
      return $pebble
        if $pebble_name == $self->pebble_cache->{$pebble}->{handle};
    }

    return 'anonymous';
  }

  my $pebble = $self->fetch_pebble($pebble_name);  # look in cache, first

  return $pebble
    if $pebble;

  my $file = $self->find_file( $pebble_name, '.peb', @search_path );

  die sprintf "could not find pebble: %s\n", $pebble_name
    if !$file;

  $pebble = $self->fetch_pebble( $pebble_name, $file );

  return $pebble;
}

# return a value from Bedrock's config or the config object
########################################################################
sub config {
########################################################################
  my ( $self, @args ) = @_;

  my $ctx = $self->ctx // {};

  return $ctx->config(@args)
    if blessed($ctx) && $ctx->can('config');

  return @args ? $ctx->{CONFIG}->{ $args[0] } : $ctx->{CONFIG}
    if exists $ctx->{CONFIG} && is_hash( $ctx->{CONFIG} );

  return;
}

########################################################################
sub store_pebble {
########################################################################
  my ( $self, $name, $value ) = @_;

  $self->pebble_cache->{$name} //= {};

  $self->pebble_cache->{$name}->{name} = $name;

  my $var = ref $value ? 'handle' : 'value';

  $self->pebble_cache->{$name}->{$var} = $value;

  return $value;
}

########################################################################
sub pebble_cache {
########################################################################
  my ($self) = @_;

  $self->{PEBBLE_CACHE} //= {};

  return $self->{PEBBLE_CACHE};
}

########################################################################
sub fetch_pebble {
########################################################################
  my ( $self, $pebble, $pebble_file ) = @_;

  # see if pebble is in cache
  return $self->pebble_cache->{$pebble}->{value}
    if exists $self->pebble_cache->{$pebble};

  return
    if !$pebble_file || !-s $pebble_file;

  my $pebble_text = eval { slurp_file $pebble_file; };

  if ( !$pebble_text || $EVAL_ERROR ) {
    die $EVAL_ERROR;
  }

  # save in cache
  $self->store_pebble( $pebble, $pebble_text );

  return $pebble_text;
}

# find a file using a progression locations to search
# returns the fqp or undef
########################################################################
sub find_file {
########################################################################
  my ( $self, $file, $ext, @search_paths ) = @_;

  my $logger = $self->get_logger;

  $logger->trace( Dumper( [ $file, $ext, \@search_paths ] ) );

  die "invalid pebble name - absolute paths are not supported\n"
    if $file =~ /^[\/.]/xsm;

  my $document_root = $ENV{DOCUMENT_ROOT} || getcwd;

  # ~ (tilde) means DOCUMENT_ROOT
  if ( $file =~ /^\~/xsm ) {
    $file =~ s/^\~/$document_root\//xsm;
    push @search_paths, $document_root;
    $logger->debug( sprintf 'using DOCUMENT_ROOT: [%s]', $document_root );
  }

  # if given an extension, then if the name does not have that
  # extension, add it
  if ( defined $ext && $file !~ /[.][^.]+$/xsm ) {
    $file .= $ext;
  }

  @search_paths = map { split /:/xsm } grep {defined} @search_paths;

  $logger->debug( sprintf "searching for pebble: %s in:\n %s", $file, join "\n", @search_paths );

  my ($path) = grep { -e $_ } map {"$_/$file"} @search_paths;

  return $path;
}

########################################################################
sub param {
########################################################################
  my ( $self, @args ) = @_;

  foreach my $p ( pairs @args ) {
    my ( $name, $value ) = @{$p};

    if ( $name =~ /[.]/oixsm ) {
      # more expensive resolve operation
      $self->define_name( $name, $value );
    }
    else {
      $self->{'VARS'}->{$name} = $value;
    }
  }

  return;
}
#
# Constructor -- Invoked as follows
#    $Class_or_Object->new( $Input_Handle [, $Output_Handle [, $Error_Handler ] ] )
#    $Class_or_Object->new( $file, $ctx );
# Return the constructed object
#
########################################################################
sub new {
########################################################################
  my ( $proto, $input, $output, $error_handler, %args ) = @_;

  my ( $class, $self );

  if ( $class = ref $proto ) {

    $self = bless { 'error' => {} }, $class;

    if ($output) {
      $self->out_handle( TagX::Output->new($output) );
    }
    else {
      $self->out_handle( $proto->out_handle );
    }

    $self->{'VARS'}  = $proto->{'VARS'};
    $self->{'error'} = $proto->{'error'}->newLevel($input);

    for (qw{ DB options}) {
      next if !exists $proto->{$_};

      $self->{$_} = $proto->{$_};
    }
  }
  else {
    $self = bless {}, $proto;
    $self->out_handle( TagX::Output->new($output) );
    $self->{'VARS'}  = TagX::Symtab->new;
    $self->{'error'} = TagX::Error->new($input);
    $self->{'DB'}    = {};
  }

  if ( !ref $input ) {
    my $file_or_fd = $input;

    if ( ref $file_or_fd ) {
      $input = IO::Handle->new_from_fd($file_or_fd);
    }
    else {
      $input = IO::File->new($file_or_fd);
    }

    $self->{'__input_opened'} = $input;

    die "Unable to open [$file_or_fd] for input: $OS_ERROR\n"
      if !$input;
  }

  $self->{'input'} = $input;
  $self->ctx($output);

  for ( keys %args ) {
    $self->{'VARS'}->{$_} = $args{$_};
  }

  return $self;
}

#
# Hook for passing options to TagX.
# Takes an array which maps into a hash as arguments.
# valid options are
#   LOG_PREFIX          Directory and filename prefix for log file. An
#                       extension of `.log' is attached to this prefix
#   LOG_MAXSIZE         Maximum size of log file in bytes. If file is larger than
#                       this, it is truncated.
#   HEADER		Object for outputting headers.
#   PAGE                Filename of the Bedrock page
# Returns: Nothing.
########################################################################
sub options {
########################################################################
  my ( $self, %args ) = @_;

  if ( exists $args{'HEADER'} ) {
    $self->out_handle->header( delete $args{'HEADER'} );
  }

  my %options;

  if ( ref $self->{options} && reftype( $self->{options} ) eq 'HASH' ) {
    %options = %{ $self->{options} };
  }

  # merge options
  map { $options{$_} = $args{$_}; } keys %args;

  if ( keys %options ) {
    $self->{'options'} = \%options;
  }

  return $self->{'options'};
}

########################################################################
sub getoption {
########################################################################
  my ( $self, $name ) = @_;

  return
    if !exists $self->{'options'};

  return $self->{'options'}->{$name};
}

########################################################################
sub _set_get {
########################################################################
  my ( $key, $self, @args ) = @_;

  if (@args) {
    $self->{$key} = $args[0];
  }

  return $self->{$key};
}

########################################################################
{
  ## no critic (RequireArgUnpacking)
  sub ctx        { unshift @_, 'ctx';        goto &_set_get; }
  sub out_handle { unshift @_, 'out_handle'; goto &_set_get; }
}

########################################################################
sub close {  ## no critic (ProhibitBuiltinHomonyms, ProhibitAmbiguousNames)
########################################################################
  my ($self) = @_;

  # Close any database handles left behind
  my @keys = keys %{ $self->{'DB'} };

  for my $name (@keys) {
    my $dbh = $self->{'DB'}->{$name};

    if ( $dbh && $dbh->ping ) {
      my $rc = $dbh->disconnect;

      if ( !$rc ) {
        $self->get_logger( ref $self )->error(
          sub {
            sprintf "Error shutting down db connection [%s]\n\t[%s]\n", $name, $dbh->errstr;
          }
        );

      }
    }

    delete $self->{'DB'}->{$name};
  }

  # Clean up symbol table.
  $self->{'VARS'}->close;

  return delete $self->{'VARS'};
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 NAME

Text::TagX - Bedrock's tag parser and support methods

=head1 SYNOPSIS

 use Bedrock;

 use Text::TagX;
 
 my $output = q{};

 my $fh = IO::Scalar->new(\$output);

 my $tx = Text::TagX->new($fh, $ctx);

 $tx->param( %parameters );

 my $error = eval { $tx->output; };

 die Dumper [ $tx->error ]
   if $EVAL_ERROR;

=head1 DESCRIPTION

Bedrock's tag parser - interprets and processes Bedrock tags to create
text output.

=head1 METHODS AND SUBROUTINES

=head2 close

=head2 config

=head2 ctx

=head2 error

=head2 find_file

=head2 getoption

=head2 new

=head2 options

=head2 out_handle

=head2 output

=head2 param

=head2 parse

=head2 show_error

=head2 var_exists

=head1 AUTHOR

J. Sridhar

=head1 SEE OTHER

=cut

