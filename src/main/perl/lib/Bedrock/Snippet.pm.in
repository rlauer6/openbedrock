#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Snippet;

use strict;
use warnings;

use Bedrock::Array;
use Data::Dumper;

use parent qw( Bedrock::Hash );

########################################################################
sub new {
########################################################################
  my ( $class, %options ) = @_;

  my $self = $class->SUPER::new;

  $self->_create_method(%options);

  return $self;
}

########################################################################
sub _create_method {
########################################################################
  my ( $self, %options ) = @_;

  my $class = ref $self;

  die "usage: _create_method( name => name, code => code );\n"
    if !defined $options{name} && defined $options{code};

  $self->{__code__} = $options{code};

  my $sub_name = $class . '::' . $options{name};

  my $sub = <<"END_OF_CODE";
sub $sub_name {
  my \$self = shift;

$options{code}

}
END_OF_CODE

  eval "$sub";  ## no critic (ProhibitStringyEval)

  return $self->can( $options{name} );
}

########################################################################
sub context {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->{_context} = $args[0];
  }

  return $self->{_context};
}

########################################################################
sub config {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->{_config} = $args[0];
  }

  return $self->{_config};

}

########################################################################
sub dump {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  return Dumper( \@args );
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

Bedrock::Snippet - create a short Perl method for access by the snippet tag.

=head1 SYNOPSIS

 my $snippet = Bedrock::Snippet->new( name => name, code => perl-code );

=head1 DESCRIPTION

Used by the C<E<lt>snippetE<gt>> tag to instantiate a method.

=head1 METHODS AND SUBROUTINES

=head2 config

 config( [config] )

Sets for returns the configuration object.

=head2 dump

 dump( object )

Returns a C<Data::Dumper> serialized representation of an object.

=head2 context

 context( [context] )

Sets or returns an array reference to the current Bedrock symbol
table.

=head1 AUTHOR

Rob Lauer - rclauer@gmail.com

=head1 SEE OTHER

=cut
