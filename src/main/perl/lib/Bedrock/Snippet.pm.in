#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Snippet;

use strict;
use warnings;

use Bedrock::Array;
use Bedrock::Hash;
use Data::Dumper;  # you get this for free...your welcome

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
}

@ISA = qw( Bedrock::Hash );

sub new {
  my $class = shift;
  my %options = @_;

  my $self = $class->SUPER::new;

  $self->_create_method( %options );

  return $self;
}

sub _create_method {
  my $self = shift;
  my $class = ref( $self );

  my %options = @_;

  die "usage: _create_method( name => name, code => code );\n"
    unless defined $options{name} && defined $options{code};

  $self->{__code__} = $options{code};

  my $sub_name = $class . '::' . $options{name};

  my $sub =<<eoc;
sub $sub_name {
  my \$self = shift;

$options{code}

}
eoc

  eval "$sub";

  return $self->can( $options{name} );
}

=pod

=head2 context

 context( [context] )

Sets or returns an array reference to the current Bedrock symbol
table.

=cut

sub context {
  my $self = shift;
  
  $self->{_context} = shift if @_;

  return $self->{_context};
}

=pod

=head2 config

 config( [config] )

Sets for returns the configuration object.

=cut
sub config {
  my $self = shift;
  
  $self->{_config} = shift
    if @_;

  return $self->{_config};
    
}


=pod

=head2 dump

 dump( object )

Returns a C<Data::Dumper> serialized representation of an object.

=cut

sub dump {
  my $self = shift;

  return Dumper [ shift ];
}

1;
