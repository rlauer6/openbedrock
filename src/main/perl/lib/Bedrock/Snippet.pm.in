package Bedrock::Snippet;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Array;
use Data::Dumper;

use parent qw( Bedrock::Hash );

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = ref $args[0] ? $args[0] : {@args};

  my $self = $class->SUPER::new;

  $self->_create_method($options);

  $self->options( $options->{options} );

  return $self;
}

########################################################################
sub _create_method {
########################################################################
  my ( $self, $args ) = @_;

  my $class = ref $self;

  my ( $code, $name, $options ) = @{$args}{qw(code name options)};

  die "usage: _create_method( name => name, code => code, options => options );\n"
    if !defined $name && defined $code;

  $self->{__code__} = $code;

  my $sub_name = "${class}::$name";

  no warnings 'redefine';  ## no critic (Prohibit NoWarnings)

  ## no critic (RequireInterpolationOfMetachars)
  my $sub = sprintf 'sub %s {  my $self = shift;  %s }', $sub_name, $code;

  ## no critic (ProhibitStringyEval)
  eval $sub;

  return $self->can($name);
}

########################################################################
sub _set_get {
########################################################################
  my ( $key, $self, @args ) = @_;

  if (@args) {
    $self->{$key} = $args[0];
  }

  return $self->{$key};
}

########################################################################
sub context { unshift @_, '_context'; goto &_set_get; }
sub options { unshift @_, '_options'; goto &_set_get; }
sub config  { unshift @_, '_config';  goto &_set_get; }
########################################################################

########################################################################
sub symbtab {
########################################################################
  my ( $self, $frame ) = @_;

  my @context = @{ $self->context };

  $frame //= -1 + scalar @context;

  return $context[$frame];
}

########################################################################
sub request {
########################################################################
  my ($self) = @_;

  return $self->symbtab()->{_request};
}

########################################################################
sub current_context {
########################################################################
  my ($self) = @_;

  return $self->symbtab();
}

########################################################################
sub export {
########################################################################
  my ($self) = @_;

  my $options = $self->options;
  my $export  = $options->{export};

  if ($export) {
    $export = ref $export ? $export : [$export];
  }

  my $context = $self->context;
  my ($symbtab) = @{$context};

  no strict 'refs';  ## no critic (ProhibitNoStrict)

  foreach my $key ( @{$export} ) {
    $symbtab->{$key} = ${ 'Bedrock::Snippet::' . $key };
  }

  return $self;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

Bedrock::Snippet - creates a class called by the snippet tag interpretter.

=head1 SYNOPSIS

 my $snippet = Bedrock::Snippet->new( name => name, code => code, options => tag-options );

=head1 DESCRIPTION

Used by the C<E<lt>snippetE<gt>> tag to instantiate a method. I<This
class has no use outside the context of the snippet tag.>

=head1 METHODS AND SUBROUTINES

=head2 config

 config( [config] )

Sets for returns the configuration object.

=head2 export

Exports package variables defined in your snippet to the current
Bedrock page.

 <snippet --export=foo>
 our $foo = 'bar'
 </snippet>

 foo: <var $foo>

=head2 context

 context( [context] )

Sets or returns an array reference to the current Bedrock symbol
table.

=head1 options

Set or get the tag options.

=head1 AUTHOR

BIGFOOT - <bigfoot@cpan.org>

=head1 SEE ALSO

L<Bedrock::Hash>

=cut
