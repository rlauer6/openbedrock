#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

# provides a mimimal context object for Bedrock
package Faux::Context;

use strict;
use warnings;

########################################################################
sub new {
########################################################################
  my ( $class, $outhandle, @args ) = @_;

  my $self = {@args};

  bless $self, ref($class) || $class;

  $self->{outhandle} = $outhandle;

  return $self;
}

########################################################################
sub print {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  if ( ref( $self->{outhandle} ) && $self->{outhandle}->can('print') ) {
    $self->{outhandle}->print(@args);
  }

  return;
}

########################################################################
sub close {  ## no critic (ProhibitBuiltinHomonyms, ProhibitAmbiguousNames)
########################################################################
  my ( $self, $handle ) = @_;

  if ( ref( $self->{outhandle} ) && $self->{outhandle}->can('close') ) {
    $self->{outhandle}->close($handle);
  }

  return;
}

########################################################################
package Bedrock::Template;
########################################################################

use strict;
use warnings;

use parent qw(Class::Accessor::Fast);

__PACKAGE__->follow_best_practice();
__PACKAGE__->mk_accessors(qw(text params config file template include_path disable_tag));

use Bedrock qw(:booleans slurp_file);
use Bedrock::Array;
use Bedrock::Hash;
use Bedrock::BedrockConfig;
use Bedrock::Constants qw(:chars :booleans);
use Cwd;
use Text::TagX;

use IO::Scalar;
use Scalar::Util qw(reftype blessed openhandle);
use Data::Dumper;
use English qw(-no_match_vars);

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $include_path;

  my $self = eval {

    if ( is_hash( $args[0] ) ) {
      $include_path = delete $args[0]->{INCLUDE_PATH};

      $args[0]->{params} //= delete $args[0]->{param};

      $class->SUPER::new( $args[0] );
    }
    else {
      my $text = shift @args;

      $class->new(
        { text   => \$text,
          params => {@args}
        }
      );
    }
  };

  if ( !$self->config ) {
    $self->config( Bedrock::Config->new('tagx.xml') );
  }

  if ( $self->get_disable_tag ) {
    my $disable_tag = $self->get_disable_tag;
    $self->disable_tag($disable_tag);
  }

  if ($include_path) {
    if ( !ref $include_path ) {
      $include_path = [ split /\s*[:,]\s*/xsm, $include_path ];
    }
    elsif ( reftype($include_path) ne 'ARRAY' ) {
      die "INCLUDE_PATH must be scalar or array\n";
    }

    $include_path = [ grep { defined && $_ && -d $_ } @{$include_path}, cwd ];

    $self->set_include_path($include_path);
  }

  my $template = $self->get_file() // $self->get_template();

  if ($template) {
    $self->file($template);
  }

  return $self;
}

########################################################################
sub _find_file {
########################################################################
  my ( $self, $file ) = @_;

  return $file
    if $file =~ /^\//xsm;  # absolute path

  my @include_path = @{ $self->get_include_path // [cwd] };

  foreach (@include_path) {
    return "$_/$file"
      if -f "$_/$file";
  }

  return;
}

########################################################################
sub file {
########################################################################
  my ( $self, $file ) = @_;

  if ( openhandle $file ) {
    $self->text( scalar slurp_file $file);
    return;
  }

  if ( $file !~ /[.][^.]+$/xsm ) {
    $file = "$file.roc";
  }

  my $template_file = $self->_find_file($file);

  die "could not find [$file]\n"
    if !$template_file || !-f $template_file;

  $self->text( scalar slurp_file($template_file) );

  return $self->set_file($template_file);
}

########################################################################
sub config {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    return $self->set_config(@args);
  }
  else {
    return $self->get_config();
  }
}

########################################################################
sub params { goto &param }

sub param {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    my $param = is_hash( $args[0] ) ? $args[0] : {@args};

    return $self->set_params(@args);
  }
  else {
    return $self->get_params();
  }
}

########################################################################
sub text {
########################################################################
  my ( $self, @args ) = @_;

  my $text;

  if (@args) {
    $text = shift @args;
    $self->set_text( ref $text ? $text : \$text );
  }
  else {
    $text = $self->get_text();
  }

  return ref $text ? $text : \$text;
}

########################################################################
sub disable_tag {
########################################################################
  my ( $self, $disable_tag ) = @_;

  $disable_tag //= $self->get_disable_tag;

  my @tags = ref $disable_tag ? @{$disable_tag} : $disable_tag;

  $self->config->{DISABLED_TAGS} = \@tags;

  return;
}

########################################################################
sub parse {
########################################################################
  my ( $self, $text, %args ) = @_;

  if ($text) {
    $self->text($text);
  }

  $text = $self->text();

  # merge parameters with those passed
  my $params = $self->params();
  $params //= {};

  map { $params->{$_} = $args{$_} } keys %args;

  my $output = $EMPTY;

  my $ctx = Faux::Context->new( IO::Scalar->new( \$output ), CONFIG => $self->config );

  my $fh = IO::Scalar->new( $self->text() );

  my $tx = Text::TagX->new( $fh, $ctx );

  # give hash, array super powers...
  foreach ( values %{$params} ) {
    next if !ref $_ || blessed $_;

    my $class = is_hash($_) ? 'Bedrock::Hash' : 'Bedrock::Array';
    bless $_, $class;
  }

  $tx->param( %{$params} );

  my $error = eval { $tx->output; };

  die Dumper [ $tx->error ]
    if $EVAL_ERROR;

  return $output;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<Bedrock::Template> - Bedrock templating with Perl

=head1 SYNOPSIS

 my $bedrock_template = Bedrock::Template->new( q{<var $foo>}, foo => "bar" )

 print $bedrock_template->parse;

=head1 DESCRIPTION

Provides an OO Perl interface to Bedrock templating.  Although you
might not get all the "goodies" of Bedrock on the web or Bedrock
shell, you get enough to make templating using Bedrock tags possible.

WeE<039>ve all wanted to be able to do this...

 my $customer = {
    email => 'somebody@example.org',
    from => 'me@example.org',
    name => 'Fred Flinstone',
    address => '123 Stonybrook Drive',
    city => 'Bedrock',
    state => 'Pangea',
 };

 my $bedrock = Bedrock::Template->new(file => 'email_template', customer => $customer;

 my $msg = MIME::Lite->new(
                           From     => 'your_programmer@some_company.com',
                           To       =>  $customer->{email},
			   Subject  => "A notification of some sort...",
			   Type     => 'text/html',
			   Data     => $bedrock->parse(),
			  );

 $msg->send('smtp', 'localhost'); 

=head1 DETAILS

The C<Bedrock::Template> class gives you access to Bedrock templating.
You can do almost everything using this class that you can do with
Bedrock when running in a shell or web environment, including using
plugins.  To configure the Bedrock templating environment you can use
the default F<tagx.xml> file or provide a C<Bedrock::Config> object
when you instantiate the class.

=head2 What you can't do with Bedrock::Template

When running Bedrock in a shell of the web environment, Bedrock's
handler is first invoked that prepares the environment for parsing
your Bedrock pages. This includes setting up logging and instantiating
the startup plugins like C<$input>, C<$header>, C<$config> and a
C<$session> object if you have one defined in your configuration
paths. C<Bedrock::Template> does not do any of those things, so
startup plugins are not available for use in your templates.

=head2 Errors

Errors generated in parsing the template are presented as an exception
object (C<TagX::Error>).  The object has two methods you can use to
determine the error.

  my $text = eval {
    $template->parse;
  };
  
  if ( $@ ) {
    printf("error: %s at line: %d\n", $@->mesg, $@->line);
  }

=head1 METHODS AND SUBROUTINES

=head2 new

 new( text, key => value, ...) 
 new( text, { key => value, ...)
 new({ text => text, params => { key => value, ...}, config => config, INCLUDE_PATH => include-path })

Instantiates a Bedrock templating object. If you need to pass the
configuration object or a path for including other templates using the
C<include> tag then pass a hash reference with the appropriate
arguments.


=over 5

=item text

The Bedrock text to parse.

=item key => value

A list of parameters to use for templating.  They can be scalars, object, or arrays.

=back

 new( { text => text, params => parameters, config => config } )

Pass a hash reference with the keys listed below.

=over 5

=item text

Bedrock template to parse.

=item template

Path to a Bedrock template or a file handle.

=item file

Path to a Bedrock template.

=item params

Hash reference of objects used by your template.

=item config

This should be a Bedrock configuration object.  The system
configuration object is provided by default (F<tagx.xml>).

=item INCLUDE_PATH

C<INCLUDE_PATH> is a colon or comma separated list or an array
reference of paths to search for additional templates.

=back

=head2 config

Sets or returns the configuration object used by the Bedrock parser.
Typically this is the deserialized version of Bedrock's configuration
file - F<tagx.xml>.  This is passed to Bedrock when your template is
parsed.  If no configuration object is found, the C<parse> method will
use Bedrock's default F<tagx.xml>.

=head2 disable_tag

 disable_tag(tag)

C<tag> should be a tag name or an array of tag names.

Example:

 disable_tag('array');

Disables the parsing of one or more Bedrock tags.  This might be
useful when trying to parse a text that contains tags that overlap
Bedrock tags.  For example, you might want to use a templated Bedrock
XML file which contains the <array> tag.  Passing that through Bedrock
will yield incorrect results.  Disabling the <array> tag will allow
you to parse the Bedrock XML file successfully.

Consider this file (foo.roc):

 <object>
  <array name="foo">
    <scalar><var $boo></scalar>
  </array>
 </object>


This can be demonstrated using Bedrock shell (which essentially works the same way
as C<Bedrock::Template>). Without disabling the C<array> tag, the result
would be:

 bedrock foo.roc bar=bar
 <object>

    <scalar>boo</scalar>
  </array>
 </object>

Using the C<--disable-tag> option with Bedrock shell:

 bedrock --disable-tag array foo.roc bar=bar
 <object>
  <array nane="foo">
    <scalar>boo</scalar>
  </array>
 </object>

The tag remains disabled for all calls to C<parse()> for this instance
of C<Bedrock::Template>.  To re-enable the tag, send an empty array to
the C<disable_tag> method.

 disable_tag([]);

=head2 param

 param( [parameters] )

Sets or returns a hash reference containing key/value pairs that
represent data or objects that will be used by the template.

 $self->param({foo => $bar, baz => [1..10], $session});

=head2 text

 text( text )
 text( text-ref )

Sets or returns the Bedrock template string to parse.  C<text> can be
either a scalar or a reference to a scalar.  Returns a reference to
the string or undef if no string is currently set.

=head2 parse

 parse( [text], param => value, ... )

Returns the results of passing the text and parameters to Bedrock's
parser. Parameters sent by this method are merged with those passed
in the constructor or those passed in the C<param()> method.

Example:

  my %params = (foo => bar, baz => buz);

  my $text =<<eom;
  foos are really <var $foo>
  and baz is really a <var $baz>
  eom

  $bedrock_template = Bedrock::Template->new( $text, %params );

  eval { my $output = $bedrock_template->parse; };

  print "ERROR: $@\n"
    if $@;

=over 5

=item text

Optional text to parse.  Use C<text()> to set text to parse, or you
can pass the text to parse.

=back

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
