#!@PERL@

package Bedrock::Template;


use Bedrock;
use Text::TagX;

use IO::Scalar;

=pod

=head1 PUBLIC

C<Bedrock::Template> - Bedrock perl templating

=head1 SYNOPSIS

 my $bedrock_template = new Bedrock::Template( "<var \$foo>", foo => "bar" )

 $bedrock_template->parse;

=head1 DESCRIPTION

Provides a programmatic interface to Bedrock templating.  Although you
might not get all the "goodies" of Bedrock on the web or Bedrock
shell, you get enough to make programattic templating tempting and fun!

WeE<039>ve all wanted to be able to do this...

 my $message;

 open MESSAGE, "<email_template.roc";
   or die "could not open email template";
 {
  local $/;
  $message = <MESSAGE>;
 }

 close MESSAGE;

 my $customer = $sth->fetchrow_hashref;

 my $bedrock_template = new Bedrock::Template( $message,
					       customer => $customer
                                             );

 $message = $bedrock_template->parse;

 if ( $customer->{email} ) {
   my $msg = MIME::Lite->new(
                             From     => 'your_programmer@some_company.com',
			     To       =>  $customer->{email},
			     Subject  => "A notification of some sort...",
			     Type     => 'text/html',
			     Data     => $message
			  );

   $msg->send('smtp', 'localhost');
 }

=head1 METHODS

=head2 new

 new( text, param => value, ...) 

Instantiates a Bedrock templating object.

=over 5

=item text

The Bedrock text to parse.

=item param => value

A list of parameters to use for templating.  The can be scalars, object, or arrays.

=back

=cut

sub new {
  my $class = shift;

  my $self = {};
  bless $self, $class;

  $self->text( shift );
  
  my %args = @_;

  $self->{_param} = \%args;

  return $self;
}

=pod

=head2 text

 text( text )
 text( text-ref )

Set a new Bedrock string to parse.  Can be either a scalar or reference to a scalar.

=cut

sub text {
  my $self = shift;
  my $text = shift;

  my $ref = $text;

  $ref = \$text 
    unless ref( $text );

  $self->{_text} = $ref;

  return $self->{_text};
}

=pod

=head2 parse

 parse( [text], param => value, ... )

Returns the parsed and templated string.  Parameters are merged with
those passed in the constructor.

Example:

  my %params = ( 
                foo => bar,
                baz => buz
               );

  my $text =<<eom;
  foos are really <var $foo>
  and baz is really <var $baz>
  eom

  $bedrock_template = Bedrock::Template->new( $text, %params );

  eval { my $output = $bedrock_template->parse; };

  print "ERROR: $@\n"
    if $@;

=over 5

=item text

Optional text to parse.  Use C<text()> to set text to parse, or you
can pass the text to parse.

=back

=cut

sub parse {
  my $self = shift;
  my $text = shift;
  my %args = @_;

  $self->{_param} = $self->{_param} || {};

  map { $self->{_param}->{$_} = $args{$_} } keys %args;

  $self->text( $text )
    if $text;

  my $output;
  my $tx = Text::TagX->new( 
			   IO::Scalar->new( $self->{_text} ), 
			   IO::Scalar->new( \$output)
			  );

  $tx->param( $self->{_param} ? %{$self->{_param}} : () );
 
  my $error = $tx->output;

  die @{$error}
    if @{$error};

  return $output;
}

1;

=pod

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

# Revision 1.1  2012/02/13 14:39:43  eutl420
# - first check-in
#
