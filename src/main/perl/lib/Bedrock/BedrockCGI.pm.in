#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::BedrockCGI;

use strict;
use warnings;

package Bedrock::CGI;

use strict;
use warnings;

use Bedrock qw{:booleans};
use Carp;

use Apache::Bedrock;
use Apache::Request_cgi;
use Bedrock::Constants qw{:chars :booleans};
use Bedrock::Context;
use Bedrock::Handler;
use English qw{-no_match_vars};
use File::Basename;
use File::Temp qw{tempdir};
use IO::Scalar;
use Scalar::Util qw/reftype/;
use Text::TagX;
use Text::URLEncode qw/Htmlencode/;

use Role::Tiny::With;
with 'Bedrock::Logger';

use Readonly;

Readonly our $BOLD      => 'font-weight:800';
Readonly our $RED       => 'color:red';
Readonly our $FONT_SIZE => 'font-size:125%';
Readonly our $MARGIN    => 'margin:10px';
Readonly our $PURPLE    => 'color:purple';

use parent qw{Exporter};

our @EXPORT_OK = qw{element element_start element_end attribute style
  $FONT_SIZE $RED $PURPLE $MARGIN $BOLD};

our %EXPORT_TAGS = ( all => [@EXPORT_OK] );

########################################################################
sub new {
########################################################################
  my ( $class, %options ) = @_;

  my $self = bless {}, $class;

  foreach ( keys %options ) {
    $options{ lc $_ } = $options{$_};
  }

  $self->{output_handle} = $options{output_handle};

  $self->config;

  $self->context;

  if ( $options{headers} && ref $options{headers} ) {
    my @headers
      = is_hash( $options{headers} )
      ? %{ $options{headers} }
      : @{ $options{headers} };
    $self->handler->headers_out(@headers);
  }
  else {
    $self->set_content_type(%options);
  }

  $self->init_session( $options{cookieless} );

  $self->{DATA} //= $EMPTY;

  $self->autoflush( $options{autoflush} // $FALSE );

  if ( $self->autoflush ) {
    $self->flush_output; # send header
  }

  $self->get_logger->debug( Dumper( [$self] ) );

  return $self;
}

########################################################################
sub autoflush {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->{autoflush} = shift @args;
  }

  return $self->{autoflush};
}

########################################################################
sub set_content_type {
########################################################################
  my ( $self, %options ) = @_;

  my $content_type;

  if ( exists $options{content_type} && $options{content_type} ) {
    $content_type = $options{content_type};
  }
  elsif ( !exists $options{content_type} ) {
    $content_type = 'text/html';
  }

  if ( defined $content_type ) {
    $self->handler->header_out( 'Content-type', $content_type );
  }

  $self->{'content_type'} = $content_type;

  return $content_type;
}

########################################################################
sub config {
########################################################################
  my ( $self, @args ) = @_;

  my $handler = Bedrock::Handler->new( $self->handler );

  if ( !exists $self->{CONFIG} ) {
    $self->{CONFIG} = $handler->get_config;
  }

  return @args ? @{ $self->{CONFIG}{@args} } : $self->{CONFIG};
}

########################################################################
sub clear {
########################################################################
  my ($self) = @_;

  return delete $self->{DATA};
}

########################################################################
sub cgi {
########################################################################
  my ($self) = @_;

  return $self->context->cgi;
}

########################################################################
sub context {
########################################################################
  my ($self) = @_;

  if ( !exists $self->{_ctx} ) {
    $self->{_ctx} = Bedrock::Context->new(
      REQUEST_HANDLER => $self->handler,
      CONFIG          => $self->config,
    );
  }

  return $self->{_ctx};
}

########################################################################
sub exec { ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $snippet, %args ) = @_;

  my $snippet_fd = IO::Scalar->new( \$snippet );

  my $output = $EMPTY;

  my $output_fd = IO::Scalar->new( \$output );

  my $tx = Text::TagX->new( $snippet_fd, $output_fd );

  map { $tx->param( $_ => $args{$_} ) } keys %args;

  eval { $tx->output; };

  my $err;

  if ($EVAL_ERROR) {
    $self->clear;

    $err = Htmlencode($EVAL_ERROR);

    my $err_fd = IO::Scalar->new( \$err );

    # offending snippet line
    my $line_no;

    if ( $err =~ /line\s*(\d+)/xsm ) {
      $line_no = $1;
    }

    my @lines = <$err_fd>;
    $err_fd->close;
    my $line = 1;
    my $fline;

    for ( 1 .. $#lines - 1 ) {
      $fline = sprintf '%-3d', $line;

      $lines[$line] =~ s/^/\[$fline\] /xsm;

      if ( $line_no == $line ) {
        $lines[$line]
          = element( element_start( 'span', style($BOLD) ), $lines[$line] );
      }

      $line++;
    }

    for ( 0, $#lines ) {
      $lines[$_] = element(
        element_start( 'div', style( $FONT_SIZE, $PURPLE, $BOLD, $MARGIN ) ),
        $lines[$_]
      );
    }

    $err = join $EMPTY, @lines;
  }

  $tx->close;
  $output_fd->close;

  die element( 'pre', $err )
    if $err;

  return $output;
}

########################################################################
sub request {
########################################################################
  my ($self) = @_;

  if ( !exists $self->{request} ) {
    $self->{request}
      = Apache::Request_cgi->new( output_handle => $self->{output_handle} );
  }

  return $self->{request};

}

########################################################################
sub handler { goto &request; }
########################################################################

########################################################################
sub init_session {
########################################################################
  my ( $self, $cookieless ) = @_;

  my $session;

  my $config = $self->config->get_module_config('UserSession');

  if ($config) {
    $config->{cookieless_sessions} = $cookieless;

    require BLM::Startup::UserSession;

    $session = BLM::Startup::UserSession->new( $self->context, $config );
    $self->{SESSION} = $session;
    $self->context->session($session);
  }

  return $session;
}

########################################################################
sub print { ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  if ( $self->autoflush ) {
    $self->flush_output( join $EMPTY, @args );
  }
  else {
    $self->{DATA} .= join $EMPTY, @args;
  }

  return;
}

########################################################################
sub log { ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $message, $level ) = @_;

  $level //= 'info';

  return $self->get_logger->$level($message);
}

########################################################################
sub redirect {
########################################################################
  my ( $self, @headers ) = @_;

  $self->clear;

  return $self->cgi->redirect(@headers);
}

########################################################################
sub session {
########################################################################
  my ( $self, @args ) = @_;

  return
    if !$self->{SESSION};

  if ( @args > 1 ) {
    return $self->{SESSION}->{ $args[0] } = $args[1];
  }
  elsif ( @args == 1 ) {
    if ( ref $args[0] && reftype( $args[0] ) eq 'ARRAY' ) {
      return @{ $self->{SESSION} }{ @{ $args[0] } };
    }
    else {
      return $self->{SESSION}->{ $args[0] };
    }
  }

  return $self->{SESSION};
}

########################################################################
sub attribute {
########################################################################
  my (@args) = @_;

  if ( ref $args[0] ) {
    shift @args;
  }

  my $attribute = shift @args;

  return sprintf '%s="%s"', $attribute, join $SEMICOLON, @args;
}

########################################################################
sub style {
########################################################################
  my (@args) = @_;

  if ( ref $args[0] ) {
    shift @args;
  }

  return attribute( 'style', @args );
}

########################################################################
sub element_start {
########################################################################
  my (@args) = @_;

  if ( ref $args[0] ) {
    shift @args;
  }

  my $element = shift @args;
  my $attributes;

  if (@args) {
    $attributes = $SPACE . join $SPACE, @args;
  }

  return sprintf '<%s%s>', $element, $attributes // $EMPTY;
}

########################################################################
sub element_end {
########################################################################
  my (@args) = @_;

  if ( ref $args[0] ) {
    shift @args;
  }

  return sprintf '</%s>', $args[0];
}

########################################################################
sub element {
########################################################################
  my (@args) = @_;

  if ( ref $args[0] ) {
    shift @args;
  }

  my ( $element_start, $content ) = @args;

  $content //= $EMPTY;

  my $element;

  if ( $element_start !~ /\A</xsm ) {
    $element       = $element_start;
    $element_start = element_start($element_start);
  }
  else {
    $element = $element_start;
    $element =~ s/\A<([[:lower:][:upper:]]+)\s+.*\z/$1/xsm;
  }

  return sprintf '%s%s%s', $element_start, $content, element_end($element);
}

########################################################################
sub flush_output {
########################################################################
  my ( $self, $buffer ) = @_;

  if ( $self->handler->headers_out ) {
    $self->handler->send_http_header;
  }

  if ( exists $self->{DATA} && length $self->{DATA} ) {
    $self->handler->print( $self->{DATA} );

    $self->{DATA} = $EMPTY;
  }
  elsif ($buffer) {
    $self->handler->print($buffer);
  }

  return;
}

# flush output, close session
########################################################################
sub DESTROY {
########################################################################
  my ($self) = @_;

  $self->flush_output;

  if ( $self->session ) {
    $self->session->closeBLM;
  }

  return;
}

1;

__END__

=pod

=head1 NAME

Bedrock::CGI - subroutines to help create CGIs

=head1 SYNOPSIS

  #!/usr/bin/perl

  use strict;
  use warnings;

  BEGIN {
    use lib '/usr/lib/bedrock/perl5';
  }

  use Bedrock;
  use Bedrock::BedrockCGI;
  use Data::Dumper;

  $ENV{CONFIG_PATH} = '/var/www/config';

  my $bedrock = Bedrock::CGI->new;
  
  # set session information (persistent)
  $bedrock->session("foo", "bar");
  
  my $session_dump = Dumper $bedrock->session;
  
  $bedrock->print(qq{
  <html>
    <body>
     <pre>$session_dump</pre>
    </body>
  </html> 
  });

=head1 DESCRIPTION

C<Bedrock::CGI> facilitates the writing of Perl CGI programs that
interact with the Bedrock environment.  Using C<Bedrock::CGI> the Perl
developer has access to Bedrock global and site level configuration
data as well as the ability to access and persist data to a Bedrock
session.

You can also access Bedrock's templating magic using the C<exec> method.

HTML (or other data) is buffered when you use the C<print()> method.
On exit, the class will flush the buffer and CGI headers to STDOUT.

=head1 NOTES

L<Bedrock::CGI> does not behave identically to Bedrock (run as a)
CGI or Bedrock under mod_perl.  Since your request has not gone
through the C<Bedrock::Apache::Bedrock::handler>, you're not getting
the full benefits of the Bedrock environment upon instantiation of the
C<Bedrock::CGI> object. That is by design.

You probably donE<039>t want your CGI to be as heavy weight as the
full Bedrock environment, otherwise you might as well use Bedrock!

I<TODO: Create create a heavier weight
framework for writing CGI programs that better emulates the Bedrock
environment.>

Typical use cases for using C<Bedrock::CGI> include applications where
you may want to do something fairly trivial, but want access to
BedrockE<039>s persitent session or you want to do some back end
processing by doing a fork and return to the front end UI.

=head1 IMPORTING VARIABLES AND METHODS

Bedrock does some nasty @INC path manipulation when initialing,
ostensibly (I believe) so that the original author did not have to use
fully qualified module names when 'use'ing deeply nested modules in
Bedrock's object hierarchy.

For example, who wants to type:

 use Bedrock::Text::TagX::TAG::WithBody::If;

Instead of:

 use TagX::TAG::WithBody::If;

So

 use CGI;

or

 use Config;

...actually becomes

 use Bedrock::CGI;
 use Bedrock::Config;

which may not be what you want. Hence we see C<Bedrock::BedrockConfig>
and C<Bedrock::BedrockCGI> which contain the modules
C<Bedrock::Config> and C<Bedrock::CGI>.

This is a long way of saying you can't do this:

 use Bedrock::CGI qw{:all};

but you can do:

 use Bedrock::BedrockCGI;
 Bedrock::CGI->import(qw{:all});

...but variables imported must be explicitly defined...

 use vars qw{$BOLD $FONT_SIZE};

=head1 METHODS AND SUBROUTINES

=head2 new

 new(options)

C<options> is a hash (not a reference) of options:

=over 5

=item content_type

default: 'text/html'

=item headers

Array or hash of key value pairs.

 my $bedrock_cgi = Bedrock::CGI->new( headers => { 'Content-type' => 'text/html' });

=item cookieless

If set to 1, then sessions are assumed to be cookieless.

default: 0

=item autoflush

Cause the C<print()> method to immediately flush the buffer
contents. Headers are sent once, so you should set the headers or
accept the default (text/html) prior to printing content.

=back

=head2 config

 config()
 config(key)

Access Bedrock configuration information.

 $bedrock->config( $key );

If you call C<config()> without an argument it will return the
C<Bedrock::Config> object.

 $bedrock->config->{ $key };

 $bedrock->config->get_module_config( 'UserSession' );


=head2 clear

Remove all data from the output buffer.  If the output buffer is
empty, no headers will be printed on exit.  


=head2 cgi

 cgi()

Returns a CGI object.  See C<perldoc CGI>.


=head2 context

 context()

Returns the Bedrock C<Bedrock::Context> object.


=head2 exec

 exec( html, vars );

Use the Bedrock templating engine to create output from a Bedrock
snippet and a hash of values.

  my $snippet = '<var $foo>';
  my $foo = "Hello World!";

  $bedrock->print( $bedrock->exec($snippet, foo => $foo) );

C<exec()> will throw an exception which contains an HTML listing and
diagnosis if the snippet cannot b interpretted.  It's up to you to
catch this and do something interesting (like send it to the browser)
with it.  Anything in the print buffer prior to the error is removed.

  eval {
    $bedrock->print( $bedrock->exec($snippet, foo => $foo) );
  };

  if ( $@ ) {
    $bedrock->print( $@ );
  }

=head2 handler

 handler()

Returns an HTTP request handler

=head2 request

See L</handler>

=head2 print

 print( data );

Add data to the output buffer. The buffer will be flushed to STDOUT
when the program exits unless the buffer is cleared using the
C<clear()> method.

=head2 log

 log( message )

Write a message to the script's log file.  See the C<new()> method.
Typically the log file should be located in the virtual hosts log
directory alongside other Bedrock and site logs.

=head2 redirect

 redirect(url);

Redirect browser.  Clears the buffer and then redirects. See C<perldoc
CGI>

 $bedrock->redirect("http://www.google.com");

=head2 session

 session()
 session( key )
 session( key, value )

Set or access Bedrock session information.  Setting a session value
persists the value in Bedrock's session so that you can access it in
subsequent Bedrock pages using the C<$session> object.

 # get a session value
 $bedrock->session('foo');

 # to get multiple values
 my ($first, $last) = $bedrock->session(['firstname', 'lastname']);

 my ($first, $last) = @{$bedrock->session}{qw/firstname lastname/};

 # set a session value
 $bedrock->session('site_prefs', $prefs);

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

C<CGI.pm>

=cut
