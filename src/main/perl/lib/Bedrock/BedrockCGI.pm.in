#!@PERL@


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::BedrockCGI;

1;

package Bedrock::CGI;

use File::Basename;

use Bedrock;
use Bedrock::Context;
use Bedrock::Handler;

use Apache::Bedrock;
use Apache::Request_cgi;

use BLM::Startup::UserSession;

use Text::URLEncode qw/Htmlencode/;
use Text::TagX;

use IO::Scalar;

=pod

=head1 NAME

 Bedrock::CGI

=head1 SYNOPSIS

#!/usr/bin/perl

  BEGIN {
    push @INC, '/usr/lib/bedrock/perl5';
  }
  
  use Bedrock::BedrockCGI;
  use Data::Dumper;
  
  my $bedrock = Bedrock::CGI->new;
  
  # set session information (persistent)
  $bedrock->session("foo", "bar");
  
  my $session_dump = Dumper $bedrock->session;
  
  $bedrock->print(qq{
  <html>
    <body>
     <pre>$session_dump</pre>
    </body>
  </html> 
  });
  
=head1 DESCRIPTION

C<Bedrock::CGI> facilitates the writing of perl CGI programs that
interact with the Bedrock environment.  Using C<Bedrock::CGI> the perl
developer has access to Bedrock global and site level configuration
data as well as the ability to access and persist data to a Bedrock
session.

You can also access Bedrock's templating magic using the C<exec> method.

HTML (or other data) is buffered when you use the C<print()> method.
On exit, the class will flush the buffer and CGI headers to STDOUT.

=head1 NOTES

C<Bedrock::CGI> is does not behave identically to Bedrock (run as a)
CGI or Bedrock under mod_perl.  Since your request has not gone
through the C<Bedrock::Apache::Bedrock::handler>, you're not getting
the full benefits of the Bedrock environment upon instantiation of the
C<Bedrock::CGI> object.  That is by design.

You probably donE<039>t want your CGI to be as heavy weight as the
full Bedrock environment, otherwise you might as well use Bedrock!  At
some point we probably do want to create create a heavier weight
framework for writing CGI programs that better emulates the Bedrock
envirorment.

Typical use cases for using C<Bedrock::CGI> include applications where
you may want to do something fairly trivial, but want access to
BedrockE<039>s persitent session or you want to do some back end
processing and might like to fork and return to the front end UI
quickly.

=head1 METHODS

=cut

=pod

=head2 new

 new(options)

C<options> is a hash of options:

=over 5

=item CONTENT_TYPE

default: 'text/html'

=item LOGDIR

default: C<$bedrock->config( 'LOGDIR' )>

=item LOGFILE

default: C<sprintf("%s/%s.log", $bedrock->config( 'LOGDIR' ), $0);>

=item COOKIELESS

If set to 1, then sessions are assumed to be cookieless.

default: 0

=back

=cut

sub new {
  my $class   = shift;
  my %options = @_;

  my $self = bless {}, $class;

  $self->handler->header_out( 
			     'Content-type',
			     $options{CONTENT_TYPE} || 'text/html'
			    );

  # retrieve the configuration object
  $self->config;

  # Bedrock logging
  $options{LOGDIR} = $self->config->{LOGDIR}
  unless $options{LOGDIR};

  unless ( $options{LOG_FILE} ) {
    my ( $name, $path, $ext ) = fileparse( $0, qr/\.(cgi|pl)/ );
    $options{LOG_FILE} =
    sprintf( "%s/%s%s.log", $options{LOGDIR}, $name, $ext );
  }

  TagX::Log::start_logger( LOG_FILE => $options{LOG_FILE} );

  $self->context;

  $self->init_session( $options{COOKIELESS} );

  return $self;
}

=pod

=head2 config

 config()
 config(key)

Access Bedrock configuration information.

 $bedrock->config( $key );

If you call C<config()> without an argument it will return the
C<Bedrock::Config> object.

 $bedrock->config->{ $key };

 $bedrock->config->get_module_config( 'UserSession' );

=cut

sub config {
  my ( $self, $key ) = @_;

  my $bh = new Bedrock::Handler( $self->handler );
  my $config =  ( exists $self->{CONFIG} )  ? $self->{CONFIG}  : ( $self->{CONFIG} = $bh->get_config);

  return ( $key ? $config->{$key} : $config );
}

=pod

=head2 clear

Remove all data from the output buffer.  If the output buffer is
empty, no headers will be printed on exit.  

=cut

sub clear {
  delete $_[0]->{DATA};
}

=pod

=head2 cgi

 cgi()

Returns a CGI object.  See C<perldoc CGI>.

=cut

sub cgi {
  return $_[0]->context->cgi;
}

=pod

=head2 context

 context()

Returns the Bedrock C<Bedrock::Context> object.

=cut

sub context {
  my $self = shift;

  unless (exists $self->{_ctx} ) {
    $self->{_ctx} = Bedrock::Context->new( 
					 APACHE_HANDLER => $self->handler,
					 CONFIG         => $self->config
					)
  }

  return $self->{_ctx};
}

=pod

=head2 exec

 exec( html, vars );

Use the Bedrock templating engine to create output from a Bedrock
snippet and a hash of values.

  my $snippet = '<var $foo>';
  my $foo = "Hello World!";

  $bedrock->print( $bedrock->exec($snippet, foo => $foo) );

C<exec()> will throw an exception which contains an HTML listing and
diagnosis if the snippet cannot b interpretted.  It's up to you to
catch this and do something interesting (like send it to the browser)
with it.  Anything in the print buffer prior to the error is removed.

  eval {
    $bedrock->print( $bedrock->exec($snippet, foo => $foo) );
  };

  if ( $@ ) {
    $bedrock->print( $@ );
  }

=cut

sub exec {
  my $self = shift;
  my $snippet = shift;
  my %args = @_;

  my $snippet_fd = IO::Scalar->new( \$snippet );
  my $output = "";

  my $output_fd = IO::Scalar->new( \$output );

  my $tx = Text::TagX->new( $snippet_fd, $output_fd );

  map { $tx->param( $_ => $args{$_} ) } keys %args;

  eval { $tx->output; };

  if ($@) {
    $self->clear;

    my $err    = Htmlencode($@);
    my $err_fd = IO::Scalar->new( \$err );

    # offending snippet line
    my $line_no = $1 if $err =~ /line\s*(\d+)/;

    my @lines = <$err_fd>;
    $err_fd->close;
    my $line = 1;
    my $fline;

    for ( 1 .. $#lines - 1 ) {
      $fline = sprintf( "%-3d", $line );
      $lines[$line] =~ s/^/\[$fline\] /;
      $lines[$line] =
      '<span style="color:red;font-weight:800;">' . $lines[$line] . '</span>'
      if $line_no == $line;
      $line++;
    }

    for ( 0, $#lines ) {
      $lines[$_] =
        '<div style="font-size:125%;margin:10px;color:purple;font-weight:800;">'
      . $lines[$_]
      . '</div>';
    }

    $err = join( '', @lines );
    $@ = "<pre>$err</pre>";
  }

  $tx->close;
  $output_fd->close;

  die $@ if $@;

  return $output;
}

=pod

=head2 handler

 handler()

Returns an Apache request handler

=cut

sub handler {
  return ( exists $_[0]->{APACHE_HANDLER} )  ? $_[0]->{APACHE_HANDLER}  : ( $_[0]->{APACHE_HANDLER} = new Apache::Request_cgi );
}

# initialize the session
sub init_session {
  my ($self, $cookieless) = @_;

  my $config = $self->config->get_module_config('UserSession');
  $config->{cookieless_session} = $cookieless;

  my $session = BLM::Startup::UserSession->new( $self->context, $config );

  $self->{SESSION} = $session;

  $self->context->session($session)
}

=pod

=head2 print

 print( data );

Add data to the output buffer.  The buffer will be flushed to STDOUT
when the program exits unless the buffer is cleared using the
C<clear()> method.

=cut

sub print {
  my $self = shift;

  $self->{DATA} .= shift;
}

=pod

=head2 log

 log( message )

Write a message to the script's log file.  See the C<new()> method.
Typically the log file should be located in the virtual hosts log
directory alongside other Bedrock and site logs.

=cut

sub log {
  my $self = shift;

  TagX::Log::log_message( undef, $_[0] );
}

=pod

=head2 redirect

 redirct(url);

Redirect browser.  Clears the buffer and then redirects. See C<perldoc
CGI>

 $bedrock->redirect("http://www.google.com");

=cut

sub redirect {
  my $self = shift;

  $self->clear;
  $self->cgi->redirect(@_);
}

=pod

=head2 session

 session()
 session( key )
 session( key, value )

Set or access Bedrock session information.  Setting a session value
persists the value in Bedrock's session so that you can access it in
subsequent Bedrock pages using the C<$session> object.

 # get a session value
 $bedrock->session('foo');

 # to get multiple values
 my ($first, $last) = $bedrock->session(['firstname', 'lastname']);

 my ($first, $last) = @{$bedrock->session}{qw/firstname lastname/};

 # set a session value
 $bedrock->session('site_prefs', $prefs);

=cut

sub session {
  my $self = shift;

  die "No SESSION object available."
    unless exists $self->{SESSION};

  if ( @_ > 1 ) {
    return $self->{SESSION}->{ $_[0] } = $_[1];
  }
  elsif ( @_ == 1 ) {
    if ( UNIVERSAL::isa( $_[0], 'ARRAY' ) ) {
      return @{ $self->{SESSION} }{ @{ $_[0] } };
    }
    else {
      return $self->{SESSION}->{ $_[0] };
    }
  }
  else {
    return $self->{SESSION};
  }
}


# flush output, close session
sub DESTROY {
  my $self = shift;

  $self->session->closeBLM if $self->session;

  return unless exists $self->{DATA};

  $self->handler->send_http_header;

  print "\n", $self->{DATA};
}

1;

=pod

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

C<CGI.pm>

=cut

# Revision 1.14  2013/11/05 15:47:30  rlauer
# - added more pod
# - use getters/setters instead of reaching into Bedrock::Context object if possible
# - in init_session() we now save the session object so CGIs can use the session() method
#
# Revision 1.13  2013/10/29 13:57:03  rlauer
# - init_session() method now stores session object directly to SESSION hash key
# - as per above new() does not need to store session object to hash
#
# Revision 1.12  2013/07/16 07:01:39  rlauer
# - pod tweaks
#
# Revision 1.11  2013/05/14 18:58:28  rlauer
# - in config() method we now use Bedrock::Handler object to retrieve a Bedrock::Config object
# - moved the pod in-line, some tweaks
#
# Revision 1.10  2013/05/10 15:53:27  rlauer
# - use Bedrock, use Text::URLEncode in order to avoid duplicate symbol warnings (encode, etc)
#
# Revision 1.9  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.8  2011/09/09 21:12:05  eutl420
# - define dummy package
#
# Revision 1.7  2011/08/13 16:07:31  eutl420
# - create some pod for exec() method
# - trap errors from Text::TagX and create a nice formatted snippet listing
#
# Revision 1.6  2011/08/13 14:53:21  eutl420
# - new exec() method that implements Bedrock templating so you can pass a Bedrock snippet and
#   a hash of objects
#
# Revision 1.5  2011/08/10 21:43:47  eutl420
# - allow the constructor to accept a new optional argument COOKIELESS that will indicate that sessions are cookieless
#
# Revision 1.4  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.3  2011/07/12 18:24:25  eutl420
# - renamed the file from CGI.pm to BedrockCGI.pm to avoid name space collisions
# - added pod, documented methods
# - set the content-type from the options passed or to 'text/html' as default
# - new methods clear(), cgi(), redirect()
# - session() now accepts array ref to return multiple values
# - in the destroy method, don't output anything if no data in buffer
#
# Revision 1.2  2011/07/11 22:04:37  eutl420
# added log keyword
#
