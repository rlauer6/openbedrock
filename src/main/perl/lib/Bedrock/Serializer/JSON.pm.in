package Bedrock::Serializer::JSON;

use strict;
use warnings;

use Data::Dumper;

use Bedrock::BedrockJSON;

use parent qw/Bedrock::Serializer/;

use Role::Tiny::With;
with 'Bedrock::Serializer';

########################################################################
sub deserialize {
########################################################################
  my ( $self, $data ) = @_;

  die qq{Can't use --json on an object.\n}
    if ref $data;

  return Bedrock::JSON::decode($data);
}

########################################################################
sub serialize {
########################################################################
  my ( $self, $data ) = @_;

  die qq{Can't use --json on a scalar object.\n}
    if !ref $data;

  return Bedrock::JSON::encode( $data, $self->options->{pretty} || 0 );
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 NAME

Bedrock::Serializer::JSON

=head1 SYNOPSIS

 <var --json $foo>

=head1 DESCRIPTION

Serializer used internally by Bedrock to serialize/deserialize JSON
objects. Can also be used in Perl script or BLMs that need to
serialize Bedrock objects. This serializer will convert blessed
objects to Perl objects.

=head1 METHODS AND SUBROUTINES

=head2 serialize

  my $serializer = Bedrock::Searializer::JSON->new

  $serializer->serialize($obj);

=head2 deserialize

  my $serializer = Bedrock::Searializer::JSON->new

  $serializer->deserialize($obj);

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=head1 SEE OTHER

L<Bedrock::Serializer>

=cut
