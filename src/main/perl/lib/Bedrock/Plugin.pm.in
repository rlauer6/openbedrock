package Bedrock::Plugin;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Role::Tiny::With;
with 'Bedrock::Logger';

use Data::Dumper;
use English qw(-no_match_vars);
use Log::Log4perl::Level;
use Tie::Hash;

use parent -norequire => qw(Tie::StdHash);

########################################################################
sub new {
########################################################################
  my ( $proto, @args ) = @_;

  my $class = ref($proto) || $proto;

  my $self = bless {}, $class;

  tie %{$self}, $class;  ## no critic (ProhibitTies)

  $self->{_args} = \@args;

  return $self;
}

########################################################################
sub args {
########################################################################
  my ($self) = @_;

  return Bedrock::Array->new( @{ $self->{_args} } );
}

########################################################################
sub init_plugin {
########################################################################
  my ( $self, @args ) = @_;

  return 1;
}

########################################################################
sub _set_get {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 1 ) {
    $self->{ $args[0] } = $args[1];
  }

  return $self->{ $args[0] };
}

########################################################################
sub set { goto &_set_get; }  ## no critic (ProhibitAmbiguousNames)
sub get { goto &_set_get; }
########################################################################

########################################################################
sub delete {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $key ) = @_;

  return delete $self->{$key};
}

########################################################################
sub keys {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  return Bedrock::Array->new( CORE::keys %{$self} );
}

########################################################################
sub verbose {
########################################################################
  my ( $self, @args ) = @_;

  return $self->_set_get( 'verbose', @args );
}

########################################################################
sub options {
########################################################################
  my ( $self, @args ) = @_;

  return $self->_set_get( '_options', @args );
}

########################################################################
sub _logger {
########################################################################
  my ($self) = shift;

  my $logger = $self->get_logger;

  if ( $self->verbose ) {
    my $level = $self->verbose == 1 ? $DEBUG : $TRACE;

    $logger->level($level);
  }

  return $logger;
}

########################################################################
sub level { return shift->get_logger->level(shift); }
########################################################################

########################################################################
sub log_debug { return shift->_logger->debug(shift); }
sub log_error { return shift->_logger->error(shift); }
sub log_info  { return shift->_logger->info(shift); }
sub log_trace { return shift->_logger->trace(shift); }
########################################################################

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

Bedrock::Plugin - Base class for creating custom Bedrock Plugins

=head1 SYNOPSIS

 package BLM::MyPlugin;

 use parent qw{Bedrock::Plugin};

 sub hello_world {
   my $self = shift;

   return "Hello World!";
 }

 1;

 <plugin:HelloWorld >
 <var $HelloWorld.hello_world()>

=head1 DESCRIPTION

I<NOTE: This class is deprecated.  Use L<BLM::Plugin> instead. 

Base class for use in creating custom Bedrock I<Plugins> that can be
accessed from your web page as follows:

   <plugin:MyPlugin args ...>

   <var $MyPlugin.hello_world()>

Plugins are usually implemented based on a tied HASH, but can be
implemented as tied ARRAYs, etc. hack C<Bedrock::Plugin> as the
reference implementation.

You should override the C<init_plugin()> method if you want to return
a value when the Plugin is loaded.  The C<init_plugin()> method is
called by Bedrock immediately after calling the C<new()> method to
create the class.  C<init_plugin()> is passed the arguments specified in the tag.

  sub init_plugin {
     my $self = shift;

  }

=head1 METHODS

=head2 new

This method is called when your plugin is instantiated.  The new
method will be passed the arguments contained in the plugin tag.  They
are stored as a Bedrock array and can be accessed using the C<args()>
method.

  <plugin:MyPlugin 1 $input.host>

  my $foo = BLM::MyPlugin->new(...);

=head2 delete

Delete a hash member.

 <var $foo.delete('SLATE')>

=head2 get 

Return a hash member

 <var $foo.get('FRED')>

=head2 init_plugin

You should override the C<init_plugin> method if you want to return a
value when the Plugin is instantiated.

=head2 keys

Returns the keys of the hash as a C<Bedrock::Array>

 <null:keys $foo.keys()>

=head1 LOGGING FUNCTIONS

You can use Bedrock's internal logger for logging message. By default,
these logging methods will log at the level set for the C<BLM::Plugin>
category if that is configured in the F<log4perl.conf> file.  See
L<Bedrock::Logger> for more details.


=head2 log_debug

=head2 log_info

=head2 log_warn

=head2 log_debug

=head2 options

Returns a C<Bedrock::Hash> object representing the initial options (not the arguments) passed in.

=head2 set

Set a hash member.

 <var $foo.set('FRED', 'A man called Flintstone.')>

=head2 values

Retrieve the hash values.

 <null:values $foo.values()>

=head2 verbose

Returns a 1 if the C<--verbose> flag was specified for this plugin.

=head1 NOTES

Plugins are meant for short perlish things you need to do that just
don't seem appropriate in a web page.  If you're implementing a lot of
application specific functionality you probably want to write an
B<Application Plugin> (I<formerly called Startup BLMs>) that will have
access to the config files and the current context object (CGI
variables, etc).

Application Plugins differ from those instantiated with the
C<E<lt>pluginE<gt>> tag in that an Application plugin is instantiated
on usage and becomes available immediate when you use them similar to
the way you use the C<$input>, C<$session> or C<$config> objects.

Plugins are perfect for including functionality you might derive from
some CPAN module that implements something terribly useful but is not
possible using core Bedrock.  There are a handful of useful plugins
that are included in the standard distribution of Bedrock, but plugins
are your way to extend Bedrock to fit your needs.

=head1 SEE ALSO

C<E<lt>pluginE<gt>>, C<E<lt>pebbleE<gt>>

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=cut

