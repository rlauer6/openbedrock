#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::PLUGIN;

use strict;

BEGIN
{
    use Exporter ();
    use Tie::Hash;
    use vars	qw ($VERSION @ISA);

    $VERSION	= 1.0;
    @ISA	= qw (Tie::StdHash);
}

use UNIVERSAL qw(isa);

sub new
{
  my $proto = shift;
  my $class = ref ($proto) || $proto;
  my $self = bless {}, $class;
  tie %{$self}, $class, @_;
  $self;
}

sub init_plugin {
  my $self = shift;

  return 1;
}


=pod

=head1 PUBLIC

C<BLM::PLUGIN> - Base class for creating custom Bedrock Plugins

=head1 SYNOPSIS

 package BLM::MyPlugin;

 use vars qw(@ISA)

 use BLM::PLUGIN;

 @ISA = qw(BLM::PLUGIN);

 sub init_plugin {
 }
 
 sub some_method {
   "Hello World!";
 }

 1;

=head1 DESCRIPTION

Base class for use in creating custom Bedrock I<Plugins> that can be
accessed from your web page as follows:

   <plugin:MyPlugin args ...>

   <var $MyPlugin.some_method()>

Plugins are based on a tied HASH, but can be implemented as
tied ARRAYs, etc. hack C<BLM::PLUGIN> as the reference implementation.

=head1 METHODS

=head2 new

OO constructor that will be called when your plugin is instantiated.
The new method will be passed the arguments contained in the plugin
tag.

  my $foo = BLM::MyPlugin->new(...);

=head1 init_plugin

You should override the C<init_plugin> method if you want to return a
value when the Plugin is instantiated.

=head1 NOTES

Plugins are meant for short perlish things you need to do that just
don't seem Kosher in a web page.  If you're implementing a lot of
application specific functionality you probably want to write an
B<Application Plugin> (I<formerly called Startup BLMs>) that will have
access to the config files and the current context object.

Plugins are perfect for including functionality you might derive from
some CPAN module that implements something terribly useful but is not
possible using core Bedrock.  There are a handful of useful plugins
that are included in the standard distribution of Bedrock, but plugins
are your way to extend Bedrock to fit your needs.

=head1 SEE ALSO

C<E<lt>pluginE<gt>, C<E<lt>pebbleE<gt>>

=head1 AUTHOR

Rob Lauer - rlauer@signatureinfo.com

=cut

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.5  2010/11/18 20:08:32  rlauer
# - tweak documentation
#
# Revision 1.4  2010/11/17 02:32:46  rlauer
# - add sub init_plugin
# - pod cleanup
#
# Revision 1.3  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.2  2009/12/30 00:23:31  rlauer
# update docs for Bedrock II
#
# Revision 1.1  2009/12/26 15:43:54  rlauer
# a template for the Bedrock II plugins
#
