package Bedrock::HTML::Helper;


use base qw( Exporter );

use vars qw( @VERSION @EXPORT_OK @EXPORT_TAGS);

@EXPORT_OK = qw( create_html_element
		 create_label_name
		 create_xhtml_element
		 create_xhtml_element_header
		 create_radio_buttons
		 create_checkbox
		 create_select_list
	      );

%EXPORT_TAGS = (all => \@EXPORT_OK);

=pod

=head1 NAME

C<Bedrock::HTML::Helper> - methods for creating HTML objects

=head1 DESCRIPTION

This package contains helper methods used by other parts of Bedrock
for creating HTML elements.  Not generally considered useful for
public consumption.

I<Documentation is a work in progress...>

=head1 METHODS

=cut

=pod

=head2 create_html_element

 create_html_element( element, attributes )

=cut

sub create_html_element {
  my $element    = shift;
  my %attributes = @_;

  return sprintf(
    "<%s%s>", $element,
    join(
      "",
      map {
        ( defined $attributes{$_} && $attributes{$_} ne "undef" )
        ? " $_=\"$attributes{$_}\""
        : " $_"
      } keys %attributes
    )
  );
}

=pod

=head2 create_xhtml_element_header

 create_xhtml_element_header( element, attributes )

=cut

sub create_xhtml_element_header {
  my $element    = shift;
  my %attributes = @_;

  sprintf(
    "<%s%s>", $element,
    join(
      "",
      map {
        ( defined $attributes{$_} && $attributes{$_} ne "undef" )
        ? " $_=\"$attributes{$_}\""
        : " $_"
      } keys %attributes
    )
  );
}

=pod

=head2 create_xhtml_element

 create_xhtml_element( element, attributes )

=cut

sub create_xhtml_element {
  my $element    = shift;
  my $value      = shift;
  my %attributes = @_;

  if ( defined $value ) {
    sprintf(
      "<%s%s>%s</%s>",
      $element,
      join(
        "",
        map {
          defined $attributes{$_}
          ? " $_=\"$attributes{$_}\""
          : " $_"
        } keys %attributes
      ),
      $value,
      $element
           );
  }
  else {
    sprintf(
      "<%s%s/>",
      $element,
      join(
        "",
        map {
          ( defined $attributes{$_} && $attributes ne "undef" )
          ? " $_=\"$attributes{$_}\""
          : " $_"
        } keys %attributes
      )
    );
  }

}

=pod

=head2 create_label_name

 create_lable_name( label )

=cut

sub create_label_name {
  my $label = shift;
  $label =~ s/_/ /g;

  return join " ", map { ucfirst($_) } split " ", $label;
}

=pod

=head2 create_checkbox

 create_checkbox( name, value, attributes )

=cut

sub create_checkbox {
  my $field_name = shift;
  my $value      = shift;
  my $attributes = shift;
  my $options;

  unless ( ref( $_[0] ) ) {
    $options = [];
    while (@_) {
      push @$options,
      { item => shift,
        id   => shift
      };
    }
  }
  else {
    $options = shift;
  }

  die "You must supply a list of check labels and values." unless $options;

  my @values = ref($value) ? @$value : ($value);

  my @items = map { $_->{item} } @{$options};

  my $html;

  foreach my $ref ( @{$options} ) {
    my $span =
    $ref->{item}
    ? create_xhtml_element( "span", $ref->{item}, %{ $attributes->{label} } )
    : "";
    $html .= sprintf( "%s&nbsp;%s&nbsp;&nbsp;&nbsp;",
                      create_html_element(
                                   'input',
                                   ( type  => "checkbox",
                                     name  => $field_name,
                                     value => $ref->{id}
                                   ),
                                   $attributes ? %{ $attributes->{input} } : (),
                                   scalar( grep { $ref->{id} eq $_ } @values )
                                   ? ( "checked" => undef )
                                   : ()
                      ),
                      $span
                    );
  }

  return $html;
}

=pod

=head2 create_radio_buttons

 create_radio_buttons( name, value, attributes )

=cut

sub create_radio_buttons {
  my $name       = shift;
  my $value      = shift;
  my $attributes = shift;
  my $options;

  if ( ref( $_[0] ) ) {
    $options = shift;
  }
  else {
    $options = [];
    while (@_) {
      push @$options, { item => shift, id => shift };
    }
  }

  my $radio_buttons;

  my $input_attributes= $attributes->{input};
  my $input_id = $input_attributes->{id} || $name;
  delete $input_attributes->{id};

  foreach (@$options) {
    my %label_attributes = %{ $attributes->{label}};
    my $label_id;

    unless ( $label_attributes{for} ) {
      $label_id = $input_id . '_' . $_->{id};
    }
    else {
      $label_id = $label_attributes{for};
    }

    $attributes->{input}->{id} = $label_id
      unless $attributes->{input}->{id};

    $label_attributes{for} = $label_id;

    my $label = create_xhtml_element( "label", $_->{item}, %label_attributes  );
    $input_attributes->{id} = $input_id . '_' . $_->{id};

    $radio_buttons .= sprintf( "%s&nbsp;%s&nbsp;&nbsp;&nbsp;",
                               create_html_element(
                                  'input',
                                  %{ $input_attributes },
                                  ( type => 'radio', name => $name ),
                                  defined $_->{id} ? ( "value" => $_->{id} )
                                  : (),
                                  defined $_->{id}
                                  && $value eq $_->{id} ? ( "checked" => undef )
                                  : ()
                               ),
                               $label
                             );
  }

  return $radio_buttons;
}

=pod

=head2 create_select_list

 create_select_list( name, value, attributes, options_ref )
 create_select_list( name, value, attributes, item, id, ... )

=over 5

=item name

C<name> attribute for the the C<select> element.

=item value

Current value of C<select> element. Could be multiple elements
selected in which case this should be an array reference.

=item attributes

Hash of other attributes of the C<select> element, such C<id>, C<class>, etc.

=back

 <null --define-var="options" "red" 1 "blue" 2>
 <null $obj.create_select_list("joe", $input.joe, undef, $options>

=cut

sub create_select_list {
  my $name       = shift;
  my $value      = shift;
  my $attributes = shift;
  my $options;

  if ( ref( $_[0] ) ) {
    $options = shift;
  }
  else {
    $options = [];
    while (@_) {
      push @$options, { item => shift, id => shift };
    }
  }

  if (@$options) {
    my $pick_list .= sprintf( "%s\n",
                              create_html_element(
                                  'select',
                                  %{ $attributes->{select} },
                                  ( "name" => $name ),
                                  ref($value)
                                  ? (
                                    "multiple" => undef,
                                    "size" => ( @$options <= 5 ? @$options : 5 )
                                  )
                                  : ()
                              )
                            );

    my @values = ref($value) ? @$value : ($value);

    foreach my $option (@$options) {
      $pick_list .= sprintf( "%s%s</option>\n",
                             create_html_element(
                                  'option',
                                  %{ $attributes->{option} },
                                  ( "value" => $option->{id} ),
                                  scalar( grep { $option->{id} eq $_ } @values )
                                  ? ( "selected" => undef )
                                  : ()
                             ),
                             $option->{item}
                           );
    }
    return $pick_list .= "</select>\n";
  }
  else {
    return create_html_element( "input", type => "hidden", name => $name );
  }

}


=pod

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

# Revision 1.5  2013/07/16 06:52:24  rlauer
# - add %EXPORT_TAG 'all'
# - fix pod mistake in create_select_list
# - use <label> instead of <span> for radion buttons to all label to be clickable
#
# Revision 1.4  2012/09/23 12:43:28  rlauer
# - pod and typos
#

1;
