package Bedrock::HTML::Helper;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
use strict;
use warnings;

use BLM::IndexedTableHandler::Common qw(:all);

use parent qw( Exporter );

our @EXPORT_OK = @BLM::IndexedTableHandler::Common::EXPORT_OK;

our %EXPORT_TAGS = ( all => \@EXPORT_OK );

1;

## no critic

__END__

=pod

=head1 NAME

Bedrock::HTML::Helper - methods for creating HTML objects

=head1 SYNOPSIS

 use Bedrock::HTML::Helper qw(:all);

 print create_xhtml_element('html',
                            create_xhtml_element('head'),
                            create_xhtml_element('title'),
                            create_xhtml_element('style'),
                            create_xhtml_element('body'),
                           );

=head1 DESCRIPTION

This package contains helper methods for creating the common HTML
elements.

=head1 METHODS AND SUBROUTINES

=head2 Common Parameters

=over 5

=item name

C<name> attribute for the the element.

=item value

Current value of the element. Could be multiple elements
selected in which case this should be an array reference.

=item attributes

Hash reference or list of key/value pairs that represent the
attributes of the element, such C<id>, C<class>, etc.

=back

 <null --define-var="options" "red" 1 "blue" 2>
 <null $obj.create_select_list("joe", $input.joe, undef, $options>


=head2 create_html_element

 create_html_element( element, attributes )

=head2 create_xhtml_element_header

 create_xhtml_element_header( element, attributes )

=head2 create_xhtml_element

 create_xhtml_element( element, attributes )

=head2 create_label_name

 create_label_name( label )

=head2 create_checkbox

 create_checkbox( name, checked, attributes, values )

=over 5

=item checked

Array of items which should be true.

=item values

Hash reference or list of key/value pairs that represent the checkbox
label and value.

=back

Example:

  my $checkbox = create_checkbox(
    'color', [qw(red)],
    { id => 'color' },
    Red   => 'red',
    Blue  => 'blue',
    Green => 'green'
  );

You can also send a hash reference of options:

  create_checkbox(
    { name       => 'color',
      checked    => [qw(red})],
      attributes => {
        class => 'check-box',
        id    => 'color',
      },
      values => [
        Red   => 'red',
        Blue  => 'blue',
        Green => 'green',
      ]
    }
  );

=head2 create_radio_buttons

 create_radio_buttons( name, checked, attributes, values )

See C<create_checkbox>

=head2 create_select_list

 create_select_list( name, value, attributes, options_ref )
 create_select_list( name, value, attributes, item, id, ... )

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=cut

