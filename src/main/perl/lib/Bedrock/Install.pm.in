package Bedrock::Install;

use strict;
use warnings;

use Data::Dumper;
use English qw(-no_match_vars);
use Bedrock::Constants qw(:booleans :chars :log_levels);
use Bedrock qw(slurp_file);
use JSON;
use File::Find;
use File::Copy qw(copy);
use File::Basename;
use File::Path qw(make_path);
use Scalar::Util qw(reftype);

use parent qw(Bedrock::Application);

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw(manifest destdir dryrun loglevel));

caller or __PACKAGE__->main();

########################################################################
sub fetch_file_list {
########################################################################
  my ( $self, $dir ) = @_;

  my @files;

  find(
    { wanted => sub {
        return
          if /^[.]/xsm;

        push @files, $_;
      },
      preprocess => sub {
        my @files = @_;

        return grep { !-d $_ } @_;
      }
    },
    $dir
  );

  return \@files;
}

########################################################################
sub fetch_directories {
########################################################################
  my (@dirs) = @_;

  my @directories;

  foreach my $dir (@dirs) {
    next if !$dir;

    my $name   = $dir->{name};
    my $source = $dir->{source};
    find(
      sub {
        return if /^[.]/xsm || !-d $_;

        my $d = $File::Find::name;
        $d =~ s/$source//xsm;
        push @directories,
          {
          source    => "$source$d",
          mode      => $dir->{mode},
          file_mode => $dir->{mode},
          link      => $dir->{link},
          overwrite => $dir->{overwrite},
          name      => "$name$d"
          };
        return;
      },
      $source
    );
  }

  return @directories;
}

########################################################################
sub install {
########################################################################
  my ($self) = @_;

  $self->get_logger->debug( Dumper( [ dryrun => $self->get_dryrun ] ) );

  my $manifest = $self->get_manifest;

  my $dryrun   = $self->get_dryrun ? '(dryrun):' : $EMPTY;
  my $defaults = $manifest->{defaults};
  my $destdir  = $self->get_destdir // $EMPTY;

  $destdir =~ s/\/$//xsm;

  my $directories = $manifest->{directories};
  push @{$directories}, fetch_directories( grep { $_->{recurse} } @{$directories} );

  foreach my $dir ( @{$directories} ) {
    if ( !$self->test_condition($dir) ) {
      $self->get_logger->info('condition failed...skipping');
      next;
    }

    my $name = $dir->{name};

    $self->get_logger->info( sprintf '%screating directory %s%s', $dryrun, $destdir, $name );

    if ( !$dryrun ) {
      if ( -d "$destdir$name" ) {
        $self->get_logger->warn( sprintf '%s%s%s already exists...skipping', $dryrun, $destdir, $name );
      }
      else {
        my $mode  = $dir->{mode}  // $defaults->{mode};
        my $group = $dir->{group} // $defaults->{group};
        my $owner = $dir->{owner} // $defaults->{owner};

        my $uid = $owner =~ /\D/xsm ? ( getpwnam $owner )[2] : $owner;
        my $gid = $group =~ /\D/xsm ? ( getgrnam $group )[2] : $group;

        $self->get_logger->debug(
          Dumper(
            [ uid  => $uid,
              gid  => $gid,
              mode => sprintf '%s',
              $mode,
            ]
          )
        );

        make_path(
          "$destdir$name",
          { mode => sprintf( '%s', oct($mode) ),
            defined $uid ? ( owner => $uid ) : (),
            defined $gid ? ( group => $gid ) : (),
          }
        );
      }
    }

    my $files = $dir->{files};

    # if no specific file list, then fetch all files from source
    if ( !$files ) {
      $files = [ $self->fetch_file_list( $dir->{source} ) ];
    }

    foreach my $file ( @{$files} ) {
      if ( reftype($file) eq 'ARRAY' ) {
        foreach my $f ( @{$file} ) {
          $self->_install(
            file => {
              name    => $f,
              destdir => $destdir,
            },
            defaults => $defaults,
            dir      => $dir,
            dryrun   => $dryrun,
            exclude  => $dir->{exclude},
          );
        }
      }
      else {
        my %install_options = %{$file};
        $install_options{destdir} = $destdir;

        $self->_install( defaults => $defaults, file => \%install_options, dir => $dir, dryrun => $dryrun );
      }
    }
  }

  return;
}

########################################################################
sub _default {
########################################################################
  my ( $key, $file, $dir, $defaults ) = @_;

  return $file->{$key} // $dir->{$key} // $defaults->{$key};
}

########################################################################
sub _install {
########################################################################
  my ( $self, %args ) = @_;

  my ( $file, $dir, $dryrun, $defaults, $exclude ) = @args{qw( file dir dryrun defaults exclude)};

  my @files;
  my %sources;

  $self->get_logger->trace( "installing: \n", Dumper( [ file => $file ] ) );

  if ( !ref $file->{name} ) {
    push @files, $file->{name} // basename $file->{source};
  }
  else {
    my $target = -f $file->{source} ? $file->{source} : $EMPTY;

    @files   = @{ $file->{name} };
    %sources = map { ( $_ => $target ? $target : "$file->{source}/$_" ) } @files;
  }

  $self->get_logger->trace(
    "installing: \n",
    Dumper(
      [ files   => \@files,
        sources => \%sources,
      ]
    )
  );

  my $destdir = $file->{destdir} // $EMPTY;

  my $link      = _default( 'link',      $file, $dir, $defaults );
  my $overwrite = _default( 'overwrite', $file, $dir, $defaults );
  my $mode      = _default( 'file_mode', $file, $dir, $defaults );

  my $group = _default( 'group', $file, $dir, $defaults );
  my $owner = _default( 'owner', $file, $dir, $defaults );

  my $uid = $owner =~ /\D/xsm ? ( getpwnam $owner )[2] : $owner;
  my $gid = $group =~ /\D/xsm ? ( getgrnam $owner )[2] : $group;

  foreach my $file_name (@files) {

    if ($exclude) {
      my $skip = $FALSE;

      foreach my $pattern ( @{$exclude} ) {
        if ( $pattern =~ /^qr\/([^\/]+)\/(i)?$/xsm ) {
          my $regex = $2 ? qr/$1/xsmi : qr/$1/xsm;
          if ( $file_name =~ $regex ) {
            $self->get_logger->warn( sprintf 'excluding %s by rule %s', $file_name, $regex );
            $skip = $TRUE;
            last;
          }
        }
        else {
          if ( $pattern eq $file_name ) {
            $self->get_logger->warn( sprintf 'excluding %s by rule = %s', $file_name, $pattern );
            $skip = $TRUE;
            last;
          }
        }
      }
      next if $skip;
    }

    my $dest = sprintf '%s%s/%s', $destdir, $dir->{name}, $file_name;

    # local source => group source => directory source
    my $source = $sources{$file_name} // $file->{source};
    $source = $source ? $source : sprintf '%s/%s', $dir->{source}, $file_name;

    if ( !-e $source ) {
      $self->get_logger->warn( sprintf '%s%s does not exist...skipping', $dryrun, $source );
      return;
    }

    if ($link) {
      $self->get_logger->info( sprintf '%slinking %s as %s', $dryrun, $source, $dest );

      if ( !$dryrun ) {
        symlink $source, $dest;
      }
    }
    else {
      $self->get_logger->info( sprintf '%scopying %s to  %s', $dryrun, $source, $dest );

      if ( !$dryrun ) {
        if ( -e $dest && !$overwrite ) {
          $self->get_logger->warn( sprintf 'file exists - set overwrite = 1 to replace' );
        }
        elsif ( -e $dest ) {
          $self->get_logger->warn( sprintf 'file exists - replacing' );
        }

        copy( $source, $dest );

        if ( !-e $dest ) {
          $self->get_logger->error( sprintf 'error copying file %s', $OS_ERROR );
        }
      }
    }

    $self->get_logger->info(
      sprintf '%ssetting owner [%s]:[%s] for %s',
      $dryrun,
      ( $uid // 'undef' ),
      ( $gid // 'undef' ), $dest
    );

    if ( !$dryrun && ( defined $uid && defined $gid ) ) {
      # Perl's chown will not change a symbolic link
      system 'chown', '-h', "$uid:$gid", $dest;

      # We want the target to have the same owner (SymLinksIfOwnerMatch)
      chown $uid, $gid, $source;
    }

    $self->get_logger->info( sprintf '%ssetting mode %s for %s', $dryrun, $mode, $dest );
    $self->get_logger->info( sprintf '%ssetting mode %s for %s', $dryrun, $mode, $source );

    if ( !$dryrun ) {
      chmod oct($mode), $dest;
    }
  }

  return;
}

########################################################################
sub init {
########################################################################
  my ($self) = @_;

  my $loglevel = $self->get_loglevel;

  $self->get_logger->level( $LOG4PERL_LOG_LEVELS{$loglevel} // $LOG4PERL_LOG_LEVELS{info} );

  my $manifest = $self->get_manifest;

  die "manifest is a required argument\n"
    if !$manifest;

  if ( !ref $manifest ) {
    my $manifest_file = $manifest;

    die "$manifest_file not found\n"
      if !-e $manifest_file;

    $manifest = slurp_file($manifest_file);

    die "could not read $manifest_file\n$EVAL_ERROR"
      if !$manifest || $EVAL_ERROR;
  }

  $manifest = eval { return JSON->new->decode( ref $manifest ? ${$manifest} : $manifest ); };

  die "unable to decode manifest file ($EVAL_ERROR)\n"
    if !$manifest || $EVAL_ERROR;

  $self->set_manifest($manifest);

  return $self;
}

########################################################################
sub main {
########################################################################
  my $app = Bedrock::Install->new( option_specs => [qw( manifest=s destdir=s )], );

  $app->get_logger->debug( Dumper( [ options => $app->get_options ] ) );

  $app->install;

  return 0;
}

########################################################################
sub _resolve_condition {
########################################################################
  my ( $condition, $args ) = @_;

  if ( $condition eq 'env' ) {
    my ( $env_var, $test_val ) = @{$args};

    $test_val //= $EMPTY;

    return defined $ENV{$env_var} && $ENV{$env_var} eq $test_val;
  }
  else {

  }

  return $FALSE;
}

########################################################################
sub test_condition {
########################################################################
  my ( $self, $dir ) = @_;

  return $TRUE
    if !$dir->{condition};

  my $result = $TRUE;

  foreach my $op ( keys %{ $dir->{condition} } ) {
    my $rv = _resolve_condition( %{ $dir->{condition}->{$op} } );

    if ( $op eq 'not_equal' ) {
      $rv = !$rv;
    }

    $result &&= $rv;

    last if !$result;
  }

  return $result;
}

1;
