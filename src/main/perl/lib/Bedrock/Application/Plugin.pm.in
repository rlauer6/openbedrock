package Bedrock::Application::Plugin;
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2025, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Constants qw(:chars :booleans);
use Bedrock::DBI::Utils qw(load_dsn_from_config);
use BLM::DBHandler qw(easy_connect);
use Data::Dumper;
use English qw(-no_match_vars);
use Log::Log4perl;
use List::Util qw(pairs);
use Scalar::Util qw(reftype);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw( Bedrock::Hash );

caller or __PACKAGE__->main();

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config, $tagx ) = @_;

  my $self = bless {}, $class;

  $self->context($ctx);

  $self->config( $config // {} );

  $self->tagx( $tagx // {} );

  $self->auto_connect( $config->{auto_connect} // $TRUE );

  die "plugin $class failed to initialize properly\n"
    if !$self->init_plugin;

  return $self;
}

########################################################################
sub __set_get {
########################################################################
  my ( $what, $self, @args ) = @_;

  return @args ? $self->set( '__' . $what, @args ) : $self->get( '__' . $what );
}
########################################################################
sub config       { unshift @_, 'config';  goto &__set_get; }
sub context      { unshift @_, 'context'; goto &__set_get; }
sub _dbi         { unshift @_, '_dbi';    goto &__set_get; }
sub tagx         { unshift @_, 'tagx';    goto &__set_get; }
sub auto_connect { unshift @_, 'tagx';    goto &__set_get; }
########################################################################

########################################################################
sub _context { return $_[1]->context->{ $_[0] }; }
########################################################################
sub session       { unshift @_, 'SESSION'; goto &_context; }
sub header        { unshift @_, 'HEADER';  goto &_context; }
sub global_config { unshift @_, 'CONFIG';  goto &_context; }
########################################################################

########################################################################
sub input {
########################################################################
  my ($self) = @_;

  ######################################################################
  # This is sort of magical...
  #
  # The symbol table (TagX::Symtab) is a tied hash. Reaching into
  # the hash triggers the FETCH method. That method knows how to lazy
  # load BLMs like BLM::Startup::Input. So even if C<$input> has not
  # yet been loaded, this will load the input object. Previous
  # versions of Bedrock retrieved the C<$input> object from the
  # context but it may have never been loaded when the context object
  # was created.
  #
  # Note: We do not do this in the constructor so that we do not
  # instantiate the the C<$input> object if we don't need to. This
  # allows other subroutines to have first crack at processing input
  # data.
  ######################################################################

  return $self->tagx->symtab->{input};
}

########################################################################
sub export {
########################################################################
  my ( $self, %params ) = @_;

  return $self->tagx->param(%params);
}

########################################################################
sub init_plugin {
########################################################################
  my ($self) = @_;

  if ( $self->auto_connect ) {
    $self->_dbi_connect;
  }

  return $TRUE;
}

########################################################################
sub dbi {
########################################################################
  my ($self) = @_;

  my $dbi = $self->_dbi;

  return $dbi
    if $dbi;

  return $self->_dbi_connect;
}

########################################################################
sub _dbi_connect {
########################################################################
  my ($self) = @_;

  my %config = %{ $self->config };

  # a plugin must define the database connect parameters for auto
  # connnect, we're not going to assume that the enviroment might hold
  # the values (for now)

  # backward compatibility
  $config{data_source} //= $config{DBI_DSN};

  return
    if !$config{data_source};

  $config{username} //= $config{DBI_USER};
  $config{password} //= $config{DBI_PASS};
  $config{database} //= $config{DBI_DB};
  $config{host}     //= $config{DBI_HOST};
  $config{socket}   //= $config{DBI_SOCKET};

  foreach my $o (qw(RaiseError PrintError AutoCommit)) {
    $config{$o} //= $TRUE;
  }

  my $dbi = easy_connect( \%config );

  $self->_dbi($dbi);

  return $dbi;
}

########################################################################
sub _log {
########################################################################
  my ( $level, $self, @args ) = @_;

  $Log::Log4perl::caller_depth += 2;

  $self->get_logger( ref $self )->$level(@args);

  $Log::Log4perl::caller_depth -= 2;

  return;
}

########################################################################
sub log_trace { my (@args) = @_; return _log( 'trace',   @args ) }
sub log_debug { my (@args) = @_; return _log( 'debug',   @args ) }
sub log_info  { my (@args) = @_; return _log( 'info',    @args ) }
sub log_warn  { my (@args) = @_; return _log( 'warning', @args ) }
sub log_error { my (@args) = @_; return _log( 'error',   @args ) }
sub log_fatal { my (@args) = @_; return _log( 'fatal',   @args ) }
########################################################################

# fix compatibility issue with previous versions of Bedrock.
########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;

  return $key eq 'config' ? $self->{__config} : $self->{$key};
}

########################################################################
sub closeBLM {
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  my $dbi = $self->dbi;

  return $TRUE
    if !$dbi || ref($dbi) !~ /DBI::db/xsm || !$dbi->ping;

  return $dbi->disconnect;
}

########################################################################
sub install_plugin {
########################################################################
  my ($self) = @_;

  my $xml = dump_plugin( $self, 1 );

  die "path is required to install a plugin\n"
    if !$self->get_path;

  my $config   = Bedrock::XML->newFromString($xml);
  my $filename = $self->get_name;
  my $module   = $config->{module};

  if ( !$filename ) {
    $filename = lc $module;

    if ( $filename =~ /::([^:]+)$/xsm ) {
      $filename = $1;
    }
  }

  if ( $filename !~ /[.]xml$/xsm ) {
    $filename = "$filename.xml";
  }

  my $config_file = sprintf '%s/%s', $self->get_path, $filename;

  die sprintf "ERROR:: %s file exists. Use --force to replace\n", $config_file
    if -e $config_file && !$self->get_force;

  if ( !$self->get_silent ) {
    print {*STDERR} sprintf qq{installing "%s" for module "%s" to %s\n}, $filename, $module, $self->get_path;
  }

  Bedrock::XML::writeXML( $config, $config_file );

  return 0;
}

########################################################################
sub help {
########################################################################
  print {*STDOUT} <<"END_OF_HELP";
usage:

  $PROGRAM_NAME Options command args

Options
-------
 -p, --path     install path for plugin config
 -P, --plugin   name of the plugin if not a Bedrock::Application::Plugin
 -f, --force    force overwrite of config file
 -n, --name     name of config file (default: module suffix)
 -s, --silent   silent
 -F, --format   output format for dump - xml, json, yaml (default: xml)

Commands  Args
--------  ----
install   optional list of key value pairs to add or replace config values
dump      dump the contents of the plugin config
help      display this help

Hints
-----
* path should be the path to Bedrock's startup config directory, 
  typicallly BEDROCK_CONFIG_PATH/../config.d/startup

  example: /var/www/bedrock/config.d/startup

* add or replace configuration values at install time

  $PROGRAM_NAME -p /var/www/bedrock/config.d/startup install foo bar

* dump the config

  $PROGRAM_NAME -F yaml dump

END_OF_HELP

  return 0;
}

########################################################################
sub fetch_plugin_config {
########################################################################
  my ($self) = @_;

  my $plugin = $self->get_plugin;

  my $plugin_config = eval { find_plugin_config( $plugin, 1 ); };

  if ( !$plugin_config ) {
    $plugin_config = find_plugin_config( $plugin, 0 );
  }

  $self->set_plugin_config($plugin_config);

  _set_plugin_vars($self);

  return $plugin_config;
}

########################################################################
sub dump_plugin {
########################################################################
  my ( $self, $no_dump ) = @_;

  my $plugin_config = fetch_plugin_config($self);

  $plugin_config = $plugin_config->devolve;

  die "no plugin config found in distribution\n"
    if !$plugin_config;

  my $data = $self->get_data // Data::NestedKey->new($plugin_config);

  my $format = $self->get_format // 'xml';

  die "unknown formatter\n"
    if $format !~ /^(?:xml|ya?ml|json|dumper|storable)$/ixsm;

  my %formatter = (
    xml => sub {
      return Bedrock::XML::writeXML( $data->{data} );
    },
    json => sub {
      $Data::NestedKey::FORMAT = 'JSON';
      return "$data";
    },
    yaml => sub {
      $Data::NestedKey::FORMAT = 'YAML';
      return "$data";
    },
    dumper => sub {
      $Data::NestedKey::FORMAT = 'Dumper';
      return "$data";
    },
    storable => sub {
      $Data::NestedKey::FORMAT = 'Storable';
      return "$data";
    },
  );

  $formatter{yml} = $formatter{yaml};

  my $output = $formatter{$format}->();

  if ( !$no_dump ) {
    print {*STDOUT} $output;
  }

  return $no_dump ? $output : 0;
}

########################################################################
sub _set_plugin_vars {
########################################################################
  my ($self) = @_;

  return 0
    if !$self->get_args();

  die "arguments must be key/value pairs\n"
    if $self->get_args() % 2;

  my %args = $self->get_args();

  my $plugin_config = $self->get_plugin_config;
  $plugin_config = $plugin_config->devolve;

  my $data = Data::NestedKey->new( $plugin_config, %args );

  $self->set_data($data);

  return 0;
}

########################################################################
sub _fetch_plugin_config {
########################################################################
  my ($self) = @_;

  File::Find->import('find');

  my @xml_files;

  find(
    sub {
      my $name = $File::Find::name;
      return
        if $name !~ /[.]xml$/xsm;

      push @xml_files, $name;

      return;
    },

    $self->get_dist_dir
  );

  die "no xml files in distribution\n"
    if !@xml_files;

  my $plugin_config;

  foreach my $file (@xml_files) {
    my $obj = eval { return Bedrock::XML->new($file); };

    next
      if !$obj || $EVAL_ERROR || !ref $obj;

    next
      if !$obj->{binding} || $obj->{module} ne $self->get_class;

    $obj->{config} //= {};
    $plugin_config = $obj;

    last;
  }

  return
    if !$plugin_config;

  $self->set_plugin_config($plugin_config);

  _set_plugin_vars($self);

  return $plugin_config;
}

########################################################################
sub get_all_xml_files {
########################################################################
  my ($dist_dir) = @_;

  File::Find->import('find');

  my @xml_files;

  find(
    sub {
      my $name = $File::Find::name;

      return
        if $name !~ /[.]xml$/xsm;

      push @xml_files, $name;

      return;
    },
    $dist_dir
  );

  die "no xml files in distribution\n"
    if !@xml_files;

  return \@xml_files;
}

########################################################################
sub is_core_plugin {
########################################################################
  my ($plugin) = @_;

  my $inst = ExtUtils::Installed->new();

  my @modules = $inst->modules();

  my $plugin_file = $plugin;
  $plugin_file =~ s/::/\//xsmg;

  my $is_core_plugin = eval {
    my $module_path;

    if ( !$INC{"$plugin_file.pm"} && $PROGRAM_NAME !~ /$plugin_file/ ) {
      Module::Load::load("$plugin_file.pm");
      $module_path = $INC{"$plugin_file.pm"};
    }
    else {
      $module_path = $PROGRAM_NAME;
    }

    my $bedrock = $inst->packlist('Bedrock');

    return exists $bedrock->{$module_path} ? $TRUE : $FALSE;
  };

  print {*STDERR} $EVAL_ERROR;

  return $is_core_plugin;
}

########################################################################
sub find_plugin_config {
########################################################################
  my ( $plugin, $core ) = @_;

  my $is_core = is_core_plugin($plugin);

  die $EVAL_ERROR
    if !defined $is_core && $EVAL_ERROR;

  die "not a core plugin\n"
    if $core && !$is_core;

  my $dist_dir_name = $plugin;
  $dist_dir_name =~ s/::/-/xsmg;

  my $dist_dir
    = eval { return $core ? File::ShareDir::dist_dir('Bedrock') : File::ShareDir::dist_dir($dist_dir_name); };

  die "no plugin distribution named $plugin\n"
    if !$core && !$dist_dir;

  my $xml_files = get_all_xml_files($dist_dir);

  die "no .xml configuration files for $plugin\n"
    if !@{$xml_files};

  foreach my $file ( @{ $xml_files || [] } ) {
    my $config = Bedrock::XML->new($file);

    next if !ref $config || reftype($config) ne 'HASH';

    return $config
      if $config->{module} && $config->{module} eq $plugin;
  }

  die "no .xml configuration file found for $plugin\n";
}

########################################################################
sub main {
########################################################################
  my ($class) = @_;

  require Bedrock::XML;
  require CLI::Simple;
  require Data::NestedKey;
  require ExtUtils::Installed;
  require File::ShareDir;
  require Module::Load;

  my $cli = CLI::Simple->new(
    option_specs => [
      qw(
        plugin|P=s
        path|p=s
        force|f
        name|n=s
        silent|s
        format|F=s
        help|h
      )
    ],
    extra_options => [qw(dist_dir class plugin_config data)],
    commands      => {
      dump    => \&dump_plugin,
      install => \&install_plugin,
      help    => \&help,
    }
  );

  my $package = $class;

  if ( $package ne __PACKAGE__ ) {
    $cli->set_plugin($package);
  }
  elsif ( !$cli->get_plugin ) {
    die "--plugin is a required option\n";
  }

  $cli->set_class($class);

  exit $cli->run();
}

1;

__END__

=pod

=head1 NAME

Bedrock::Application::Plugin - base class for Bedrock Application Plugins

=head1 SYNOPSIS

 package BLM::Startup::Foo;

 use Bedrock::Application::Plugin;

 use parent qw( Bedrock::Application::Plugin );

 1;

=head1 DESCRIPTION

C<Bedrock::Application::Plugin> is a base class that can be used to
provide the basic plumbing for your typical Bedrock application plugin
(aka Startup BLMs). Application plugins, as opposed to plain plugins
like L<BLM::Date> are pre-loaded by Bedrock and available without
having to load them using the C<plugin> tag. These plugins are bound
to a variable name of your choosing set in the plugin's configuration
file. Using the plugin done by referencing the variable name
and perhaps calling one of its methods.

 <trace --output $session>
 <null $session.set('foo', 'bar')>

The plugin's configuration is read by Bedrock and passed to your
plugin's implementation allowing it to do whatever it needs to do in
order to initialize itself.  For example the C<$session> plugin might
open a database for persisiting user data.

An example plugin:

 package BLM::Startup::Foo;

 use parent qw(Bedrock::Application::Plugin);

 # typically your plugin implements some application specific
 # initialization code

 sub init_plugin {
   my $self = shift;

   $self->SUPER::init_plugin;

   # your code goes here...

   return 1;
 }

 sub hello_world {
   return "Hello World!";
 }
 
 1;

Create a Bedrock XML file that defines your Application Plugin and
drop this file in the C<$ENV{CONFIG_PATH}/config.d/startup> directory.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
   <object name="config">
     <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
     <scalar name="DBI_USER">fred</scalar>
     <scalar name="DBI_PASS">flintstone</scalar>
   </object>
 </object> 

Your configuration object should define a name (C<binding>) and the class
name (C<module>) that implements your plugin. The binding name is used in your
Bedrock pages when you invoke a method on your plugin.

 <null $foo.hello_world()>

If your binding name conflicts with an existing Bedrock binding name
found in Bedrock's configuration files, you can override that name by
specifying the C<override> option.

 <scalar name="override">yes</scalar>

The C<config> object in your configuration can contain whatever you
would like it to contain. Those values can then be accessed using the
plugin's C<config()> method.

 <null:config $foo.config()>
 <var $config.get('bar')>

...would retrieve the C<bar> value from your configuration object.
See L<Bedrock::XML> for more information about Bedrock XML files.

=head1 PLUGIN CREATOR

Included with Bedrock is a script (F<bedrock-plugin>) for creating the
scaffolding for both application plugins and plugins you can load with
the C<E<lt>pluginE<gt>> tag. See C<bedrock-plugin --help> for more
information.

=head1 CONVENIENCE METHODS

The C<Bedrock::Application::Plugin> module provides some convenience
methods and functionality that is usually required when writing an
application plugin. Plugins typically interact with databases, access
configuration information and possibly the userE<039>s session data.

=head2 Opening a Database

The default C<init_plugin()> method will look in your pluginE<039>s
C<config> object for the database parameters C<DBI_DSN, DBI_USER,
DBI_PASS, RaiseError, PrintError, AutoCommit>, and attempt to connect
to the database for you. If successful, you can use the C<dbi()> method
to fetch the database handle.

To prevent the plugin from opening a connection at startup, override
C<init_plugin> or set C<auto_connect> to 0 in your config file. The
default is to automatically connect to the database only if database
parameters are found in your configuration. Calling the C<dbi> method
after startup will open the connection and return a DBI object.

Example configuration:

  <object>
    <scalar name="binding">foo</scalar>
    <scalar name="module">BLM::Startup::Foo</scalar>

    <object name="config">
      <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
      <scalar name="DBI_USER">fred</scalar>
      <scalar name="DBI_PASS">flintstone</scalar>
      <scalar name="RaiseError">1</scalar>
      <scalar name="PrintError">1</scalar>
      <scalar name="AutoCommit">1</scalar>
      <scalar name="auto_connect">1</scalar>
    </object>

  </object>

=head2 Session Access

If you have a session manager like C<BLM::Startup::UserSession>
installed, you can use the C<session()> method to access the session
object. The C<$session> object is only available in application
plugins if you have set the C<session> value to I<yes> in the session
managerE<039>s configuration object.

The C<session()> method returns the session object.  Setting a value
in the returned session object will set the value in the userE<039>s
session.

In your plugin:

  sub foo {
    my ($self) = @_;
    ...
    my $session = $self->session();
    $session->set(foo => 'bar');
    ...
    return;
  }

...then to access C<foo> in your Bedrock page:

  <var $session.foo>

=head2 Configuration access

You can access the pluginE<039>s configuration object using the
C<config()> method.

 $self->config->{foo};

You can access BedrockE<039>s configuration object using the
C<global_config()> method.

 $self->global_config->{SESSION_DIR};

I<Keep in mind you can put anything you need in the C<config> section of
your configuration file and retrieve those values using the C<config()>
method.>

  $self->config->{foo};

=head2 Logging

Starting with version 3.2.0 logging is done using
L<Log::Log4perl>. Bedrock no longer I<directly> supports the notion of
separate page logs. Bedrock tags and other Bedrock Perl modules will
attempt to use L<Log::Log4perl> categories for logging. When Bedrock
initializes the environment it will look for a file named
F<log4perl.conf> in the configuration directories. If it finds one, it
will call C<Log::Log4perl-E<gt>init()>.

More information about Bedrock logging can be found in
L<Bedrock::Logger>.

To initialize your own loggers and override the default logger you
should do that in the C<init_plugin()> method. In practice it is
better to add your loggers to the F<log4perl.conf> file as a new
category. If you want to log to Bedrock's default log file, then do
nothing and use the convenience routines below.

 log_error()
 log_warn()
 log_info()
 log_status()
 log_debug()

 $self->log_debug("This is s a debug message....");

If you've used this as the parent class, then you might add a logger
like this to log at a different level than the rest of Bedrock.:

 log4perl.category.MySuperClass=DEBUG, Bedrock
 log4perl.additivity.MySuperClass=0

=head1 METHODS AND SUBROUTINES

=head2 auto_connect

Get the value of auto_connect.

=head2 closeBLM

Your plugin can implement an optional method (C<closeBLM>) that will
be called prior to the plugin objectE<039>s destruction.  The default
C<closeBLM> method will close the database connection if one is open.

Your implmentation should perform any clean-up necessary in this
method prior to your object being destroyed.

B<DO NOT IMPLEMENT A C<DESTROY> METHOD IN YOUR PLUGIN!>

I<Implement a C<closeBLM> method to perform any shutdown actions.
Your method is called with the Bedrock object that was tied to your
pluginE<039>s implemention, so you need to use the template below to
access your objectE<039>s class instance>.

 sub closeBLM {
   my ($obj) = @_;
 
   my $self = tied %{$obj};

   # your shutdown actions here
 }

=head2 config

 config( [config] )

Sets or returns the configuration object for your Plugin.  The
C<TIEHASH()> method initializes the BLM and initially sets the
configuration value from the XML C<config> object in your module
definition.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
     <object name="config">
       <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
       <scalar name="DBI_USER">fred</scalar>
       <scalar name="DBI_PASS">flintstone</scalar>
     </object>
 </object> 

=head2 context

 context()

Sets or returns the context object (see L<Bedrock::Context>).  The
value of the C<context> object is set during the invocation of the
C<TIEHASH()> method when Bedrock instantiates the BLM.

=head2 dbi

 dbi()

Returns a handle to an opened database if you have defined the
database parameters in your config file.

=head2 export

 export(foo => 'bar');

Export one or more variables to the current Bedrock context. Your
plugin can return data in one of at least three ways:

=head2 get_logger

 get_logger( category )

Returns a C<Log::Log4perl> logger.

  <null:logger $foo.get_logger()>
  <null $logger.info("test message")>

 Use the C<E<lt>traceE<gt>> tag in your page to add debugging
 information.

 <trace $foo>

Note that without the C<--output> option, the output is ONLY sent to
the log and not included in the final output generated by your page.

=head2 global_config

 global_config()

Returns the Bedrock F<tagx.xml> config object.  Note this is the final
merged configuration object.

=head2 header

 header()

Returns the C<BLM::Startup::Header> object.

=head2 init_plugin

 init_plugin()

Bedrock will call the C<init_plugin()> method when your object is
instantiated. Your initialization method should return true if
successful.

At the point at which this method is called you have access to the
PluginE<039>s configuration object (C<config>), the session object
(C<session>), the header object (C<header>), and the context object
(C<context>) using their getters.

The default C<init_plugin()> method will open a database if your
configuration object contains the database configuraiton values
described earlier.

=head2 input

 input()

Returns or sets the C<input> object.

=head2 session

 session()

Returns the C<session> object.  

=head2 tagx

Returns an instance of C<Text::TagX>

=head1 EXPORTING DATA TO YOUR BEDROCK PAGE

There are multiple ways you can return data to your Bedrock page:

=over 5

=item 1. Return a value from a method.

Return a value from your method that can then be captured
or displayed in your Bedrock page.

 <null:result $my_plugin.some_method()>
 <null --define-var=results $my_plugin.some_method()>

 <var $my_plugin.some_method()>

=item 2. Set a key in your plugin's hash.

Your plugin is a I<tied> hash. You can simply set a key value pair in C<$self>.

 $self->{foo} = 'bar'

...and then retrieve it as an attribute of your plugin.

 <var $my_plugin.foo>

=item 3. You can inject the variable into your Bedrock page's context.

 $self->export(foo => 'bar');

...and then

 <var $foo>

=item 4. Set a value in a the C<$session> object.

If you are using a session manager like C<BLM::Startup::Session>, you
can persist data and later access it in your Bedrock pages using the
C<$session> object.

 sub foo {
   my ($self) = @_;

   $self->session->set(foo => 'bar');
 }

 <var $sesssion.foo>

=back

=head1 MORE GORY DETAILS

As noted previously, application plugins are available on your page by
referencing the variable name set in the configuration file. These
plugins are lazy loaded by Bedrock when the page is processed. Let's
take a closer look...


=head2 Plugin Lifecycle

When a Bedrock page is requested, the C<Bedrock::Apache::Bedrock>
handler initializes the Bedrock environment. This consists of reading
Bedrock's configuration file and all other configuration files in the
configuration directory.  Configuration files in the
F<config.d/plugins> and F<config.d/startup> directories are considered
to be application plugin configuration files. Each of these is read
and parsed. Bedrock then creates an entry in Bedrock's symbol table
using the name you provided in the C<bind> configuration variable.

 <scalar name="bind">session</scalar>

 The value of that entry is a subroutine that looks somethig like
 this:

  sub {

    require_module($class);

    return bind_module(
      type    => $type,  # <scalar name="type"></scalar>
      module  => $class, # <scalar name="module"></scalar>
      context => $context, # Bedrock::Context object
      config  => $config, # Bedrock's merged configuration object
      tagx    => $tx # Text::TagX object 
    );
  }

Bedrock's symbol table C<Text::TagX> is a tied hash whose C<FETCH()>
method executes this subroutine the first time your page references
the bind variable and replaces the value with a reference to your
instantiated plugin.

The C<bind_module()> method then:

=over 5

=item 1. Determines the object type (default: hash)

You set the object's type in the config variable C<type>. This
determines how it will be tied. The default type is 'hash'.

 <scalar name="type">hash</scalar>

=item 2. Loads the module

You set the module class name in the config variable C<module>.

 <scalar name="module">BLM::Startup::UserSession</scalar>

=item 3. Ties the object, triggering a call to C<TIE{type}()> method

  my $obj = bless {}, $module_name
  my $plugin = tie %{$obj}, $module, $context, $config, $tagx;

=item 4. The default C<TIEHASH()> method calls C<init_plugin()>

=item 5. C<closeBLM> is called when the object is being destroyed.

Bedrock will only call the C<closeBLM> if your plugin provides one.

=back

=head2 Creating A Lighter Weight Plugin

Now that you know how this magic works you can create your own
lightweight plugins when you don't need the sugar provided by
C<Bedrock::Application::Plugin>. Creating your own skinny plugin class
like this:

=over 5

=item * Create a configuration file and place it Bedrock's F<config.d/plugin> directory.

 <object>
   <scalar name="module">MyPlugin</scalar>
   <scalar name="bind">myplugin</scalar>
 </object>

=item * Create a class with C<TIEHASH()> method.

  package MyPlugin;

  use strict;
  use warnings;

  sub TIEHASH { 
    my ( $class, $context, $config, $tagx ) = @_;
  
    my $self = bless {}, $class;
  
    $self->{ctx} = $context;
    $self->{config} = $config;
    $self->{tagx} = $tagx;
  
    return $self;
  }
  
  sub hello_world {
    return 'Hello World!';
  }

  1;

=item * Access your plugin in a Bedrock page

 <var $myplugin.hello_world()>

=back

You don't need to store the C<TIEHASH> input parameters if you don't
need them. You might find them useful though ;-)

=over 5

=item ctx

The C<$ctx> object provides methods like C<request()> that
gives you access to Apache's request handler, C<cgi_header_in()> to
access the input headers and other useful methods for developing web
applications. See L<Bedrock::Context> for more details.

=item config

The C<$config> object contains Bedrock's merged configuration file.

=item tagx

The C<$tagx> object is an instance of C<Text::TagX> which processed
the tag that loaded your plugin. In general you shouldn't muck with this
object, however if you are rolling your own lightweight plugin you can
access variables and export variables to Bedrock's context.

  my $tagx = $self->{tagx};

  my $foo = $tagx->param('foo'); # fetch $foo

  $tagx->param(foo => 'bar'); # set $foo

=back

=head1 SEE ALSO

L<Bedrock::Plugin>, L<Bedrock::Context>, L<Bedrock::Hash>, L<Bedrock::Logger>

=head1 AUTHOR

Rob Lauer - <rclauer@gmail.com>

=cut
