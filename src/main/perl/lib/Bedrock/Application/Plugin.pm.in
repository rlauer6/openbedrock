#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Application::Plugin;

use strict;
use warnings;

use TagX::Log;

use parent qw/Bedrock::Hash/;

=pod

=head1 PUBLIC

Bedrock::Application::Plugin

=head1 SYNOPSIS

  package BLM::Startup::Foo;

  use Bedrock::Application::Plugin;

  use parent qw( Bedrock::Application::Plugin );

  1;

=head1 DESCRIPTION

C<Bedrock::Application::Plugin> is a base class that can be used to
provide the basic plumbing for your typical Bedrock Application Plugin
(formerly knowns as BLMs).

 package BLM::Startup::Foo;

 use parent qw(Bedrock::Application::Plugin);

 # typiecally your plugin implements some application specific
 # initialization code

 sub init_plugin {
   my $self = shift;

   $self->SUPER::init_plugin;

   # your code goes here...

   return 1;
 }

 sub hello_world {
   return "Hello World!";
 }
 
 1;

Create a Bedrock XML file that defines your Application Plugin and
drop this file in the C<$ENV{CONFIG_PATH}/config.d/startup> directory.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
     <object name="config">
       <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
       <scalar name="DBI_USER">fred</scalar>
       <scalar name="DBI_PASS">flintstone</scalar>
     </object>
 </object> 

Then in your page...

 <var $foo.hello_world()>

=head2 FREEBIES

The C<Bedrock::Application::Plugin> module provides some convience
methods and functionality that is typically required when writing an
application plugin.  Plugins typically interact with databases, access
configuration information and possibly the userE<039>s session data.

=over 5

=item * Database Connectivity

If you define the C<DBI_DSN>, C<DBI_USER> and C<DBI_PASS> variables in
the C<config> object of the pluginE<039>s configuration, then the
database will be opened when the class is instantiated.  You can use
the C<dbi()> method to return the handle to the opened database.

The database is opened in the C<init_plugin()> method, thus if you
decide to override this method but would still want the default
behavior, make sure you call the parentE<039>s C<init_plugin()> method.

 sub init_plugin {
   my $self = shift;
  
   $self->SUPER::init_plugin;
   ...
 }

=item * Session access

You can use the C<session()> method to access the session object.  The
C<$session> object is only available in application plugins if you
have set the C<session> value to I<yes> in the session managerE<039>s
configuration object.

  <!-- Generic Bedrock Sessions -->
  <object>
    <scalar name="binding">session</scalar>
    <scalar name="session">yes</scalar>
    ...

The C<session()> method returns the session object.  Setting a value
in the returned session object will set the value in the userE<039>s
session.

In your plugin:

 my $session = $self->session();
 $session->set('foo', 'bar');

...then in your Bedrock page:

 <var $session.foo>

=item * Configuration access

You can access the pluginE<039>s configuration object using the
C<config()> method.

You can access BedrockE<039>s configuration object using the
C<global_config()> method.

=item * Logging

You can write log messages to BedrockE<039>s page log using the log methods.

 log_error()
 log_warn()
 log_info()
 log_status()
 log_debug()

 $self->log_debug("This is s a debug message....");

The logging methods respect the C<LOGLEVEL> value in F<tagx.xml>.

=back

=cut

sub TIEHASH {
  my ( $class, $ctx, $config ) = @_;

  my $self = bless {}, $class;

  $self->context( $ctx );

  $self->config( $config );
  
  # keep in mind this object may not exist because it is not pre-bound
  $self->input( $self->context->{INPUT} );

  die "plugin $class failed to initialize properly\n"
    unless $self->init_plugin;

  return $self;
}

=pod

=head1 METHODS


=pod

=head2 config

 config( [config] )

Sets or returns the configuration object for your Plugin.  The
C<TIEHASH> method initializes the BLM and initially sets the
configuration value from the XML C<config> object in your module
definition.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
     <object name="config">
       <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
       <scalar name="DBI_USER">fred</scalar>
       <scalar name="DBI_PASS">flintstone</scalar>
     </object>
 </object> 

=cut

sub config {
  my $self = shift;

  if ( @_ ) {
    $self->set('__config', @_);
  }

  return $self->get( '__config' );
}

=pod

=head2 context

 context()

Sets or returns the context object (see C<Bedrock::Context>).  The
value of the C<context> object is set during the invocation of the
C<TIEHASH> method when Bedrock instantiates the BLM.

=cut

sub context {
  my $self = shift;

  if ( @_ ) {
    $self->set('__context', @_);
  }

  return $self->get('__context');
}


=pod

=head2 dbi

 dbi( [dbi] )

Set or return a DBI handle.

=cut

sub dbi {
  my $self = shift;

  if ( @_ ) {
    $self->set('__dbi', shift);
  }

  return $self->get('__dbi');
}

=pod

=head2 global_config

 global_config()

Returns the Bedrock F<tagx.xml> config object.  Note this is the final
merged configuration object.

=cut

sub global_config {
  return $_[0]->context->{CONFIG};
}

=pod

=head2 init_plugin

 init_plugin()

You can implement an initialization routine which is called when
Bedrock creates your object.  At the point at which this method is
called you have access to the PluginE<039>s configuration object
(C<config()>), the session object (C<session()>), the header object
(C<header>), and the context object (C<context()>).

Your initialization method should return true if successful.

=head3 Opening a database connection

The default C<init_plugin()> method will look in your PluginE<039>s
C<config> object for database parameters C<DBI_DSN, DBI_USER,
DBI_PASS, RaiseError, PrintError, AutoCommit>, and attempt to connect
to the database for you.  If successful, you can use the C<dbi> method
to fetch the database handle.

  <object>
    <scalar name="binding">foo</scalar>
    <scalar name="module">BLM::Startup::Foo</scalar>

    <object name="config">
      <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
      <scalar name="DBI_USER">fred</scalar>
      <scalar name="DBI_PASS">flintstone</scalar>
      <scalar name="RaiseError">1</scalar>
      <scalar name="PrintError">1</scalar>
      <scalar name="AutoCommit">1</scalar>
    </object>

  </object>

=head3 Log::Log4perl

You can define a C<Log::Log4perl> configuration object which will be
initialized by the default C<init_plugin()> method.  Define an object
named C<log4perl> that contains a valid C<Log::Log4perl>
configuration.

  <object name="log4perl">
   <scalar name="log4perl.rootLogger">DEBUG, LOGFILE</scalar>
   <scalar name="log4perl.appender.LOGFILE">Log::Log4perl::Appender::File</scalar>
   <scalar name="log4perl.appender.LOGFILE.filename">/var/log/myerrs.log</scalar>
   <scalar name="log4perl.appender.LOGFILE.mode">append</scalar>
   <scalar name="log4perl.appender.LOGFILE.layout">PatternLayout</scalar>
   <scalar name="log4perl.appender.LOGFILE.layout.ConversionPattern">[%r] %F %L %c - %m%n</scalar>
 </object>

=cut

sub init_plugin {
  my $self = shift;

  if ( $self->config->{DBI_DSN} ) {
    require DBI;

    my $options = {
		   RaiseError => defined $self->config->{RaiseError} ? $self->config->{RaiseError} : 1,
		   PrintError => defined $self->config->{PrintError} ? $self->config->{PrintError} : 1,
		   AutoCommit => defined $self->config->{AutoCommit} ? $self->config->{AutoCommit} : 1
		  };
    
    $self->dbi(DBI->connect(@{$self->config}{qw/DBI_DSN DBI_USER DBI_PASS/}, $options));
  }

  if ( $self->config->{log4perl} && ref($self->config->{log4perl}) ) {
    require Log::Log4perl;
    Log::Log4perl->init({ %{$self->config->{log4perl}} });
  }

  return 1;
}

=pod

=head get_logger

 get_logger( category )

Returns a C<Log::Log4perl> logger.

  <null:logger $foo.get_logger()>
  <null $logger.info("test message")>

Keep in mind that you write to the page log by writing to STDERR in
your application plugin or just use the C<E<lt>traceE<gt>> tag in your
page to add dump info to your page log.

 <trace $foo>

Note that without the C<--output> option, the output is ONLY sent to
the page log and not to the final output page, so this is another way
to produce log information.

=cut

sub get_logger {
  $_[0]->config->{log4perl} ? Log::Log4perl::get_logger($_[1] ? $_[1] : ()) : undef;
}

=pod

=head2 input

 input( $input )

Returns or sets the C<$input> object.  I<This is of dubious value.>  The
C<$input> object is not pre-bound, so although we initialize it in the
constructor from the C<Bedrock::Context> object, it is possible that
it was never instantiated by Bedrock.

If you have an C<$input> object you want to share, go ahead and set it,
however a better practice is to have your methods accept the argument
from the Bedrock page.

 <null $my_object.my_method($input)>

=cut

sub input {
  my $self = shift;
  
  $self->{__input} = $_[0]
    if @_;
  
  return $self->{__input};
}

=pod

=head2 log

 log( level, message )

Log a message to the Bedrock page log using the current global logging
level.

Alternately, use the short-cut methods.

=cut

use constant MSG_ABORT    => 1 << 0;
use constant MSG_DEBUG    => 1 << 1;
use constant MSG_INFO     => 1 << 2;
use constant MSG_STATUS   => 1 << 3;
use constant MSG_WARNING  => 1 << 4;
use constant MSG_ERROR    => 1 << 5;
use constant MSG_SYSERROR => 1 << 6;
use constant MSG_FATAL    => 1 << 7;


my %LevelStrings = ( &MSG_DEBUG    => q(MSG_DEBUG),
		     &MSG_INFO     => q(MSG_INFO),
		     &MSG_STATUS   => q(MSG_STATUS),
		     &MSG_WARNING  => q(MSG_WARNING),
		     &MSG_ERROR    => q(MSG_ERROR),
		     &MSG_SYSERROR => q(MSG_SYSERROR),
		     &MSG_FATAL    => q(MSG_FATAL)
		   );

sub _log {
  my $level = shift;

  my $self = shift;
  my $message = shift;

  my $cutoff = MSG_INFO;

  while ( my ($key, $val) = each %LevelStrings ) {
    last if 
      $cutoff = ($val eq $self->global_config->{LOGLEVEL}) ? $key : 0;
  }

  # Check that level is valid and return if below cut off level
  $level = MSG_INFO unless defined($level) and $LevelStrings{$level};

  if ( $level >= $cutoff ) {

    # Convert level to string
    my $level_string = $LevelStrings{$level};

    TagX::Log::log_message( undef, "[$level_string]: $message\n" );
  }

  return;
}

=pod

=head2 log_debug

=head2 log_error

=head2 log_info

=head2 log_status

=head2 log_warn

=cut

sub log_info   { _log( MSG_INFO,    @_ ) };
sub log_debug  { _log( MSG_DEBUG,   @_ ) };
sub log_status { _log( MSG_STATUS,  @_ ) };
sub log_error  { _log( MSG_ERROR,   @_ ) };
sub log_warn   { _log( MSG_WARNING, @_ ) };

=pod

=head2 session

 session()

Returns the C<$session> object.  

Application Plugins only have access to the C<$session> object via the
C<context> object if the C<$session> object is being pre-bound,
similar to the way the C<$header> object is treated.  Plugins
other than the C<$header> or C<$session> objects are only created when
they are used in the Bedrock page itself.

I<To have Bedrock pre-bind the C<$session> object you must declare the
session handling Plugin as the official C<$session> object.>

    <!-- Generic Bedrock Sessions -->
    <object>
      <scalar name="binding">session</scalar>
      <scalar name="module">BLM::Startup::UserSession</scalar>

 -->  <scalar name="session">yes</scalar>

      <object name="config">
        <scalar name="verbose">2</scalar>
        <scalar name="param">session</scalar>
        <scalar name="login_cookie_name">session_login</scalar>
        <scalar name="login_cookie_expiry_days">365</scalar>
        <scalar name="data_source">dbi:mysql:bedrock</scalar>
        <scalar name="username">fred</scalar>
        <scalar name="password">flintstone</scalar>
        <scalar name="table_name">session</scalar>
        <scalar name="purge_user_after">30</scalar>

        <object name="cookie">
          <scalar name="path">/</scalar>
          <scalar name="expiry_secs">3600</scalar>
          <scalar name="domain"></scalar>
        </object>
      </object>
    </object>

I<Future versions of Bedrock may include a mechanism to pre-bind
Plugin objects of arbritary type.  Currently, Bedrock treats the
C<$session> and C<$header> objects as the only objects that it will
instantiate when the Bedrock handler is invoked.>

=cut

sub session {
  return $_[0]->context->{SESSION};
}

=pod

=head2 header

 header()

Returns the C<BLM::Startup::Header> object.

=cut

sub header {
  return $_[0]->context->{HEADER};
}

=cut

# fix compatibility issue with previous versions of Bedrock.
sub FETCH {
  return $_[1] eq 'config' ? $_[0]->{__config} : $_[0]->{$_[1]};
}


=head2 closeBLM

Your plugin can implement an optional method (C<closeBLM>) that will
be called prior to the plugin objectE<039>s destruction.

You should perform any clean-up necessary in this method prior to your
object being destroyed. I<You should not implement a C<DESTROY> method
in your Plugin, but rather use this method to perform your shutdown
actions.  Your method is called with the Bedrock object that
was tied to your pluginE<039>s implemention, so you need to use the
template below to access your objectE<039>s class instance>.

The default implementation is shown below.

 sub closeBLM {
   my $obj = shift;
     
   my $self = tied(%{$obj});
   
   # disconnect from database if connected
   if ( $self->dbi && ref($self->dbi) =~/DBI/ && $self->dbi->ping ) {
     $self->dbi->disconnect;
   }
 }

=cut

sub closeBLM {
  my $obj = shift;
    
  my $self = tied(%{$obj});
  
  # disconnect from database if connected
  if ( $self->dbi && ref($self->dbi) =~/DBI/ && $self->dbi->ping ) {
    $self->dbi->disconnect;
  }
}

=pod

=head1 AUTHOR

Rob Lauer - <rclauer@gmail.com>

=head1 SEE ALSO

C<Bedrock::Plugin>, C<Bedrock::Context>, C<Bedrock::Hash>

=cut

1;
