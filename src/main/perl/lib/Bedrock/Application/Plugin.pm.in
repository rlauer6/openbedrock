#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Application::Plugin;

use strict;
use warnings;

use parent qw{ Bedrock::Hash };

use Bedrock::Constants qw{:chars :booleans};
use Log::Log4perl;

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolationOfMetachars)

use Role::Tiny::With;
with 'Bedrock::Logger';

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config ) = @_;

  my $self = bless {}, $class;

  $self->context($ctx);

  $self->config($config);

  # keep in mind this object may not exist because it is not pre-bound
  $self->input( $self->context->{'INPUT'} );

  die "plugin $class failed to initialize properly\n"
    if !$self->init_plugin;

  return $self;
} ## end sub TIEHASH

########################################################################
sub config {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->set( '__config', @args );
  }

  return $self->get('__config');
} ## end sub config

########################################################################
sub context {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->set( '__context', @args );
  }

  return $self->get('__context');
} ## end sub context

########################################################################
sub dbi {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->set( '__dbi', @args );
  }

  return $self->get('__dbi');
} ## end sub dbi

########################################################################
sub global_config {
########################################################################
  my ($self) = @_;

  return $self->context->{'CONFIG'};
} ## end sub global_config

########################################################################
sub init_plugin {
########################################################################
  my ($self) = @_;

  if ( $self->config->{'DBI_DSN'} ) {
    require DBI;

    my $options = {};

    foreach my $o (qw{RaiseError PrintError AutoCommit}) {
      $options->{$o} = $self->config->{$o} // $TRUE;
    }

    my @args = @{ $self->config }{qw{ DBI_DSN DBI_USER DBI_PASS }};

    $self->dbi( DBI->connect( @args, $options ) );
  } ## end if ( $self->config->{'DBI_DSN'...})

  return $TRUE;
} ## end sub init_plugin

########################################################################
sub input {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->set( '__input', @args );
  }

  return $self->{'__input'};
} ## end sub input

########################################################################
sub _log {
########################################################################
  my ( $level, $self, @args ) = @_;

  $Log::Log4perl::caller_depth += 2;

  $self->get_logger( ref $self )->$level(@args);

  $Log::Log4perl::caller_depth -= 2;

  return;
}

########################################################################
sub log_trace { my (@args) = @_; return _log( 'trace',   @args ) }
sub log_debug { my (@args) = @_; return _log( 'debug',   @args ) }
sub log_info  { my (@args) = @_; return _log( 'info',    @args ) }
sub log_warn  { my (@args) = @_; return _log( 'warning', @args ) }
sub log_error { my (@args) = @_; return _log( 'error',   @args ) }
sub log_fatal { my (@args) = @_; return _log( 'fatal',   @args ) }
########################################################################

########################################################################
sub session {
########################################################################
  my ($self) = @_;

  return $self->context->{'SESSION'};
} ## end sub session

########################################################################
sub header {
########################################################################
  my ($self) = @_;

  return $self->context->{'HEADER'};
} ## end sub header

# fix compatibility issue with previous versions of Bedrock.
########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;

  return $key eq 'config' ? $self->{'__config'} : $self->{$key};
} ## end sub FETCH

########################################################################
sub closeBLM {  ## no critic (NamingConventions::Capitalization)
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  # disconnect from database if connected
  if ( $self->dbi && ref $self->dbi =~ /DBI/xsm ) {
    if ( $self->dbi->ping ) {
      $self->dbi->disconnect;
    }
  }

  return $TRUE;
} ## end sub closeBLM

1;

__END__

=pod

=head1 NAME

Bedrock::Application::Plugin

=head1 SYNOPSIS

 package BLM::Startup::Foo;

 use Bedrock::Application::Plugin;

 use parent qw( Bedrock::Application::Plugin );

  1;

=head1 DESCRIPTION

L<Bedrock::Application::Plugin> is a base class that can be used to
provide the basic plumbing for your typical Bedrock Application Plugin
(formerly knowns as Starupt BLMs).

 package BLM::Startup::Foo;

 use parent qw(Bedrock::Application::Plugin);

 # typically your plugin implements some application specific
 # initialization code

 sub init_plugin {
   my $self = shift;

   $self->SUPER::init_plugin;

   # your code goes here...

   return 1;
 }

 sub hello_world {
   return "Hello World!";
 }
 
 1;

Create a Bedrock XML file that defines your Application Plugin and
drop this file in the C<$ENV{CONFIG_PATH}/config.d/startup> directory.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
   <object name="config">
     <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
     <scalar name="DBI_USER">fred</scalar>
     <scalar name="DBI_PASS">flintstone</scalar>
   </object>
 </object> 

Your configuration object should define a name (C<binding>) and the class
name (C<module>) that implements your plugin. The binding name is used in your
Bedrock pages when you invoke a method on your plugin.

 <null $foo.hello_world()>

If your binding name conflicts with an existing Bedrock binding name
found in Bedrock's configuration files, you can override that name by
specifying the C<override> option.

 <scalar name="override">yes</scalar>

The C<config> object in your configuration can contain what ever you
would like it to contain and can them be accessed using the plugin's
C<config()> method.

 <null:config $foo.config()>

...would retrieve the C<bar> value from your configuration object.

=head2 CONVENIENCE METHODS

The L<Bedrock::Application::Plugin> module provides some convience
methods and functionality that is usually required when writing an
application plugin.  Plugins sometimes interact with databases, access
configuration information and possibly the userE<039>s session data.

=over 5

=item * Database Connectivity

If you define the C<DBI_DSN>, C<DBI_USER> and C<DBI_PASS> variables in
the C<config> object of the pluginE<039>s configuration, then the
database will be opened when the class is instantiated.  You can use
the C<dbi()> method to return the handle to the opened database.

The database is opened in the C<init_plugin()> method, thus if you
decide to override this method but would still want the default
behavior, make sure you call the parentE<039>s C<init_plugin()> method.

 sub init_plugin {
   my $self = shift;
  
   $self->SUPER::init_plugin;
   ...
 }

=item * Session access

You can use the C<session()> method to access the session object.  The
C<$session> object is only available in application plugins if you
have set the C<session> value to I<yes> in the session managerE<039>s
configuration object.

  <!-- Generic Bedrock Sessions -->
  <object>
    <scalar name="binding">session</scalar>
    <scalar name="session">yes</scalar>
    ...

The C<session()> method returns the session object.  Setting a value
in the returned session object will set the value in the userE<039>s
session.

In your plugin:

 my $session = $self->session();
 $session->set('foo', 'bar');

...then in your Bedrock page:

 <var $session.foo>

=item * Configuration access

You can access the pluginE<039>s configuration object using the
C<config()> method.

You can access BedrockE<039>s configuration object using the
C<global_config()> method.

=item * Logging

Starting with version 3.2.0 logging is done using
L<Log::Log4perl>. Bedrock no longer I<directly> supports the notion of
separate page logs. Bedrock tags and other Bedrock Perl modules will
attempt to use L<Log::Log4perl> categories for logging. When Bedrock initializes the
environment it will look for a file named F<log4perl.conf> in the
configuration directories. If it finds one, it will call
C<Log::Log4perl->init()>.

More information about Bedrock logging can be found in
L<Bedrock::Logger>.

If you want to initialize your own loggers and override you can do
that in the C<init_plugin()> method, however it would be best to add
your loggers to the F<log4perl.conf> file as a new category. If you
want to log to Bedrock's default log file, then do nothing and use the
convenience routines below.

 log_error()
 log_warn()
 log_info()
 log_status()
 log_debug()

 $self->log_debug("This is s a debug message....");

If you've used this as the parent class, then you might add a logger
like this to log at a different level than the rest of Bedrock.:

 log4perl.category.MySuperClass=DEBUG, Bedrock
 log4perl.additivity.MySuperClass=0

=back

=head1 METHODS AND SUBROUTINES

=head2 config

 config( [config] )

Sets or returns the configuration object for your Plugin.  The
L<TIEHASH> method initializes the BLM and initially sets the
configuration value from the XML C<config> object in your module
definition.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
     <object name="config">
       <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
       <scalar name="DBI_USER">fred</scalar>
       <scalar name="DBI_PASS">flintstone</scalar>
     </object>
 </object> 

=head2 context

 context()

Sets or returns the context object (see C<Bedrock::Context>).  The
value of the C<context> object is set during the invocation of the
C<TIEHASH> method when Bedrock instantiates the BLM.

=head2 dbi

 dbi( [dbi] )

Set or return a DBI handle.

=head2 global_config

 global_config()

Returns the Bedrock F<tagx.xml> config object.  Note this is the final
merged configuration object.

=head2 init_plugin

 init_plugin()

You can implement an initialization routine which is called when
Bedrock creates your object.  At the point at which this method is
called you have access to the PluginE<039>s configuration object
(C<config()>), the session object (C<session()>), the header object
(C<header>), and the context object (C<context()>).

Your initialization method should return true if successful.

=head3 Opening a database connection

The default C<init_plugin()> method will look in your PluginE<039>s
C<config> object for database parameters C<DBI_DSN, DBI_USER,
DBI_PASS, RaiseError, PrintError, AutoCommit>, and attempt to connect
to the database for you.  If successful, you can use the C<dbi> method
to fetch the database handle.

  <object>
    <scalar name="binding">foo</scalar>
    <scalar name="module">BLM::Startup::Foo</scalar>

    <object name="config">
      <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
      <scalar name="DBI_USER">fred</scalar>
      <scalar name="DBI_PASS">flintstone</scalar>
      <scalar name="RaiseError">1</scalar>
      <scalar name="PrintError">1</scalar>
      <scalar name="AutoCommit">1</scalar>
    </object>

  </object>

=head get_logger

 get_logger( category )

Returns a C<Log::Log4perl> logger.

  <null:logger $foo.get_logger()>
  <null $logger.info("test message")>

 Use the C<E<lt>traceE<gt>> tag in your page to add debugging
 information.

 <trace $foo>

Note that without the C<--output> option, the output is ONLY sent to
the log and not included in the final output generated by your page.

=head2 input

 input( $input )

Returns or sets the C<$input> object.  I<This is of dubious value.>  The
C<$input> object is not pre-bound, so although we initialize it in the
constructor from the C<Bedrock::Context> object, it is possible that
it was never instantiated by Bedrock.

If you have an C<$input> object you want to share, go ahead and set it,
however a better practice is to have your methods accept the argument
from the Bedrock page.

 <null $my_object.my_method($input)>

=head2 session

 session()

Returns the C<$session> object.  

Application Plugins only have access to the C<$session> object via the
C<context> object if the C<$session> object is being pre-bound,
similar to the way the C<$header> object is treated.  Plugins
other than the C<$header> or C<$session> objects are only created when
they are used in the Bedrock page itself.

I<To have Bedrock pre-bind the C<$session> object you must declare the
session handling Plugin as the official C<$session> object.>

    <!-- Generic Bedrock Sessions -->
    <object>
      <scalar name="binding">session</scalar>
      <scalar name="module">BLM::Startup::UserSession</scalar>

 -->  <scalar name="session">yes</scalar>

      <object name="config">
        <scalar name="verbose">2</scalar>
        <scalar name="param">session</scalar>
        <scalar name="login_cookie_name">session_login</scalar>
        <scalar name="login_cookie_expiry_days">365</scalar>
        <scalar name="data_source">dbi:mysql:bedrock</scalar>
        <scalar name="username">fred</scalar>
        <scalar name="password">flintstone</scalar>
        <scalar name="table_name">session</scalar>
        <scalar name="purge_user_after">30</scalar>

        <object name="cookie">
          <scalar name="path">/</scalar>
          <scalar name="expiry_secs">3600</scalar>
          <scalar name="domain"></scalar>
        </object>
      </object>
    </object>

I<Future versions of Bedrock may include a mechanism to pre-bind
Plugin objects of arbritary type.  Currently, Bedrock treats the
C<$session> and C<$header> objects as the only objects that it will
instantiate when the Bedrock handler is invoked.>

=head2 header

 header()

Returns the C<BLM::Startup::Header> object.

=head2 closeBLM

Your plugin can implement an optional method (C<closeBLM>) that will
be called prior to the plugin objectE<039>s destruction.

You should perform any clean-up necessary in this method prior to your
object being destroyed. I<You should not implement a C<DESTROY> method
in your Plugin, but rather use this method to perform your shutdown
actions.  Your method is called with the Bedrock object that
was tied to your pluginE<039>s implemention, so you need to use the
template below to access your objectE<039>s class instance>.

The default implementation is shown below.

 sub closeBLM {
   my $obj = shift;
     
   my $self = tied(%{$obj});
   
   # disconnect from database if connected
   if ( $self->dbi && ref($self->dbi) =~/DBI/ && $self->dbi->ping ) {
     $self->dbi->disconnect;
   }
 }

=head1 SEE ALSO

L<Bedrock::Plugin>, L<Bedrock::Context>, L<Bedrock::Hash>, L<Bedrock::Logger>

=head1 AUTHOR

Rob Lauer - <rclauer@gmail.com>

=cut

