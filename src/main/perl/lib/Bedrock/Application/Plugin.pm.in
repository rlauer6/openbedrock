package Bedrock::Application::Plugin;
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2025, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Constants qw(:chars :booleans);
use Bedrock::DBI::Utils qw(load_dsn_from_config);
use BLM::DBHandler qw(easy_connect);

use English qw(-no_match_vars);
use Log::Log4perl;
use List::Util qw(pairs);
use Scalar::Util qw(reftype);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw( Bedrock::Hash );

caller or __PACKAGE__->main();

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config ) = @_;

  my $self = bless {}, $class;

  $self->context($ctx);

  $self->config( $config || {} );

  # keep in mind this object may not exist because it is not pre-bound
  $self->input( $self->context->{INPUT} );

  die "plugin $class failed to initialize properly\n"
    if !$self->init_plugin;

  return $self;
}

########################################################################
sub __set_get {
########################################################################
  my ( $what, $self, @args ) = @_;

  return @args ? $self->set( '__' . $what, @args ) : $self->get( '__' . $what );
}
########################################################################
sub config  { unshift @_, 'config';  goto &__set_get; }
sub context { unshift @_, 'context'; goto &__set_get; }
sub dbi     { unshift @_, 'dbi';     goto &__set_get; }
sub input   { unshift @_, 'input';   goto &__set_get; }
########################################################################

########################################################################
sub _context { return $_[1]->context->{ $_[0] }; }
########################################################################
sub session       { unshift @_, 'SESSION'; goto &_context; }
sub header        { unshift @_, 'HEADER';  goto &_context; }
sub global_config { unshift @_, 'CONFIG';  goto &_context; }
########################################################################

########################################################################
sub init_plugin {
########################################################################
  my ($self) = @_;

  $self->_dbi_connect;

  return $TRUE;
}

########################################################################
sub _dbi_connect {
########################################################################
  my ($self) = @_;

  my %config = %{ $self->config };

  # a plugin must define the database connect parameters for auto
  # connnect, we're not going to assume that the enviroment might hold
  # the values (for now)

  # backward compatibility
  $config{data_source} //= $config{DBI_DSN};

  return
    if !$config{data_source};

  $config{username} //= $config{DBI_USER};
  $config{password} //= $config{DBI_PASS};
  $config{database} //= $config{DBI_DB};
  $config{host}     //= $config{DBI_HOST};
  $config{socket}   //= $config{DBI_SOCKET};

  foreach my $o (qw(RaiseError PrintError AutoCommit)) {
    $config{$o} //= $TRUE;
  }

  return easy_connect( \%config );
}

########################################################################
sub _log {
########################################################################
  my ( $level, $self, @args ) = @_;

  $Log::Log4perl::caller_depth += 2;

  $self->get_logger( ref $self )->$level(@args);

  $Log::Log4perl::caller_depth -= 2;

  return;
}

########################################################################
sub log_trace { my (@args) = @_; return _log( 'trace',   @args ) }
sub log_debug { my (@args) = @_; return _log( 'debug',   @args ) }
sub log_info  { my (@args) = @_; return _log( 'info',    @args ) }
sub log_warn  { my (@args) = @_; return _log( 'warning', @args ) }
sub log_error { my (@args) = @_; return _log( 'error',   @args ) }
sub log_fatal { my (@args) = @_; return _log( 'fatal',   @args ) }
########################################################################

# fix compatibility issue with previous versions of Bedrock.
########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;

  return $key eq 'config' ? $self->{__config} : $self->{$key};
}

########################################################################
sub closeBLM {  ## no critic (NamingConventions::Capitalization)
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  my $dbi = $self->dbi;

  return $TRUE
    if !$dbi || ref($dbi) !~ /DBI::db/xsm || !$dbi->ping;

  return $dbi->disconnect;
}

########################################################################
sub install_plugin {
########################################################################
  my ($self) = @_;

  my $xml = dump_plugin( $self, 1 );

  die "path is required to install a plugin\n"
    if !$self->get_path;

  my $config   = Bedrock::XML->newFromString($xml);
  my $filename = $self->get_name;
  my $module   = $config->{module};

  if ( !$filename ) {
    $filename = lc $module;

    if ( $filename =~ /::([^:]+)$/xsm ) {
      $filename = $1;
    }
  }

  if ( $filename !~ /[.]xml$/xsm ) {
    $filename = "$filename.xml";
  }

  my $config_file = sprintf '%s/%s', $self->get_path, $filename;

  die sprintf "ERROR:: %s file exists. Use --force to replace\n", $config_file
    if -e $config_file && !$self->get_force;

  if ( !$self->get_silent ) {
    print {*STDERR} sprintf qq{installing "%s" for module "%s" to %s\n}, $filename, $module, $self->get_path;
  }

  Bedrock::XML::writeXML( $config, $config_file );

  return 0;
}

########################################################################
sub help {
########################################################################
  print {*STDOUT} <<'END_OF_HELP';
usage:

  $PROGRAM Options command args

Options
-------
 -p, --path     install path for plugin config
 -f, --force    force overwrite of config file
 -n, --name     name of config file (default: module suffix)
 -s, --silent   silent
 -F, --format   outptu format for dump - xml, json, yaml (default: xml)

Commands  Args
--------  ----
install   optional list of key value pairs to add or replace config values
dump      dump the contents of the plugin config
help      display this help

Hints
-----
* path should be the path to Bedrock's startup config directory, 
  typicallly BEDROCK_CONFIG_PATH/../config.d/startup

  example: /var/www/bedrock/config.d/startup

* add or replace configuration values at install time

  $PROGRAM -p /var/www/bedrock/config.d/startup install foo bar

* dump the config

  $PROGRAM -F yaml dump

END_OF_HELP

  return 0;
}

########################################################################
sub dump_plugin {
########################################################################
  my ( $self, $no_dump ) = @_;

  require Data::NestedKey;

  my $plugin_config = _fetch_plugin_config($self);

  $plugin_config = $plugin_config->devolve;

  die "no plugin config found in distribution\n"
    if !$plugin_config;

  my $data = $self->get_data // Data::NestedKey->new($plugin_config);

  my $format = $self->get_format // 'xml';

  die "unknown formatter\n"
    if $format !~ /^(?:xml|ya?ml|json|dumper|storable)$/ixsm;

  my %formatter = (
    xml => sub {
      return Bedrock::XML::writeXML($plugin_config);
    },
    json => sub {
      $Data::NestedKey::FORMAT = 'JSON';
      return "$data";
    },
    yaml => sub {
      $Data::NestedKey::FORMAT = 'YAML';
      return "$data";
    },
    dumper => sub {
      $Data::NestedKey::FORMAT = 'Dumper';
      return "$data";
    },
    storable => sub {
      $Data::NestedKey::FORMAT = 'Storable';
      return "$data";
    },
  );

  $formatter{yml} = $formatter{yaml};

  my $output = $formatter{$format}->();

  if ( !$no_dump ) {
    print {*STDOUT} $output;
  }

  return $no_dump ? $output : 0;
}

########################################################################
sub _set_plugin_vars {
########################################################################
  my ($self) = @_;

  require Data::NestedKey;

  return 0
    if !$self->get_args();

  die "arguments must be key/value pairs\n"
    if $self->get_args() % 2;

  my %args = $self->get_args();

  my $plugin_config = $self->get_plugin_config;
  $plugin_config = $plugin_config->devolve;

  my $config = $plugin_config->{config} // {};

  my $data = Data::NestedKey->new( $config, %args );

  $self->set_data($data);

  $plugin_config->{config} = $config;

  return 0;
}

########################################################################
sub _fetch_plugin_config {
########################################################################
  my ($self) = @_;

  require Bedrock::XML;

  require Data::Dumper;
  Data::Dumper->import('Dumper');

  require File::Find;
  File::Find->import('find');

  my @xml_files;

  find(
    sub {
      my $name = $File::Find::name;
      return
        if $name !~ /[.]xml$/xsm;

      push @xml_files, $name;

      return;
    },

    $self->get_dist_dir
  );

  die "no xml files in distribution\n"
    if !@xml_files;

  my $plugin_config;

  foreach my $file (@xml_files) {
    my $obj = eval { return Bedrock::XML->new($file); };

    next
      if !$obj || $EVAL_ERROR || !ref $obj;

    next
      if !$obj->{binding} || $obj->{module} ne $self->get_class;

    $obj->{config} //= {};
    $plugin_config = $obj;

    last;
  }

  return
    if !$plugin_config;

  $self->set_plugin_config($plugin_config);

  _set_plugin_vars($self);

  return $plugin_config;
}

########################################################################
sub main {
########################################################################
  my ($class) = @_;

  require File::ShareDir;
  require CLI::Simple;

  my $package = $class;
  $package =~ s/::/\-/xsmg;

  my $dist_dir = eval { return File::ShareDir::dist_dir($package); };

  if ( !$dist_dir || $EVAL_ERROR ) {
    print {*STDERR} "no dist_dir found for $class\n";
    exit 1;
  }

  my $cli = CLI::Simple->new(
    option_specs => [
      qw(
        path|p=s
        force|f
        name|n=s
        silent|s
        format|F=s
      )
    ],
    extra_options => [qw(dist_dir class plugin_config data)],
    commands      => {
      dump    => \&dump_plugin,
      install => \&install_plugin,
      help    => \&help,
    }
  );

  $cli->set_dist_dir($dist_dir);

  $cli->set_class($class);

  exit $cli->run();
}

1;

__END__

=pod

=head1 NAME

Bedrock::Application::Plugin - base class for Bedrock Application Plugins

=head1 SYNOPSIS

 package BLM::Startup::Foo;

 use Bedrock::Application::Plugin;

 use parent qw( Bedrock::Application::Plugin );

 1;

=head1 DESCRIPTION

C<Bedrock::Application::Plugin> is a base class that can be used to
provide the basic plumbing for your typical Bedrock application plugin
(aka Startup BLMs). Application plugins, as opposed to plain plugins
like L<BLM::Date> are pre-loaded by Bedrock and available without
having to load them using the C<plugin> tag. These plugins are bound
to a variable name in the plugin's configuration file. Using the
plugin then is done by referencing the variable name and perhaps
calling one of its methods.

 <trace --output $session>
 <null $session.set('foo', 'bar')>

The plugin's configuration is read by Bedrock and passed to your
plugin's implementation allowing it to do whatever it needs to do in
order to initialize itself.  For example the C<$session> plugin might
open a database for persisiting user data.

An example plugin:

 package BLM::Startup::Foo;

 use parent qw(Bedrock::Application::Plugin);

 # typically your plugin implements some application specific
 # initialization code

 sub init_plugin {
   my $self = shift;

   $self->SUPER::init_plugin;

   # your code goes here...

   return 1;
 }

 sub hello_world {
   return "Hello World!";
 }
 
 1;

Create a Bedrock XML file that defines your Application Plugin and
drop this file in the C<$ENV{CONFIG_PATH}/config.d/startup> directory.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
   <object name="config">
     <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
     <scalar name="DBI_USER">fred</scalar>
     <scalar name="DBI_PASS">flintstone</scalar>
   </object>
 </object> 

Your configuration object should define a name (C<binding>) and the class
name (C<module>) that implements your plugin. The binding name is used in your
Bedrock pages when you invoke a method on your plugin.

 <null $foo.hello_world()>

If your binding name conflicts with an existing Bedrock binding name
found in Bedrock's configuration files, you can override that name by
specifying the C<override> option.

 <scalar name="override">yes</scalar>

The C<config> object in your configuration can contain what ever you
would like it to contain. Those values can then be accessed using the plugin's
C<config()> method.

 <null:config $foo.config()>
 <var $config.get('bar')>

...would retrieve the C<bar> value from your configuration object.

=head1 PLUGIN CREATOR

Included with Bedrock is a script for creating the scaffolding for an
application plugin.

=head1 CONVENIENCE METHODS

The C<Bedrock::Application::Plugin> module provides some convenience
methods and functionality that is usually required when writing an
application plugin.  Plugins sometimes interact with databases, access
configuration information and possibly the userE<039>s session data.

=head2 Database Connectivity

If you define the C<DBI_DSN>, C<DBI_USER> and C<DBI_PASS> variables in
the C<config> object of the pluginE<039>s configuration, the database
will be opened by the C<init_plugin> method when the class is
instantiated .  You can use the C<dbi()> method to return the handle
to the opened database.

The database is opened in the C<init_plugin()> method, thus if you
decide to override this method but would still want the default
behavior, make sure you call the parentE<039>s C<init_plugin()> method.

 sub init_plugin {
   my ($self) = @_;
  
   $self->SUPER::init_plugin;

   return 1;
 }

=head2 Session Access

You can use the C<session()> method to access the user's session.  The
C<$session> object is only available in application plugins if you
have set the C<session> value to I<yes> in the session managerE<039>s
configuration object.

  <!-- Generic Bedrock Sessions -->
  <object>
    <scalar name="binding">session</scalar>
    <scalar name="session">yes</scalar>
    ...

The C<session()> method returns the session object.  Setting a value
in the returned session object will set the value in the userE<039>s
session.

In your plugin:

 my $session = $self->session();
 $session->set(foo => 'bar');

...then in your Bedrock page:

 <var $session.foo>

=item * Configuration access

You can access the pluginE<039>s configuration object using the
C<config()> method.

You can access BedrockE<039>s configuration object using the
C<global_config()> method.

=head2 Logging

Starting with version 3.2.0 logging is done using
L<Log::Log4perl>. Bedrock no longer I<directly> supports the notion of
separate page logs. Bedrock tags and other Bedrock Perl modules will
attempt to use L<Log::Log4perl> categories for logging. When Bedrock
initializes the environment it will look for a file named
F<log4perl.conf> in the configuration directories. If it finds one, it
will call C<Log::Log4perl->init()>.

More information about Bedrock logging can be found in
L<Bedrock::Logger>.

To initialize your own loggers and override the default logger you
should do that in the C<init_plugin()> method. In practice it is
better to add your loggers to the F<log4perl.conf> file as a new
category. If you want to log to Bedrock's default log file, then do
nothing and use the convenience routines below.

 log_error()
 log_warn()
 log_info()
 log_status()
 log_debug()

 $self->log_debug("This is s a debug message....");

If you've used this as the parent class, then you might add a logger
like this to log at a different level than the rest of Bedrock.:

 log4perl.category.MySuperClass=DEBUG, Bedrock
 log4perl.additivity.MySuperClass=0

=head1 MORE GORY DETAILS

As noted previously, application plugins are available on your page by
referencing the variable bound to your plugin. These plugins are
pre-bound by Bedrock when the page is processed. They are bound to the
variable like this:

  my $obj = bless {}, $module_name
  my $plugin = tie %{$obj}, $module, $context, $config;

This class includes a TIEHASH method which stores the context and config
objects for your use later.

Bedrock then calls your C<init_plugin()> method and subsequently
stores the plugin object to Bedrock's symbol table making it available
in your pages.

Strictly speaking if you don't need the convenience routines offered
by this class you can just create your own plugin as shown below:

  sub TIEHASH { 
    my ( $class, $ctx, $config ) = @_;
  
    my $self = bless {}, $class;
 
    # you'll probably want to save the context object
    # (Bedrock::Context)...and you're configuration
 
    $self->{ctx} = $ctx;
    $self->{config} = $config;
  
    return $self;
  }
  
  1;

The context object provides methods like C<apache_handler()> that
gives you access to Apache's request handler, C<cgi_header_in()> to
access the input headers and other useful methods for developing web
applications. See L<Bedrock::Context> for more details.

=head1 METHODS AND SUBROUTINES

=head2 config

 config( [config] )

Sets or returns the configuration object for your Plugin.  The
L<TIEHASH> method initializes the BLM and initially sets the
configuration value from the XML C<config> object in your module
definition.

 <object> 
   <scalar name="binding">foo</scalar> 
   <scalar name="module">BLM::Startup::Foo</scalar> 
     <object name="config">
       <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
       <scalar name="DBI_USER">fred</scalar>
       <scalar name="DBI_PASS">flintstone</scalar>
     </object>
 </object> 

=head2 context

 context()

Sets or returns the context object (see L<Bedrock::Context>).  The
value of the C<context> object is set during the invocation of the
C<TIEHASH> method when Bedrock instantiates the BLM.

=head2 dbi

 dbi()

Set or return a DBI handle.

=head2 global_config

 global_config()

Returns the Bedrock F<tagx.xml> config object.  Note this is the final
merged configuration object.

=head2 init_plugin

 init_plugin()

You can implement an initialization routine which is called when
Bedrock creates your object.  At the point at which this method is
called you have access to the PluginE<039>s configuration object
(C<config>), the session object (C<session>), the header object
(C<header>), and the context object (C<context>).

Your initialization method should return true if successful.

=head3 Opening a database connection

The default C<init_plugin()> method will look in your PluginE<039>s
C<config> object for database parameters C<DBI_DSN, DBI_USER,
DBI_PASS, RaiseError, PrintError, AutoCommit>, and attempt to connect
to the database for you.  If successful, you can use the C<dbi> method
to fetch the database handle.

  <object>
    <scalar name="binding">foo</scalar>
    <scalar name="module">BLM::Startup::Foo</scalar>

    <object name="config">
      <scalar name="DBI_DSN">dbi:mysql:bedrock</scalar>
      <scalar name="DBI_USER">fred</scalar>
      <scalar name="DBI_PASS">flintstone</scalar>
      <scalar name="RaiseError">1</scalar>
      <scalar name="PrintError">1</scalar>
      <scalar name="AutoCommit">1</scalar>
    </object>

  </object>

=head get_logger

 get_logger( category )

Returns a C<Log::Log4perl> logger.

  <null:logger $foo.get_logger()>
  <null $logger.info("test message")>

 Use the C<E<lt>traceE<gt>> tag in your page to add debugging
 information.

 <trace $foo>

Note that without the C<--output> option, the output is ONLY sent to
the log and not included in the final output generated by your page.

=head2 input

 input()

Returns or sets the C<input> object.  I<This is of dubious value.>  The
C<input> object is not pre-bound, so although we initialize it in the
constructor from the C<Bedrock::Context> object, it is possible that
it was never instantiated by Bedrock.

If you have an C<input> object you want to share, go ahead and set it,
however a better practice is to have your methods accept the argument
from the Bedrock page.

 <null $my_object.my_method($input)>

=head2 session

 session()

Returns the C<session> object.  

Application Plugins only have access to the C<session> object via the
C<context> object if the C<session> object is being pre-bound, similar
to the way the C<header> object is treated.  Plugins other than the
pre-bound object liek C<header> or C<session> are only created when
they are used in the Bedrock page itself.

I<To have Bedrock pre-bind the C<session> object you must declare the
session handling Plugin as the official C<session> object.>

    <!-- Generic Bedrock Sessions -->
    <object>
      <scalar name="binding">session</scalar>
      <scalar name="module">BLM::Startup::UserSession</scalar>

 -->  <scalar name="session">yes</scalar>

      <object name="config">
        <scalar name="verbose">2</scalar>
        <scalar name="param">session</scalar>
        <scalar name="login_cookie_name">session_login</scalar>
        <scalar name="login_cookie_expiry_days">365</scalar>
        <scalar name="data_source">dbi:mysql:bedrock</scalar>
        <scalar name="username">fred</scalar>
        <scalar name="password">flintstone</scalar>
        <scalar name="table_name">session</scalar>
        <scalar name="purge_user_after">30</scalar>

        <object name="cookie">
          <scalar name="path">/</scalar>
          <scalar name="expiry_secs">3600</scalar>
          <scalar name="domain"></scalar>
        </object>
      </object>
    </object>

I<Future versions of Bedrock may include a mechanism to pre-bind
Plugin objects of arbritary type.  Currently, Bedrock treats the
C<session> and C<header> objects as the only objects that it will
instantiate when the Bedrock handler is invoked.>

=head2 header

 header()

Returns the C<BLM::Startup::Header> object.

=head2 closeBLM

Your plugin can implement an optional method (C<closeBLM>) that will
be called prior to the plugin objectE<039>s destruction.

You should perform any clean-up necessary in this method prior to your
object being destroyed.

I<You should not implement a C<DESTROY> method in your Plugin, but
rather use this method to perform your shutdown actions.  Your method
is called with the Bedrock object that was tied to your pluginE<039>s
implemention, so you need to use the template below to access your
objectE<039>s class instance>.

The default C<closeBLM> method will disconnect from the database if
one was openened.

=head1 SEE ALSO

L<Bedrock::Plugin>, L<Bedrock::Context>, L<Bedrock::Hash>, L<Bedrock::Logger>

=head1 AUTHOR

Rob Lauer - <rclauer@gmail.com>

=cut

