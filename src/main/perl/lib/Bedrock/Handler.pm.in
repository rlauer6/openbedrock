package Bedrock::Handler;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use vars qw/@ISA @EXPORT_OK %EXPORT_TAGS/;

@EXPORT_OK = qw/%BEDROCK_CONFIG_CACHE/;
@ISA = qw/Exporter/;

%EXPORT_TAGS = (all => \@EXPORT_OK);

use Apache2::Const -compile =>
qw( HTTP_UNAUTHORIZED NOT_FOUND OK SERVER_ERROR FORBIDDEN DECLINED REDIRECT :log);

use constant NOT_FOUND    => Apache2::Const::NOT_FOUND;
use constant SERVER_ERROR => Apache2::Const::SERVER_ERROR;
use constant FORBIDDEN    => Apache2::Const::FORBIDDEN;
use constant OK           => Apache2::Const::OK;
use constant DECLINED     => Apache2::Const::DECLINED;
use constant REDIRECT     => Apache2::Const::REDIRECT;

use Cwd qw/realpath fastcwd/;
use File::Basename;
use Bedrock::BedrockConfig;
use Data::Dumper;

my $MOD_PERL;
my %BEDROCK_CONFIG_CACHE;

# Note on cacheing...
# so the thought here, is smoke 'em if you got em...if this succeeds,
# great, if not, well too bad, we'll fall back and Bedrock will work
# anyway.  It's experimental and unclear how much cacheing configs
# aids in startup time.  My sense is it could be significant for more
# trafficked sites and for sites with a lot of configuration files
# that need to be merged.  OTOH, deserialization of the cached
# configuration in not free.

if ( $ENV{BEDROCK_CACHE_CONFIG} ) {
  eval {
    require IPC::Shareable;
    {
      local $SIG{__WARN__} = sub {};
      tie %BEDROCK_CONFIG_CACHE, 'IPC::Shareable', { 
						    key    => 'BCFG', 
						    create => 0, 
						    size   => 1024 * ( $ENV{BEDROCK_CACHE_CONFIG_SIZE} || 256 )
						   }; 
    }
  };

  # this happens way before logging, so let's at least give someone a
  # clue that their attempt at cacheing the config did not succeed
  warn "cacheing not successful: $@\n";
}

=pod

=head1 NAME

C<Bedrock::Handler> - common Bedrock handler methods

=head1 SYNOPSIS

 my $bedrock_handler = Bedrock::Handler->new($r);

=head1 DESCRIPTION

Class to be used to provide some helper functions for writing Bedrock
request handlers.  Performs a common set of initialization activities
like creating Bedrock's configuration environment from the various
configuration files that are supported by Bedrock.

=head1 METHODS

=head2 new

 new( request-object )

Creates a new instance of a Bedrock handler object.

=cut

sub new {
  my ($class, $r)  = @_;
  my $self = bless {}, $class;

  $self->pwd(fastcwd());
  $self->config_files_processed([]);

  $self->request_handler($r);

  $MOD_PERL = exists $ENV{MOD_PERL};

  $self->init_request;

  eval { $self->load_config; };

  # sometimes one .xml files is malformed, helpful to know how far we
  # got loading the configuration files
  if ( $@ ) {
    $r->log_error("error loading configuration files: $@");
    $r->log_error("procesed the following files: \n" . join("\n", $self->config_files_processed));

    die $@;
  }

  $self;
}

sub init_request {
  my $self = shift;

  my $r = $self->request_handler;
  
  #
  # under mod_perl naked directory requests are passed along prior to
  # file checking.  Thus the content_type is directory
  #
  # under mod_cgi those same requests come through via the "virtual" modifier on the Action directive
  #   8<
  #     Action bedrock-cgi /cgi-bin/bedrock.cgi virtual
  #   8<
  
  $self->{file} = do {
    if ( $r->content_type && $r->content_type =~ /directory/ ) {
      $ENV{PATH_TRANSLATED} = $r->filename;
      $r->content_type('text/html');
      "";
    }
    else {
      $r->filename;
    }
  };

  # Parse for the URI components
  if ( $r->uri ) {
    @{$self}{qw/uri_name uri_dir/} = fileparse($r->uri);
  }

  if ( $r->filename ) {
    @{$self}{qw/filename path/} = fileparse( $r->filename );
  }
  
  { 
    no warnings 'uninitialized';

    $self->log_debug( sprintf( "SCRIPT_NAME......[%s] " , $ENV{SCRIPT_NAME}) );
    $self->log_debug( sprintf( "request file.....[%s] " , $self->{file}) );
    $self->log_debug( sprintf( "URI..............[%s] " , $r->uri) );
    $self->log_debug( sprintf( "URI_DIR..........[%s] " , $self->{uri_dir}) );
    $self->log_debug( sprintf( "URI_NAME.........[%s] " , $self->{uri_name}) );
    $self->log_debug( sprintf( "PATH_INFO........[%s] " , $ENV{PATH_INFO}) );
    $self->log_debug( sprintf( "PATH_TRANSLATED..[%s] " , $ENV{PATH_TRANSLATED}) );
    $self->log_debug( sprintf( "filename.........[%s] " , $self->{filename}) );
    $self->log_debug( sprintf( "path.............[%s] " , $self->{path}) );
    $self->log_debug( sprintf( "mod_perl.........[%s] " , ($self->is_mod_perl) ? 'yes' : 'no'));
  }
}

sub is_mod_perl {
  return $MOD_PERL;
}

=pod

=head2 apache_handler

 apache_handler( [request-handler] )

Set or get the Apache request handler.

=cut

sub apache_handler {
  my $self = shift;
  
  if ( @_ ) {
    $self->{_apache_handler} = shift;
  }

  return $self->{_apache_handler};
}

sub request_handler { goto &apache_handler; }

sub _log {
  my $who = (caller(2) =~/Bedrock::Handler/) ? 3 : 2;

  while ( (caller($who))[3] =~/eval/ ) { $who++; last unless defined ((caller($who))[2]); }

  my $level = $_[2];
  my (undef, undef, $line, $caller) = caller($who);
  
  $_[0]->request_handler->log->$level( $caller . '[' . $line . ']: ' . $_[1] );
}

=pod

=head2 log_info

=head2 log_error

=head2 log_warn

=head2 log_debug

 log_debug( message )

Logs a message at the given log level to Apache's error log.

=cut

sub log_info  { _log(@_, 'info') };
sub log_error { _log(@_, 'error') };
sub log_warn  { _log(@_, 'warn') };
sub log_debug { _log(@_, 'debug') };

=pod

=head2 laod_config

 laod_config()

Returns Bedrock's configuration object.  Note that the hash that is
returned is the fully exploded configuration environment for Bedrock.
The configuration (may) have come from the cache if cacheing has been
enabled.  See L<CONFIGURATION CACHEING>

=cut

sub load_config {
  my $self = shift;
  
  my $config = $self->config;

  unless ( $config ) {
    my $key = sprintf("%s:%s", exists $ENV{SERVER_NAME} ? $ENV{SERVER_NAME} : $$ , $self->get_uri_dir);

    if ( exists $ENV{BEDROCK_CACHE_CONFIG} && $ENV{BEDROCK_CACHE_CONFIG} =~/(yes|y|on)/i ) {

      if ( exists $BEDROCK_CONFIG_CACHE{$key} ) {
	$config = Bedrock::Config->newFromString($BEDROCK_CONFIG_CACHE{$key});
	$config->{BEDROCK_CACHE_LOADED} = time;
      }
    }
    
    unless ($config) {
      $config = $self->get_bedrock_config;
    }
    
    $BEDROCK_CONFIG_CACHE{$key} = Bedrock::XML::writeXML($config); # this might fail ungracefully

    $self->config($config);
  }
  
  return $config;
}

sub get_config { goto &load_config; }

sub config {
  my $self = shift;

  if ( @_ ) {
    if ( ref($_[0]) ) {
      $self->{_config} = shift;
    }
    else {
      return exists $self->{_config}->{$_[0]} ? $self->{_config}->{$_[0]} : undef;
    }
  }

  return $self->{_config};
}

=pod

=head2 get_uri_dir

=cut

sub get_uri_dir { goto &uri_dir; }

sub uri_dir { 
  my $self = shift;

  if ( @_) {
    $self->{uri_dir} = shift;
  }

  $self->{uri_dir} || '';
}

=pod

=head2 restore_dir

=cut

sub restore_dir {
  my $self = shift;
  
  if ( $self->pwd ) {
    chdir $self->pwd;
  }
}

=pod

=head2 get_bedrock_admin_dir

=cut

sub get_bedrock_admin_dir {
  my $self = shift;

  $self->config('BEDROCK_ADMIN_DIR') || '/bedrock';
}

sub error {
  my ($self, $err_msg, $code) = @_;
  $code = shift || SERVER_ERROR;

  $self->log_error( $err_msg );

  $self->restore_dir;

  return $code;
}

=pod

=head2 get_bedrock_config

 get_bedrock_config()

Bedrock looks for the master F<tagx.xml> in
C<$ENV{BEDROCK_CONFIG_PATH}>, however it can be overridden or merged
with local configuration files.  To override the master, add this to
the master F<tagx.xml> file

 <scalar name="REPLACE_CONFIG">yes</scalar>

=cut

sub get_bedrock_config {
  my $self = shift;

  my $bedrock_config_path = realpath($ENV{BEDROCK_CONFIG_PATH})
    if $ENV{BEDROCK_CONFIG_PATH};

  unless ( $bedrock_config_path) {
    $self->log_warn("No BEDROCK_CONFIG_PATH found. You probably have a misconfigured system.");
  }

  my $config_path = realpath($ENV{CONFIG_PATH})
    if $ENV{CONFIG_PATH};

  unless ( $config_path ) {
    $self->log_warn("No CONFIG_PATH found.");
  }

  my $conf = eval {
    Bedrock::Config->new($bedrock_config_path . '/tagx.xml');
  };

  # it's probably okay, not to find this, but only if you have your
  # own tagx.xml somewhere, so let's at least warn

  if ( $@ ) {
    $self->log_warn(sprintf("error reading %s/tagx.xml -\n %s\n", $bedrock_config_path, $@));
  }
  else {
    $self->log_debug(sprintf("successfully read %s/%s\n",  $bedrock_config_path, "/tagx.xml"));
    $self->config_files_processed($bedrock_config_path . "/tagx.xml");
  }
  
  # look for data-sources.xml which defines database connection strings
  my $db_conf = Bedrock::Config->new;

  foreach my $config_path (qw(BEDROCK_CONFIG_PATH CONFIG_PATH)) {
    next unless $ENV{$config_path};

    my $xml_file = $ENV{$config_path} . "/data-sources.xml"
      if exists $ENV{$config_path};

    next unless $xml_file && -s $xml_file;

    $self->config_files_processed($xml_file);
    $db_conf = $db_conf->merge($xml_file);
  }

  # look for a tagx.xml that will be used with or instead of Bedrock's tagx.xml
  if ( defined $config_path && -r $config_path . '/tagx.xml' ) {
    if ( !$conf || $conf->{REPLACE_CONFIG} =~ /^y/i ) {
      $conf = Bedrock::Config->new( $config_path . '/tagx.xml' );
      $self->config_files_processed( $config_path . '/tagx.xml' );
    }
    else {
      my $local_conf = Bedrock::Config->new( $config_path . '/tagx.xml' );

      if ( exists $local_conf->{REPLACE_CONFIG} && $local_conf->{REPLACE_CONFIG} =~ /^y/i ) {
	$self->log_debug("replacing standard Bedrock configuration");
	$conf = $local_conf;
      }
      else {
	$conf->merge_config($local_conf);
      }

      $self->config_files_processed( $config_path . '/tagx.xml' );
    }
  }
  
  $conf->dbnames($db_conf);

  die "No or empty 'tagx.xml' found in BEDROCK_CONFIG_PATH:[$bedrock_config_path] or CONFIG_PATH:[$config_path]\n"
    unless $conf && keys %$conf;

  # look for more config files to merge
  my @config_paths;
  push @config_paths, $bedrock_config_path . '.d'
    if defined $bedrock_config_path;

  if ( defined $config_path ) {
    push @config_paths, $config_path;
    push @config_paths, $config_path . '.d';
  }

  foreach my $path ( @config_paths ) {
    $self->log_debug(sprintf "Searching [%s] for config files\n", $path);
    next unless -d $path;

    local (*CONFIG_FILES);
    opendir CONFIG_FILES, "$path";

    while ( my $file = readdir CONFIG_FILES ) {
      next unless $file =~ /\.xml$/ && $file !~ /^(tagx|tagx_apps)\.xml$/;

      $self->log_debug( sprintf "Found a configuration file: [%s]\n", $file);
      $self->config_files_processed("$path/$file");
      $conf->merge("$path/$file");
    }

    closedir CONFIG_FILES;
  }

  # look for module configs
  my @module_paths;

  foreach ( qw/startup plugin/ ) {
    # note the order is important here, we want local configurations
    # to override system configurations
    push @module_paths, $bedrock_config_path . ".d/" . $_
      if -d $bedrock_config_path . ".d/" . $_;
    
    push @module_paths, $config_path . ".d/" . $_
      if defined $config_path && -d $config_path . ".d/" . $_;
  }

  foreach my $path ( @module_paths ) {
    local (*CONFIG_FILES);
    opendir CONFIG_FILES, "$path";

    while ( my $file = readdir CONFIG_FILES ) {
      next unless $file =~ /\.xml$/;

      $self->log_debug( sprintf "Found a potential module configuration file: [%s]\n", $file);
      $self->log_debug( sprintf "Merging [%s]\n", $file );

      my $module_config = Bedrock::Config->new("$path/$file");
      $conf->merge_modules( { MODULES => [ $module_config ] });
    }

    closedir CONFIG_FILES;
  }

  # note that configurations above could have overridden APP_CONFIG
  # These are directory level configurations (tagx_apps.xml)
  my @app_conf_files = $conf->{'APP_CONFIG'} 
    if $conf->{'APP_CONFIG'} && -s $conf->{'APP_CONFIG'};

  # in case we have directory specific configuration files...
  my $dir = $self->get_uri_dir;
  $dir =~s|^/||;

  # Bedrock shell uses DOCUMENT_ROOT differently
  $dir =~ s/^$ENV{DOCUMENT_ROOT}//
    if defined $ENV{DOCUMENT_ROOT};

  foreach my $dir_conffile (@app_conf_files) {
    # Load the config file
    $self->config_files_processed( $dir_conffile );
    my $dir_conf = Bedrock::Config->new($dir_conffile);

    my $dir_path = '/';
    my %dirconfs;

    foreach my $dir_part ( undef, split /\//, $dir ) {
      $dir_path .= $dir_part if defined $dir_part;

      next if $dirconfs{$dir_path};

      $dirconfs{$dir_path} = $dir_path;
      
      # Look up the app config, based on directory of current request
      my $app_conf = $dir_conf->{$dir_path} || $dir_conf->{ $dir_path . '/' };

      $conf->merge_config($app_conf) if $app_conf;
      $dir_path .= '/' unless $dir_path eq '/';
    }
  }

  $conf->{CONFIG_PATH} = $config_path;

  # override use of BEDROCK_IMAGE_URL if app defines own
  $conf->{BEDROCK_IMAGE_URL} = $conf->{IMAGE_URL} || $conf->{BEDROCK_IMAGE_URL};

  # And voila! we have the merged config
  $conf;
}


sub pwd {
  my $self = shift;

  if (@_) {
    $self->{_pwd} = shift;
  }

  return $self->{_pwd};
}

sub config_files_processed {
  my $self = shift;

  if ( @_ ) {
    push @{$self->{_config_files_processed}}, @_;
  }

  return @{$self->{_config_files_processed}};
}

=pod

=head1 CONFIGURATION CACHEING

=head2 Why cache the configuration?

Creating Bedrock's configuration object is not a simple matter of
reading 1 configuration file.  Thus cacheing Bedrock's config object
can avoid a lot of config file mashing which includes; file I/O, XML
parsing, and merging of hash objects.

Cacheing of the configuration file can be use with mod_perl or when
running Bedrock as a CGI and make Bedrock's startup times up to 50%
faster.

=head2 Initializing the cache

A shared memory segment should be created sometime before the
Apache parent process is started (typically F<startup.pl>). It should
create the segment in a similar way as show below:

 tie %X, 'IPC::Shareable', { 
                            key     => 'BCFG', 
                            create  => 1, 
                            destroy => 0, 
                            size    => 256 * 1024
                           };

Note that use of the shared memory key C<BCFG> is not optional.  If you
want Bedrock to know about your shared memory segment, you and Bedrock
must agree on the key name - we chose C<BCFG>.

For a non-mod_perl environment (Bedrock running asa a perl CGI script)
you would need to create the shared memory segment at boot time or
before your Apache server was started.  Also, you do NOT want the
shared memory destroyed when the process terminates, thus you would
set `destroy => 0' when tieing the object as shown above.

You also are responsible for providing some other way to
clean up the shared memory segment (if you were concerned about such
things).

=head2 Size Matters

New studies now show what we've all suspected. B<size> I<does> matter.
The cache is populated with a serialized (Bedrock XML) version of the
config object.  Empirically you're going to need at least 128K or so
depending on how many directories you've scattered your Bedrock files
amongst.  Each directory that is I<Bedrock enabled> (.roc file is being
processed therein) may have its own configuration (Learn about
I<tagx_apps.xml> on the Bedrock Wiki).

Our shared memory segment size, must account for the possibility that
you might have a per directory configuration via F<tagx_apps.xml>.
Thus the hash key for getting the configuration object is based on the
directory from which the object is being served.  Make sure the size
here and the size in your shared memory initialization script agree.
Set the cached size (in MB) in the Apache configuration file using the
C<SetEnv> directive.  The default is 256MB.

 SetEnv BEDROCK_CACHE_CONFIG On
 SetEnv BEDROCK_CACHE_CONFIG_SIZE 256

=head2 More Gory Details

In this module (Apache::Bedrock) we tie the hash object
(C<%BEDROCK_CONFIG_CACHE>) to the shared memory segment using the
C<IPC::Shareable> module.  We do this in an eval block in the event
that the shared memory is not available.  If an error occurs during
the tie, we simply will have an empty hash object and thus cacheing is
disabled.  The absence of the shared memory key is essentially then
our trigger to cache or not to cache.

When the Bedrock handler() method is invoked, we check the cache
before creating a config object.

 $BEDROCK_CONFIG_CACHE{$key};

If the serialized object exists, great, if not, we do the config
dance and create a config object.  We then store the serialized
config object back in the hash used to cache the configs.  If we're
not cacheing, we do it anyway, no harm, no foul here.

The I<key> used as the hash index into the cache (not to be confused
with the shared memory "key" that allows multiple processes to access
the same block of shared memory) is composed of the server name from
C<SERVER_NAME> environment variable and the absolute path to the file
being processed through the handler.  This is done because Bedrock
supports the possibility of per directory configurations.

Keeping in mind that the mod_perl handler servers many virtual hosts
we need to make sure that the correct config object is accessed.
Using the key as described above to store and fetch the serialized
config object will (should) insure that the correct config object is
being used for the correct virtual host and for the correct directory
within that virtual host.  Again, recall that Bedrock allows per directory
configuration via F<tagx_apps.xml>.

The shared memory object should probably be destroyed when the Apache
parent is terminated.  Again, note that in this module
(C<Bedrock::Handler>) we neither create, nor destroy the shared memory
segment, but we use it if it is available.  IOW those wishing to take
advantage of cacheing have some housekeeping to do.  Bedrock could
facilitate this operation (and may), however optimizing the framework
is probably something that should be done by those who know what they
are doing to avoid any surprises.

=head2 Cache Manipulation

Flushing the config cache is a simple matter of executing this code:

 #!/usr/bin/perl

 use IPC::Shareable;

 tie %FOO, 'IPC::Shareable', { key => 'BCFG', create => 0 };
 %FOO = ();

Examing the cache is equally trivial

 #!/usr/bin/perl

 use IPC::Shareable;
 use Data::Dumper;

 tie %FOO, 'IPC::Shareable', { key => 'BCFG', create => 0 };
 print Dumper( \%FOO );

...as is destroying the cache

 #!/usr/bin/perl

 use IPC::Shareable;
 
 tie %FOO, 'IPC::Shareable', { key => 'BCFG', create => 0 };
 $FOO->remove();

=head2 What else should we cache?

Are there other opportunities to speed up Bedrock using cacheing?  At
first blush, no.  The whole point of a templating package is to merge
dynamic data with templates, so we never know what dynamic data is
being merged.  Of course, that's not always the case, or we might
designate some pages that do get parsed as I<cacheable> since Bedrock
parsing is not instantaneous.

Cacheing processed pages it seems then is generally a non-starter.
We could conceivably cache the raw Bedrock page avoiding the
disk access associated with reading C<.roc> and C<.inc> files into
memory.  Given the advances in the way the O/S handles cacheing of
disk objects, it seems like this might not be a place where a
great deal of additional benefit might be derived with optmizations
efforts - however I<YMMV>.

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

# Revision 1.5  2013/11/09 15:34:09  rlauer
# - removed source of warning on sprintf of an undef
# - cleaned up several start-up messages that incorrectly displayed [1] for values because of incorrect
#   precedence defined $foo || ... should have been (defined $foo) ? $foo : 'undef'
#
# Revision 1.4  2013/11/09 00:59:43  rlauer
# - remove extra use strict
# - use Bedrock::BedrockConfig missing
#
# Revision 1.3  2013/11/04 18:53:58  rlauer
#  check for defined hash elements to avoid warnings
#
# Revision 1.2  2013/05/14 19:01:43  rlauer
# - in the new() method conditionally call fileparse() - could be a basic CGI
# - bless config object into Bedrock::Config class in get_config()
#
# Revision 1.1  2013/05/10 15:04:39  rlauer
# first check-in of modules extracted from old Apache::Bedrock and our new Apache::BedrockSessionFiles
#

1;
