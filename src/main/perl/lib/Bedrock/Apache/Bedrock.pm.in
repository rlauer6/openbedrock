package Apache::Bedrock;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Apache::Constants qw{:http};
use Bedrock::Constants qw{:chars :defaults :booleans};

use Bedrock qw(slurp_file);

use Bedrock::BedrockConfig;
use Bedrock::Context;
use Bedrock::Dump;
use Bedrock::Handler;

use Text::TagX;

use Data::Dumper;
use English qw{-no_match_vars};
use File::Basename;

use List::Util qw( any uniq );
use Scalar::Util qw(blessed);

use Role::Tiny::With;
with 'Bedrock::Logger';

use Symbol;

## no critic (RequireInterpolationOfMetachars)

our $VERSION = '@PACKAGE_VERSION@';

if ($Bedrock::Handler::BEDROCK_BENCHMARK) {
  require Benchmark;
  require Time::HiRes;

  Benchmark->import(qw(:all :hireswallclock));
}

our @ISA = qw(Exporter);  ## no critic (ProhibitExplicitISA)

our @EXPORT_OK = qw(
  load_startup_modules
  bind_module
  pre_bind_module
  require_module
);

our %EXPORT_TAGS = (
  bind => [
    qw( load_startup_modules
      bind_module
      pre_bind_module
    )
  ]
);

########################################################################
sub handler {
########################################################################
  my ($r) = @_;

  my $benchmarks
    = $Bedrock::Handler::BEDROCK_BENCHMARK ? [ Benchmark->new ] : [];

  my $bedrock_handler = eval { return Bedrock::Handler->new($r); };

  if ( !$bedrock_handler ) {
    display_init_error( $r, "could not initialize handler\n$EVAL_ERROR" );

    return $OK;
  }

  # --- benchmark
  $benchmarks
    = report_time( $r, 'Bedrock::Handler->new() complete', @{$benchmarks} );

  # get the Bedrock config object
  my $conf = $bedrock_handler->config;

  my $bedrock_admin_dir = $bedrock_handler->get_bedrock_admin_dir;  # typically /bedrock

  my $file         = $bedrock_handler->{file};
  my $content_type = $r->content_type;

  if ($file) {

    # check mime-type
    if ( !any { $content_type eq $_ }
      qw(text/html application/json text/plain ) ) {
      $r->log->error( sprintf 'content type: [%s] not supported',
        $content_type );

      return $UNSUPPORTED;
    }

    if ( !-e $file ) {
      $r->log->error( sprintf 'file does not exist: [%s]', $file );

      return $NOT_FOUND;
    }

    if ( !-r $file ) {
      $r->log->error( sprintf 'file permissions deny access: [%s]', $file );

      return $FORBIDDEN;
    }
  }
  else {
    $r->log->error( sprintf 'attempt to serve directory: [%s]', $r->uri );

    return $FORBIDDEN;
  }

  # Shove the URI params in environment.
  local $ENV{'BEDROCK_URI'}     = $r->uri;
  local $ENV{'BEDROCK_URIDIR'}  = $bedrock_handler->{uri_dir};
  local $ENV{'BEDROCK_URINAME'} = $bedrock_handler->{uri_name};

  # And the file params too.
  local $ENV{'BEDROCK_FILE'}     = $r->filename;
  local $ENV{'BEDROCK_FILEDIR'}  = $bedrock_handler->{path};
  local $ENV{'BEDROCK_FILENAME'} = $bedrock_handler->{filename};

  local ( $ENV{'BEDROCK_INCLUDE_DIR'} )
    = $ENV{BEDROCK_INCLUDE_DIR} || $conf->{INCLUDE_DIR};

  local ( $ENV{'BEDROCK_PEBBLE_DIR'} )
    = $ENV{BEDROCK_PEBBLE_DIR} || $conf->{BEDROCK_PEBBLE_DIR};

  local ( $ENV{'PEBBLE_DIR'} ) = $ENV{PEBBLE_DIR} || $conf->{PEBBLE_DIR};

  local ( $ENV{'BEDROCK_SESSION_DIR'} )
    = $ENV{BEDROCK_SESSION_DIR} || $conf->{SESSION_DIR};

  my $error_page = $conf->{ERROR_LOCATION};
  if ($error_page) {
    $error_page = $ENV{DOCUMENT_ROOT} . $error_page;
  }
  else {
    $error_page = $conf->{BEDROCK_ERROR_LOCATION};
  }

  local ( $ENV{BEDROCK_ERROR_PAGE} ) = $error_page;

  local ( $ENV{'BEDROCK_CONFIG_PATH'} )
    = $ENV{BEDROCK_CONFIG_PATH}
    || $conf->{BEDROCK_CONFIG_PATH}
    || $conf->{CONFIG_PATH}
    || $ENV{CONFIG_PATH};

  local ( $ENV{'BEDROCK_IMAGE_DIR'} )
    = $ENV{BEDROCK_IMAGE_DIR} || $conf->{BEDROCK_IMAGE_DIR};

  local ( $ENV{'BEDROCK_IMAGE_URL'} )
    = $ENV{BEDROCK_IMAGE_URL} || $conf->{BEDROCK_IMAGE_URL};

  $r->log->info( sprintf 'INCLUDE_DIR.........[%s]',
    $conf->{INCLUDE_DIR} // $EMPTY );

  $r->log->info( sprintf 'PEBBLE_DIR..........[%s]',
    $conf->{PEBBLE_DIR} // $EMPTY );

  $r->log->info(
    sprintf 'ALLOW_SNIPPET_TAG...[%s]',
    $conf->{ALLOW_SNIPPET_TAG} // $EMPTY
  );

  $r->log->info( sprintf 'BEDROCK_ERROR_PAGE.[%s]',
    $ENV{BEDROCK_ERROR_PAGE} // $EMPTY );

  my $app_dir = $bedrock_handler->{path};

  if ( !chdir $app_dir ) {
    return $r->log->error( sprintf 'chdir(%s) failed: [%s]',
      $app_dir, $OS_ERROR );
  }

  # --- benchmark
  $benchmarks
    = report_time( $r, 'environment setup complete', @{$benchmarks} );

  my $ctx = Bedrock::Context->new(
    REQUEST_HANDLER => $r,
    CONFIG          => $conf
  );

  # --- benchmark
  $benchmarks = report_time( $r, 'context object created', @{$benchmarks} );

  my $tx = Text::TagX->new( $file, $ctx );

  $tx->options(
    INCLUDE_DIR       => $conf->get_include_dir(),
    ALLOW_SNIPPET_TAG => $conf->{ALLOW_SNIPPET_TAG},
    CONFIG            => $conf,
  );

  $tx->param( '_version' => '@VERSION@-@BEDROCK_RELEASE@' );

  # --- benchmark
  $benchmarks
    = report_time( $r, 'TagX object creation complete', @{$benchmarks} );

  # this needs to be done before load_startup_modules()
  $conf->init_plugin_path();

  # load generic startup BLMs
  my $modules = $conf->get_module_config();

  if ( !$modules ) {
    display_init_error( $r, 'error in config file: MODULES is not defined.' );

    return $OK;
  }

  # load startup modules
  my $pre_bound = eval { return load_startup_modules( $modules, $ctx, $tx ) };

  if ( !$pre_bound || $EVAL_ERROR ) {
    display_init_error( $r, $EVAL_ERROR );

    return $OK;
  }

  # Croak if no header module
  if ( !$pre_bound->{HEADER} ) {
    display_init_error( $r,
      sprintf 'error in config file: No header module' );

    return $OK;
  }

  # --- benchmark
  $benchmarks = report_time( $r, 'module binding complete', @{$benchmarks} );

  # this is where Bedrock starts parsing the template
  eval { $tx->output };

  my $err = $EVAL_ERROR;

  # --- benchmark
  $benchmarks
    = report_time( $r, 'Bedrock tag processing complete', @{$benchmarks} );

  # --- benchmark
  $benchmarks = report_time( $r, 'request complete', $benchmarks->[0] );

  $bedrock_handler->restore_dir;

  if ($err) {
    $r->log->error(
      sprintf 'file:[%s] mime-type:[%s] error: [%s]',
      $bedrock_handler->{file},
      $r->content_type, $err
    );

    display_error( $r, $err, $tx );

    return $OK;
  }

  # unfortunately since Bedrock error handling is finished now, if
  # errors occur now you will only see them in the error log
  $tx->close;

  return $OK
    if is_bedrock_shell($r) || !is_mod_perl();

  # Apache 2 hack for redirection...let's not send unnecessary content
  # to the browser if a redirect header has been set.
  my $headers = $r->err_headers_out;

  if ( $headers->{Location} || $headers->{location} ) {
    $r->status(Apache2::Const::REDIRECT);
  }

  my $status = $headers->{Status} || $headers->{status};

  if ( defined $status && $status =~ /\A\s*(\d+)/xsm ) {
    $r->status($1);
  }

  return $OK;
}

########################################################################
sub require_module {
########################################################################
  my ($modfile) = @_;

  $modfile =~ s/::/\//xsmg;

  if ( $modfile !~ /[.]pm\z/xsm ) {
    $modfile =~ s/\z/\.pm/xsm;
  }

  return require $modfile;
}

########################################################################
sub load_startup_modules {
########################################################################
  my ( $modules, $context, $tx ) = @_;

  my %pre_bound_modules;

  foreach my $idx ( 0 .. $#{$modules} ) {
    my $module = $modules->[$idx];

    $module->{type} //= 'hash';

    my $class = $module->{module};

    die sprintf q{'binding' not defined for module (%s)}, $idx
      if !$module->{binding};

    die sprintf 'invalid type (%s) in module (%s)', $module->{type}, $idx
      if !any { lc $module->{type} eq $_ } qw( hash array handle object);

    if ( any { exists $module->{$_} && $module->{$_} =~ /^y/ixsm }
      qw( header session ) ) {

      my $type = exists $module->{header} ? 'HEADER' : 'SESSION';

      die "multiple modules defined for $type module"
        if exists $pre_bound_modules{$type};

      $pre_bound_modules{$type} = $type;

      pre_bind_module(
        module         => $module,
        context        => $context,
        tagx           => $tx,
        pre_bound_type => $type,
      );
    }
    else {
      $tx->param(
        $module->{binding},
        sub {
          require_module($class);

          return bind_module(
            type    => $module->{type},
            module  => $class,
            context => $context,
            config  => $module->{config},
          );

        }
      );
    }
  }

  return \%pre_bound_modules;
}

########################################################################
sub bind_module {
########################################################################
  my (%args) = @_;

  my ( $module, $context, $config ) = @args{qw(module context config)};

  my $type = $args{type} eq 'object' ? 'hash' : $args{type};

  require_module $module;

  my $obj;

  ## no critic (ProhibitTies)
  my %tie_subs = (
    hash => sub {
      $obj = bless {}, $module;
      return tie %{$obj}, $module, $context, $config;
    },
    array => sub {
      $obj = bless [], $module;
      return tie @{$obj}, $module, $context, $config;
    },
    handle => sub {
      $obj = bless gensym, $module;
      return tie *{$obj}, $module, $context, $config;
    },
  );

  my $func = $tie_subs{$type}->();

  #my $func = tied %{$obj};

  if ( $func->can('init_plugin') ) {
    $func->init_plugin( $args{context}, $args{config} );
  }

  return $obj;
}

########################################################################
sub pre_bind_module {
########################################################################
  my (%args) = @_;

  my $module = $args{module};

  my $class = $module->{module};

  my $pre_bound_type = $args{pre_bound_type};

  # Bind the module
  my $obj = eval {
    bind_module(
      module  => $class,
      type    => $module->{type} || 'hash',
      context => $args{context},
      config  => $module->{config},
    );
  };

  die sprintf q{could not bind module (%s) as '%s': %s},
    $class, $module->{binding}, $EVAL_ERROR
    if !$obj || $EVAL_ERROR;

  # add the object to Bedrock' top frame (symbol table)
  $args{tagx}->param( $module->{binding} => $obj );

  # tagX wants to know who the header and session object are
  $args{tagx}->options( $pre_bound_type => $obj );

  # ...so does the context object which can be used by Bedrock::CGI
  $args{context}->{$pre_bound_type} = $obj;

  return $TRUE;
}

########################################################################
sub report_time {
########################################################################
  my ( $r, $message, @benchmarks ) = @_;

  return
    if !$Bedrock::Handler::BEDROCK_BENCHMARK;

  push @benchmarks, Benchmark->new;

  $r->log->info( sprintf '%s: %s',
    $message, timestr( timediff( ( reverse @benchmarks )[ 0, 1 ] ), 'all' ) );

  return \@benchmarks;
}

########################################################################
sub is_bedrock_shell {
########################################################################
  my ($r) = @_;

  return blessed($r) eq 'Apache::Request_shell';
}

########################################################################
sub is_mod_perl {
########################################################################
  return defined $ENV{MOD_PERL};
}

########################################################################
sub display_init_error {
########################################################################
  my ( $r, $message ) = @_;

  if ( is_bedrock_shell($r) ) {
    print {*STDERR} $message;
    exit 1;
  }

  $r->log->error($message);

  display_html_init_error( $r, $message );

  return;
}

########################################################################
sub display_html_init_error {
########################################################################
  my ( $r, $message ) = @_;

  $r->content_type('text/html');
  $r->send_http_header;

  print <<"END_OF_HTML";
<html>
  <head>
    <title>Bedrock Initialization Error</title>
  </head>
  <body>
    <div style="color:red;">An error was encountered while trying to initialize Bedrock</div>
    <pre>
      <p>$message</p>
    </pre>
  </body>
</html>
END_OF_HTML

  return;
}

########################################################################
sub display_error {
########################################################################
  my ( $r, $err, $tx ) = @_;

  if ( is_bedrock_shell($r) ) {
    display_shell_error( $err, $tx );
  }
  elsif ( $r->content_type =~ /json/xsm ) {
    if ( is_mod_perl() ) {
      $r->status($SERVER_ERROR);
    }
    else {
      $r->content_type('application/json');
      $r->cgi_header_out( 'Status', '500' );
      $r->send_http_header;
    }

    chomp $err;

    print q{{ error : "$err" }};
  }
  else {
    $tx->show_error( $ENV{BEDROCK_ERROR_PAGE} );
  }

  return;
}

########################################################################
sub display_shell_error {
########################################################################
  my ( $err, $tx ) = @_;

  my ( $line, $file ) = @{ $tx->{error} }{qw(line file)};

  my $source;

  if ( ref $file ) {
    $source = tied *{$file};
    $line--;
    $file = $tx->pebble($file);
  }

  my @lines = split /\n/xsm, slurp_file $file;

  if ( $err !~ /\Asnippet/xsm ) {

    print {*STDERR} sprintf 'Error on line [%d] (%s) - %s',
      $line, $file, $err;

    # print the lines surrounding error
    if ( $line > 1 ) {
      print {*STDERR} sprintf "  [%3d] %s\n", $line - 1, $lines[ $line - 2 ];
    }

    print {*STDERR} sprintf ">>[%3d] %s\n", $line, $lines[ $line - 1 ];

    if ( $line != @lines ) {
      print {*STDERR} sprintf "  [%3d] %s\n", $line + 1, $lines[$line];
    }
  }
  else {
    print {*STDERR} $err;
  }

  return;
}

1;

__END__

=pod

=head1 NAME

Apache::Bedrock - Apache handler for serving Bedrock pages

=head1 SYNOPSIS

 <IfModule mod_perl.c>
   PerlRequire /usr/lib/bedrock/config/startup.pl
   AddHandler    perl-script .roc .jroc
   PerlHandler   Apache::Bedrock
 </IfModule>

 use Apache::Bedrock;

 Apache::Bedrock::handler->new( Apache::Request_cgi->new );

 Apache::Bedrock::handler->new( Apache::Request_shell->new );

I<See F<bedrock.cgi> or F<bedrock.pl> if you want to see how this module
can be used stand alone.>

=head1 DESCRIPTION

Handler for parsing Bedrock files.  Can be used with Apache as a
C<mod_perl> handler or in other configurations including a shell
interpreter.

=head1 METHODS AND SUBROUTINES

=head2 require_module

Parse a module name and 'require' it.  Used to load BLMs.

=head2 bind_module

Binds a Bedrock variable to a loadable module.

=head2 is_bedrock_shell

Returns true if running as bedrock shell.

=head2 is_mod_perl

Returns true if running under mod_perl.

=head1 AUTHOR

Jay Sridhar
Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

L<Apache2::compat>, L<Bedrock::Context>, L<Bedrock::Handler>

=cut
