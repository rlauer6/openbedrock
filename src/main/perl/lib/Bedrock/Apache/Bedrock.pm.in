package Apache::Bedrock;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

BEGIN {
  require Apache2::compat if defined $ENV{MOD_PERL};
}

use strict;
use warnings;

no warnings qw/uninitialized/;

use Apache2::Const -compile => qw(
				   HTTP_UNSUPPORTED_MEDIA_TYPE
				   HTTP_UNAUTHORIZED
				   NOT_FOUND
				   OK
				   SERVER_ERROR
				   FORBIDDEN
				   DECLINED REDIRECT :log
				);

use Apache2::Log;

use APR::Const -compile => qw(:error SUCCESS);

#
# Define the following mod_perl constants since we could be using
# this module both as a mod_perl module and in a CGI
#
use constant NOT_FOUND    => Apache2::Const::NOT_FOUND;
use constant SERVER_ERROR => Apache2::Const::SERVER_ERROR;
use constant FORBIDDEN    => Apache2::Const::FORBIDDEN;
use constant OK           => Apache2::Const::OK;
use constant DECLINED     => Apache2::Const::DECLINED;
use constant REDIRECT     => Apache2::Const::REDIRECT;
use constant UNSUPPORTED  => Apache2::Const::HTTP_UNSUPPORTED_MEDIA_TYPE;

use Bedrock;
use Bedrock::BedrockConfig;
use Bedrock::Context;
use Bedrock::Dump;
use Bedrock::Handler;
use Bedrock::Hash;
use Bedrock::Log;
use Bedrock::VERSION;
use bedrock_handler_common;

use Text::TagX;
use Text::URLEncode;
use Benchmark qw/:all/;
use Data::Dumper;
use File::Basename;
use File::Spec;
use File::Temp;
use IO::File;
use IO::Scalar;
use Symbol;

=pod

=head1 NAME

C<Apache::Bedrock> - Apache handler for serving Bedrock pages.

=head1 SYNOPSIS

 <IfModule mod_perl.c>
   PerlRequire /usr/lib/bedrock/config/startup.pl
   AddHandler    perl-script .roc .jroc
   PerlHandler   Apache::Bedrock
 </IfModule>

 use Apache::Bedrock;

 &Apache::Bedrock::handler( new Apache::Request_cgi );

 &Apache::Bedrock::handler( new Apache::Request_shell );

I<See bedrock.cgi or bedrock.pl> if you want to see how this module can be used stand alone.>

=head1 DESCRIPTION

Handler for parsing Bedrock files.  Can be used with Apache as a
mod_perl handler or in other configurations including a shell
interpreter.

=head1 METHODS

=head2 require_module

Parse a module name and 'require' it.  Used to load BLMs.

=cut

sub require_module {
  my $modfile = shift;

  $modfile =~ s!::!/!g;
  $modfile =~ s!$!.pm! unless $modfile =~ /\.pm$/;

  require $modfile;
}

=pod

=head2 bind_module

=cut

sub bind_module {
  my %args = @_;

  require_module( $args{module} );

  my $obj;

  if ( $args{type} eq 'hash' or $args{type} eq 'object' ) {
    $obj = bless {}, $args{module};
    tie %{$obj}, $args{module}, $args{context}, $args{config};
  }
  elsif ( $args{type} eq 'array' ) {
    $obj = bless [], $args{module};
    tie @{$obj}, $args{module}, $args{context}, $args{config};
  }
  elsif ( $args{type} eq 'handle' ) {
    $obj = bless gensym, $args{module};
    tie *{$obj}, $args{module}, $args{context}, $args{config};
  }

  my $func = tied( %{$obj} );
  $func->can('init_plugin') && $func->init_plugin( $args{context}, $args{config} );

  return $obj;
}

=pod

=head2 is_bedrock_shell

=cut

sub is_bedrock_shell {
  return Scalar::Util::blessed( $_[0] ) eq 'Apache::Request_shell';
}

=pod

=head2 is_mod_perl

=cut

sub is_mod_perl {
  return defined $ENV{MOD_PERL};
}

# +---------------------+
# | HANDLER STARTS HERE |
# +---------------------+

sub handler {
  my $r = shift;

  # start HiRes timer
  my $t0 = Benchmark->new if get_loglevel($r) eq 'debug';

  # errors are handled in the init_bedrock_handler() subroutine
  my $bedrock_handler = init_bedrock_handler($r) or return OK;

  # get the Bedrock config object
  my $conf = $bedrock_handler->config;

# make sure that the LOG directories are present and writable, otherwise try /tmp
  foreach (qw(LOGDIR HTML_LOGDIR)) {
    unless ( -d $conf->{$_} && -w $conf->{$_} ) {
      $conf->{$_} = '/tmp';
    }
  }

  $bedrock_handler->log_info( sprintf( "Bedrock log directory is ..........[%s]", $conf->{LOGDIR} ) );
  $bedrock_handler->log_info( sprintf( "Bedrock's HTML log directory is ...[%s]", $conf->{HTML_LOGDIR} ) );

  my $bedrock_admin_dir =  $bedrock_handler->get_bedrock_admin_dir;    # typically /bedrock

  my $file = $bedrock_handler->{file};

  if ($file) {
    # check mime-type
    unless ( $r->content_type =~ /(text\/html|application\/json|text\/plain)/ ) {
      $bedrock_handler->error( sprintf "content type: [%s] not supported\n", $r->content_type );
      return UNSUPPORTED;
    }

    unless ( -e $r->filename ) {
      $bedrock_handler->error( sprintf( "file does not exist: [%s]", $file ) );
      return NOT_FOUND;
    }

    unless ( -r $r->filename ) {
      $bedrock_handler->error( sprintf( "file permissions deny access: [%s]", $file ) );
      return FORBIDDEN;
    }
  }
  else {
    $bedrock_handler->error( sprintf( "attempt to serve directory: [%s]", $r->uri ) );
    return FORBIDDEN;
  }

  local ( $SIG{__DIE__}, $SIG{__WARN__} );

  # Shove the URI params in environment.
  local ( $ENV{'BEDROCK_URI'} )     = $r->uri;
  local ( $ENV{'BEDROCK_URIDIR'} )  = $bedrock_handler->{uri_dir};
  local ( $ENV{'BEDROCK_URINAME'} ) = $bedrock_handler->{uri_name};

  # And the file params too.
  local ( $ENV{'BEDROCK_FILE'} )         = $r->filename;
  local ( $ENV{'BEDROCK_FILEDIR'} )      = $bedrock_handler->{path};
  local ( $ENV{'BEDROCK_FILENAME'} )     = $bedrock_handler->{filename};

  local ( $ENV{'BEDROCK_INCLUDE_DIR'} )  = $ENV{BEDROCK_INCLUDE_DIR}  || $conf->{INCLUDE_DIR};
  local ( $ENV{'BEDROCK_PEBBLE_DIR'} )   = $ENV{BEDROCK_PEBBLE_DIR}   || $conf->{BEDROCK_PEBBLE_DIR};
  local ( $ENV{'PEBBLE_DIR'} )           = $ENV{PEBBLE_DIR}           || $conf->{PEBBLE_DIR};
  local ( $ENV{'BEDROCK_SESSION_DIR'} )  = $ENV{BEDROCK_SESSION_DIR}  || $conf->{SESSION_DIR};
  local ( $ENV{'BEDROCK_CONFIG_PATH'} )  = $ENV{BEDROCK_CONFIG_PATH}  || $conf->{BEDROCK_CONFIG_PATH} || $conf->{CONFIG_PATH} || $ENV{CONFIG_PATH};
  local ( $ENV{'BEDROCK_LOG_DIR'} )      = $ENV{BEDROCK_LOG_DIR}      || $conf->{LOGDIR};
  local ( $ENV{'BEDROCK_HTML_LOG_DIR'} ) = $ENV{BEDROCK_HTML_LOG_DIR} || $conf->{HTML_LOGDIR};
  local ( $ENV{'BEDROCK_LOG_FILE'} )     = $ENV{BEDROCK_LOG_FILE}     || $conf->{LOGFILE};
  local ( $ENV{'BEDROCK_IMAGE_DIR'} )    = $ENV{BEDROCK_IMAGE_DIR}    || $conf->{BEDROCK_IMAGE_DIR};
  local ( $ENV{'BEDROCK_IMAGE_URL'} )    = $ENV{BEDROCK_IMAGE_URL}    || $conf->{BEDROCK_IMAGE_URL};

  my $app_dir = $bedrock_handler->{path};

  unless ( chdir $app_dir ) {
    return $bedrock_handler->error( sprintf( " chdir(%s) failed: [%s]", $app_dir, $! ) );
  }
  
  my $ctx = Bedrock::Context->new( 'APACHE_HANDLER' => $r, 'CONFIG' => $conf );

  my $tx = Text::TagX->new( $file, $ctx );

  # set Bedrock HTML logging options
  my $log_prefix;

  if ( exists $conf->{HTML_LOGFILE} || exists $conf->{HTML_LOGDIR} ) {

    my $logfile_name = $conf->{HTML_LOGFILE} || $bedrock_handler->{filename};
    
    # not sure this should ever happen, however if we've parsed the
    # URI incorrectly (Bedrock CGI mainly) then let's do some belt &
    # suspenders mitigation...
    unless ($logfile_name) {
      $logfile_name = sprintf( "unparsable-filename-%s\n", scalar(localtime) );
      $logfile_name =~ s/[ :]/-/g;
    }
    
      # The "page" log file should be {log-directory}/
    $log_prefix = sprintf( "%s/%s", $conf->{'HTML_LOGDIR'} || $conf->{'LOGDIR'} || '/tmp', $logfile_name );
  }

  # the TagX::Log start_logger() method redirects STDERR to the page
  # log after this call has been executed
  $tx->options(
	       ALLOW_SNIPPET_TAG  => $conf->{ALLOW_SNIPPET_TAG},
	       BEDROCK_PEBBLE_DIR => $conf->{BEDROCK_PEBBLE_DIR},
	       INCLUDE_DIR        => $conf->{INCLUDE_DIR} || ".",
	       LOGFORMAT          => $conf->{LOGFORMAT}   || '%t [%p] [%a]: %L ',
	       LOG_MAXSIZE        => $conf->{HTML_LOGMAXSIZE} || $conf->{'LOG_MAXSIZE'} || 200000,
	       LOG_SPOOLER        => $conf->{HTML_LOGSPOOLER},
	       LOG_PREFIX         => $log_prefix,
	       PEBBLE_DIR         => $conf->{PEBBLE_DIR},
              );

  # load generic startup BLMs
  my $modules = $conf->{'MODULES'};

  unless ($modules) {
    return $bedrock_handler->error(sprintf("error in config file: MODULES is not defined."));
  }

  # custom plugins
  if ( exists $conf->{PLUGIN_PATH} && defined $conf->{PLUGIN_PATH} ) {
    my @plugin_inc = split /:/, $conf->{PLUGIN_PATH};

    foreach my $path (@plugin_inc) {
      push @INC, $path
      unless grep { /$path/ } @INC;
    }
  }

  # this simply allows us to record if we have encountered a HEADER or
  # SESSION module yet in order to avoid loading duplicate copies of
  # these
  my %pre_bound = ( HEADER => undef, SESSION => undef );

  my @startup = @{$modules};

  for ( my $idx = 0 ; $idx < @startup ; $idx++ ) {
    my $modconf = $startup[$idx];

    unless ( defined $modconf->{'binding'} ) {
      return $bedrock_handler->error( sprintf( "error in config: `binding' not defined for MODULES->[%s]", $idx ));
    }

    my $type = $modconf->{'type'} || 'hash';

    unless ( $type =~ /^(hash|array|handle|object)$/ ) {
      return $bedrock_handler->error(sprintf("error in config: MODULES->[%s] defined with invalid `type'(%s)", $idx, $type ));
    }

    # BLM specific configuration
    my $config = $modconf->{'config'};

    if ( $modconf->{header} =~ /^y/i || $modconf->{session} =~ /^y/i ) {

      # must be either header or session
      my $binding = ( exists $modconf->{'header'} ) ? 'HEADER' : 'SESSION';

      # Croak if more than one module tries to become pre-bound with same name
      if ( $pre_bound{$binding} ) {

        if ( is_bedrock_shell($r) ) {
          print sprintf( "[%s]: error in config: Multiple modules defined: (%s, %s)", ( caller(0) )[3], $pre_bound{$binding}, $modconf->{'binding'} );
          exit -1;
        }
        else {
          return $bedrock_handler->error(sprintf("error in config: Multiple modules defined: (%s, %s)", $pre_bound{$binding}, $modconf->{'binding'}) );
        }
      }

      # Bind the module
      $pre_bound{$binding} = $modconf->{'binding'};

      my $obj = eval {
        bind_module( module  => $modconf->{'module'},
                     type    => $type,
                     context => $ctx,
                     config  => $config
                   );
      };

      if ( $@ && exists $modconf->{abort_if_error} ) {
        if ( is_bedrock_shell($r) ) {
          print sprintf( "[%s]: could not bind %s ($@)", (caller(0) )[3], $pre_bound{$binding}, $modconf->{'binding'} );
	  exit -1;
        }
        else {
          $bedrock_handler->error(sprintf( "could not bind %s (%s", $pre_bound{$binding}, $modconf->{'binding'}, $@));
          $r->content_type('text/html');
          $r->send_http_header;

          print <<eom;
<html>
<head>
<title>Bedrock Initialization Error</title>
</head>
<body>
<div style="color:red;">An error was encountered while trying to initialize Bedrock</div>
<pre>
$@
</pre>
</body>
</html>
eom
          return OK;
        }
      }
      elsif ($@) {
	$bedrock_handler->error(sprintf("Could not bind module [%s] -> [%s] - (but 'abort_on_error' is not set for this module's configuration...so we'll keep going)", $modconf->{module}, $@));
        undef $obj;
      }

      if ($obj) {

        # add the object to Bedrock' top frame (symbol table)
        $tx->param( $modconf->{'binding'} => $obj );

        # tagX wants to know who the header and session object are
        $tx->options( $binding => $obj );

        # ...so does the context object which can be used by Bedrock::CGI
        $ctx->{$binding} = $obj;
      }
      else {
        $tx->param( 'error' => $@ );
      }
    }
    else {
      
      # ** FIXME: this should call bind_module()...note it does not call "init_plugin" as does bind_module()!
      
      # Bind a subroutine to the binding name so the constructor gets
      # invoked ONLY if the variable is accessed from the script.

      # Note: this implements a closure aournd "$modconf" a better
      # design might be to use the binding name to grab module specs
      # from context object which should contain all of the defined
      # moudles.  Using the context object would allow loading modules
      # not known and configuration time.
      
      $tx->param(
        $modconf->{'binding'},
        sub {
          my $obj;

          my $modfile = $modconf->{'module'};
          $modfile =~ s!::!/!g;
          $modfile =~ s!$!.pm! unless $modfile =~ /\.pm$/;

          require $modfile;

          if ( $type eq 'hash' or $type eq 'object' ) {
            $obj = bless {}, $modconf->{'module'};
            tie %{$obj}, $modconf->{'module'}, $ctx, $config;
          }
          elsif ( $type eq 'array' ) {
            $obj = bless [], $modconf->{'module'};
            tie @{$obj}, $modconf->{'module'}, $ctx, $config;
          }
          elsif ( $type eq 'handle' ) {
            $obj = bless gensym, $modconf->{'module'};
            tie *{$obj}, $modconf->{'module'}, $ctx, $config;
          }

          $obj;
        }
      );
    }
  }

  # Croak if no header module
  unless ( $pre_bound{HEADER} ) {
    return $bedrock_handler->error(sprintf("error in config file: No header module"));
  }

  $tx->param( '_version' => '@VERSION@-@BEDROCK_RELEASE@' );

  eval { $tx->output };

  if ($@) {
    if ( is_bedrock_shell($r) ) {

      # output error to STDERR
      my $line = $tx->{'error'}->line;
      my $file = $tx->{'error'}->file;
      my $source;

      if ( ref($file) ) {
        $source = tied( *{$file} );
        $line--;
        $file = $tx->pebble($file);
      }
      else {
        open FILE, "<$file";

        die "Could not open source file " . $file
        unless $file;
        {
          local $/;
          $source = <FILE>;
        }

        close FILE;
      }

      my @lines;

      {
        require IO::Scalar;

        my $fd = IO::Scalar->new( \$source );

        while ( defined( $_ = $fd->getline ) ) {
          chomp;
          push @lines, $_;
        }

        $fd->close;
      }

      unless ( $@ =~ /^snippet/ ) {
        $r->log_error( sprintf( "Error on line [%d] (%s) - %s", $line, $file, $@ ) );

        # print the lines surrounding error
        $r->log_error( sprintf( "  [%3d] %s\n", $line - 1, $lines[ $line - 2 ] ) )
	  unless $line <= 1;
	
        $r->log_error( sprintf( ">>[%3d] %s\n", $line, $lines[ $line - 1 ] ) );
	
        $r->log_error( sprintf( "  [%3d] %s\n", $line + 1, $lines[$line] ) )
	  unless $line == @lines;
      }
      else {
        $r->log_error("$@");
      }
    }
    else {
      $bedrock_handler->log_error( sprintf( "script [%s] with mime-type [%s] encountered the following error:", $bedrock_handler->{file}, $r->content_type ));

      $bedrock_handler->log_error("$@");

      my $error_location = $conf->{BEDROCK_ERROR_LOCATION} ? $conf->{BEDROCK_ERROR_LOCATION} : $ENV{DOCUMENT_ROOT} . $conf->{ERROR_LOCATION};

      # if we are serving up JSON content, then we need to return a
      # proper error code, not 200
      if ( $r->content_type =~ /json/ ) {
        $bedrock_handler->restore_dir;

        if ( is_mod_perl() ) {
          $r->status(SERVER_ERROR);
        }
        else {
          $r->content_type('application/json');
          $r->cgi_header_out( 'Status', '500' );
          $r->send_http_header;
        }

        chomp $@;
        print <<eom;
{ error : "$@" }
eom
        return OK;
      }
      else {
        $tx->show_error($error_location);
      }
    }
  }

  $bedrock_handler->restore_dir;

  # unfortunately since Bedrock error handling is finished now, if
  # errors occur now you will only see them in the error log
  $tx->close;

  # Apache 2 hack for redirection...let's not send unnecessary content
  # to the browser if a redirect header has been set.
  unless ( is_bedrock_shell($r) ) {
    if ( is_mod_perl() ) {
      if ( exists ${ $r->err_headers_out }{Location} || exists ${ $r->err_headers_out }{location} ) {
        $r->status(Apache2::Const::REDIRECT);
      }
      if ( exists ${ $r->err_headers_out }{Status} || exists ${ $r->err_headers_out }{status} ) {
        my $status = ${ $r->err_headers_out }{status} || ${ $r->err_headers_out }{Status};
        $r->status($1) if $status =~ /^\s*(\d+)/;
      }
    }
  }

  # benchmark
  my $t1 = Benchmark->new;

  if ( get_loglevel($r) eq 'debug' ) {
    $bedrock_handler->log_debug( "log level " . get_loglevel($r) );
    $bedrock_handler->log_debug( "processing complete: " . timestr( timediff( $t1, $t0 ), 'all' ) );
  }

  return OK;
}

1;

=pod

=head1 AUTHOR

Jay Sridhar
Rob Lauer - <rlauer6@comcast.net>

=cut
