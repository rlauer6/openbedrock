#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::Request_cgi;

use strict;
use warnings;

# let's duplicate STDERR so our Apache handler can write to the Apache
# log properly.

open BEDROCK_STDERR, ">>&STDERR";

# don't buffer output
my $oldfh = select(BEDROCK_STDERR); $| = 1; select($oldfh);

sub get_loglevel {
  return  { 
	   'error' => 3,
	   'warn'  => 2,
	   'info'  => 1,
	   'debug' => 0
	  }->{get_loglevel_str()};
}

sub get_loglevel_str {
  return $ENV{BedrockLogLevel} || 'info';
}

sub log_message {
  my ($self, $logmsg, $level) = @_;

  $logmsg .= "\n" unless $logmsg =~/\n$/;

  print BEDROCK_STDERR $logmsg
    if ( $level >= $self->get_loglevel );
}

sub log_error {
  push @_, 3;
  goto &log_message;
}

sub warn {
  push @_, 2;
  goto &log_message;
}

sub debug {
  push @_, 0;
  goto &log_message;
}

sub info {
  push @_, 1;
  goto &log_message;
}

sub error {
  goto &log_error;
}

sub log {
  return $_[0];
}

# note: we probably don't want to pollute Bedrock with magic mime-type
# checking, so we'll keep it simple
sub content_type {
  my ($self, $type) = @_;

  if ( defined $type ) {
    $self->cgi_header_out('Content-type', $type);

    return $type;
  }
  else {
    return "application/octet-stream"
      unless ( defined $ENV{PATH_TRANSLATED} );

      for ( $ENV{PATH_TRANSLATED} ) {
	/\.roc/ && do {
	  return 'text/html';
	};

      /\.jroc/ && do {
	return 'application/json';
      };

      /\.pdf/ && do {
	return 'application/pdf';
      };
      
      /\.txt/ && do {
	return 'text/plain';
      };

      /\.htm/ && do {
	return 'text/html';
      };

      /\.png/ && do {
	return 'image/png';
      };

      /\.jpe?g/ && do {
	return 'image/jpeg';
      };

      /\.tif/ && do {
	return 'image/tiff';
      };

      return 'application/octet-stream';
    }
  }
}

sub filename {
  my $self = shift;

  return $self->finfo( shift );
}

sub finfo {
  my $self = shift;
  
  my $path_xlated = shift || $ENV{PATH_TRANSLATED};
  # roc[k] file?
  if ( $path_xlated && $path_xlated =~ /\.j?rock?$/ ) {
      return $path_xlated;
    }

  # roc[k] file with path info?
  elsif ( $path_xlated && $path_xlated =~ /^(.*?\.j?rock?)\/(.*?)$/ ) {
    my $filename = $1;
    
    $ENV{BEDROCK_PATH_INFO} = $2 if $2;
    $path_xlated =~ s/$ENV{BEDROCK_PATH_INFO}//
      if $ENV{BEDROCK_PATH_INFO};
    $ENV{BEDROCK_PATH_TRANSLATED} = $path_xlated;
    
    return $filename;
  }

  # html or other file?
  elsif ( $ENV{PATH_INFO} && $ENV{PATH_INFO} =~ /^(.*)(\.[^\.]*)$/ ) {
    return $path_xlated;
  }

  # Bedrock controller? directory?
  else {
    return undef;    # could be Bedrock controller
  }
}

sub uri {
  return $ENV{PATH_INFO};
}

sub headers_in {
  use CGI;

  my $cgi = new CGI;
  my %h = map { $_ => $cgi->http($_) } $cgi->http();

  while (my ($k,$v) = each %h) {
     $k =~s/^HTTP_//;
     $h{$k} = $v;
     delete $h{'HTTP_' . $k};
  }

  return \%h;
}

sub is_cgi {
  1;
}

sub header_out {
  &cgi_header_out;
}

sub err_headers_out {
  return {};
}

sub cgi_header_out {
  my $self = shift;

  my ( $header, $value ) = @_;
  $self->{'headers'} .= "$header: $value\r\n";
}

sub send_http_header {
  my $self = shift;

  print $self->{'headers'}, "\r\n";
  $self->{'headers'} = undef;
}

sub close {
  close STDOUT;
}

sub print {
  my $self = shift;

  print @_;
}

sub new {
  my $class = shift;
  bless {}, $class;
}

1;

#
# Revision 1.20  2013/11/09 15:16:03  rlauer
# - set STDERR to unbuffered output
# - content_type() should try to recognize additional types
#
# Revision 1.19  2013/05/14 18:55:29  rlauer
# - removed old code never executed from method uri()
#
# Revision 1.18  2013/05/10 15:49:13  rlauer
# - reworked logging so that we write to STDERR to force messages to Apache's error log.  We also use
#   BedrockLogLevel (mimics Apache's LogLevel) to set the logging level
# - content_type() method was supposed to set & get content_type
#
# Revision 1.17  2012/08/06 15:48:18  lauerrc
# - default mime-type for .jroc/.jrock application/json
#
# Revision 1.16  2012/05/21 20:51:57  eutl420
# - missing method ->log->error()
#
# Revision 1.15  2012/02/24 19:34:41  eutl420
# - removed deprecated methods args(), content()
# - tweaked log message in sent_http_headers()
#
# Revision 1.14  2011/12/28 17:15:11  eutl420
# - in send_http_header(). log message using debug() and reset headers after output
#
# Revision 1.13  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.12  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.11  2010/11/29 15:57:52  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.10  2009/12/30 00:18:00  rlauer
# provide compatibility method err_headers_out
#
# Revision 1.9  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.8  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.7  2008/09/04 18:47:09  rlauer
# - uri was experimental and broke functionality associated with using
#   tagx_apps.xml.  Code below return in the uri subroutine could be
#   revisited in the future.  The idea was to provide some additional information
#   to Bedrock pages via environment variables.
#
# Revision 1.6  2008/02/28 18:14:39  rlauer
# Applying Rob's patches to make Bedrock work on Apache 2.x
# (plus a few other obvious bug fixes).
#
# Revision 1.5  2005/02/22 20:12:38  aviert
# The following changes have been taken from the current production environment, located
# on cjx-devl. There are minor differences between what's currently in the repository
# and what's there, due to ad-hoc bug fixes that never made their way back into cvs.
#
# Revision 1.4  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2001/01/09 20:11:34  sridhar
#
# Revision 1.2  2000/12/15 16:23:25  sridhar
# Method `headers_in()' returns an empty list to eliminate bogus warning
# in Header.
#
# Revision 1.1  2000/12/12 18:59:52  sridhar
# A module which mimicks the Apache request object for the CGI
# environment.
#
#

