#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package Apache::Request_cgi;

use SIS::Log;

sub log_error
{
    my $self = shift;
    unshift @_, MSG_ERROR;
    goto &LOG_MESSAGE;
}

sub warn
{
    my $self = shift;
    unshift @_, MSG_WARNING;
    goto &LOG_MESSAGE;
}

sub content_type
{
    'text/html';
}

sub filename
{
    $ENV{PATH_TRANSLATED};
}

sub finfo
{
    $ENV{PATH_TRANSLATED};
}

sub uri
{
    $ENV{PATH_INFO};
}

sub args
{
    my $self = shift;
    my $q = $ENV{'QUERY_STRING'};
    my @args;
    for (split('&', $q)) {
	my ($key, $value) = split '=';
	&Text::URLEncode::decode($value);
	push @args, $key, $value;
    }
    @args;
}

sub content
{
    my $self = shift;
    return unless defined($ENV{'CONTENT_LENGTH'});
    my $q;
    read(STDIN, $q, $ENV{'CONTENT_LENGTH'}) if $ENV{'CONTENT_LENGTH'} > 0;
    my @args;
    for (split('&', $q)) {
	my ($key, $value) = split '=';
	&Text::URLEncode::decode($value);
	push @args, $key, $value;
    }
    @args;
}

sub headers_in
{
}

sub cgi_header_out
{
    my $self = shift;
    my ($header, $value) = @_;
    $self->{'headers'} .= "$header: $value\r\n";
}

sub send_http_header
{
    print shift->{'headers'}, "\r\n";
}

sub close
{
    close STDOUT;
}

sub print
{
    my $self = shift;
    print @_;
}

sub new
{
    my $class = shift;
    bless {}, $class;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/12/12 18:59:52  sridhar
# A module which mimicks the Apache request object for the CGI
# environment.
#
#

