#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::Request_cgi;

use strict;
use warnings;

use File::Basename;
use Bedrock::Constants qw{:booleans :chars :log_levels};
use Bedrock::Context qw{init_log4perl_logger};
use Data::Dumper;

use List::Util qw{pairs none};

use Role::Tiny::With;
with 'Bedrock::Logger';

use Readonly;

Readonly::Hash our %MIME_TYPES => (
  htm   => 'text/html',
  html  => 'text/html',
  jpeg  => 'image/jpeg',
  jpg   => 'image/jpeg',
  jroc  => 'application/json',
  jrock => 'application/json',
  pdf   => 'application/pdf',
  png   => 'image/png',
  roc   => 'text/html',
  rock  => 'text/html',
  tif   => 'image/tiff',
  txt   => 'text/plain',
);

########################################################################
sub new {
########################################################################
  my ( $class, %options ) = @_;

  my $self = bless \%options, $class;

  my $fh = $self->{output_handle};

  if ( !$fh ) {
    $fh = select;

    if ( !ref $fh && ref \$fh ne 'GLOB' ) {
      no strict 'refs';  ## no critic (ProhibitNoStrict)

      $fh = \*$fh;

      $self->{output_handle} = $fh;
    }
  }

  $self->{LogLevel} = $ENV{LogLevel} || $ENV{BedrockLogLevel};

  $self->init_logger;

  # set a default content type
  $self->content_type( $self->content_type );

  return $self;
}

########################################################################
sub init_logger {
########################################################################
  my ($self) = @_;

  my $level = $self->{LogLevel} // $EMPTY;

  if ( none { $level eq $_ } qw{ error fatal warn info debug trace } ) {
    $level = 'error';
  }

  init_log4perl_logger();

  $self->get_logger->level( $LOG4PERL_LOG_LEVELS{$level} );

  return $self;
}

########################################################################
sub get_loglevel {
########################################################################
  my ($self) = @_;

  return $LOG4PERL_LOG_LEVELS{ $self->get_loglevel_str };
}

########################################################################
sub get_loglevel_str {
########################################################################
  my ($self) = @_;

  return $self->{log_level} || 'error';
}

########################################################################
sub log_message {
########################################################################
  my ( $self, $logmsg, $level ) = @_;

  $level = lc $level;

  if ( none { $level eq $_ } keys %LOG4PERL_LOG_LEVELS ) {
    $level = 'debug';
  }

  return $self->get_logger->$level($logmsg);
}

########################################################################
sub _log {
########################################################################
  my ( $level, $self, @args ) = @_;

  my $logger = $self->get_logger;

  # set the level for the handler
  $logger->level( $LOG4PERL_LOG_LEVELS{ $self->{log_level} } );

  return $logger->$level(@args);
}

########################################################################
sub log_trace { my (@args) = @_; return _log( 'trace', @args ) }
sub log_debug { my (@args) = @_; return _log( 'debug', @args ) }
sub log_info  { my (@args) = @_; return _log( 'info',  @args ) }
sub log_warn  { my (@args) = @_; return _log( 'warn',  @args ) }
sub log_error { my (@args) = @_; return _log( 'error', @args ) }
sub log_fatal { my (@args) = @_; return _log( 'fatal', @args ) }

sub debug { goto &log_debug; }
sub error { goto &log_error; }
sub info  { goto &log_info; }
sub warn  { goto &log_warn; }  ## no critic (ProhibitBuiltinHomonyms)

########################################################################

########################################################################
sub log {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  my $logger = $self->get_logger;
  my $level  = $self->{log_level} || 'error';
  $logger->level( $LOG4PERL_LOG_LEVELS{$level} );

  return $logger;
}

# note: we probably don't want to pollute Bedrock with magic mime-type
# checking, so we'll keep it simple
########################################################################
sub content_type {
########################################################################
  my ( $self, $type ) = @_;

  if ( defined $type ) {
    $self->cgi_header_out( 'Content-type', $type );

    return $type;
  }
  elsif ( !defined $ENV{PATH_TRANSLATED} ) {
    return 'application/octet-stream';
  }

  # try to determine the mimetype based on the extension of the request
  my ( $name, $path, $ext )
    = fileparse( $ENV{PATH_TRANSLATED}, qr/[.][^.]+$/xsm );

  # if there is no extension it's probably text/html
  return 'text/html'
    if !$ext;

  my ($mime_type) = grep { $ext =~ /$_/xsm } keys %MIME_TYPES;

  $mime_type = $MIME_TYPES{$mime_type} // 'application/octet-stream';

  return $mime_type;
}

########################################################################
sub filename {
########################################################################
  my ( $self, $file ) = @_;

  return $self->finfo($file);
}

########################################################################
sub finfo {
########################################################################
  my ( $self, $file ) = @_;

  my $path_xlated = $file || $ENV{PATH_TRANSLATED};

  # roc[k] file?
  if ( $path_xlated && $path_xlated =~ /[.]j?rock?$/xsm ) {
    return $path_xlated;
  }

  # roc[k] file with path info?
  elsif ( $path_xlated && $path_xlated =~ /^(.*[.]j?rock?)(\/.*?)$/xsm ) {
    my $filename = $1;

    if ($2) {
      $ENV{BEDROCK_PATH_INFO} = $2;
    }

    if ( $ENV{BEDROCK_PATH_INFO} ) {
      $ENV{BEDROCK_PATH_TRANSLATED} = sprintf '%s%s', $ENV{DOCUMENT_ROOT}, $ENV{BEDROCK_PATH_INFO};
    }

    return $filename;
  }

  # html or other file?
  elsif ( $ENV{PATH_INFO} && $ENV{PATH_INFO} =~ /^(.*)([.][^.]+)$/xsm ) {
    return $path_xlated;
  }

  # Bedrock controller? directory?
  else {
    # takin' a stab here, might be a handler
    if ( $ENV{PATH_INFO} ) {
      my ( $file, $dir ) = fileparse( $ENV{PATH_INFO} );

      return $file;
    }
  }

  return;
}

########################################################################
sub uri {
########################################################################
  return $ENV{PATH_INFO};
}

########################################################################
sub headers_in {
########################################################################
  use CGI;

  my $cgi = CGI->new;

  my %http_vars = map { $_ => $cgi->http($_) } $cgi->http();

  foreach my $p ( pairs %http_vars ) {
    my ( $key, $value ) = @{$p};
    $key =~ s/^HTTP_//xsm;

    $http_vars{$key} = $value;

    delete $http_vars{ 'HTTP_' . $key };
  }

  return \%http_vars;
}

########################################################################
sub is_cgi          { return $TRUE }
sub header_out      { goto &cgi_header_out; }
sub headers_out     { goto &cgi_header_out; }
sub err_headers_out { goto &cgi_header_out; }
########################################################################

########################################################################
sub cgi_header_out {
########################################################################
  my ( $self, @headers ) = @_;

  $self->{headers} //= $EMPTY;

  if (@headers) {
    foreach my $p ( pairs @headers ) {
      my ( $header, $value ) = @{$p};

      $self->{headers} .= "$header: $value\r\n";
    }
  }

  return $self->{headers};
}

########################################################################
sub send_http_header {
########################################################################
  my ($self) = @_;

  if ( $self->{headers} ) {
    $self->print( $self->{headers}, "\r\n" );
  }

  $self->{headers} = undef;

  return;
}

########################################################################
sub close {  ## no critic (ProhibitBuiltinHomonyms, ProhibitAmbiguousNames)
########################################################################
  my ($self) = @_;

  return close $self->{output_handle};
}

########################################################################
sub print {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  my $fh = $self->{output_handle};

  return print {$fh} @args;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

Apache::Bedrock::Request_cgi - A request object suitable for use by Bedrock when running under mod_cgi

=head1 SYNOPSIS

 # CGI handlers
 Action        bedrock-cgi  /cgi-bin/bedrock.cgi virtual
 
 AddHandler    bedrock-cgi .rock .jrock
 
 # Bedrock - mod-perl for .roc (if mod_perl)
 <IfModule mod_perl.c>
   PerlRequire /usr/lib/bedrock/config/startup.pl
   AddHandler    perl-script .roc .jroc
   PerlHandler   Apache::Bedrock
 </IfModule>
 
 <IfModule !mod_perl.c>
   AddHandler  bedrock-cgi .roc .jroc
 </IfModule>

=head1 DESCRIPTION

Provides a request object suitable for use by
L<Bedrock::Apache::Bedrock> when running under C<mod_cgi>. Implements
enough of the the methods found in C<Apache2::RequestRec> to support
Bedrock running under Apache as a CGI script (C<bedrock.cgi>)..

=head1 METHODS AND SUBROUTINES

=head2  new

 new(options)

Instantatiates a new request object.

=over 5

=item LogLevel

=item output_handle

=back

=head2  print

=head2  close

=head2  filename

=head2  finfo

=head2  is_cgi

=head2  uri

=head1 HEADER METHODS

=head2  content_type

=head2  cgi_header_out

 cgi_header_out( header, value, ...)

 my $headers = cgi_header_out()

Sets or returns the headers to be sent to client.

=head2  headers_out

See L</cgi_header_out>

=head2  header_out

See L</cgi_header_out>

=head2  err_headers_out

See C</cgi_header_out>

=head2  headers_in

Returns the HTTP headers received from client.

=head2  send_http_header

Outputs the HTTP headers to STDOUT.

=head1 LOGGING

The request object implements a set of methods suitable for use by
L<Bedrock::Apache::Bedrock> including the C<log()> method found in
<Apache2::RequestRec>.

C<log()> method returns a logger with the methods below that are
used by L<Bedrock::Apache::Bedrock> during its initialization phase.

 debug()
 info()
 warn()
 error()

The log methods simply call C<Log::Log4perl>'s analogous
methods.

=head2 Log Level

The loggers implemented here should, by default, log at the level
specified by the C<LogLevel> directive I<in your Apache configuration
file>. However, to determine the proper logging level specified by that
directive would first require knowing the context of the request
(which virtual host if any is handling the request) and then parsing
the configuration for that context to find the C<LogLevel>
directive. Since that seems a bit overkill to provide a temporary
logging capability while Bedrock intializes itself (and sets up its
own loggging), the request object will look for an environment
variable of the same name (C<LogLevel>). If there is no C<LogLevel>
set in the environment, the logging level will be set to Apache's
default (C<warn>).

=head2 Log::Log4perl Configuration

As mentioned above, the log methods provided by the C<log> method are
just covers to L<Log::Log4perl>'s methods. L<Log::Log4perl> is also
used by Bedrock's internals for logging and is initialized by
L<Bedrock::Context> during the startup phase. The context object tries
to find a suitable F<log4perl.conf> file to initialize
L<Log::Log4perl> if it has not been initialized already. Since
L<Log::Log4perl> should really only be initialized once, this method
will call C<Bedrock::Context::init_log4perl_logger> with the
C<LogLevel> you have specified.

The L<Log::Log4perl> configuration when logging from this class has
been added to the default F<log4perl.conf> file. Note that the
appender setup by the configuration below only logs the message using
a minimal ConversionPattern since the log format for this phase is
configured by Apache's C<LogFormat> directive.

 log4perl.appender.BedrockCGI=Log::Log4perl::Appender::Screen
 log4perl.appender.BedrockCGI.autoflush=1
 log4perl.appender.BedrockCGI.stderr=1
 log4perl.appender.BedrockCGI.layout=PatternLayout
 log4perl.appender.BedrockCGI.layout.ConversionPattern=%m%n
 log4perl.category.Apache.Request_cgi=WARN, BedrockCGI

=head1 LOGGING METHODS

=head2  get_loglevel

Returns a <Log::Log4perl> log level based on the current logging level
defined by the environment variable C<LogLevel>.

=head2  get_loglevel_str

Returns the logging level as a string.

  debug
  info
  warn
  error

=head2  log

Returns a L<Log::Log4perl> logger.

=head2  debug

 $r->debug('...')

Write log message at C<debug> level.

=head2  info

 $r->info('...')

Write log message at C<info> level.

=head2  warn

 $r->warn('...')

Write log message at C<warn> level.

=head2  error

 $r->error('...')

Write log message at C<error> level.

=head2  log_debug

See L</debug>

=head2  log_error

See L</error>

=head2  log_info

See L</info>

=head2  log_warn

See L</warn>

=cut

