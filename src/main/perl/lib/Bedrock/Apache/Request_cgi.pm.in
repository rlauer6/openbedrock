#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::Request_cgi;

use strict;
use warnings;

use Bedrock::Constants qw(:booleans :chars :log_levels :mime-types);
use Bedrock::Context qw(init_log4perl_logger);
use Data::Dumper;
use English qw(-no_match_vars);
use File::Basename;
use List::Util qw(pairs none pairkeys uniq);

use Role::Tiny::With;
with 'Bedrock::Logger';

use Readonly;

########################################################################
sub new {
########################################################################
  my ( $class, %options ) = @_;

  my $self = bless \%options, $class;

  my $fh = $self->{output_handle};

  if ( !$fh ) {
    $fh = select;

    if ( !ref $fh && ref \$fh ne 'GLOB' ) {
      no strict 'refs';  ## no critic (ProhibitNoStrict)

      $fh = \*{$fh};

      $self->{output_handle} = $fh;
    }
  }

  $self->{LogLevel} //= $ENV{LogLevel} || $ENV{BedrockLogLevel};

  $self->init_logger;

  $ENV{PATH_TRANSLATED} //= $PROGRAM_NAME;

  $self->_add_types_from_config();

  $self->_set_default_mime_type();

  $self->headers_in;

  return $self;
}

########################################################################
sub _add_types_from_config {
########################################################################
  my ($self) = @_;

  my $config = eval {
    require Apache::ConfigParser;

    my $config_file = $ENV{APACHE_CONF_DIR} ? sprintf( '%s/httpd.conf', $ENV{APACHE_CONF_DIR} ) : q{};

    return
      if !$config_file || !-e $config_file;

    return Apache::ConfigParser->new->parsefile($config_file);
  };

  return
    if !$config || $EVAL_ERROR;

  my @types = $config->find_down_directive_names('AddType');

  foreach my $t (@types) {
    my ( $mime_type, @extensions ) = $t->get_value_array;
    @DEFAULT_MIME_TYPES{@extensions} = $mime_type;
  }

  return $self;
}

########################################################################
sub _set_default_mime_type {
########################################################################
  my ($self) = @_;

  my $filename = $self->filename();

  my ( $name, $path, $ext ) = fileparse( $filename, qr/[.][^.]+$/xsm );
  $ext //= '.html';

  my $mime_type = eval {
    return $DEFAULT_MIME_TYPES{$ext}
      if $DEFAULT_MIME_TYPES{$ext};

    require MIME::Types;

    my $mt = MIME::Types->new(
      only_complete   => $TRUE,
      only_iana       => $TRUE,
      skip_extensions => $TRUE
    );

    $ext =~ s/[.]//xsm;

    return $mt->mimeTypeOf($ext);
  };

  return
    if !$mime_type;

  $self->content_type($mime_type);

  return $self;
}

########################################################################
sub init_logger {
########################################################################
  my ($self) = @_;

  my $level = $self->{LogLevel} // $EMPTY;

  if ( none { $level eq $_ } qw( error fatal warn info debug trace ) ) {
    $level = 'error';
  }

  init_log4perl_logger();

  $self->get_logger->level( $LOG4PERL_LOG_LEVELS{$level} );

  return $self;
}

########################################################################
sub get_loglevel {
########################################################################
  my ($self) = @_;

  return $LOG4PERL_LOG_LEVELS{ $self->get_loglevel_str };
}

########################################################################
sub get_loglevel_str {
########################################################################
  my ($self) = @_;

  return $self->{log_level} || 'error';
}

########################################################################
sub log_message {
########################################################################
  my ( $self, $logmsg, $level ) = @_;

  $level = lc $level;

  if ( none { $level eq $_ } keys %LOG4PERL_LOG_LEVELS ) {
    $level = 'debug';
  }

  return $self->get_logger->$level($logmsg);
}

########################################################################
sub _log {
########################################################################
  my ( $level, $self, @args ) = @_;

  my $logger = $self->get_logger;

  # set the level for the handler
  $logger->level( $LOG4PERL_LOG_LEVELS{ $self->{log_level} } );

  return $logger->$level(@args);
}

########################################################################
sub log_trace { my (@args) = @_; return _log( 'trace', @args ) }
sub log_debug { my (@args) = @_; return _log( 'debug', @args ) }
sub log_info  { my (@args) = @_; return _log( 'info',  @args ) }
sub log_warn  { my (@args) = @_; return _log( 'warn',  @args ) }
sub log_error { my (@args) = @_; return _log( 'error', @args ) }
sub log_fatal { my (@args) = @_; return _log( 'fatal', @args ) }

sub debug { goto &log_debug; }
sub error { goto &log_error; }
sub info  { goto &log_info; }
sub warn  { goto &log_warn; }  ## no critic (ProhibitBuiltinHomonyms)

########################################################################

########################################################################
sub log {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  my $logger = $self->get_logger;
  my $level  = $self->{log_level} || 'error';
  $logger->level( $LOG4PERL_LOG_LEVELS{$level} );

  return $logger;
}

########################################################################
sub content_type {
########################################################################
  my ( $self, $type ) = @_;

  return $self->{_content_type}
    if !$type;

  $self->{_content_type} = $type;

  $self->headers_out( 'Content-type' => $type );

  return $type;
}

########################################################################
sub filename {
########################################################################
  my ( $self, $file ) = @_;

  return $self->finfo($file);
}

########################################################################
sub finfo {
########################################################################
  my ( $self, $file ) = @_;

  my $path_xlated = $file || $ENV{PATH_TRANSLATED};

  # roc[k] file?
  if ( $path_xlated && $path_xlated =~ /[.]j?rock?$/xsm ) {
    return $path_xlated;
  }

  # roc[k] file with path info?
  elsif ( $path_xlated && $path_xlated =~ /^(.*[.]j?rock?)(\/.*?)$/xsm ) {
    my $filename = $1;

    if ($2) {
      $ENV{BEDROCK_PATH_INFO} = $2;
    }

    if ( $ENV{BEDROCK_PATH_INFO} ) {
      $ENV{BEDROCK_PATH_TRANSLATED} = sprintf '%s%s', $ENV{DOCUMENT_ROOT}, $ENV{BEDROCK_PATH_INFO};
    }

    return $filename;
  }

  # html or other file?
  elsif ( $ENV{PATH_INFO} && $ENV{PATH_INFO} =~ /^(.*)([.][^.]+)$/xsm ) {
    return $path_xlated;
  }

  # Bedrock controller? directory?
  else {
    # takin' a stab here, might be a handler
    if ( $ENV{PATH_INFO} ) {
      my ( $file, $dir ) = fileparse( $ENV{PATH_INFO} );

      return $file;
    }
  }

  return $ENV{PATH_TRANSLATED};
}

########################################################################
sub uri {
########################################################################
  return $ENV{PATH_INFO};
}

########################################################################
sub headers_in {
########################################################################
  my ( $self, $header, $value ) = @_;

  if ( !$self->{_headers_in} ) {

    my @http_vars = map { $_ => $ENV{$_} } grep {/^HTTP_/xsm} keys %ENV;

    my %headers;

    foreach my $p ( pairs @http_vars ) {
      my ( $key, $value ) = @{$p};
      $key =~ s/^HTTP_//xsm;

      $headers{ uc $key } = $value;
    }

    $self->{_headers_in} = \%headers;
  }

  if ( $header && $value ) {
    $self->{_headers_in}->{$header} = $value;
  }
  elsif ($header) {
    return $self->{_headers_in}->{ uc $header };
  }

  return $self->{_headers_in};
}

########################################################################
sub is_cgi          { return $TRUE }
sub header_in       { goto &headers_in; }
sub header_out      { goto &cgi_header_out; }
sub headers_out     { goto &cgi_header_out; }
sub err_headers_out { goto &cgi_header_out; }
sub method          { return $ENV{REQUEST_METHOD}; }
########################################################################

########################################################################
sub cgi_header_out {
########################################################################
  my ( $self, @headers ) = @_;

  $self->{headers} //= [];

  push @{ $self->{headers} }, @headers;

  return $self->_print_headers;
}

########################################################################
sub _print_headers {
########################################################################
  my ($self) = @_;

  my $headers_out = $EMPTY;

  # get uniq headers (preserve order)
  my @headers = uniq pairkeys @{ $self->{headers} };

  # last header wins...this ensures that if we replace a header it
  # wins
  my %final_headers_out = @{ $self->{headers} };

  foreach my $header (@headers) {
    my $value = $final_headers_out{$header};
    $headers_out .= "$header: $value\r\n";
  }

  return $headers_out;
}

########################################################################
sub send_http_header {
########################################################################
  my ($self) = @_;

  if ( $self->{headers} ) {
    $self->print( $self->_print_headers, "\r\n" );
  }

  $self->{headers} = undef;

  return;
}

########################################################################
sub close {  ## no critic (ProhibitBuiltinHomonyms, ProhibitAmbiguousNames)
########################################################################
  my ($self) = @_;

  return close $self->{output_handle};
}

########################################################################
sub print {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  my $fh = $self->{output_handle};

  return print {$fh} @args;
}

1;

__END__

=pod

=head1 NAME

Apache::Bedrock::Request_cgi - A request object suitable for use by
Bedrock when running under mod_cgi

=head1 SYNOPSIS

 # CGI handlers
 Action        bedrock-cgi  /cgi-bin/bedrock.cgi virtual
 
 AddHandler    bedrock-cgi .rock .jrock
 
 # Bedrock - mod-perl for .roc (if mod_perl)
 <IfModule mod_perl.c>
   PerlRequire @configdir@/startup.pl
   AddHandler    perl-script .roc .jroc
   PerlHandler   Apache::Bedrock
 </IfModule>
 
 <IfModule !mod_perl.c>
   AddHandler  bedrock-cgi .roc .jroc
 </IfModule>

=head1 DESCRIPTION

Provides a request object suitable for use by
L<Bedrock::Apache::Bedrock> when running under C<mod_cgi>. Implements
enough of the the methods found in L<Apache2::RequestRec> to support
Bedrock running under Apache as a CGI script (C<bedrock.cgi>).

=head2 Why Run Bedrock as under C<mod_cgi>?

Bedrock, like other web applications written in Perl can suffer
unacceptable latency during startup due to the interpretted nature of
Perl. Before Perl can run your script it needs to load modules used by
your script and compile the code into its internal representation for
execution.  This compilation stage, along with the loading of Perl
modules, may make startup performance unacceptable. To mitigate the
startup times associated with Perl code C<mod_perl> was introduced
many years ago. By using C<mod_perl>, code is loaded once into the
Apache child and remains there until that child is killed and
replaced.  So why use C<mod_cgi>?

While C<mod_perl> does mitigate performance issues associated with
startup times, C<mod_perl> has some downsides.  Along with introducing
some additional requirements and complexity to your Apache
configuration, more seriously, memory consumption of Apache children
can increase subtantially over the lifetime of an individual Apache
process.  To combat that, when running under C<mod_perl> web
administrators often set the "MaxRequestPerChild" value for Apache
processes to a relatively low value to ensure that bloated processes get
killed off and respawned periodically.

Running under C<mod_cgi> ensures that all of the memory associated
with a request is returned to the operating system immediately after
the process exits.  Additionally, if you are developing an application
where you might frequently modify Perl modules you should be
aware that C<mod_perl> will not automatically reload your modules when
they change. Once they have been loaded into the child process, they
remain static until that process is killed and respawned.

To summarize, you may want to run Bedrock under C<mod_cgi> if...

=over 5

=item You are developing your application and are making frequent
changes to your Perl modules

If you make changes to your Perl modules while running under
C<mod_perl> you must do one of two things:

=over 10

=item 1. use Apache2::Reload

See L<https://perl.apache.org/docs/2.0/api/Apache2/Reload.html>

=item 2. Restart your server

Restarting your server typically is done using a helper included with
Apache although there are several ways to do this.

 apachectl graceful

 httpd -k graceful

If Apache is running started a the root user, this may work for you.

 kill -USR1 $(ps -ef | grep httpd | grep root | awk '{print $2}' | head -1)

=back

=item Your processes consume large amounts of memory on each request

Set the C<MaxRequestsPerChild> to a relatively low value - for example
1000. This will tell Apache to kill the child process after serving
1000 requests and replace this child with a new process.

You can monitor the usage of memory by the children using C<top>.

 top -p `pgrep -d "," httpd`

=item Your application needs to fork

I<While it is possible to run and communicate with a process spawned
from C<mod_perl> handlers use C<Apache2::SubProcess> it is not the
same as forking from a CGI script running under C<mod_cgi>.>

A typical use of forking with a Perl script involves a scenario where
you may have a long running process and want to process the request
asynchronously. Apache web servers typically are configured with a
Timeout parameter that prevent long running processeses from
potentially creating resource depletion on the server that may result
in blocked connections.  This may can happen for example when the
C<MaxRequestWorkers> limit is hit because processes have not completed
and released the connection.

This is the the strategy of many DDOS attacks if they can identify a
long running process.  Sending multiple requests rapidly would
overwhelm your server and prevent any new connections from being
established.

Using a CGI in this case would allow you to fork your process and
immediately return a response to the client, freeing the
connection.

I<Of course, this does nothing from preventing multiple
requests of this type that still may consume all of your server's
resource, so a different strategy should be used for prevening too
many simulataneous requests from the same client.>

=back

=head1 METHODS AND SUBROUTINES

=head2  new

 new(options)

Instantatiates a new request object.

=over 5

=item LogLevel

Should be one of the log levels correspending to Apache's log levels:

 error
 warn
 info
 debug
 trace

=item output_handle

File handle to which output will be directed.

default: currently selected file handle (typically STDERR)

=back

=head2  close

Closes the output handle.

=head2  filename

 filename([filename])

Sets and/or returns the absolute filename of the request.

defautl: $ENV{PATH_TRANSLATED}

=head2  finfo

 Same as C<filename>.

=head2  is_cgi

Returns a 1 indicating you running under C<mod_cgi>.

=head2 method

Returns the HTTP method of the request ($ENV{REQUEST_METHOD}).

=head2  print

 print(content)

Outputs to content to the current file handle defined by
C<output_handle>.

=head2  uri

Returns the requested resources ($ENV{PATH_INFO}).

=head1 HEADER METHODS

=head2  content_type

Set or return the Content-type header.

=head2 cgi_header_out (deprecated)

See L</headers_out>

=head2  headers_out

 headers_out( header, value, ...)

 my $headers = $r->headers_out();

 $headers_out->('Accept-Ranges' => 'bytes');

Sets or returns the HTTP headers.

=head2  header_out (deprecated)

See L</headers_out>

=head2  err_headers_out

See C</headers_out>

=head2  headers_in

Returns the HTTP headers received from client.

=head2  send_http_header

Outputs the HTTP headers.

=head1 LOGGING

The request object implements a set of methods suitable for use by
L<Bedrock::Apache::Bedrock> including the C<log()> method found in
L<Apache2::RequestRec>.

C<log()> method returns a logger with the methods below that are
used by L<Bedrock::Apache::Bedrock> during its initialization phase.

 debug()
 info()
 warn()
 error()

The log methods simply call C<Log::Log4perl>'s analogous
methods.

=head2 Log Level

The loggers implemented here should, by default, log at the level
specified by the C<LogLevel> directive I<in your Apache configuration
file>. However, to determine the proper logging level specified by that
directive would first require knowing the context of the request
(which virtual host if any is handling the request) and then parsing
the configuration for that context to find the C<LogLevel>
directive. Since that seems a bit overkill to provide a temporary
logging capability while Bedrock intializes itself (and sets up its
own loggging), the request object will look for an environment
variable of the same name (C<LogLevel>). If there is no C<LogLevel>
set in the environment, the logging level will be set to Apache's
default (C<warn>).

=head2 Log::Log4perl Configuration

As mentioned above, the log methods provided by the C<log> method are
just covers to L<Log::Log4perl>'s methods.

L<Log::Log4perl> is also used by Bedrock's internals for logging and
is initialized by L<Bedrock::Context> during the startup phase. The
context object tries to find a suitable F<log4perl.conf> file to
initialize C<Log::Log4perl> if C<Log::Log4perl> has not been initialized
already. Since C<Log::Log4perl> should really only be initialized
once, this method will call C<Bedrock::Context::init_log4perl_logger>
with the C<LogLevel> you have specified.

The L<Log::Log4perl> configuration when logging from this class
(C<Apache::Request_cgi>) has been added to the default
F<log4perl.conf> file. Note that the appender setup by the
configuration below only logs the message using a minimal
ConversionPattern. The log format prior to C<Bedrock::Context>
initializing C<Log::Log4perl> is configured by Apache's C<LogFormat>
directive.

 log4perl.appender.BedrockCGI=Log::Log4perl::Appender::Screen
 log4perl.appender.BedrockCGI.autoflush=1
 log4perl.appender.BedrockCGI.stderr=1
 log4perl.appender.BedrockCGI.layout=PatternLayout
 log4perl.appender.BedrockCGI.layout.ConversionPattern=%m%n
 log4perl.category.Apache.Request_cgi=WARN, BedrockCGI

=head1 LOGGING METHODS

=head2  get_loglevel

Returns a <Log::Log4perl> log level based on the current logging level
defined by the environment variable C<LogLevel>.

=head2  get_loglevel_str

Returns the logging level as a string.

  trace
  debug
  info
  warn
  error

=head2 log

Returns a L<Log::Log4perl> logger.

=head2 trace

 $r->trace('...')

Write log message at C<trace> level.

=head2 debug

 $r->debug('...')

Write log message at C<debug> level.

=head2 info

 $r->info('...')

Write log message at C<info> level.

=head2 warn

 $r->warn('...')

Write log message at C<warn> level.

=head2 error

 $r->error('...')

Write log message at C<error> level.

=head2 log_trace

See L</trace>

=head2 log_debug

See L</debug>

=head2 log_error

See L</error>

=head2 log_info

See L</info>

=head2 log_warn

See L</warn>

=cut

=head1 AUTHOR

Jay Sridhar

Rob Lauer - <bigfoot@cpan.org>
