#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::Request_cgi;

use Bedrock::Log;

sub log_error {
  my $self = shift;
  unshift @_, MSG_ERROR;
  goto &LOG_MESSAGE;
}

sub warn {
  my $self = shift;
  unshift @_, MSG_WARNING;
  goto &LOG_MESSAGE;
}

sub debug {
  my $self = shift;
  unshift @_, MSG_DEBUG;
  goto &LOG_MESSAGE;
}

sub info {
  my $self = shift;
  unshift @_, MSG_INFO;
  goto &LOG_MESSAGE;
}

sub error {
  goto &log_error;
}

sub log {
  return $_[0];
}

sub content_type {

  for ( $ENV{PATH_TRANSLATED} ) {
    /\.roc/ && do {
      return 'text/html';
    };
    /\.jroc/ && do {
      return 'application/json';
    };
  }

  'text/html';
}

sub filename {
  return $_[0]->finfo;
}

sub finfo {
  my $self = shift;

  my $path_xlated = $ENV{PATH_TRANSLATED};

  # roc[k] file?
  if ( $path_xlated =~ /\.rock?$/ ) {
    return $path_xlated;
  }

  # roc[k] file with path info?
  elsif ( $path_xlated =~ /^(.*?\.rock?)\/(.*?)$/ ) {
    my $filename = $1;
    $ENV{BEDROCK_PATH_INFO} = $2 if $2;
    $path_xlated =~ s/$ENV{BEDROCK_PATH_INFO}//;
    $ENV{BEDROCK_PATH_TRANSLATED} = $path_xlated;

    return $filename;
  }

  # html or other file?
  elsif ( $ENV{PATH_INFO} =~ /^(.*)(\.[^\.]*)$/ ) {
    return $path_xlated;
  }

  # Bedrock controller? directory?
  else {
    return undef;    # could be Bedrock controller
  }
}

sub uri {
  return $ENV{PATH_INFO};

  my $path_uri = $ENV{PATH_TRANSLATED};

  # Perhaps this is a 'permalink'
  if ( $path_uri =~ /\.rock?$/ ) {
    return $path_uri;
  }
  else {
    $path_uri =~ /^(.*?\.rock?)\/(.*?)$/;

    my $uri = $1;

    $path_uri =~ s/$ENV{BEDROCK_PATH_INFO}//;

    $ENV{BEDROCK_PATH_TRANSLATED} = $path_uri;

    #	$ENV{PATH_TRANSLATED} = $path_xlated;

    return $uri;
  }

  return $uri;
}

sub headers_in {
  ();
}

sub header_out {
  &cgi_header_out;
}

sub err_headers_out {
  return {};
}

sub cgi_header_out {
  my $self = shift;

  my ( $header, $value ) = @_;
  $self->{'headers'} .= "$header: $value\r\n";
}

sub send_http_header {
  my $self = shift;

  $self->debug(sprintf("[%s]: Headers are:", (caller(0))[3]));
  $self->debug(sprintf("[%s]: %s", "$self->{'headers'}") );

  print $self->{'headers'}, "\r\n";
  $self->{'headers'} = undef;
}

sub close {
  close STDOUT;
}

sub print {
  my $self = shift;

  print @_;
}

sub new {
  my $class = shift;
  bless {}, $class;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.17  2012/08/06 15:48:18  lauerrc
# - default mime-type for .jroc/.jrock application/json
#
# Revision 1.16  2012/05/21 20:51:57  eutl420
# - missing method ->log->error()
#
# Revision 1.15  2012/02/24 19:34:41  eutl420
# - removed deprecated methods args(), content()
# - tweaked log message in sent_http_headers()
#
# Revision 1.14  2011/12/28 17:15:11  eutl420
# - in send_http_header(). log message using debug() and reset headers after output
#
# Revision 1.13  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.12  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.11  2010/11/29 15:57:52  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.10  2009/12/30 00:18:00  rlauer
# provide compatibility method err_headers_out
#
# Revision 1.9  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.8  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.7  2008/09/04 18:47:09  rlauer
# - uri was experimental and broke functionality associated with using
#   tagx_apps.xml.  Code below return in the uri subroutine could be
#   revisited in the future.  The idea was to provide some additional information
#   to Bedrock pages via environment variables.
#
# Revision 1.6  2008/02/28 18:14:39  rlauer
# Applying Rob's patches to make Bedrock work on Apache 2.x
# (plus a few other obvious bug fixes).
#
# Revision 1.5  2005/02/22 20:12:38  aviert
# The following changes have been taken from the current production environment, located
# on cjx-devl. There are minor differences between what's currently in the repository
# and what's there, due to ad-hoc bug fixes that never made their way back into cvs.
#
# Revision 1.4  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2001/01/09 20:11:34  sridhar
# Logging the headers just before they are sent out.
#
# Revision 1.2  2000/12/15 16:23:25  sridhar
# Method `headers_in()' returns an empty list to eliminate bogus warning
# in Header.
#
# Revision 1.1  2000/12/12 18:59:52  sridhar
# A module which mimicks the Apache request object for the CGI
# environment.
#
#

