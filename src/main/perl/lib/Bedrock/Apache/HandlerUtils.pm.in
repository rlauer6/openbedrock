package Bedrock::Apache::HandlerUtils;
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Role::Tiny;

use Bedrock::Apache::Constants qw(:http);
use Bedrock::Constants qw(:chars :booleans);
use Bedrock::Context qw(parse_cookie);
use Bedrock::Handler qw(bind_module);
use BLM::DBHandler qw(easy_connect);

use Data::Dumper;
use DBI;
use English qw(-no_match_vars);
use File::Basename;
use List::Util qw(pairs any);

########################################################################
sub get_cookie {
########################################################################
  my ( $r, $cookie_name ) = @_;

  my $cookie = $r->headers_in->{Cookie} || $ENV{HTTP_COOKIE};
  $cookie //= $EMPTY;

  my $cookies = eval { parse_cookie($cookie); };

  if ($EVAL_ERROR) {
    $r->log->error( sprintf "ERROR parsing cookies: [%s]\n%s\n", $cookie, $EVAL_ERROR );
    die $EVAL_ERROR;
  }

  my $cookie_value = $cookies->{$cookie_name} ? $cookies->{$cookie_name} : undef;

  $r->log->debug(
    Dumper(
      [ cookies     => $cookies,
        cookie_name => $cookie_name,
        cookie      => $cookie
      ]
    )
  );

  return $cookie_value;
}

########################################################################
sub get_session_cookie {
########################################################################
  my ($r) = @_;

  return get_cookie( $r, 'session' );
}

########################################################################
sub check_session {
########################################################################
  my ( $bedrock_handler, $verify_user ) = @_;

  my $r = $bedrock_handler->request;

  my $session_id = get_session_cookie($r);

  if ( !$session_id ) {
    $r->log->error('no session cookie');
    die "no or expired session\n";
  }

  return validate_session( $bedrock_handler, $verify_user );
}

########################################################################
sub bind_session {
########################################################################
  my ( $bedrock_handler, $validate ) = @_;

  my $r = $bedrock_handler->request;

  my $config = $bedrock_handler->get_config;

  my $session_manager = $config->{BEDROCK_SESSION_MANAGER} ? $config->{BEDROCK_SESSION_MANAGER} : 'UserSession';

  $r->log->warn("no BEDROCK_SESSION_MANAGER defined in configuration, using BLM::Startup::UserSession\n");

  my $module_config = $config->get_module_config($session_manager);

  die "no session manager ($session_manager) defined in configuration\n"
    if !$module_config;

  my $ctx = Bedrock::Context->new(
    request => $r,
    config  => $config,
  );

  my $session = eval {
    my $module = bind_module(
      config  => $module_config,
      module  => 'BLM::Startup::' . $session_manager,
      context => $ctx,
    );

    return $module;
  };

  die sprintf "unable to bind BLM::Startup::%s module\n%s", $session_manager, $EVAL_ERROR
    if !$session;

  if ( !defined $validate ) {
    $validate = $module_config->{session_files}->{verify_user};
  }

  die "invalid session or session timed out\n"
    if $validate && !$session->{username};

  return $session;
}

########################################################################
sub validate_session { goto &bind_session; }
########################################################################

########################################################################
sub dump_session_info {
########################################################################
  my ( $bedrock_handler, $session ) = @_;

  my $r = $bedrock_handler->request;

  $r->log->debug( sprintf 'SESSION_DIR......[%s]', $bedrock_handler->get_config->{SESSION_DIR} );
  $r->log->debug( sprintf 'session..........[%s]', $session );
  $r->log->debug( sprintf 'filename.........[%s]', $r->filename );

  return;
}

########################################################################
sub dump_request_info {
########################################################################
  my ($r) = @_;

  $r->log->debug( __PACKAGE__ . ' started.' );

  $r->log->debug( sprintf 'filename.........[%s]', $r->filename );
  $r->log->debug( sprintf 'URI..............[%s]', $r->uri );
  $r->log->debug( sprintf 'Cookie...........[%s]', $r->headers_in->{Cookie} // $EMPTY );
  $r->log->debug( sprintf 'PATH_INFO........[%s]', $ENV{PATH_INFO}          // $EMPTY );
  $r->log->debug( sprintf 'PATH_TRANSLATED..[%s]', $ENV{PATH_TRANSLATED}    // $EMPTY );
  $r->log->debug( sprintf 'HTTP_COOKIE......[%s]', $ENV{HTTP_COOKIE}        // $EMPTY );

  return;
}

########################################################################
sub get_session_file_info { goto &get_file_info; }
########################################################################
sub get_file_info {
########################################################################
  my ( $r, @args ) = @_;

  my $options;

  if ( !ref $args[0] ) {
    $options = { verify => $args[0], verify_user => $args[1] };
  }
  else {
    $options = $args[0];
  }

  my ( $verify, $verify_user, $default_ext ) = @{$options}{qw(verify verify_user ext)};

  if ( $default_ext && $default_ext !~ /^[.]/xsm ) {
    $default_ext = ".$default_ext";
  }

  dump_request_info($r);

  # filename (however actual file will exist under user's session directory)
  my ( $name, $path, $ext ) = fileparse( $r->filename, qr/[.]([^.]*)$/xsm );
  $ext //= $default_ext;

  my $bedrock_handler = Bedrock::Handler->new($r);

  my $session = check_session( $bedrock_handler, $verify_user );

  my $session_dir = $session->get_session_dir;

  my $filename = sprintf '%s/%s%s', $session_dir, $name, $ext;

  dump_session_info( $bedrock_handler, $session );

  my @finfo = stat $filename;

  my $file_info = {
    session     => $session,
    session_dir => $session_dir,
    filename    => $filename,
    config      => $bedrock_handler->get_config(),
    mtime       => $finfo[9],
  };

  return
    if $verify && !verify_file( $r, $filename );

  return $file_info;
}

########################################################################
sub verify_file {
########################################################################
  my ( $r, $filename ) = @_;

  if ( !-e $filename ) {
    $r->log->error( sprintf 'file [%s] not found', $filename );
    die "file not found\n";
  }
  elsif ( !-r $filename ) {
    $r->log->error( sprintf 'file [%s] is not readable', $filename );
    die "permission error\n";
  }

  $r->log->debug( sprintf 'file [%s] found', $filename );

  return $TRUE;
}

########################################################################
sub is_mod_perl {
########################################################################
  return defined $ENV{MOD_PERL};
}

########################################################################
sub run_rules {
########################################################################
  my (%params) = @_;

  my ( $rules, $args ) = @params{qw(rules args)};

  foreach my $r ( pairs @{$rules} ) {
    return $r->[0]
      if $r->[1]->( @{$args} );
  }

  return;
}

########################################################################
sub set_error_status {
########################################################################
  my ( $r, $err ) = @_;

  $r->log->error($err);

  my @rules = (
    $NOT_FOUND         => sub { return $_[0] =~ /not\sfound/xsm },
    $FORBIDDEN         => sub { return $_[0] =~ /not\sreadable/xsm },
    $HTTP_UNAUTHORIZED => sub { return $_[0] =~ /expired\ssession/xsm },
    $SERVER_ERROR      => sub { return $_[0] =~ /server\serror/xsm },
    $SERVER_ERROR      => sub { return 1; },
  );

  my $status = run_rules( rules => \@rules, args => [$err] );

  if ( is_mod_perl() ) {
    $r->status($status);
  }
  else {
    $r->cgi_header_out( 'Status', $status );
  }

  $r->send_http_header;

  return $status;
}

1;

__END__

=pod

=head1 NAME

Bedorck::Apache::HandlerUtils - role for providing some useful methods used by multiple handlers

=head1 SYNOPSIS

 use Role::Tiny::With;
 with 'Bedrock::Apache::HanderUtils';

=head1 DESCRIPTION

A role for providing some methods used by multiple mod_perl handlers
for implementing Bedrock based applications.

=head1 METHODS AND SUBROUTINES

=head2 check_session

 check_session(handler, verify-user)

Checks for a session cookie and validates the cookie against the
session table. This methods requires a properly configured
L<BLM::Startup::UserSession> plugin.

Throws an exception if the cookie is missing or expired.

See L</validate_session>.

=head2 dump_session_info

 dump_session_info($bedrock_handler, $session);

Dumps the session information to the Apache log in debug mode.

=head2 dump_request_info

 dump_request_info($handler)

Dumps the request information to the Apache log in debug mode.

=head2 get_cookie

 get_cookie(handler, cookie-name)

Retrieves the value of a single cookie.

=head2 get_file_info

 get_file_info(request, verify, verify-user)

Retrieve a hash of metadata associated with the filename in the
request object.

=over 5

=item session

The session hash. 

=item session_dir

The session directory. This is the directory associated with the
session, not just the root. If all you want is the root of the session
directory, use the C<Bedrock::Config> object exposed as the C<config>
element of this hash.

  my $file_info = get_file_info($handler);
  my $config = $file_info->{config};
  my $base_session_dir = $config->get('SESSION_DIR');

=item filename

The fully qualified path to the file in the requests object.

=item mtime

The modification time in seconds in seconds since the epoch.

=item config

The configuration object (an instance of Bedrock::Config) which
contains Bedrock's configuation.

=back

=head2 get_session_cookie

 get_session_cookie(handler);

 Returns the session cookie.  See L<get_cookie>.

=head2 get_session_file_info

Another name for L</get_file_info>.

=head2 verify_file

 verify_file(handler, filename)

Verifies that C<filename> exists and is readable. Throws an exception
of the file does not exist or is not readable.

=head2 is_mod_perl

Return a boolean indicating whether C<mod_perl> is enabled. This
method relies on the presence of the C<MOD_PERL> environment variable.

=head2 set_error_status

 set_error_status(handler, error)

Sets and outputs the HTTP status based on the error string. Uses a
regexp to convert the string to an error status.

  NOT_FOUND         =>  /not\sfound/
  FORBIDDEN         =>  /not\sreadable/
  HTTP_UNAUTHORIZED =>  /expired\ssession/
  SERVER_ERROR      =>  /server\serror/

Returns SERVER_ERROR if the none of the above are found.

=head2 validate_session

 validate_session(handler, verify-user)

Returns the session object (C<BLM::Startup::Session).

This method is called for you by L</check_session> so you should not
need to invoke this method. If C<verify-user> is not defined or set to
1 an exception will be thrown if there is no username in the
session. In other words, the default value for C<verify-use> is true.

=over 5

=item handler

 A C<Bedrock::Handler> object.

=item verify-user

Boolean that indicates if an exception should be thrown if there is no
username in the session. This typically indicates that the session has
timed out.

default: true

=back

=head1 SEE ALSO

L<Role::Tiny>, L<Role::Tiny::With>, L<Bedrock::Config>

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=cut
