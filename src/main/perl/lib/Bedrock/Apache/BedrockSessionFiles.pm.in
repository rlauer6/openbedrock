package Apache::BedrockSessionFiles;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Role::Tiny::With;
with 'Bedrock::Apache::HandlerUtils';

use APR::Finfo ();
use APR::Const -compile => qw(FINFO_NORM);

use Bedrock::Constants qw(:booleans);
use Bedrock::Apache::Constants qw(:all);
use English qw(-no_match_vars);
use List::Util qw(pairs);

use Readonly;

Readonly our $BUFFER_SIZE => 4 * 1024;

our $VERSION = '@PACKAGE_VERSION@';

########################################################################
sub handler {
########################################################################
  my ($r) = @_;

  $r->log->info('BedrockSessionFiles started...');

  my $method = $r->method();

  return $HTTP_BAD_REQUEST
    if $method !~ /^(?:GET|HEAD)$/xsm;

  my $uri = $r->uri();

  # prevent access of files...without this anyone with the session
  # cookie value could potentially read the files in the session directory
  my @parts = grep {/./xsm} split /\//xsm, $uri;

  return $HTTP_BAD_REQUEST
    if @parts != 2;

  my $verify_file = $ENV{BEDROCK_SESSION_FILES_VERIFY_FILE};
  my $verify_user = $ENV{BEDROCK_SESSION_FILES_VERIFY_USERS};

  my $file_info = eval { return get_session_file_info( $r, $verify_file, $verify_user ); };

  return set_error_status( $r, $EVAL_ERROR )
    if !$file_info || $EVAL_ERROR;

  my $session = $file_info->{session};

  my $timeout = $session->config->{session_files}->{ttl} // $ENV{BEDROCK_SESSION_FILES_TTL};

  my $filename = $file_info->{filename};

  if ($timeout) {
    my $mtime    = $file_info->{mtime};
    my $file_age = time - $mtime;

    if ( $file_age > $timeout ) {
      unlink $filename;

      return $NOT_FOUND;
    }
  }

  if ( is_mod_perl() ) {

    $r->filename($filename);

    # update Apache's metadata
    $r->finfo( APR::Finfo::stat( $filename, APR::Const::FINFO_NORM, $r->pool ) );

    $r->handler('default-handler');
    $r->set_handlers( PerlResponseHandler => [] );

    return Apache2::Const::OK;
  }

  return head( $r, $filename )
    if $method eq 'HEAD';

  my $ranges = $r->headers_in->{'Range'};

  my ( $name, $path, $ext ) = fileparse( $filename, qr/[.][^.]+$/xsm );

  return send_file( $r, $filename )
    if !$ranges;

  return send_file_with_ranges( $r, $filename, $ranges );
}

########################################################################
sub send_file_with_ranges {
########################################################################
  my ( $r, $file, $ranges ) = @_;

  my $byterange = check_byterange( $r, $ranges );

  return $HTTP_BAD_REQUEST
    if !$byterange;

  $r->status($HTTP_PARTIAL_CONTENT);

  # print other header info
  my $boundary = 'multipart-boundary';

  if ( $r =~ /Apache2/xsm ) {
    $r->headers_out->add( 'Accept-ranges' => 'bytes' );
    $r->headers_out->add( 'Content-type'  => "multipart/x-byteranges; boundary=$boundary" );
  }
  else {
    $r->headers_out( 'Accept-ranges' => 'bytes' );
    $r->headers_out( 'Content-type'  => "multipart/x-byteranges; boundary=$boundary" );
  }

  $r->send_http_header();

  open my $fh, '<', $file
    or die "could not open $file for reading\n";

  send_ranges(
    $r,
    byterange => $byterange,
    boundary  => $boundary,
    fh        => $fh,
    size      => -s $file,
  );

  close $fh;

  return $OK;
}

########################################################################
sub send_ranges {
########################################################################
  my ( $r, %args ) = @_;

  my ( $byterange, $boundary, $size, $fh ) = @args{qw(byterange boundary size fh)};

  my $buffer;

  foreach my $range ( @{$byterange} ) {

    my ( $first_byte, $last_byte ) = split /[\-]/xsm, $range;

    my $i = index $range, q{-};

    if ( !index $range, q{-} ) {
      $first_byte = -1;
    }

    if ( $first_byte < 0 ) {
      $first_byte = $size - $last_byte;
      $last_byte  = $size;
    }

    my $nbytes = $last_byte - $first_byte + 1;

    $r->print("\n--$boundary\n");

    $r->print( sprintf "Content-type: %s\n", $r->content_type );

    $r->print( sprintf "Content-Range: bytes %d-%d/%d\n\n", $first_byte, $last_byte, $size );

    seek $fh, $first_byte, 0;
    read $fh, $buffer, $nbytes;

    $r->print($buffer);
  }

  $r->print("\n--$boundary--\n");

  return;
}

########################################################################
sub send_file {
########################################################################
  my ( $r, $file ) = @_;

  my $size = -s $file;

  my ( $name, $path, $ext ) = fileparse( $file, qr/[.][^.]+$/xsm );

  # respond that we can do ranges (for next time possibly)

  $r->headers_out( 'Accept-ranges'       => 'bytes' );
  $r->headers_out( 'Content-Length'      => $size );
  $r->headers_out( 'Content-Disposition' => sprintf 'inline; attachment; filename="%s.%s";', $name, $ext );

  $r->send_http_header;

  my $buffer;

  open my $fh, '<', $file;

  while ( read $fh, $buffer, $BUFFER_SIZE ) {
    $r->print($buffer);
  }

  close $fh;

  return $OK;
}

########################################################################
sub check_byterange {
########################################################################
  my ( $r, $ranges ) = @_;

  $ranges =~ s/bytes=//xsm;

  # check that the ranges are properly formatted
  my @byterange_check = split /[\-,=]/xsm, $ranges;

  foreach my $range ( pairs @byterange_check ) {
    my ( $first_byte, $last_byte ) = @{$range};

    if ( ( $first_byte > 0 && $last_byte < 0 )
      || ( $first_byte < 0 && $last_byte > 0 )
      || ( $first_byte > $last_byte ) ) {
      $r->log->error( sprintf 'The query range (%s - %s ) is malformed.', $first_byte, $last_byte );
      return;
    }
  }

  return [ split /[,]/xsm, $ranges ];
}

########################################################################
sub head {
########################################################################
  my ( $r, $filename ) = @_;

  my $mtime = ( stat $filename )[9];

  my $last_modified = time2str($mtime);

  $r->headers_out( 'Content-length', -s $filename );
  $r->headers_out( 'Last-Modified',  $last_modified );
  $r->headers_out( 'Accept-Ranges',  'bytes' );

  $r->send_http_header;

  return $OK;
}

1;

__END__

=pod

=head1 NAME

Apache::BedrockSessionFiles - serve files from user sessions

=head1 SYNOPSIS

 Alias /session /var/www/session

 <Directory /var/www/session/>
   AcceptPathInfo On
   Options -Indexes
 
   <IfModule mod_perl.c>
     SetHandler perl-script
     PerlFixupHandler Apache::BedrockSessionFiles
   </IfModule>
   
 </Directory>

=head1 DESCRIPTION

Implements an Apache handler that serves files from a Bedrock session
directory.  This is typically used when a web application wishes to serve
a private file to a user, or make a file available for only a short
period of time to a specfic user session.  A typical URI for this type
of asset might look like:

  /session/foo.html

In other words, the asset would be protected since the same URL would
not access the asset for anyone other than the requestor since it is
specific to their session.

=head1 METHODS AND SUBROUTINES

=head1 NOTES

By using the C<copy2session()> method of the C<$session> object, the
developer copies a file to a userE<039>s session directory and
redirects the user to the appropriate URI.

 <null $session.copy2session('single-use.pdf')>
 <null $header.see_other('/session/single-use.pdf')>

I<Files in session directories are inaccessible after the session
expires.  Session directories are removed after the sessions have expired.>

=head2 Setting Up the Apache Handler

If you want to use the CGI version instead of the C<mod_perl> version
of the handler, copy the CGI handler to your F</cgi-bin>
directory. F<bedrock-session-files.cgi> is distributed as part of
Bedrock and can be found at
F</usr/lib/bedrock/cgi-bin/bedrock-session-files.cgi>.

Setup the handler in your Apache configuration file as shown below
when C<mod_perl> is not being used:

  Action bedrock-session-files /cgi-bin/bedrock-session-files.cgi virtual

  Alias /session /var/www/vhosts/mysite/session

  <Directory /var/www/vhosts/mysite/session>
    AcceptPathInfo On
    Options -Indexes
  
    SetHandler bedrock-session-files
  
  </Directory>

To use the C<mod_perl> version of the session file handler we invoke
our handler during the C<PerlFixupHandler> phase. This is one the
phases that will allow us to successfully remap the filename and let
Apache serve the file normally. We do this in this phase to take
advantage of Apache's C<mod_mime> which will send the correct header
based on the file contents as well as any other functionality Apache
might provide when serving files.

We could of course, implement a response handler that would determine
the mime type, send the correct header, read the file from syste and
send the file to the client. But Apache can do all of that better.

We also use this phase to isolate the handler's scope at the directory
level. It is possible to use an earlier phase
(C<PerlMaptToStorageHandler>) but doing so would require we install
the handler at the server level.

=head2 Security Considerations

Using a session directory opens up the possibility of access by an
actor that is able to hijack your session. To reduce the window of
opportunity for illegal access there are a few things you can do.

=over 5

=item * Set a low TTL for session files.

In your configuration for C<BLM::Startup::UserSession> set a value for
C<ttl> in the C<session_files> section of the configuration.

 <object name="session_files">
   <scalar name="ttl">60</scalar>
 </object>

...or set the environment variable C<BEDROCK_SESSION_FILES_TTL> in the Apache configuration.

 PerlSetEnv BEDROCK_SESSION_FILES_TTL 60

Any access of the file after the timeout will result in a 404 error.

=item * Disable caching

Configure the session directory so that caching is disabled.

 <Directory /var/www/bedrock/session>
     <IfModule mod_headers.c>
         Header set Cache-Control "no-store, no-cache, must-revalidate, max-age=0"
         Header set Pragma "no-cache"
         Header set Expires "0"
     </IfModule>
 </Directory>

=item * Avoid placing sensitive data in the session directory

=back

=head2 Anonymous Sessions

The module was designed to serve files from a logged in user's session
directory. The idea being that only the user that belongs to that
session can view the file.  Accordingly, the class will validate the
session via the cookie and then see if the session contains a
c<username> element.  If it does not, then the user has been logged
out and the handler will abort with a 401.

There are use cases however for serving files from an anonymous user's
session. If you want to allow this capability you can add
C<verify_user> to the C<session_files> section of the
C<BLM::Startup::UserSession> configuration with a value of 0. This
will disable the check for a logged in user.

You can also set the environment variable
BEDROCK_SESSION_FILES_VERIFY_USER ot a true value in Apache's
configuration.

 PerlSetEnv BEDROCK_SESSION_FILES_VERIFY_USER 1

=head1 SEE ALSO

L<Bedrock::Handler>, L<Bedrock::Apache::Request::CGI>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
