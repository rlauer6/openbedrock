#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::BedrockSessionFiles;

use strict;
use warnings;

BEGIN {
  require Apache2::compat if $ENV{MOD_PERL};
}

use Apache2::Const -compile =>
qw( HTTP_UNAUTHORIZED NOT_FOUND OK SERVER_ERROR FORBIDDEN DECLINED REDIRECT :log);
use Apache2::Log;
use APR::Const -compile => qw(:error SUCCESS);

#
# Define the following mod_perl constants since we could be using
# this module both as a mod_perl module and in a CGI
#
use constant NOT_FOUND    => Apache2::Const::NOT_FOUND;
use constant SERVER_ERROR => Apache2::Const::SERVER_ERROR;
use constant FORBIDDEN    => Apache2::Const::FORBIDDEN;
use constant OK           => Apache2::Const::OK;
use constant DECLINED     => Apache2::Const::DECLINED;
use constant REDIRECT     => Apache2::Const::REDIRECT;

use Bedrock::Handler;
use Data::Dumper;
use File::Basename;

use vars qw/%ENV/;

# +------------------------------+
# | mod_perl HANDLER STARTS HERE |
# +------------------------------+

sub handler {
  my $r = shift;

  $r && $r->log->info( "Apache::SessionFiles started.");

  my $path_info = $ENV{PATH_INFO};
  $path_info =~ s/(.*?)\/$/$1/;

  $r && $r->log->debug( sprintf( "[%s]: request file.....[%s] " , (caller(0))[3], $r->filename ) );
  $r && $r->log->debug( sprintf( "[%s]: URI..............[%s] " , (caller(0))[3], $r->uri ) );
  $r && $r->log->debug( sprintf( "[%s]: PATH_INFO........[%s] " , (caller(0))[3], $path_info ) );
  $r && $r->log->debug( sprintf( "[%s]: PATH_TRANSLATED..[%s] " , (caller(0))[3], $ENV{PATH_TRANSLATED} ) );

  # filename (however actual file will exist under user's session directory)
  my ($name, $path, $ext) = fileparse( $r->filename, qr/\.([^.]*)$/ );
  
  unless ( $ENV{HTTP_COOKIE} =~/session=([0-9a-f]+)$/ ) {
    return NOT_FOUND;
  }

  my $session = $1;

  my $bedrock_handler = Bedrock::Handler->new( $r );
  my $conf = $bedrock_handler->get_config();
  my $filename = sprintf("%s/%s/%s", $conf->{SESSION_DIR}, $session, $r->filename);

  unless ( -e $filename ) {
    return NOT_FOUND;
  }
  elsif ( -r $filename ) {
  }
  else {
    return FORBIDDEN;
  }

  my $content_type = $r->content_type;
  my $env = Dumper \%ENV;

  $r->send_http_header;
  
  print <<eot;
<html>
<body>
<p>$filename</p>
<p>$content_type</p>
<pre>
$env
</pre>
</body>
</html>
eot

  return OK;
}

1;

