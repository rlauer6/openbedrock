#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::BedrockSessionFiles;

use strict;
use warnings;

use Role::Tiny::With;
with 'Bedrock::Apache::HandlerUtils';

use Bedrock::Apache::Constants qw{:all};

use English qw{-no_match_vars};

use Readonly;

Readonly our $BUFFER_SIZE => 4 * 1024;

use English qw{-no_match_vars};

########################################################################
sub handler {
########################################################################
  my ($r) = @_;

  my $file_info = eval { return get_file_info($r); };

  if ( !$file_info || $EVAL_ERROR ) {
    return set_error_status( $r, $EVAL_ERROR );
  }

  my $buffer;

  $r->send_http_header;

  my $filename = $file_info->{filename};

  open my $fh, '<', $filename  ## no critic (RequireBriefOpen)
    or do {
    $r->log->error( sprintf 'could not open file [%s] for reading',
      $filename );
    return set_error_status('not found');
    };

  while ( read $fh, $buffer, $BUFFER_SIZE ) {
    print $buffer;
  }

  close $fh;

  return $OK;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

C<Apache::BedrockSessionFiles>

=head1 DESCRIPTION

Implements an Apache handler that serves files from a Bedrock session
directory.  This is typically used when a web application wishes to serve
a private file to a user, or make a file available for only a short
period of time to a specfic user session.  A typical URI for this type
of asset might look like:

  /session/foo.html

In other words, the asset would be protected since the same URL would
not access the asset for anyone other than the requestor since it is
specific to their session.

=head1 NOTES

By using the C<copy2session()> method of the C<$session> object, the
developer copies a file to a userE<039>s session directory and
redirects the user to the appropriate URI.

 <null $session.copy2session('single-use.pdf')>
 <null $header.see_other('/session/single-use.pdf')>

I<Files in session directories are inaccessible after the session
expires.  Session directories are removed after the sessions have expired.>

=head2 Setting Up the Apache Handler

Setup the handler in your Apache configuration file as shown below:

  Action bedrock-session-files /cgi-bin/bedrock-session-files.cgi virtual

  Alias /session /var/www/vhosts/mysite/session

  <Directory /var/www/vhosts/mysite/session>
    AcceptPathInfo On
    Options -Indexes
  
    <IfModule mod_perl.c>
      SetHandler perl-script
      PerlHandler Apache::BedrockSessionFiles
    </IfModule>
  
    <IfModule !mod_perl.c>
      SetHandler bedrock-session-files
    </IfModule>
  
  </Directory>

If you want to use the CGI version instead of the C<mod_perl> version
of the handler, copy the CGI handler to your F</cgi-bin>
directory. F<bedrock-session-files.cgi> is distributed as part of
Bedrock and can be found at
F<@libdir@/bedrock/cgi-bin/bedrock-session-files.cgi>.

=head1 SEE OTHER

C<Bedrock::Handler>, C<Bedrock::Apache::Request_cgi>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
