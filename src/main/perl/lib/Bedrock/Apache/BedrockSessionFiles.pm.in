#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::BedrockSessionFiles;

use strict;
use warnings;

BEGIN {
  require Apache2::compat if $ENV{MOD_PERL};
}

use Apache2::Const -compile => qw( HTTP_UNAUTHORIZED NOT_FOUND OK SERVER_ERROR FORBIDDEN DECLINED REDIRECT :log);
use Apache2::Log;
use APR::Const -compile => qw(:error SUCCESS);

#
# Define the following mod_perl constants since we could be using
# this module both as a mod_perl module and in a CGI
#
use constant NOT_FOUND    => Apache2::Const::NOT_FOUND;
use constant SERVER_ERROR => Apache2::Const::SERVER_ERROR;
use constant FORBIDDEN    => Apache2::Const::FORBIDDEN;
use constant OK           => Apache2::Const::OK;
use constant DECLINED     => Apache2::Const::DECLINED;
use constant REDIRECT     => Apache2::Const::REDIRECT;

use Bedrock::Handler;
use Data::Dumper;
use File::Basename;
use IO::File;

use vars qw/%ENV/;

=pod

=head1 NAME

C<Apache::BedrockSessionFiles>

=head1 DESCRIPTION

Implements an Apache handler that serves files from a Bedrock session
directory.  This is typically used when a web developer wants to serve
a private file to a user, or make a file available for only a short
period of time.  In other words, the URL would be useless to anyone
else since the session is specfic to a single browser instance.

=head1 NOTES

By using the C<copy2session()> method of the C<$session> object, the
developer copies a file to a userE<039>s session directory and
redirects the user to the appropriate URI.

 <null $session.copy2session('single-use.pdf')>
 <null $header.see_other('/session/single-use.pdf')>

I<Files in session directories are automatically removed when the
session expires.>

=head1 Setting Up the Apache Handler

Setup the handler in your Apache configuration file thusly:

  Action bedrock-session-files /cgi-bin/bedrock-session-files.cgi virtual

  Alias /session /var/www/vhosts/mysite/session

  <Directory /var/www/vhosts/mysite//session>
    AcceptPathInfo On
    Options -Indexes
  
    <IfModule mod_perl.c>
      SetHandler perl-script
      PerlHandler Apache::BedrockSessionFiles
    </IfModule>
  
    <IfModule !mod_perl.c>
      SetHandler bedrock-session-files
    </IfModule>
  
  </Directory>

If you want to use the CGI version instead of the C<mod_perl> version of the handler, copy the CGI handler to your F</cgi-bin> directory. F<bedrock-session-files.cgi> is distributed as part of Bedrock and can
be found at F<@libdir@/bedrock/cgi-bin/bedrock-session-files.cgi>. 

=cut

# +------------------------------+
# | mod_perl HANDLER STARTS HERE |
# +------------------------------+

sub handler {
  my $r = shift;

  $r && $r->log->info( "Apache::SessionFiles started.");

  my $path_info = $ENV{PATH_INFO};
  $path_info =~ s/(.*?)\/$/$1/;

  $r && $r->log->debug( sprintf( "[%s]: request file.....[%s] " , (caller(0))[3], $r->filename ) );
  $r && $r->log->debug( sprintf( "[%s]: URI..............[%s] " , (caller(0))[3], $r->uri ) );
  $r && $r->log->debug( sprintf( "[%s]: PATH_INFO........[%s] " , (caller(0))[3], $path_info ) );
  $r && $r->log->debug( sprintf( "[%s]: PATH_TRANSLATED..[%s] " , (caller(0))[3], $ENV{PATH_TRANSLATED} ) );
  $r && $r->log->debug( sprintf( "[%s]: HTTP_COOKIE......[%s] " , (caller(0))[3], $ENV{HTTP_COOKIE} ) );
  $r && $r->log->debug( sprintf( "[%s]: content_type.....[%s] " , (caller(0))[3], $r->content_type ) );

  # filename (however actual file will exist under user's session directory)
  my ($name, $path, $ext) = fileparse( ($r->filename || 'index.html'), qr/\.([^.]*)$/ );
  
  unless ( $ENV{HTTP_COOKIE} =~/session=([0-9a-f]+)$/ ) {
    $r && $r->log->error("ERROR: No session found.");
    return NOT_FOUND;
  }

  my $session = $1;

  my $conf = eval {
    my $bedrock_handler = Bedrock::Handler->new( $r );
    $bedrock_handler->get_config();
  };

  if ( $@ ) {
    $r->log->debug( sprintf( "ERROR: %s ", $@) );
    return NOT_FOUND;
  }

  my $filename = sprintf("%s/%s/%s%s", $conf->{SESSION_DIR}, $session, $name, $ext);

  $r && $r->log->debug( sprintf( "[%s]: SESSION_DIR......[%s] " , (caller(0))[3], $conf->{SESSION_DIR} ) );
  $r && $r->log->debug( sprintf( "[%s]: session..........[%s] " , (caller(0))[3], $session ) );
  $r && $r->log->debug( sprintf( "[%s]: filename.........[%s] " , (caller(0))[3], $filename ) );

  unless ( -e $filename ) {
    $r && $r->log->error("FILE NOT FOUND: [$filename]");
    return NOT_FOUND;
  }
  elsif ( -r $filename ) {
  }
  else {
    return FORBIDDEN;
  }

  $r->send_http_header;
  
  my $fh = IO::File->new("<$filename");
  my $buffer;

  while (read($fh, $buffer, 4096) ) {
    print $buffer;
  }

  close $fh;

  return OK;
}

=pod

=head1 SEE OTHER

C<Bedrock::Handler>, C<Bedrock::Apache::Requeset_cgi>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

# $Log$
# Revision 1.2  2013/11/09 15:39:36  rlauer
# - added pod
# - send contents of file
# - default to index.html
# - debug messages added
# - construction of file path was busted
#

1;

