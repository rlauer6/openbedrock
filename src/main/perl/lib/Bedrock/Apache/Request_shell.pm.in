#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::Request_shell;

use strict;
use warnings;

use AppConfig qw(ARGCOUNT_NONE ARGCOUNT_ONE);
use Bedrock qw(slurp_file);
use Bedrock::Constants qw(:chars :booleans :defaults :log_levels);
use Bedrock::Context qw(init_log4perl_logger find_log4perl_conf);
use Bedrock::VERSION qw( $ID $BUILD_DATE $RELEASE);
use Carp;
use Cwd qw( getcwd abs_path );
use Data::Dumper;
use English qw(-no_match_vars);
use File::Basename;
use File::Temp;
use Getopt::Long qw(:config permute no_ignore_case);
use Log::Log4perl::Level;
use Time::HiRes;

use Role::Tiny::With;
with 'Bedrock::Logger';

########################################################################
sub new {
########################################################################
  my ( $class, %options ) = @_;

  my $self = bless \%options, $class;

  $self->{argv} = [];

  $self->get_options;

  $self->init_options;

  $self->init_logger;

  $self->init_database_config;

  $self->read_input;

  die "Input file not specified.\n"
    if !$self->{input};

  die "Unable to open input file `$self->{input}'\n"
    if !-f $self->{input};

  ## no critic (RequireLocalizedPunctuationVars)
  $ENV{BEDROCK_CONFIG_PATH} //= $DEFAULT_BEDROCK_CONFIG_PATH;
  $ENV{CONFIG_PATH}         //= $self->{options}->{config};

  $ENV{DOCUMENT_ROOT} = abs_path( $ENV{DOCUMENT_ROOT} // getcwd );

  @ARGV = @{ $self->{argv} };

  # redirect STDOUT
  if ( defined $self->{options}->{outfile} ) {
    my $file = $self->{options}->{outfile};

    open STDOUT, '>', $file
      or die "could not open [$file] for output";
  }

  STDOUT->autoflush($TRUE);
  STDERR->autoflush($TRUE);

  return $self;
}

########################################################################
sub get_options {
########################################################################
  my ($self) = @_;

  $self->{options} = {};
  my %options;
  my $result = eval {
    return GetOptions(
      \%options,
      'config=s',
      'db=s',
      'env|e=s',
      'disable-tag=s@',
      'help|?',
      'infile=s',
      'logfile|l=s',
      'loglevel|L=s',
      'mime-type=s',
      'outfile=s',
      'rc=s',
      'version|V',
      '<>' => sub {
        my $arg = shift;

        if ( $arg =~ /^(\w[^=]*=.*?)/xsm ) {
          push @{ $self->{argv} }, "$arg";
        }
        else {
          $self->{input} = "$arg";  # usually filename.roc
        }
      },
    );
  };

  # Precendence: command line options, environment variables, resource file
  $options{loglevel} //= $self->{loglevel};

  # error parsing input arguments
  if ($EVAL_ERROR) {
    my ($emsg) = split /\r/xsm, $EVAL_ERROR;

    carp $emsg;

    $self->usage;
  }

  if ( $options{help} || !$result ) {
    $self->usage;
  }

  if ( defined $options{version} ) {
    version( $ID, $RELEASE, $BUILD_DATE );

    exit 0;
  }

  if ( $options{env} ) {
    add_env_vars( $options{env} );
  }

  # disable certain tags to prevent errors during processing
  # e.g. array if you want to use Bedrock to create a Bedrock XML file
  if ( $options{'disable-tag'} ) {
    my $tags = $Bedrock::Constants::OPENTAG_EXPR;

    foreach my $t ( @{ $options{'disable-tag'} } ) {
      $tags =~ s/$t\|?//xsm;
    }

    $Bedrock::Constants::OPENTAG_EXPR = $tags;
  }

  $self->{options} = \%options;

  return $self;
}

########################################################################
sub add_env_vars {
########################################################################
  my ($file) = @_;

  open my $fh, '<', $file
    or die "could not open $file";

  while ( my $line = <$fh> ) {
    next if $line =~ /^[#]/xsm;
    my ( $k, $v ) = split /\s*=\s*/xsm, $line;
    chomp $v;
    $ENV{$k} = $v;
  }

  close $fh;

  return;
}

########################################################################
sub read_input {
########################################################################
  my ($self) = @_;

  if ( $self->{input} ) {

    if ( $self->{input} !~ /^\//xsm ) {
      $self->{input}        = sprintf '%s/%s', getcwd, $self->{input};
      $ENV{PATH_TRANSLATED} = $self->{input};
    }

    # cat foo | bedrock joe.roc
    # collect STDIN as POSTDATA
    if ( !-t STDIN ) {  ## no critic (ProhibitInteractiveTest)
      local $RS = undef;

      push @{ $self->{argv} }, 'POSTDATA=' . <>;
    }
  }
  else {

    # Handling input
    my $fh = File::Temp->new(
      TEMPLATE => 'bedrock-shell-XXXXX',
      SUFFIX   => '.roc',
      DIR      => $self->{options}->{tempdir},
      UNLINK   => $self->{options}->{cleanup}
    );

    $self->{_tempfile} = $fh->filename;
    $self->{input}     = $fh->filename;

    $self->get_logger->debug( Dumper( [$self] ) );

    my $script;

    {
      local $RS = undef;

      $script = <>;
    }

    exit 0
      if !$script;

    $fh->print($script);

    $fh->close();

  }

  return $self;
}

########################################################################
sub init_database_config {
########################################################################
  my ($self) = @_;

  my $db = $self->{options}->{db};

  if ( $db && exists $self->{config} ) {

    my ( $dsn, $username, $password )
      = map { $self->{config}->{ $db . "_$_" } } qw{db username password};

    ## no critic (RequireLocalizedPunctuationVars)
    @ENV{qw{DBI_DSN DBI_USER DBI_PASS}} = ( $dsn, $username, $password );
  }

  return $self;
}

########################################################################
sub read_resource_file {
########################################################################
  my ($self) = @_;

  # read config from resource file if specified
  my $HOME = $ENV{HOME} || $DOT;

  my $default_rc_file = $HOME . '/.bedrock_rc';

  my $rc_file;

  if ( $self->{options}->{rc} ) {
    carp sprintf "resource file %s not found\n"
      if !-e $self->{options}->{rc};

    $rc_file = $self->{options}->{rc};
  }
  elsif ( -e $default_rc_file ) {
    $rc_file = $default_rc_file;
  }

  $self->{options}->{rc} = $rc_file // $EMPTY;

  if ($rc_file) {
    $self->{config} = AppConfig->new(
      { CASE   => $TRUE,
        CREATE => $TRUE,
        ERROR  => sub { },
        GLOBAL => { ARGCOUNT => ARGCOUNT_ONE },
      },
    );

    $self->{config}->define( 'cleanup' => { ARGCOUNT => ARGCOUNT_NONE } );

    $self->{config}->file($rc_file);

    my %varlist = $self->{config}->varlist($DOT);

    # command line overrides the value in resource file for these options
    if ( exists $varlist{config} && !$self->{options}->{config} ) {
      my $config_path = $self->{config}->config();

      if ( $config_path && -d $config_path ) {
        $self->{options}->{config} = abs_path($config_path);
      }
    }

    if ( exists $varlist{logfile} && !$self->{options}->{logfile} ) {
      $self->{options}->{logfile} = $self->{config}->logfile();
    }

    if ( exists $varlist{loglevel} && !$self->{options}->{loglevel} ) {
      $self->{options}->{loglevel} = $self->{config}->loglevel();
    }

    if ( exists $varlist{tempdir} && !$self->{options}->{tempdir} ) {
      $self->{options}->{tempdir} = $self->{config}->tempdir();
    }

    if ( exists $varlist{cleanup} && !$self->{options}->{cleanup} ) {
      $self->{options}->{cleanup} = $self->{config}->cleanup();
    }

    if ( exists $varlist{db} && !$self->{options}->{db} ) {
      $self->{options}->{db} = $self->{config}->db();
    }
  }

  return $self;
}

########################################################################
sub init_options {
########################################################################
  my ($self) = @_;

  $self->read_resource_file;

  my %defaults = (
    tempdir  => $DOT,
    loglevel => 'warn',
    logfile  => '/tmp/bedrock.log',
    cleanup  => $FALSE,
    tempdir  => $DOT,
    config   => $ENV{CONFIG_PATH} ? abs_path( $ENV{CONFIG_PATH} ) : $EMPTY,
  );

  # set default values
  foreach ( keys %defaults ) {
    next if exists $self->{options}->{$_};

    $self->{options}->{$_} = $defaults{$_};
  }

  # directly specify input file
  if ( defined $self->{options}->{infile} ) {
    $self->{input} = $self->{options}->{infile};
  }

  return $self;
}

########################################################################
sub fix_log4perl_category {
########################################################################
  my ( $log4perl_conf, $logfile ) = @_;

  my $log4perl_conf_text = slurp_file $log4perl_conf;

  my $bedrockshell_appender = <<'END_OF_CONFIG';
log4perl.appender.BedrockShell=Log::Log4perl::Appender::File
log4perl.appender.BedrockShell.mode=append
log4perl.appender.BedrockShell.filename=/tmp/bedrock.log
log4perl.appender.BedrockShell.layout=PatternLayout
log4perl.appender.BedrockShell.layout.ConversionPattern=[%d{EEE MMM d HH:mm:ss.SSS000 yyyy}] [%c:%p] [pid %P] %M(%L) - %m%n
END_OF_CONFIG

  if ( $log4perl_conf_text !~ /appender[.]BedrockShell/xsm ) {
    $log4perl_conf_text .= $bedrockshell_appender;
  }

  $log4perl_conf_text =~ s/(BedrockShell[.]filename)=(.*?)$/$1=$logfile/xsm;

  $log4perl_conf_text =~ s/(category[.]Bedrock)=(.*?)Bedrock$/$1=ERROR, BedrockShell/xsm;

  $log4perl_conf_text =~ s/(category[.]TagX)=(.*?)Bedrock$/$1=ERROR, BedrockShell/xsm;

  return $log4perl_conf_text;
}

########################################################################
# Usage      : init_logger
# Purpose    : initializes Log4::Log4perl logging
#            : the caller (Apache::Bedrock) will initialize its own logger
# Parameters : none
# Returns    : Log::Log4perl logger
# Errors     : none
########################################################################
sub init_logger {
########################################################################
  my ($self) = @_;

  # set loglevel
  my $logfile = $self->{options}->{logfile} // '/tmp/bedrock.log';

  my $log4perl_conf = find_log4perl_conf();

  die "unable to find log4perl.conf file. Your installation may be corrupted.\n"
    if !$log4perl_conf;

  my $log4perl_conf_text = fix_log4perl_category( $log4perl_conf, $logfile );

  init_log4perl_logger( \$log4perl_conf_text );

  my $log_level_str = $self->{options}->{loglevel} // 'error';

  my $log_level = $LOG4PERL_LOG_LEVELS{ lc $log_level_str };
  $self->get_logger->level($log_level);

  $self->get_logger->info('Logging initialized...');

  return $self->get_logger;
}

########################################################################
sub version {
########################################################################
  my (@version_parts) = @_;

  printf "Bedrock Version %s-%s (%s)\n", @version_parts;

  print <<'END_OF_COPYRIGHT';
Copyright (C) 2001, Charles Jones, LLC
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl-2.0.html>

Additional documentation can be found at <http://twiki.openbedrock.net>

Written by Jay Sridhar, Rob Lauer <rclauer@gmail.com>
END_OF_COPYRIGHT

  return;
}

########################################################################
sub get_loglevel {
########################################################################
  my ($self) = @_;

  my $loglevel = $self->get_loglevel_str;

  return $LOG4PERL_LOG_LEVELS{$loglevel};
}

########################################################################
sub get_loglevel_str {
########################################################################
  my ($self) = @_;

  return $self->{options}->{loglevel} // 'error';
}

########################################################################
sub _log {
########################################################################
  my ( $level, $self, @args ) = @_;

  return $self->get_logger->$level(@args);
}

{
  ## no critic (ProhibitBuiltinHomonyms, ProhibitAmbiguousNames)

########################################################################
  sub trace { my (@args) = @_; return _log( 'trace', @args ) }
  sub debug { my (@args) = @_; return _log( 'debug', @args ) }
  sub info  { my (@args) = @_; return _log( 'info',  @args ) }
  sub warn  { my (@args) = @_; return _log( 'warn',  @args ) }
  sub error { my (@args) = @_; return _log( 'error', @args ) }
  sub fatal { my (@args) = @_; return _log( 'fatal', @args ) }
########################################################################
  sub close { return; }
  sub print { my ( $self, @args ) = @_; return print @args; }
  sub log   { my ($self) = @_; return $self->get_logger; }
########################################################################
}

########################################################################
sub log_error { goto &error; }
########################################################################

########################################################################
sub content_type {
########################################################################
  my ( $self, $type ) = @_;

  if ($EVAL_ERROR) {
    $self->{content_type} = $type;
  }

  return $self->{content_type} || 'text/plain';
}

########################################################################
sub uri {
########################################################################
  my ($self) = @_;

  my ( $name, $path ) = fileparse( $self->{input} );

  return $path;
}

########################################################################
sub filename { my ($self) = @_; return $self->{input}; }
sub finfo    { my ($self) = @_; return $self->{input}; }
########################################################################

########################################################################
sub args { my ($self) = @_; return @{ $self->{argv} }; }

########################################################################
sub content          { return (); }
sub headers_in       { return (); }
sub cgi_header_out   { return; }
sub err_headers_out  { return; }
sub header_out       { return; }
sub send_http_header { return; }

########################################################################
sub usage {
  my ($self) = @_;

  my $prog = basename($PROGRAM_NAME);

  my $usage = <<"END_OF_USAGE";
Usage: $prog [OPTION...] [FILE] [KEY=VALUE]...
OPTIONS

  -c, --config=DIR          - configuration directory (default: @configdir@)
  -r, --rc=FILE             - resource file (default: ~/.bedrock_rc)
  -d, --db=NAME             - default database connection to name from .bedrock_rc (default 'database')
      --disable-tag=TAG     - disable one or more tags
  -e, --env=FILE            - name of file containing values to add to environment
  -h, --help                - help this
  -i, --infile              - input file (default: STDIN)
  -o, --outfile             - output file (default: STDOUT)
  -l, --logfile=FILE        - log file (default: /tmp/bedrock-shell.log)
  -L, --loglevel=LEVEL      - debug, info, warn, error (default: info)
  -m, --mime-type=MIME-TYPE - set the content header (default: text/plain)
  -V, --version             - report Bedrock version

Report bugs at <https://github.com/rlauer6/openbedrock>
END_OF_USAGE

  print {*STDOUT} $usage;

  exit 0;
}

1;

__END__
