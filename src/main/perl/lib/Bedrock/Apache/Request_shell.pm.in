#!@PERL@


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::Request_shell;

use strict;

use File::Basename;
use File::Temp;
use Cwd;

use Bedrock::VERSION;

use Getopt::Long qw/:config permute/;
use AppConfig qw/ARGCOUNT_NONE ARGCOUNT_ONE/;

use constant MSG_ABORT    => 1 << 0;
use constant MSG_DEBUG    => 1 << 1;
use constant MSG_INFO     => 1 << 2;
use constant MSG_STATUS   => 1 << 3;
use constant MSG_WARNING  => 1 << 4;
use constant MSG_ERROR    => 1 << 5;
use constant MSG_SYSERROR => 1 << 6;
use constant MSG_FATAL    => 1 << 7;

sub log {
  return $_[0];
}

sub get_loglevel_str {
  my $self = shift;
  
  return $self->{options}->{loglevel};
}

sub debug {
  my $self = shift;

  print STDERR _fmt_log_message(@_) if $self->{_loglevel} <= MSG_DEBUG;
}

sub info {
  my $self = shift;

  print STDERR _fmt_log_message(@_) if $self->{_loglevel} <= MSG_INFO;
}

sub error {
  my $self = shift;

  print STDERR _fmt_log_message(@_) if $self->{_loglevel} <= MSG_ERROR;
}

sub warn {
  my $self = shift;

  print STDERR _fmt_log_message(@_) if $self->{_loglevel} <= MSG_WARNING;
}

# we want to output all messages to original STDERR now...
sub log_error {
  my $self = shift;

  # we're logging all errors to our log file
  close STDERR;

  open STDERR, ">&OLD_STDERR";
  print STDERR @_;
}

sub _fmt_log_message {
  my $mesg = join('', @_);

  $mesg .= "\n" unless $mesg =~/\n$/;
  return scalar(localtime) . ' - ' . $$ . ' - ' . $mesg;

}

sub content_type {
  my $self = shift;

  $self->{content_type} = shift
    if $@;

  return $self->{'content_type'} || 'text/plain';
}

sub filename {
  my $self = shift;
  $self->{'input'};
}

sub finfo {
  my $self = shift;
  $self->{'input'};
}

sub uri {
  my $self = shift;
  $self->{'input'};
}

sub args {
  my $self = shift;
  @{ $self->{'argv'} };
}

sub content {
  ();
}

sub headers_in {
  ();
}

sub cgi_header_out {
}

sub err_headers_out {
}

sub header_out {
}

sub send_http_header {
}

sub close {
}

sub print {
  my $self = shift;
  print @_;
}

sub usage {
  my $self = shift;
  my $prog = basename($0);

  die "Usage: $prog [OPTION...] [FILE] [KEY=VALUE]...
OPTIONS

  -c, --config=DIR          - configuration directory (default: /usr/lib/bedrock/config)
  -r, --rc=FILE             - resource file (default: ~/.bedrock_rc)
  -d, --db=NAME             - default database connection to name from .bedrock_rc (default 'database')
  -h, --help                - help this
  -i, --infile              - input file (default: STDIN)
  -o, --outfile             - output file (default: STDOUT)
  -l, --logfile=FILE        - log file (default: /tmp/bedrock-shell.log)
  -L, --loglevel=LEVEL      - debug, info, warn, error (default: info)
  -m, --mime-type=MIME-TYPE - set the content header (default: text/plain)
  -V, --version             - report Bedrock version

Report bugs to <bugs\@openbedrock.net>
";
}

sub new {
  my $class = shift;
  my $self = bless {}, $class;

  my $HOME = $ENV{HOME} || '.';

  my $default_rc_file = $HOME . '/.bedrock_rc'
    if -s $HOME . '/.bedrock_rc';

  $self->{'argv'} = [];

  my $result;

  eval {
    $result = GetOptions(
			 $self->{'options'},
			 'config=s',
			 'db=s',
			 'help|?',
			 'infile=s',
			 'logfile=s',
			 'loglevel|L=s',
			 'mime-type=s',
			 'outfile=s',
			 'rc=s',
			 'version|V',
			 '<>' => sub {
			   my $arg = shift;
			   
			   if ( $arg =~ /^(\w[^=]*=.*?)/ ) {
			     push @{ $self->{'argv'} }, "$arg";
			   }
			   else {
			     $self->{'input'} = "$arg"; # usually filename.roc
			   }
			 }
			);
  };

  # read config from resource file if specified

  if ( $self->{options}->{rc} ) {

    unless ( -s $self->{options}->{rc} ) {
      die "unable to read resource file: " . $self->{options}->{rc} . "\n";
      exit -1;
    }

    $self->{config} = AppConfig->new( { 
				       CASE   => 1,
				       CREATE => 1,
				       ERROR  => sub { },
				       GLOBAL => { ARGCOUNT => ARGCOUNT_ONE }
                                      },
                                    );

    $self->{config}->define( 'cleanup' => { ARGCOUNT => ARGCOUNT_NONE } );

    $self->{config}->file( $self->{options}->{rc} );

    my %varlist = $self->{config}->varlist('.');

    # command line overrides the value in resource file for these options
    $ENV{CONFIG_PATH} = $self->{config}->config() 
      if exists $varlist{config} && ! $self->{options}->{config};

    $self->{'options'}->{'logfile'} = $self->{config}->logfile()
      if exists $varlist{logfile} && ! $self->{options}->{logfile};

    $self->{'options'}->{'loglevel'} = $self->{config}->loglevel()
      if exists $varlist{loglevel} && ! $self->{options}->{loglevel};

    $self->{'options'}->{'tempdir'} = $self->{config}->tempdir()
      if exists $varlist{tempdir} && ! $self->{options}->{tempdir};

    $self->{'options'}->{'cleanup'} = $self->{config}->cleanup()
      if exists $varlist{cleanup} && ! $self->{options}->{cleanup};

    $self->{'options'}->{'db'} = $self->{config}->db()
      if exists $varlist{db} && ! $self->{options}->{db};
  }



  $self->{'options'} = { 
			tempdir  => '.',
			rc       => $default_rc_file,
			db       => 'database'
                       };


  my %defaults = (
		  rc       => $default_rc_file,
		  tempdir  => '.',
		  db       => 'database',
		  loglevel => 'warn',
		  logfile  => 'bedrock.log',
		  cleanup  => 0,
		  tempdir  => '.',
		  rc       => $HOME . '/.bedrock_rc',
		  db       => 'database',
		  config   => $ENV{CONFIG_PATH}
		 );

  # set default values
  foreach ( keys %defaults ) {
    next if exists $self->{options}->{$_};
    $self->{options}->{$_} = $defaults{$_};
  }

  # directly specify input file
  $self->{input} = $self->{options}->{infile}
    if defined $self->{options}->{infile};

  # redirect STDOUT
  if ( defined $self->{options}->{outfile} ) {
    my $file = $self->{options}->{outfile};

    open STDOUT, '>', $file or die "could not open [$file] for output";

    # make it hot
    select((select(STDOUT), $|=1)[0]);
  }

  # error parsing input arguments
  if ( $@ ) {
    my ($emsg) = split /\r/, $@;

    die $emsg;
  }

  # set loglevel
  for ( $self->{options}->{loglevel} ) {
    /debug/i && do {
      $self->{_loglevel} = MSG_DEBUG;
      last;
    };

    /info/i && do {
      $self->{_loglevel} = MSG_INFO;
      last;
    };
    /warn/i && do {
      $self->{_loglevel} = MSG_WARNING;
      last;
    };

    /error/i && do {
      $self->{_loglevel} = MSG_ERROR;
      last;
    };
  }

  if ( defined $self->{options}->{version} ) {
    printf( "Bedrock Version %s (%s)\n", $Bedrock::VERSION::ID, $Bedrock::VERSION::BUILD_DATE );
    print <<eot;
Copyright (C) 2001, Charles Jones, LLC
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl-2.0.html>

Additional documentation can be found at <http://www.openbedrock.net>

Written by Jay Sridhar
     and Rob Lauer <rlauer6\@comcast.net>
eot

    exit;
  }

  $self->usage if $self->{'options'}->{'help'} or not $result;

  # Export config path into environment...the line below is generated by automake
  $ENV{BEDROCK_CONFIG_PATH} = '/usr/lib/bedrock/config'; # <--- DO NOT EDIT

  $ENV{CONFIG_PATH} = $self->{'options'}->{'config'};

  my $db = $self->{'options'}->{'db'};

  if ( defined $db && exists $self->{'config'} ) {
    if ( $self->{'config'}->get( $db . '_db' ) ) {
      $ENV{DBI_DSN} = $ENV{DBI_DSN} || $self->{'config'}->get( $db . '_db' );
      $ENV{DBI_USER} = $ENV{DBI_USER}
      || $self->{'config'}->get( $db . '_username' );
      $ENV{DBI_PASS} = $ENV{DBI_PASS}
      || $self->{'config'}->get( $db . '_password' );
    }
  }

  if ( $self->{'input'} ) {
    $self->{'input'} = getcwd . '/' . $self->{'input'}
      unless $self->{'input'} =~ /^\//;

    # collect STDIN as POSTDATA
    unless ( -t STDIN ) {
      local $/ = undef;
      push @{$self->{argv}}, 'POSTDATA=' . <>;
    }
  }
  else {

    # Handling input
    my $fh = File::Temp->new( 
			     TEMPLATE => 'bedrock-shell-XXXXX',
			     SUFFIX   => '.roc',
			     DIR      => $self->{'options'}->{'tempdir'},
			     UNLINK   => $self->{'options'}->{'cleanup'}
                            );

    $self->{'options'}->{'fh'} = $fh;

    my $script;
    {
      local $/;
      $script = <>;
    }

    print $fh "$script";
    close $fh;

    $self->{'_tempfile'} = $fh->filename;
    $self->{'input'} = $fh->filename;

    # note that for STDIN the DOCUMENT_ROOT is the cwd
    $ENV{DOCUMENT_ROOT} = getcwd;
  }

  die "Input file not specified.\n" 
    unless $self->{'input'};

  die "Unable to open input file `$self->{'input'}'\n"
    unless -f $self->{'input'};

  @ARGV = @{ $self->{'argv'} };

  $ENV{DOCUMENT_ROOT} = dirname( $self->{'input'} )
    unless $ENV{DOCUMENT_ROOT};

  # someone may be redirecting STDERR
  open( OLD_STDERR, ">&STDERR" ) or die "Failed to save STDERR";

  # but we're going to send all messages to our log file
  open STDERR, ">>" . $self->{'options'}->{'logfile'}
    or die "Unable to open log file " . $self->{'options'}->{'logfile'};

  # make it hot
  select((select(STDERR), $|=1)[0]);

  $self->debug( "using resource file: " . $self->{options}->{rc} );

  $self;
}

1;

#
# Revision 1.18  2013/05/12 14:45:36  rlauer
# - add implementation of get_loglevel_str()
#
# Revision 1.17  2012/07/31 20:14:30  lauerrc
# - loglevel option not specified in GetOptions
#
# Revision 1.16  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.15  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.14  2011/07/13 18:05:01  eutl420
# - don't override options unless there are values defined in .bedrock_rc to take their place
#
# Revision 1.13  2011/07/06 19:07:56  eutl420
# - added --version to give up Bedrock version number
# - trap bad options by placing eval around GetOptions
#
# Revision 1.12  2011/07/06 16:18:01  eutl420
# - look for $CONFIG_PATH in the environment
# - set the $DOCUMENT_ROOT only if not set already in the environment.  Set it to the cwd if necessary.
#   Necessary is defined as bedrock shell was invoked with no path name for the file or
#   bedrock shell was invoked with no input file (from STDIN)
#
# Revision 1.11  2011/04/02 17:06:00  eutl420
# - check to see if we have a .bedrock_rc config object before accessing it
#
# Revision 1.10  2011/04/01 22:57:37  eutl420
# - when processing arguments with the Getopt::Long callback mechanism
#   the argument is actually and object that stringifies, so since we do not
#   want a reference to an object, but a scalar, do this "$arg" to interpolate
#   the string to a scalar.
#
# Revision 1.9  2011/04/01 18:21:18  eutl420
# - set $self->{'argv'} regardless so that @ARGV gets set properly
#
# Revision 1.8  2011/03/31 00:11:30  eutl420
# - use a call back to process GetOption arguments so we can recognize
#   a file argument versus the CGI style args
# - import the 'permute' option to support above see perldoc Getopt::Long
#
# Revision 1.7  2011/03/30 18:15:41  eutl420
# - use strict, AppConfig, File::Temp
# - in log_error method we no longer just die, first output error to
#   current STDERR log, then re-open original STDERR and return to caller
# - in usage() method, describe new options logfile, db
# - read a .bedrock_rc file if it exists and process arguments
# - bedrock shell will now read from STDIN assuming it is a script.  does this by writing
#   a temporary file for Bedrock to process
# - we now preserve STDERR before redirecting processing errors to log file, this way we can
#   print a meaningful error message to STDERR
#
# Revision 1.6  2011/03/29 15:25:04  eutl420
# - set the default initial log file to /tmp/bedrock-shell.log
# - GetOptions wants hash ref first
#
# Revision 1.5  2011/03/29 14:15:16  eutl420
# - renamed the file in CVS to Request_shell.pm.in so we can use automake tokens to set certain configuration
#   options
# - redirect STDERR to logfile on startup to avoid noise
# - added a new bedrock command line options --logfile, defaults to /tmp/bedrock.log
# - use @\PERL@
# - set $ENV{DOCUMENT_ROOT} to directory of file being processed
# - info() method was not passing argument
# - added methods err_headers_out, header_out though these will never be used by bedrock shell
# - removed default config for GetOptions since the default is set by setting $ENV{BEDROCK_CONFIG_PATH}
#
# Revision 1.4  2010/11/29 15:57:52  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.3  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.2  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.1  2001/01/18 18:37:29  sridhar
# Initial version of Apache::Request_shell, a module which mimicks the
# Apache request object for the shell environment.
#
#
