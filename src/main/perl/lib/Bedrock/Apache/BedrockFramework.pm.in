
sub build_body_tag {
  my $controller = shift;
  my $page       = shift;

  my $page_def = $controller->{pages}->{$page};

  $controller->{body} = {} unless $controller->{body};

  my $body = $page_def->{body} || $controller->{body};
  my $body_tag;

  $body_tag = "<body";

  foreach ( keys %{$body} ) {
    $body_tag .= sprintf( q{ %s="%s"}, $_, $body->{$_} );
  }

  $body_tag .= ">\n";

  $body_tag;
}

sub page_name { $_[0] .= ".inc" unless $_[0] =~ /\.inc$/; $_[0]; }

=pod

=head2 include

=cut

sub include {
  my @pages = split ";", $_[0];

  my $include;

  foreach (@pages) {
    $include .= sprintf( q{<include --file="%s">}, page_name($_) );
  }

  $include;
}

sub build_body_section {
  my ( $controller, $page, $action ) = @_;

  my $page_def = $controller->{pages}->{$page};
  my $body_section;

  if ( $page_def->{actions}->{$action} ) {
    $body_section = include( page_name( $page_def->{actions}->{$action} ) );
  }
  else {
    $body_section = sprintf(
      "<b>bedrock controller: </b>Page Under Construction - no action for '%s'",
      $action );
  }

  $body_section;
}

sub build_head_section {
  my $controller = shift;
  my $page       = shift;

  my $head_section;

  my $page_def = $controller->{pages}->{$page};

# if a framework defines it's own complete HEAD section we call that a "header" and include that
  if ( $page_def->{header} ) {
    $head_section = include( page_name( $page_def->{header} ) );
  }
  else {
    $head_section = "<head>\n";
    if ( ref( $page_def->{head}->{style} ) =~ /array/i ) {
      $head_section .= join(
        "\n",
        map {
          sprintf( q{<link rel="stylesheet" type="text/css" href="%s">}, $_ )
        } @{ $page_def->{head}->{style} }
      ) . "\n";
    }
    else {
      my $style =
         $page_def->{head}->{style}
      || $page_def->{style}
      || $controller->{style};
      $head_section .=
      sprintf( q{<link rel="stylesheet" type="text/css" href="%s">%s},
               $style, "\n" )
      if $style;
    }

    if ( ref( $page_def->{head}->{javascript} ) =~ /array/i ) {
      $head_section .= join(
        "\n",
        map {
          sprintf( q{<script language="javascript" src="%s"></script>%s},
                   $_, "\n" )
        } @{ $page_def->{head}->{javascript} }
      );
    }
    else {
      my $javascript =
         $page_def->{head}->{javascript}
      || $page_def->{javascript}
      || $controller->{javascript};
      $head_section .=
      sprintf( q{<script language="javascript" src="%s"></script>%s},
               $javascript, "\n" )
      if $javascript;
    }

    # -- construct meta tags if present
    my $meta =
       $page_def->{head}->{meta}
    || $page_def->{meta}
    || $controller->{meta};

    if ($meta) {
      if ( ref( $meta->{name} ) =~ /array/i ) {
        $head_section .= join(
          "\n",
          map {
            sprintf( q{<meta name="%s" content="%s">},
                     $_->{name}, $_->{content} )
          } @{ $meta->{name} }
        ) . "\n";
      }

      if ( ref( $meta->{'http-equiv'} ) =~ /array/i ) {
        $head_section .= join(
          "\n",
          map {
            sprintf( q{<meta http-equiv="%s" content="%s">},
                     $_->{'http-equiv'}, $_->{content} )
          } @{ $meta->{'http-equiv'} }
        ) . "\n";
      }
    }

    my $title =
       $page_def->{head}->{title}
    || $page_def->{title}
    || $controller->{title};
    $head_section .= sprintf( "<title>%s</title>\n", $title ) if $title;
    $head_section .= "</head>\n";
  }

  $head_section;
}



# sub handler    
    
    
  my $controller;
  my $page;

  unless ( $file ) {
    $controller = $conf->{framework};

    unless ($controller) {
      $bedrock_handler->error( sprintf( "no framework object defined in 'tagx_apps.xml' for this directory." ) );
      return NOT_FOUND;
    }

    # set some defaults
    $controller->{meta} = {
			   'http-equiv' => [
					    { 'http-equiv' => "Content-Type",
					      content => "text/html; charset=iso-8859-1"
					    }
					   ]
                          }
      unless $controller->{meta};

    $page = $ctx->getInputValue("page") || $controller->{pages}->{default};
    $page = $controller->{pages}->{default} if $page eq "default";

    $controller->{title} = ucfirst($page) unless $controller->{title};
  }

  if ( $controller ) {
    $bedrock_handler->log_debug( 
				sprintf( 
					"Bedrock framework found in 'tagx_apps.xml' assuming this is a framework application ;-)"
				       )
			       );

    unless ( $controller->{pages} ) {
      return $bedrock_handler->error( sprintf("misconfigured Bedrock framework - no 'pages' object found!"));
    }

    unless ($page) {
      $bedrock_handler->error( sprintf("no page specified or no default 'page' set in Bedrock framework."));
    }

    my $action = $ctx->getInputValue("action") || "default";

    $bedrock_handler->log_debug( sprintf( "bedrock framework page: [%s] action: [%s]", $page, $action ));
    my $page_def = $controller->{pages}->{$page};

    unless ($page_def) {
      $bedrock_handler->log_warn( sprintf( "no Bedrock framework definition for [%s] using defaults.", $page ));

      $r->content_type('text/html');
      $r->send_http_header;

      $html =<<end_of_html;
<html>
<head>
<title>Bedrock Framework</title>
</head>

<body>
<b>Bedrock framework:</b> Page Under Construction - no controller for '$page'
</body>

</html>
end_of_html

    }
    else {
      $html .= "<html>\n" . build_head_section( $controller, $page );
      $html .= build_body_tag( $controller, $page );
      $html .= build_body_section( $controller, $page, $action );

# - an optional page footer which can be defined by page or application globally
      my $footer = $page_def->{footer} || $controller->{footer};
      $html .= include( page_name($footer) ) if $footer;
      $html .= "</body>\n</html>\n";
    }

    # once a page is loaded, the page becomes the current page and
    # the action is set to NULL, if the developer needs to know how
    # they got here they can use the 'referrer' and 'referrer_action'
    # CGI vars
    #
    # Note: setting the $ctx->input object as done below is
    # valid at this point ONLY because $ctx->getInputValue was invoked
    # at least once before these references to $ctx->input (see
    # Bedrock::Context if you really want to see the gory details)
    #
    unless ( $action eq "default" ) {
      my @pages = split ";", $page_def->{actions}->{$action};
      my $current_page = $pages[$#pages];
      $current_page =~ s/\.inc$//;
      $ctx->input->{page}            = $current_page;
      $ctx->input->{referrer}        = $page;
      $ctx->input->{referrer_action} = $ctx->input->{action};
      $ctx->input->{action}          = undef;
    }

    $html_fd = IO::Scalar->new( \$html );
    $tx = Text::TagX->new( $html_fd, $ctx );
  }
