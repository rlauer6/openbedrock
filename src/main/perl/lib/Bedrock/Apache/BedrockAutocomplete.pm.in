#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2023, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::BedrockAutocomplete;

use strict;
use warnings;

use Role::Tiny::With;
with 'Bedrock::Apache::HandlerUtils';

use Bedrock qw(slurp_file);
use Bedrock::Handler;
use Bedrock::Apache::Constants qw(:all);
use Data::Dumper;
use English qw(-no_match_vars);
use JSON qw(decode_json);
use Text::URLEncode qw(Encode);

# cache the autocomplete files
our %FILES;

########################################################################
sub handler {
########################################################################
  my ($r) = @_;

  # TBD S3: get_session_file_info($r, 0)

  my $file_info = eval { return get_session_file_info($r); };

  if ( !$file_info || $EVAL_ERROR ) {
    $r->log->error( "file not found in session\n" . $EVAL_ERROR );

    return set_error_status( $r, "file not found\n" )
      if !-e $r->filename;

    $file_info = {
      filename => $r->filename,
      mtime    => ( stat $r->filename )[9],
      config   => Bedrock::Handler->new($r),
    };
  }

  my ( $filename, $config, $mtime )
    = @{$file_info}{qw(filename config mtime)};

  # TBD S3: check if file exist, if not check S3 (head) and get etag
  # to see if file has changed (instead of mtime)

  my $ac_config = $config->{autocomplete} || {};

  my $cache_off;

  if ( defined $ac_config->{cache} ) {
    $cache_off = $ac_config->{cache} !~ /on/ixsm;
  }
  else {
    $cache_off = $ENV{REQUEST_URI} && $ENV{REQUEST_URI} =~ /no_cache/xsm;
  }

  my ( $list, $modified_time, $etag )
    = @{ $FILES{$filename} }{qw(list mtime etag)};

  # TBD: replace with method that returns a decoded JSON object
  # ... maybe we should cache this?
  if ( $cache_off || !$list || $modified_time ne $mtime ) {
    $list = eval {

      my $content = eval { return slurp_file $filename; };

      if ( !$content || $EVAL_ERROR ) {
        $r->log->error( sprintf 'could not open file [%s] for reading', $filename );

        return set_error_status( $r, 'not found' );
      }

      return decode_json($content);
    };

    if ($EVAL_ERROR) {
      my $error = Encode($EVAL_ERROR);

      if ( defined $ENV{MOD_PERL} ) {
        $r->status($SERVER_ERROR);
      }
      else {
        $r->headers_out( Status => '500' );
      }

      print {*STDOUT} <<"END_OF_HTML";
{ "error" : "$error" }
END_OF_HTML

      $r->send_http_header;

      return $OK;
    }

    $FILES{$filename} = {
      list  => $list,
      mtime => $mtime,
      etag  => $etag,
    };

    $r->log->debug('cache refreshed');
  }
  else {
    $r->log->debug( sprintf 'read %s from cache', $filename );
  }

  my $result = get_result_set($list);

  $r->content_type('application/json');

  $r->send_http_header;

  print {*STDOUT} JSON->new->pretty->encode($result);

  return $OK;
}

########################################################################
sub get_result_set {
########################################################################
  my ($list) = @_;

  my $query  = $ENV{QUERY_STRING} // q{};
  my ($term) = $query =~ /(?:^|&)term=([^&]*)/xsmi;
  my ($type) = $query =~ /(?:^|&)type=([^&]*)/xsmi;
  $type //= 'word';  # default match mode

  return $list if !defined $term || $term eq q{};

  $term = lc $term;

  my @matches = grep {
    my $label = lc $_->{label};

        $type eq 'exact'    ? $label eq $term
      : $type eq 'prefix'   ? $label =~ /^\Q$term\E/xsm
      : $type eq 'word'     ? $label =~ /\b\Q$term\E/xsm
      : $type eq 'contains' ? index( $label, $term ) >= 0
      : 0
  } @{$list};

  return \@matches;
}

1;

__END__

=pod

=head1 NAME

Apache::BedrockAutocomplete - A handler for creating autocompletion result sets

=head1 SYNOPSIS

 cookie="session=32733cca688df39044832be9928183ed; path=/; expires=Mon, 24-Oct-2022 20:53:58 GMT;"; \
 curl -b "$cookie" http://example.com/autocomplete/clients.json?term=gro

=head1 DESCRIPTION

Implements an Apache handler that serves L<autocomplete
files|/Autocomplete Files> files from a specified directory or from
the user's session directory.  This module is typically used as part
of a web application that requires an autocomplete API.

Autcomplete files are JSON files with strings (terms) that will be
searched for when a query is sent with a term fragment.

The autocomplete API accepts two query parameters: C<term>, C<type>.

=over 5

=item term

Search term or term fragment.

=item type

Using the API you can search for terms in one of four modes:

=over 10

=item exact

Only exact matches will be returned.

=item prefix

Terms that begin with the search string are returned.

=item word

Terms that have any word that begins with the search string are returned.

Example:

If the search term is "blu" and you list of terms contains "Bluebird"
and "Eastern Bluebird", then both terms would be returned.

=item contains

Returns any term that matches anywhere in the list of terms.

=back

=back

=head1 INSTALLATION NOTES

Follow these steps to implement an autocompletion service on your
Apache server.

=head2 1. Set Up the Apache Handler

  # if not using mod_perl
  Action bedrock-autocomplete /cgi-bin/bedrock-autocomplete.cgi virtual

  Alias /autocomplete /var/www/autocomplete

  <Directory /var/www/autocomplete>
    AcceptPathInfo On
    Options -Indexes
  
    <IfModule perl_module>
      SetHandler perl-script
      PerlHandler Apache::BedrockAutocomplete
    </IfModule>
  
    <IfModule !perl_module>
      SetHandler bedrock-autocomplete
    </IfModule>
  
  </Directory>

You can configure the handler for use with C<mod_perl> or as a CGI script.

To use the CGI version, copy the CGI handler to your F</cgi-bin>
directory.

 cp /var/www/cgi-bin/bedrock.cgi /var/www/cgi-bin/bedrock-autocomplete.cgi
 chmod +x /var/www/cgi-bin/bedrock-autocomplete.cgi
 chown apache:apache /var/www/cgi-bin/bedrock-autocomplete.cgi

=head2 2. Create a Session Directory

The C<Apache::BedrockAutocomplete> handler reads a JSON file that is
stored in a user's session directory or in the autocomplete directory.

Assuming you have configured user sessions using something similar to
L<BLM::Startup::UserSession>, user session directories can be created
using the C<$session> object's C<create_session_dir()> method. This
creates a directory (outside of the webserver's C<DOCUMENT_ROOT>)
that is specific to the user's session.

Only the user associated with that session will be able to access files
from that session directory. Recall that to implement persistent
sessions in the first place, users should have cookies enabled.

You place an appropriately formatted file in that directory and then
access the session url (F</autocomplete/filename.jroc>).

You can also used use the C<create_session_file()> method to create the
file.

=head2 3. Create an Autocomplete File

Create a JSON autocomplete file and place it in your user's session
directory.

 <sink:list>
 [ 
   { "label" : "Bedrock", "value" : "1" },
   { "label" : "Perl",    "value" : "2"}
 ]
 </sink>

 <null $session.create_session_file("items.json", $list)>

The autocomplete URL then becomes
C<http://your-host/autocomplete/items.json>.  You do not need to
include the extension if it is a F<.json> file. The handler first
looks in the user's session directory if a session cookie is
available.  If the file is not found in the user's session directory
then the handler will look in the directory specified when configured
the handler.

=head1 Autocomplete Files

The format of file is really up to you based on how you expect to
process the file on the client side. If you use the F<.jroc>
extension, the handler will return the result set with an
I<application/json> Content-Type header.

Typically, an autocomplete file looks some like this if you are using
jQuery's autocomplete facility:

 [
   { "label" : "Bedrock", "value" : "1" },
   { "label" : "Perl",    "value" : "2"}
 ]

I<From jQuery's documentation:>

B<Multiple types supported:>

    * Array: An array can be used for local data. There are two supported formats:

      * An array of strings: [ "Choice1", "Choice2" ]

      * An array of objects with label and value properties: [ { label: "Choice1", value: "value1" }, ... ]

      The label property is displayed in the suggestion menu. The
      value will be inserted into the input element when a user
      selects an item. If just one property is specified, it will be
      used for both, e.g., if you provide only value properties, the
      value will also be used as the label.

=head1 jQuery AUTOCOMPLETE EXAMPLE

  $('#search').autocomplete({
      source: function(request, response) {
          $.ajax({
              url: 'http://localhost:8080/autocomplete/birds',
              dataType: 'json',
              data: {
                  term: request.term,
                  type: getMatchType()
              },
              success: function(data) {
                  console.log(dat);
              },
              error: function(xhr, status, error) {
                  console.error('Autocomplete error:', error);
                  response([]);
              }
          });
      },
      minLength: 1
  });

=head1 SEE ALSO

L<Bedrock::Handler>, L<Bedrock::Apache::Request::CGI>, L<BLM::Startup::UserSession>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
