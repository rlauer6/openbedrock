#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::BedrockAutocomplete;

use strict;
use warnings;

BEGIN {
  require Apache2::compat if $ENV{MOD_PERL};
}

use Apache2::Const -compile => qw( HTTP_UNAUTHORIZED NOT_FOUND OK SERVER_ERROR FORBIDDEN DECLINED REDIRECT :log);
use Apache2::Log;
use APR::Const -compile => qw(:error SUCCESS);

#
# Define the following mod_perl constants since we could be using
# this module both as a mod_perl module and in a CGI
#
use constant NOT_FOUND    => Apache2::Const::NOT_FOUND;
use constant SERVER_ERROR => Apache2::Const::SERVER_ERROR;
use constant FORBIDDEN    => Apache2::Const::FORBIDDEN;
use constant OK           => Apache2::Const::OK;
use constant DECLINED     => Apache2::Const::DECLINED;
use constant REDIRECT     => Apache2::Const::REDIRECT;

use Bedrock::Handler;
use CGI::Cookie;
use Data::Dumper;
use File::Basename;
use IO::File;
use JSON;

use vars qw/%ENV/;

=pod

=head1 NAME

C<Apache::BedrockAutocomplete>

=head1 DESCRIPTION

Implements an Apache handler that serves I<autocomplete> files from a
Bedrock session directory.  This is typically used when a web
developer wants to provide an autocomplete service as part of a web
application user interface.

=head1 INSTALLATION NOTES

You'll need to setup the Apache handler in order to automatically
serve files from your user's session directory.

=head2 Setting Up the Apache Handler

Setup the handler in your Apache configuration file thusly:

  Action bedrock-autocomplete /cgi-bin/bedrock-autocomplete.cgi virtual

  Alias /session /var/www/vhosts/mysite/autocomplete

  <Directory /var/www/vhosts/mysite/autocomplete>
    AcceptPathInfo On
    Options -Indexes
  
    <IfModule mod_perl.c>
      SetHandler perl-script
      PerlHandler Apache::BedrockAutocomplete
    </IfModule>
  
    <IfModule !mod_perl.c>
      SetHandler bedrock-autocomplete
    </IfModule>
  
  </Directory>

If you want to use the CGI version instead of the C<mod_perl> version
of the handler, copy the CGI handler to your F</cgi-bin>
directory. F<bedrock-autocomplete.cgi> is distributed as part of
Bedrock and can be found at
F<@libdir@/bedrock/cgi-bin/bedrock-autocomplete.cgi>.

=head2 The Session Directory

The C<Apache::BedrockAutocomplete> handler essentially serves up a
JSON file that is stored in a session directory.  A session directory
is created (by you) using the C<$session> object's
C<create_session_dir()> method. This creates a directory (outside of
the webserver's C<DOCUMENT_ROOT>) specific to the user's session.  The
idea being, only that user will be able to access files from that
session directory.  Recall to implement persistent sessions in the
first place, users should have cookies enabled.

You place an appropriately formatted file in that directory and then
access the session url (F</autocomplete/filename.jroc>).

I<Files in session directories are B<not> automatically removed when
sessions expire.>

You should probably implement some kind of cron job to remove stale
session directories. You can find session directories older than 1 day
and might be able to assume they are stale.

 $ find /var/www/vhosts/mysitesession -maxdepth 1 -type d -mtime +1

To be sure, look up the last part of the session directory name (the
session id) in your session table.  If you can't find it, then the
session has expired.

 for a in $(find /var/www/vhosts/mysite/session -maxdepth 1 -type d -mtime +1); do 
   session=$(basename $a)
   id=$(echo "select id from session where id = '"$session"'" | mysql -u fred --password=flintstone bedrock)
   [ "$id" = "" ] && rm -rf /var/www/vhosts/mysite/session/$session
 done

=head2 Autocomplete Files

The format of file is really up to you or how you expect to process
the file. If you use the F<.jroc> extension, the Bedrock will return
the file with an I<application/json> Content-Type header.

Typically, an autocomplete file looks some like this if you are using
jQuery's autocomplete facility:

 [ { "label" : "Bedrock", "value" : "1" },
   {  "label" : "Perl", "value", "2"} ]


I<From jQuery's documenation:>

 B<Multiple types supported:>

    * Array: An array can be used for local data. There are two supported formats:

      * An array of strings: [ "Choice1", "Choice2" ]

      * An array of objects with label and value properties: [ { label: "Choice1", value: "value1" }, ... ]

      The label property is displayed in the suggestion menu. The
      value will be inserted into the input element when a user
      selects an item. If just one property is specified, it will be
      used for both, e.g., if you provide only value properties, the
      value will also be used as the label.

=cut

# +------------------------------+
# | mod_perl HANDLER STARTS HERE |
# +------------------------------+

# cache the autocomplete files
our %FILES;

sub handler {
  my $r = shift;

  $r->log->debug( "Apache::SessionFiles started.");
  $r->log->debug( sprintf( "[%s]: request file.....[%s] " , (caller(0))[3], $r->filename ) );
  $r->log->debug( sprintf( "[%s]: URI..............[%s] " , (caller(0))[3], $r->uri ) );
  $r->log->debug( sprintf( "[%s]: PATH_INFO........[%s] " , (caller(0))[3], $ENV{PATH_INFO} ) );
  $r->log->debug( sprintf( "[%s]: PATH_TRANSLATED..[%s] " , (caller(0))[3], $ENV{PATH_TRANSLATED} ) );
  $r->log->debug( sprintf( "[%s]: HTTP_COOKIE......[%s] " , (caller(0))[3], $ENV{HTTP_COOKIE} ) );
  $r->log->debug( sprintf( "[%s]: content_type.....[%s] " , (caller(0))[3], $r->content_type ) );

  # filename (however actual file will exist under user's session directory)
  my ($name, $path, $ext) = fileparse( $r->filename, qr/\.([^.]*)$/ );

  # get the session cookie so we know where to look for the file
  my $session = get_session_cookie($r);

  unless ( $session ) {
    $r->log->error("ERROR: No session found.");
    return NOT_FOUND;
  }

  my $conf = eval {
    my $bedrock_handler = Bedrock::Handler->new( $r );
    $bedrock_handler->get_config();
  };

  if ( $@ ) {
    $r->log->debug( sprintf( "ERROR: %s ", $@) );
    return NOT_FOUND;
  }

  my $filename = sprintf("%s/%s/%s%s", $conf->{SESSION_DIR}, $session, $name, $ext);

  $r->log->debug( sprintf( "[%s]: SESSION_DIR......[%s] " , (caller(0))[3], $conf->{SESSION_DIR} ) );
  $r->log->debug( sprintf( "[%s]: session..........[%s] " , (caller(0))[3], $session ) );
  $r->log->debug( sprintf( "[%s]: filename.........[%s] " , (caller(0))[3], $filename ) );

  my $list = $FILES{$r->filename};
  my $json = JSON->new;
  my $ac_config = $conf->{autocomplete} || {} ;

  my $cache_off;

  if ( defined $ac_config->{cache} ) {
    $cache_off = $ac_config->{cache} !~/on/i;
  }
  else {
    $cache_off = $ENV{REQUEST_URI} =~/no_cache/;
  }

  if ( $cache_off || ! $list ) {
    unless ( -e $filename ) {
      $r->log->error("FILE NOT FOUND: [$filename]");
      return NOT_FOUND;
    }
    elsif ( -r $filename ) {
      $r->log->debug("FILE FOUND: [$filename]");
    }
    else {
      return FORBIDDEN;
    }
    
    my $ac_contents;
    
    open FILE, "<$filename";
    {
      local $/;
      $ac_contents = <FILE>;
    }
    
    close FILE;
    
    $list = eval {
      $json->decode($ac_contents);
    };
    
    if ( $@ ) {
      $r->content_type('text/html');
      $r->send_http_header;
      print <<eom;
<pre>
error: $@
</pre>
eom
      return SERVER_ERROR;
    }
    
    $FILES{$r->filename} = $list;
    $r->log->debug("cache refreshed");
  }
  else {
    $r->log->debug("cache active");
  }

  my $term = $ENV{QUERY_STRING};
  my $result = [];

  if ( $term =~/term\=([^&]*)\&?/i ) {
    $result = [  map { $_->{label} =~/^$1/i ? $_ : () } @{$list} ];
  }
  else {
    $result = $list;
  }

  $r->content_type('application/json');
  $r->send_http_header;

  print $json->encode($result);

  return OK;
}

# parse out the session cookie from the HTTP_COOKIEs
sub get_session_cookie {
  my $r = shift;

  my %cookies;
  my $session;

  eval {
    %cookies = CGI::Cookie->parse($ENV{HTTP_COOKIE});
    $r->log->debug('Cookies ' . Dumper [\%cookies] );
  };
  
  if ( $@ ) {
    $r->log->error(sprintf("ERROR parsing cookies: [%s]\n%s\n", $ENV{HTTP_COOKIE}, $@));
  }
  else {
    $session = $cookies{session}->value;
  }

  return $session;
}

=pod

=head1 SEE OTHER

C<Bedrock::Handler>, C<Bedrock::Apache::Request_cgi>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

1;

