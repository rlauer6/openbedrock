#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Apache::BedrockAutocomplete;

use strict;
use warnings;

BEGIN {
  require Apache2::compat if $ENV{MOD_PERL};
}

use Apache2::Const -compile => qw( HTTP_UNAUTHORIZED NOT_FOUND OK SERVER_ERROR FORBIDDEN DECLINED REDIRECT :log);
use Apache2::Log;
use APR::Const -compile => qw(:error SUCCESS);

#
# Define the following mod_perl constants since we could be using
# this module both as a mod_perl module and in a CGI
#
use constant NOT_FOUND    => Apache2::Const::NOT_FOUND;
use constant SERVER_ERROR => Apache2::Const::SERVER_ERROR;
use constant FORBIDDEN    => Apache2::Const::FORBIDDEN;
use constant OK           => Apache2::Const::OK;
use constant DECLINED     => Apache2::Const::DECLINED;
use constant REDIRECT     => Apache2::Const::REDIRECT;

use Bedrock::Handler;
use CGI::Cookie;
use Data::Dumper;
use File::Basename;
use IO::File;
use JSON;

use vars qw/%ENV/;

=pod

=head1 NAME

C<Apache::BedrockAutocomplete>

=head1 DESCRIPTION

Implements an Apache handler that serves files I<autocomplete> files
from a Bedrock session directory.  This is typically used when a web
developer wants to provide an autocomplete service as part of a UI in
something like jQueryUI.

=head1 NOTES

I<Files in session directories are automatically removed when the
session expires.>

=head1 Setting Up the Apache Handler

Setup the handler in your Apache configuration file thusly:

  Action bedrock-autocomplete /cgi-bin/bedrock-autocomplete.cgi virtual

  Alias /session /var/www/vhosts/mysite/autocomplete

  <Directory /var/www/vhosts/mysite/autocomplete>
    AcceptPathInfo On
    Options -Indexes
  
    <IfModule mod_perl.c>
      SetHandler perl-script
      PerlHandler Apache::BedrockAutocomplete
    </IfModule>
  
    <IfModule !mod_perl.c>
      SetHandler bedrock-autocomplete
    </IfModule>
  
  </Directory>

If you want to use the CGI version instead of the C<mod_perl> version
of the handler, copy the CGI handler to your F</cgi-bin>
directory. F<bedrock-autocomplete.cgi> is distributed as part of
Bedrock and can be found at
F<@libdir@/bedrock/cgi-bin/bedrock-autocomplete.cgi>.

=cut

# +------------------------------+
# | mod_perl HANDLER STARTS HERE |
# +------------------------------+

# cache the autocomplete files
our %FILES;

sub handler {
  my $r = shift;

  $r->log->debug( "Apache::SessionFiles started.");
  $r->log->debug( sprintf( "[%s]: request file.....[%s] " , (caller(0))[3], $r->filename ) );
  $r->log->debug( sprintf( "[%s]: URI..............[%s] " , (caller(0))[3], $r->uri ) );
  $r->log->debug( sprintf( "[%s]: PATH_INFO........[%s] " , (caller(0))[3], $ENV{PATH_INFO} ) );
  $r->log->debug( sprintf( "[%s]: PATH_TRANSLATED..[%s] " , (caller(0))[3], $ENV{PATH_TRANSLATED} ) );
  $r->log->debug( sprintf( "[%s]: HTTP_COOKIE......[%s] " , (caller(0))[3], $ENV{HTTP_COOKIE} ) );
  $r->log->debug( sprintf( "[%s]: content_type.....[%s] " , (caller(0))[3], $r->content_type ) );

  # filename (however actual file will exist under user's session directory)
  my ($name, $path, $ext) = fileparse( $r->filename, qr/\.([^.]*)$/ );

  # get the session cookie so we know where to look for the file
  my $session = get_session_cookie($r);

  unless ( $session ) {
    $r->log->error("ERROR: No session found.");
    return NOT_FOUND;
  }

  my $conf = eval {
    my $bedrock_handler = Bedrock::Handler->new( $r );
    $bedrock_handler->get_config();
  };

  if ( $@ ) {
    $r->log->debug( sprintf( "ERROR: %s ", $@) );
    return NOT_FOUND;
  }

  my $filename = sprintf("%s/%s/%s%s", $conf->{SESSION_DIR}, $session, $name, $ext);

  $r->log->debug( sprintf( "[%s]: SESSION_DIR......[%s] " , (caller(0))[3], $conf->{SESSION_DIR} ) );
  $r->log->debug( sprintf( "[%s]: session..........[%s] " , (caller(0))[3], $session ) );
  $r->log->debug( sprintf( "[%s]: filename.........[%s] " , (caller(0))[3], $filename ) );

  my $list = $FILES{$r->filename};
  my $json = JSON->new;
  my $ac_config = $conf->{autocomplete} || {} ;

  my $cache_off;

  if ( defined $ac_config->{cache} ) {
    $cache_off = $ac_config->{cache} !~/on/i;
  }
  else {
    $cache_off = $ENV{REQUEST_URI} =~/no_cache/;
  }

  if ( $cache_off || ! $list ) {
    unless ( -e $filename ) {
      $r->log->error("FILE NOT FOUND: [$filename]");
      return NOT_FOUND;
    }
    elsif ( -r $filename ) {
      $r->log->debug("FILE FOUND: [$filename]");
    }
    else {
      return FORBIDDEN;
    }
    
    my $ac_contents;
    
    open FILE, "<$filename";
    {
      local $/;
      $ac_contents = <FILE>;
    }
    
    close FILE;
    
    $list = eval {
      $json->decode($ac_contents);
    };
    
    if ( $@ ) {
      $r->content_type('text/html');
      $r->send_http_header;
      print <<eom;
<pre>
error: $@
</pre>
eom
      return SERVER_ERROR;
    }
    
    $FILES{$r->filename} = $list;
    $r->log->debug("cache refreshed");
  }
  else {
    $r->log->debug("cache active");
  }

  my $term = $ENV{QUERY_STRING};
  my $result = [];

  if ( $term =~/term\=([^&]*)\&?/i ) {
    $result = [  map { $_->{label} =~/^$1/i ? $_ : () } @{$list} ];
  }
  else {
    $result = $list;
  }

  $r->content_type('application/json');
  $r->send_http_header;

  print $json->encode($result);

  return OK;
}

# parse out the session cookie from the HTTP_COOKIEs
sub get_session_cookie {
  my $r = shift;

  my %cookies;
  my $session;

  eval {
    %cookies = CGI::Cookie->parse($ENV{HTTP_COOKIE});
    $r->log->debug('Cookies ' . Dumper [\%cookies] );
  };
  
  if ( $@ ) {
    $r->log->error(sprintf("ERROR parsing cookies: [%s]\n%s\n", $ENV{HTTP_COOKIE}, $@));
  }
  else {
    $session = $cookies{session}->value;
  }

  return $session;
}

=pod

=head1 SEE OTHER

C<Bedrock::Handler>, C<Bedrock::Apache::Request_cgi>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

1;

