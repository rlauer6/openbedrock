#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Hash;

use strict;
use warnings;

use parent qw{Exporter};

use Bedrock::Array;
use Bedrock::BedrockJSON;
use Bedrock::Constants qw{:chars :booleans};

use English qw{-no_match_vars};
use Scalar::Util qw{reftype};
use List::Util qw{ pairs };
use Tie::IxHash;
use XML::Simple;

use Role::Tiny::With;
with 'Bedrock::Dumper';

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolationOfMetachars)

{
## no critic (RequireArgUnpacking, RequireFinalReturn)

  sub FIRSTKEY { my $a = scalar CORE::keys %{ $_[0] }; each %{ $_[0] } }
  sub NEXTKEY  { each %{ $_[0] } }
  sub FETCH    { $_[0]->{ $_[1] } }
  sub EXISTS   { exists $_[0]->{ $_[1] } }
  sub STORE    { $_[0]->{ $_[1] } = $_[2] }
  sub DELETE   { delete $_[0]->{ $_[1] } }
  sub CLEAR    { %{ $_[0] } = () }
}

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, @args ) = @_;

  my %ordered;

  tie %ordered, 'Tie::IxHash';  ## no critic (ProhibitTies)

  my $self = bless \%ordered, $class;

  %{$self} = @args;

  return $self;
}

########################################################################
sub exists {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $key ) = @_;

  return CORE::exists $self->{$key};
}

########################################################################
sub map {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $fmt, @parms ) = @_;

  if ( !@parms ) {
    @parms = qw(key value);
  }

  my @out;

  foreach ( keys %{$self} ) {
    push @out, sprintf $fmt, @{ { key => $_, value => $self->{$_} } }{@parms};
  }

  return Bedrock::Array->new(@out);
}

########################################################################
sub xml {
########################################################################
  my ( $self, %options ) = @_;

  return XMLout( $self, %options );
}

########################################################################
sub yaml {
########################################################################
  my ( $self, %options ) = @_;

  use YAML qw(Dump);

  return Dump( $self->devolve );
}

########################################################################
sub dumper {
########################################################################
  my ( $self, @args ) = @_;

  return Bedrock::Dumper::dumper( $self, @args );
}

########################################################################
sub bedrock_xml {
########################################################################
  my ($self) = @_;

  require Bedrock::XML;

  return Bedrock::XML::writeXML($self);
}

########################################################################
sub devolve {
########################################################################
  my $this = shift;

  if ( ref($this) =~ /^(HASH|ARRAY)$/xsm ) {
    return $this;
  }
  elsif ( ref($this) =~ /Bedrock::Hash/xsm ) {
    my $that = {};

    foreach ( keys %{$this} ) {
      $that->{$_} = devolve( $this->{$_} );
    }
    return $that;
  }
  elsif ( ref($this) =~ /Bedrock::Array/xsm ) {
    my $that = [];

    foreach ( @{$this} ) {
      push @{$that}, devolve($_);
    }
    return $that;
  }
  else {
    return $this;
  }
}

########################################################################
sub length {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  return scalar keys %{$self};
}

########################################################################
sub matches {
########################################################################
  my ( $self, $str, $flags ) = @_;

  die 'invalid flags: only i,m or s'
    if $flags && $flags !~ /^[ims]+$/xsm;

  my $re;

  eval q{$re = qr/$str/} . $flags;  ## no critic (ProhibitStringyEval, RequireInterpolationOfMetachars)

  die "invalid regexp: $str\n$EVAL_ERROR\n"
    if !$re;

  my @result = grep { $self->{$_} =~ /$re/sm } keys %{$self};  ## no critic (RequireExtendedFormatting)

  return Bedrock::Array->new(@result);
}

########################################################################
sub grep {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $pattern ) = @_;

  my $re = eval { regexp_compile($pattern); };

  die $EVAL_ERROR
    if $EVAL_ERROR;

  my @found = grep { $self->{$_} =~ /$re/sm } keys %{$self};  ## no critic (RequireExtendedFormatting)

  return Bedrock::Array->new(@found);
}

########################################################################
sub find {
########################################################################
  my ( $self, $value ) = @_;

  my %obj = reverse %{$self};

  return $obj{$value};
}

########################################################################
sub sort {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $sort_dir, $sort_type ) = @_;

  return $self->names( $sort_dir || 'asc', $sort_type || 'alpha' );
}

########################################################################
sub slice {
########################################################################
  my ( $self, @args ) = @_;

  my @keys;

  push @keys, map { ref $_ ? @{$_} : $_ } @args;

  my $ref = Bedrock::Hash->new;

  @{$ref}{@keys} = @{$self}{@keys};

  return $ref;
}

########################################################################
sub json {
########################################################################
  my ( $self, $pretty ) = @_;

  $pretty //= 0;

  return Bedrock::JSON::encode( $self->devolve, $pretty );
}

########################################################################
sub flatten {
########################################################################
  my ( $self, $path, $href ) = @_;

  # Starter condition
  $href //= {};
  $path //= $EMPTY;

  for my $key ( keys %{$self} ) {
    $href->{ $path . $SLASH . $key } = $self->{$key};

    if ( ref( $self->{$key} ) ) {
      $self->{$key}->flatten( $path . $SLASH . $key, $href );
    }
  }

  return wantarray ? %{$href} : $href;
}

########################################################################
sub new {
########################################################################
  my ( $proto, @args ) = @_;

  my $class = ref $proto || $proto;

  my $self = bless {}, $class;

  tie %{$self}, $class, @args;  ## no critic (ProhibitTies)

  return $self;
}

########################################################################
sub set {  ## no critic (ProhibitAmbiguousNames)
########################################################################
  my ( $self, @args ) = @_;

  my $num_args = @args;

  if ( $num_args == 1 ) {
    if ( ref $args[0] ) {
      my $arg = shift @args;

      if ( ref $arg && reftype($arg) eq 'ARRAY' ) {
        @args = @{$arg};
      }
      elsif ( ref $arg && reftype($arg) eq 'HASH' ) {
        @args = %{$arg};
      }
    }
    else {
      die
        "invalid type of single argument for assignment: must be an object or an array to be merged.\n";
    }
  }
  elsif ( $num_args % 2 ) {
    die "odd number of elements($num_args) in prop assignment list.\n";
  }

  foreach my $p ( pairs @args ) {

    my ( $key, $value ) = @{$p};
    $self->{$key} = $value;
  }

  return;
}

# Method to delete one or more keys from hash

########################################################################
sub delete {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  if ( @args == 1 ) {
    return delete $self->{ $args[0] };
  }
  else {
    for (@args) {
      delete $self->{$_};
    }
  }

  return;
}

########################################################################
sub get {
########################################################################
  my ( $obj, @keys ) = @_;

  if ( @keys > 1 ) {
    return Bedrock::Array->new( @{$obj}{@keys} );
  }
  elsif ( @keys == 1 ) {
    return $obj->{ $keys[0] };
  }
  else {
    return $obj;
  }
}

#
# Deprecated methods
#

########################################################################
sub value {
########################################################################
  my ( $self, @args ) = @_;

  $self->get_logger->warn('value() method is deprecated method');

  if ( @args > 0 ) {
    return wantarray ? @{$self}{@args} : $self->{ $args[0] };
  }
  else {
    return CORE::keys %{$self};
  }
}

########################################################################
sub keys {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  goto &names;
}

########################################################################
sub names {
########################################################################
  my ( $self, $sort_dir, $sort_type ) = @_;

  my @names = CORE::keys %{$self};

  my $keys = Bedrock::Array->new(@names);

  return $sort_dir ? $keys->sort( $sort_dir, $sort_type ) : $keys;
}

########################################################################
sub values {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ($self) = @_;

  my @values = CORE::values %{$self};

  return Bedrock::Array->new(@values);
}

########################################################################
sub isEmpty {  ## no critic (Capitalization, RequireArgUnpacking)
########################################################################
  return !CORE::keys %{ $_[0] };
}

1;

__END__

=pod

=head1 NAME

C<Bedrock::Hash>

=head1 SYNOPSIS

 my $ref = Bedrock::Hash->new( foo => bar );

=head1 DESCRIPTION

Create a Bedrock hash object. Implements a key/value storage object
with various useful methods.

=head1 METHODS AND SUBROUTINES

Methods should be fully documented in C<Bedrock::Text::Tagx::TAG::NoBody::Hash>

=head2 bedrock_xml

=head2 delete

=head2 devolve

=head2 exists

=head2 find

=head2 flatten

=head2 get

=head2 grep

=head2 isEmpty

=head2 json

=head2 keys

=head2 length

=head2 map

=head2 matches

=head2 names

=head2 new

=head2 print

=head2 print_compact

=head2 set

=head2 slice

=head2 sort

=head2 value

=head2 values

=head2 xml

=head2 yaml

=head1 AUTHOR

J. Srhidhar

Rob Lauer

=cut
