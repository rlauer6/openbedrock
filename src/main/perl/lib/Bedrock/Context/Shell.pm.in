#!/export/home/perl5/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Context::Shell;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA $__DEFAULT_CONFIG);
    $VERSION	= 1.02;
}
 
use Carp;
use IO::File;

use Bedrock::Context;
use Bedrock::Config;
use Bedrock::InputSource::Term;

@ISA = qw (Bedrock::Context);

#
# Use this config file if nothing specified.
#
$__DEFAULT_CONFIG = 'bedrock_sh.cfg';

#
# Object initialization at construction
# Does the following:
#    1. Open config file.
#    2. Parse input.
#    3. Enable Logging
#    4. Collect and store output file handle
# Returns the CGI object
#
sub _initialize
{
    my $self = shift;
    $self->{'CONFIG_FILE'} = $__DEFAULT_CONFIG unless exists $self->{'CONFIG_FILE'};

    my %args = @_;
    $self->{'INPUT'} = Bedrock::InputSource::Term->new;
    $self->{'CONFIG'} = Bedrock::Config->new ( $self->{'CONFIG_FILE'} );
    $self->{'OUTPUT'} = IO::Handle->new;
    $self->{'OUTPUT'}->fdopen( 'STDOUT', 'w' );
    $self;
}

#
# Get HTTP headers --empty because CGIs cannot have access to server headers
#
sub cgi_header_in
{
    &confess("cgi_header_in() should not have been invoked");
}

#
# Used to set HTTP headers
#
sub cgi_header_out
{
    &confess("cgi_header_out() should not have been invoked");
}

#
# And finally send the HTTP headers
#
sub send_http_header
{
    &confess("send_http_header() should not have been invoked");
}

#
# Method for management of cookies
#
sub getCookieValue
{
    &confess("getCookieValue() should not have been invoked");
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.3  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.2  2001/02/14 15:35:47  sridhar
# Added copyright and GPL notice
#
# Revision 1.1  2000/12/18 18:00:50  sridhar
# Moved Bedrock::SIS::Base::Shell to Bedrock::Context::Shell
#
# Revision 1.1  2000/10/16 13:59:40  sridhar
# Added SIS::Base::Shell for Bedrock shell.
#
#
