#!/export/home/perl5/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package Bedrock::Context::Shell;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA $__DEFAULT_CONFIG);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}
 
use Carp;
use IO::File;

use Bedrock::Context;
use SIS::Config;
use SIS::InputSource::Term;

@ISA = qw (Bedrock::Context);

#
# Use this config file if nothing specified.
#
$__DEFAULT_CONFIG = 'bedrock_sh.cfg';

#
# Object initialization at construction
# Does the following:
#    1. Open config file.
#    2. Parse input.
#    3. Enable Logging
#    4. Collect and store output file handle
# Returns the CGI object
#
sub _initialize
{
    my $self = shift;
    $self->{'CONFIG_FILE'} = $__DEFAULT_CONFIG unless exists $self->{'CONFIG_FILE'};

    my %args = @_;
    $self->{'INPUT'} = SIS::InputSource::Term->new;
    $self->{'CONFIG'} = SIS::Config->new ( $self->{'CONFIG_FILE'} );
    $self->{'OUTPUT'} = IO::Handle->new;
    $self->{'OUTPUT'}->fdopen( 'STDOUT', 'w' );
    $self;
}

#
# Get HTTP headers --empty because CGIs cannot have access to server headers
#
sub cgi_header_in
{
    &confess("cgi_header_in() should not have been invoked");
}

#
# Used to set HTTP headers
#
sub cgi_header_out
{
    &confess("cgi_header_out() should not have been invoked");
}

#
# And finally send the HTTP headers
#
sub send_http_header
{
    &confess("send_http_header() should not have been invoked");
}

#
# Method for management of cookies
#
sub getCookieValue
{
    &confess("getCookieValue() should not have been invoked");
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/12/18 18:00:50  sridhar
# Moved Bedrock::SIS::Base::Shell to Bedrock::Context::Shell
#
# Revision 1.1  2000/10/16 13:59:40  sridhar
# Added SIS::Base::Shell for Bedrock shell.
#
#
