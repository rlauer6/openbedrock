#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
package Bedrock::Context;

use strict;
use warnings;

use Bedrock qw(:booleans :file);
use Bedrock::Array;
use Bedrock::Hash;
use Bedrock::Constants qw(:all);
use Bedrock::Dump;
use Bedrock::Log;
use CGI;
use Carp;
use Crypt::CBC;
use Crypt::DES;
use Cwd qw(getcwd abs_path);
use Data::Dumper;
use English qw(-no_match_vars);
use File::Basename;
use IO::File;
use List::Util qw( none pairs uniq );
use Scalar::Util qw( reftype );
use Text::URLEncode;
use Log::Log4perl::Level;

use Role::Tiny::With;
with 'Bedrock::Logger';

use Readonly;

Readonly my $UPLOAD_BUFFER_SIZE => 4 * 1024;
Readonly my $UPLOAD_FILE_PERMS  => oct 777;

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

use parent qw{Exporter};

our @EXPORT_OK = qw( find_log4perl_conf init_log4perl_logger);

########################################################################
sub new {
########################################################################
  my ( $class, %args ) = @_;

  if ( $args{APACHE_HANDLER} ) {
    carp "$class: deprecated use of APACHE_HANDLER, use REQUEST_HANDLER\n";

    $args{REQUEST_HANDLER} = $args{APACHE_HANDLER};
  }

  die "usage: Bedrock::Context->new( CONFIG => config, REQUEST_HANDLER => handler\n"
    if !$args{REQUEST_HANDLER} || !$args{CONFIG};

  $args{APACHE_HANDLER} = $args{REQUEST_HANDLER};  # until we scour for APACHE...

  my $self = bless {}, $class;

  # Populate the configuration object...note that if the caller is
  # Apache::Bedrock, then the CONFIG object is most likely the fully
  # merged Bedrock site configuration. There may not be a use case for
  # calling Bedrock::Context with anything but Bedrock's configuration
  # object.
  my $config = eval {
    if ( $args{CONFIG} ) {
      return $self->config( $args{CONFIG} );
    }
    else {
      return $self->config( Bedrock::Config->new( $args{CONFIG_FILE} ) );
    }
  };

  croak "ERROR: could not create a configuration object\n$EVAL_ERROR"
    if !$config || $EVAL_ERROR;

  $self->request( $args{REQUEST_HANDLER} );

  if ( $args{OUTPUT_HANDLER} ) {
    $self->output_handler( $args{OUTPUT_HANDLER} );
    $self->response( $args{OUTPUT_HANDLER} );
  }
  else {
    $self->output_handler( $args{REQUEST_HANDLER} );
    $self->response( $self->request );
  }

  init_log4perl_logger();

  return $self;
}

########################################################################
# convience logging methods that you might NOT want to use if you
# want to see the real file and line number of log messages!!
########################################################################

{
  ## no critic (RequireArgUnpacking)
  sub debug { return shift->logger->debug(@_); }
  sub info  { return shift->logger->info(@_); }
  sub warn  { return shift->logger->warn(@_); }  ## no critic (ProhibitBuiltinHomonyms)
  sub error { return shift->logger->error(@_); }
}

########################################################################
sub find_log4perl_conf {
########################################################################
  my (%options) = @_;

  my $config_paths = $options{path_list};

  my $file = $options{file} // 'log4perl.conf';

  # At one point we added `getcwd` to the list of paths to search.
  # This is a really bad idea since we don't know where the
  # current working directory is when this is being called. We may end
  # up doing a really deep search. Accordingly, we restrict the search
  # paths to the specified configuration directories. Alternatively,
  # the configuration variable LOG4PERL can be used to explicitly call
  # out the file.

  if ( !$config_paths ) {
    my @paths = split /:/xsm, $ENV{CONFIG_PATH} // $EMPTY;

    push @paths, grep {defined} $ENV{BEDROCK_CONFIG_PATH}, $DEFAULT_BEDROCK_CONFIG_PATH;

    $config_paths = [ uniq map { abs_path $_ } @paths ];
  }

  my ($path) = find_in_path(
    find_one  => $TRUE,
    path_list => $config_paths,
    file      => $file,
  );

  return $path;
}

########################################################################
# Usage      : init_log4perl_logger(log4perl_conf)
# Purpose    : initializes Log::Log4perl logging
# Parameters : log4perl_conf - reference to a text object representing
#              Log::Log4perl configuration or the name of a file that
#              contains the configuration
# Returns    : returns a boolean that indicates the success or failure of
#              intializing Log::Log4perl
# Errors     : none
########################################################################
sub init_log4perl_logger {
########################################################################
  my ($log4perl_conf) = @_;

  my $initialized = Log::Log4perl->initialized;

  return $initialized
    if $initialized;

  my $log4perl_conf_file;

  if ( !$log4perl_conf ) {
    $log4perl_conf_file = find_log4perl_conf;
  }

  return $initialized
    if !$log4perl_conf && !$log4perl_conf_file;

  if ( !ref $log4perl_conf && -e $log4perl_conf_file ) {
    my $log4perl_conf_text = slurp_file $log4perl_conf_file;

    $log4perl_conf = \$log4perl_conf_text;
  }

  $initialized = eval { return Log::Log4perl->init($log4perl_conf); };

  if ( !$initialized ) {
    print {*STDERR} sprintf
      "WARNING: could not initialize Log::Log4perl using %s\n%s",
      $log4perl_conf, $EVAL_ERROR;
  }

  my $logger = Log::Log4perl->get_logger;

  $logger->debug(
    sprintf 'Log::Log4perl logging initialized using: %s',
    $log4perl_conf_file ? $log4perl_conf_file : ' passed configuration'
  );

  return $initialized;
}

########################################################################
sub upload_file {
########################################################################
  my ( $self, $form_var, @args ) = @_;

  my $options = {};

  my $fh = $self->cgi->param($form_var);

  my $platform = $self->cgi->param('platform');

  die 'upload_file upload error: ', $self->cgi->cgi_error()
    if !$fh;

  if ( is_hash( $args[0] ) ) {
    $options = $args[0];
  }
  else {
    $options = {@args};
  }

  $options->{path} //= $self->config->{UPLOAD_PATH} // '/tmp';

  $self->debug( 'upload_file options: ' . Bedrock::Dump::compact($options) );

  my $upload_content_type = $self->cgi->uploadInfo($fh)->{'Content-Type'};

  $options->{'content-type'} //= $options->{'Content-type'};

  # check to see if this is a valid mime-type to be uploaded
  if ( $options->{'content-type'} ) {

    my $content_type = $options->{'content-type'};

    my @content_types;

    push @content_types, is_array($content_type) ? @{$content_type} : $content_type;

    $self->debug(
      sub {
        return sprintf 'upload_file acceptable content-types: %s', join $COMMA, @content_types;
      }
    );

    if ( none { $_ eq $upload_content_type } @content_types ) {
      my $err = sprintf 'upload_file content_type error: uploading (%s), must be one of (%s)',
        $upload_content_type,
        join $COMMA, @content_types;
      die $err;
    }
  }

  # if the file came from a WinDoze machine...set the parsing appropriately
  if ( $platform && $platform =~ /win/xsmi
    || $self->cgi->param($form_var) =~ /^[[:lower:]]:.*$/ixsm ) {

    fileparse_set_fstype('MSWin32');
  }

  my ( $name, $path, $ext )
    = fileparse( scalar $self->cgi->param($form_var), qr/[.][^.]*/xsm );

  my $upload_path = $options->{path};

  if ( !-d $upload_path ) {
    die "unable to create path: $upload_path\n"
      if !mkdir $upload_path, $UPLOAD_FILE_PERMS;
  }

  if ( !-w $upload_path ) {
    die "unable to write to path: $upload_path\n";
  }

  my $upload_filename = $options->{filename} || ( $name . $ext );

  my $uploaded_file = sprintf '%s/%s', $upload_path, $upload_filename;

  $self->info( sprintf "upload_file processing: file => [%s], content-type => [%s]\n",
    $uploaded_file, $upload_content_type );

  my $maxsize = $options->{maxsize};

  # allow 1k, 1m, etc.
  if ($maxsize) {
    if ( $maxsize =~ /^(\d+)k/xsmi ) {
      $maxsize = $1 * 1024;
    }

    if ( $maxsize =~ /^(\d+)m/xsmi ) {
      $maxsize = $1 * 1024 * 1024;
    }
  }

  my $cipher;

  if ( $options->{passkey} ) {
    $options->{cipher} = $options->{cipher} || 'DES';

    $cipher = Crypt::CBC->new(
      -cipher => $options->{cipher},
      -key    => $options->{passkey}
    );

    $cipher->start('encrypting');
    $uploaded_file .= '.enc';
  }

  open my $tmp_fh, '>', $uploaded_file  ## no critic (RequireBriefOpen)
    or die "could not open $uploaded_file for writing";

  my $size;

  while ( my $bytesread = read $fh, my $buffer, $UPLOAD_BUFFER_SIZE ) {
    $size += $bytesread;

    die "File size limit reached.\n"
      if $maxsize && $size >= $maxsize;

    $self->debug( sprintf 'upload_file bytes read: %d', $bytesread );

    if ($cipher) {
      print {$tmp_fh} $cipher->crypt($buffer);
    }
    else {
      print {$tmp_fh} $buffer;
    }
  }

  if ($cipher) {
    print {$tmp_fh} $cipher->finish;
  }

  close $tmp_fh;

  return if !-s $uploaded_file;

  my %stats;

  my @file_info = stat $uploaded_file;

  @stats{qw(dev ino mode nlink uid gid rdev size atime mtime ctime blksize blocks)} = @file_info;

  %stats = (
    %stats,
    ( file           => $uploaded_file,
      $form_var      => "$name$ext",
      'content-type' => $upload_content_type,
      'cipher'       => $options->{cipher} // $EMPTY,
    )
  );

  return Bedrock::Hash->new(%stats);
}

########################################################################
sub cgi {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->{cgi} = $args[0];
  }

  if ( !$self->{cgi} ) {
    $self->{cgi} = CGI->new;
  }

  return $self->{cgi};
}

########################################################################
# Usage      : getInputValue(names)
#            : getInputValue()
# Purpose    : returns array of input values or the names
# Parameters : names : list of input variable names
# Returns    : list of values or the list of variable names
# Errors     : none
########################################################################
sub getInputValue {  ## no critic (Capitalization)
########################################################################
  my ( $self, @args ) = @_;

  if ( !defined $self->input ) {

    # Collect the input

    # - a mod_perl 1.x -> 2.x gotcha... $r->args, $r->content in array
    # context no longer supported, does not return parsed results.
    # Replaced with Apache::Request_cgi args/contents although I have a
    # feeling there is a more better faster way to do this...
    # my @args = ($self->args, $self->content);

    my @args = $self->cgi->param;

    my $input = {};

    foreach my $name (@args) {
      my @values = $self->cgi->multi_param($name);

      if ( @values > 1 ) {
        $input->{$name} = Bedrock::Array->new(@values);
      }
      else {
        $input->{$name} = $values[0];
      }
    }
    $self->input($input);
  }

  if ( @args > 0 ) {
    # Have some parameters -- need the values
    return @{ $self->input }{@args};
  }
  else {
    # No parameters -- need the names of all parameters
    return keys %{ $self->input };
  }
}

#
# Close method is used when CGI wants to close browser connection and go off
# to do something else and not keep the user waiting
#
########################################################################
sub close {  ## no critic (ProhibitBuiltinHomonyms, ProhibitAmbiguousNames)
########################################################################
  my ($self) = @_;

  return $self->output_handler->close;
}

########################################################################
sub print {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @args ) = @_;

  return $self->output_handler->print(@args);
}

########################################################################
sub cgi_header_in {
########################################################################
  my ($self) = @_;

  my $r = $self->apache_handler;

  my $headers = $r->headers_in;
  $headers //= {};

  return %{$headers};
}

########################################################################
sub cgi_header_out {
########################################################################
  my ( $self, @headers ) = @_;

  my $r = $self->apache_handler;

  # mod_perl 1/2
  return ref($r) =~ /Apache2/xsm
    ? $r->err_headers_out->add(@headers)
    : $r->header_out(@headers);
}

########################################################################
sub send_http_header {
########################################################################
  my ( $self, @headers ) = @_;

  my $r = $self->apache_handler;

  return $r->send_http_header;
}

########################################################################
sub getOutputValue {  ## no critic (Capitalization)
########################################################################
  my ( $self, @args ) = @_;

  return if !defined $self->output_vars;

  if ( @args == 1 ) {
    return $self->output_vars->{ $args[0] };
  }
  elsif (@args) {
    if ( !wantarray ) {
      confess 'Scalar context is not valid here: should be array context only';
    }

    return @{ $self->output_vars }{@args};
  }
  else {
    if ( !wantarray ) {
      confess 'Scalar context is not valid here: should be array context only';
    }
    return keys %{ $self->output_vars };
  }
}

########################################################################
sub setOutputValue {  ## no critic (Capitalization)
########################################################################
  my ( $self, @args ) = @_;

  if ( !defined $self->output_vars ) {
    $self->output_vars = {};
  }

  for my $p ( pairs @args ) {
    my ( $key, $value ) = @{$p};
    $self->output_vars->{$key} = $value;
  }

  return $self;
}

########################################################################
sub getConfigValue {  ## no critic (Capitalization)
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 0 ) {
    return wantarray ? @{ $self->config }{@args} : $self->config->{ $args[0] };
  }
  else {
    return keys %{ $self->config };
  }
}

########################################################################
sub getCookieValue {  ## no critic (Capitalization)
########################################################################
  my ( $self, @args ) = @_;

  return if !exists $ENV{HTTP_COOKIE};

  my $raw_cookie = $ENV{HTTP_COOKIE};

  if ( !exists $self->{__cookies__} ) {

    $self->{__cookies__} = {};

    for my $cookie ( split /[;,]\s?/xsm, $raw_cookie ) {
      $cookie =~ s/^\s*(.*?)\s*$/$1/xsm;

      my ( $key, $value ) = split /=/xsm, $cookie;

      $self->{__cookies__}->{$key} = Text::URLEncode::Decode($value);
    }
  }

  if ( @args == 1 ) {
    return $self->{__cookies__}->{ $args[0] };
  }
  elsif ( @args > 1 ) {
    my @values = map { $self->{__cookies__}->{$_} } @args;
    return @values;
  }
  else {
    return sort keys %{ $self->{__cookies__} };
  }
}

########################################################################
sub setCookieValue {  ## no critic (Capitalization)
########################################################################
  my ( $self, $cookie ) = @_;

  die q{something's wrong, no HEADER object defined in the context object!}
    if !$self->header;

  return $self->header->set( 'Set-Cookie', $cookie );
}

########################################################################
sub output_handler {
########################################################################
  my (@args) = @_;

  return _set( @args, 'OUTPUT_HANDLER' );
}

########################################################################
sub session {
########################################################################
  my (@args) = @_;

  return _set( @args, 'SESSION' );
}

########################################################################
sub logger {
########################################################################
  my ($self) = @_;

  return $self->get_logger;
}

########################################################################
sub config {
########################################################################
  my (@args) = @_;

  return _set( @args, 'CONFIG' );
}

########################################################################
sub input {
########################################################################
  my (@args) = @_;

  return _set( @args, 'INPUT' );
}

########################################################################
sub header {
########################################################################
  my (@args) = @_;

  return _set( @args, 'HEADER' );
}

########################################################################
sub output_vars {
########################################################################
  my (@args) = @_;

  return _set( @args, 'output_vars' );
}

########################################################################
sub request {
########################################################################
  my (@args) = @_;

  return _set( @args, '_request' );
}

########################################################################
sub apache_handler { goto &request; }
########################################################################

########################################################################
sub response {
  my (@args) = @_;
########################################################################

  return _set( @args, '_response' );
}

# deprecated
########################################################################
sub set_header {
########################################################################
  my (@args) = @_;

  return _set( @args, 'HEADER' );
}

########################################################################
sub _set {
########################################################################
  my ( $self, @args ) = @_;

  my $key;
  my $value;

  if ( @args > 1 ) {
    ( $value, $key ) = @args;
    $self->{$key} = $value;
  }
  else {
    $key = $args[0];
  }

  return $self->{$key};
}

1;

__END__

=pod

=head1 PUBLIC

Bedrock::Context - provides contextual methods for Bedrock applications

=head1 SYNOPSIS

 use Bedrock::Context;

 my $ctx = Bedrock::Context->new( CONFIG => $config, REQUEST_HANDLER => $handler );

=head1 DESCRIPTION

The context object handles the task of gathering input and writing
output based on the context (web, cli) of the application.

=head1 METHODS AND SUBROUTINES

=head2 new

 new( args )

Constructor for context object.  Returns the created object.

Mandatory arguments are as follows:

=over 5

=item REQUEST_HANDLER

A reference to an object that provides a standard set of methods for
interacting with HTTP requests.

=item OUTPUT_HANDLER

Output handler supporting at least a `print()' method. Defaults to
REQUEST_HANDLER if not specified.

=item CONFIG

Hash containing configuration information. This is usually a
deserialized representation of F<tagx.xml> if this module is being
used as part of the Bedrock application. It does not necessarily have
to contain Bedrock configuraiton information. See L</NOTES> below.

=item CONFIG_FILE

Name of a configuration file containing a serialized representation
(usually Bedrock XML) of configruation values. Configuration files can
be represented as Bedrock XML (F<.xml>), JSON (F<.json>), or YAML
(F<.yaml>) files.

=back

=head2 print

 print( list );

Sends the array of output to the destination.

=head2 cgi_header_in

 cgi_header_in()

Reads the headers.


=head2 upload_file

 upload_file(form-var-name, options ... | {})

Upload a file.

C<options> is a hash reference or a hash of options described below.

=over 5

=item path

Path where file should be stored.  Looks for C<UPLOAD_PATH> in the
configuration object.  Defaults to F</tmp>.

=item 'Content-Type'

Scalar containing the allowable mime-type or an array of allowable mime-types.

=item filename

Name of the file.

=item maxsize

Maximum size to accept.  Value can be expressed as in M[B] or K[B].

=item passkey

Encryption passkey.

=item cipher

Encryption cipher (defaults to DES)

=back

=pod

=head2 setCookieValue

 setCookieValue( cookie )

Set a cookie.

=head1 SETTERS/GETTERS

These will set or get the value associated with the name of the
method. e.g. C<output_handler()> returns the value of the
OUTPUT_HANDLER key.

=head2 apache_handler

The Apache request handler.

=head2 config

The Bedrock configuration object.

=head2 header

The header object (typically C<BLM::Startup::Header>).

=head2 input

Hash of CGI values.

=head2 outut_handler

Output handler object.

=head2 output_vars

Hash of output values.

=head2 session

Session object if available.

=head2 cgi

 cgi()

Returns a CGI object.

=head2 getInputValue

 getInputValue( [name, ...] )

Method to get input parameter(s)/value(s). Invoked either with

- A list of parameter names. Returns the value of the parameters requested

- No args. Returns the names of all parameters in the input

=head2 send_http_headers

Outputs the headers.

=head2 getOutputValue

 getOutputValue( list )

Returns a list of output values or a list of keys if no list is given.

=head2 setOutputValue

 setOutputValue(key, value)

=head2 getConfigValue

 getConfigValue( key || key-list )

Method returns a config parameter value. Used to hide the config
object from the public.

=head2 cgi_header_out

 cgi_header_out( headers )

Sends the headers to the header cache for output.

=head2 getCookieValue

 getCookieValue( cookie || cookie-list )

Method returns one or more cookies.

=head1 AUTHOR

J. Sridhar

Rob Lauer - <rlauer6@comcast.net>

=cut
