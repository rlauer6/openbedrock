#!@PERL@
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
package Bedrock::Context;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  @Bedrock::Context::ISA = qw (Exporter);
}

use Bedrock;
use Bedrock::BedrockConfig;
use Bedrock::Log;
use Bedrock::Dump;
use Bedrock::Array;

use Text::URLEncode;

use Carp;
use CGI;
use Crypt::CBC;
use Crypt::DES;
use File::Basename;
use IO::File;

use Scalar::Util qw/reftype/;

=pod

=head1 NAME

C<Bedrock::Context>

=head1 SYNOPSIS

 use Bedrock::Context;

 my $ctx = new Bedrock::Context( CONFIG => $config, APACHE_HANDLER => $handler );

=head1 METHODS

=cut


=pod

=head2 upload_file

 upload_file(form-var-name, options ... | {})

Upload a file.

C<options> is a hash reference or a hash of options described below.

=over 5

=item path

Path where file should be stored.  Looks for C<UPLOAD_PATH> in the
configuration object.  Defaults to F</tmp>.

=item 'Content-Type'

Scalar containing the allowable mime-type or an array of allowable mime-types.

=item filename

Name of the file.

=item maxsize

Maximum size to accept.  Value can be expressed as in M[B] or K[B].

=item passkey

Encryption passkey.

=item cipher

Encryption cipher (defaults to DES)

=back

=cut

sub upload_file {
  my ($self, $form_var) = (shift, shift);

  my $options  = {};

  my $fh = $self->cgi->param($form_var);

  my $platform = $self->cgi->param('platform');

  die "upload_file upload error: ", $self->cgi->cgi_error() unless $fh;

  if ( ref($_[0]) && reftype($_[0]) eq 'HASH' ) {
    $options = shift;
  }
  else {
    $options = { @_ };
  }

  &LOG_MESSAGE( MSG_DEBUG, "upload_file options: " . Bedrock::Dump::compact($options) );

  my $upload_content_type = $self->cgi->uploadInfo($fh)->{'Content-Type'};

  # check to see if this is a valid mime-type to be uploaded
  if ( $options->{'Content-type'} || $options->{'content-type'} ) {
    my $content_type = $options->{'Content-type'} || $options->{'content-type'};
    my @content_types;

    push @content_types,  ( ref($content_type) && reftype($content_type) eq 'ARRAY' ) ? @$content_type : $content_type;

    &LOG_MESSAGE(MSG_DEBUG, sprintf( "upload_file acceptable content-types: %s", join( ",", @content_types )));

    die sprintf( "upload_file content_type error: uploading (%s), must be one of (%s)",
		 $self->cgi->uploadInfo($fh)->{'Content-Type'},
		 join( ",", @content_types ) )
      unless grep { $_ eq $self->cgi->uploadInfo($fh)->{'Content-Type'} } @content_types;
  }

  # if the file came from a WinDoze machine...set the parsing appropriately
  if ( $platform =~ /win/i || $self->cgi->param($form_var) =~ /^[a-z]:.*$/i ) {
    fileparse_set_fstype('MSWin32');
  }

  my ( $name, $path, $ext ) =
  fileparse( $self->cgi->param($form_var), qr/\.[^.]*/ );

  my $upload_path;
  my $upload_filename;

  $upload_path = $options->{path} || ( $self->config->{UPLOAD_PATH} || '/tmp' );
  unless ( -d $upload_path ) {
    die "unable to create path: $upload_path\n"
      unless mkdir $upload_path, 0777;
  }

  unless (-w $upload_path ) {
    die "unable to write to path: $upload_path\n";
  }

  $upload_filename = $options->{filename} || ( $name . $ext );

  my $uploaded_file = sprintf( "%s/%s", $upload_path, $upload_filename );
  &LOG_MESSAGE( MSG_INFO, sprintf( "upload_file processing: file => [%s], content-type => [%s]\n",
				   $uploaded_file, $self->cgi->uploadInfo($fh)->{'Content-Type'}
				 )
              );

  my $buffer;
  my $bytesread;
  my $size;
  my $maxsize = $options->{maxsize};

  # allow 1k, 1m, etc.
  if ($maxsize) {
    $maxsize = $1 * 1024        if $maxsize =~ /^(\d+)k/i;
    $maxsize = $1 * 1024 * 1024 if $maxsize =~ /^(\d+)m/i;
  }

  my $cipher;

  if ( $options->{passkey} ) {
    $options->{'cipher'} = $options->{'cipher'} || 'DES';
    $cipher = Crypt::CBC->new( -cipher => $options->{cipher},
			       -key => $options->{passkey}
			     );

    $cipher->start('encrypting');
    $uploaded_file .= '.enc';
  }
    
  open TEMPFILE, ">$uploaded_file";

  while ( $bytesread = read( $fh, $buffer, 4096 ) ) {
    $size += $bytesread;
    die "File size limit reached.\n"
    if $maxsize && $size >= $maxsize;
    &LOG_MESSAGE( MSG_DEBUG,
                  sprintf( "upload_file bytes read: %d", $bytesread ) );

    if ( $cipher ) {
      print TEMPFILE $cipher->crypt( $buffer );
    }
    else {
      print TEMPFILE $buffer;
    }
  }

  print TEMPFILE $cipher->finish
    if $cipher;

  close TEMPFILE;

  if ( -s $uploaded_file ) {
    my @l    = stat($uploaded_file);

    my $stat = Bedrock::Hash->new;
    @{$stat}{qw(dev ino mode nlink uid gid rdev size atime mtime ctime blksize blocks)} = @l;

    $stat->{file}           = $uploaded_file;
    $stat->{$form_var}      = "$name$ext";
    $stat->{'content-type'} = $upload_content_type;
    $stat->{'cipher'}       = $options->{'cipher'} if $options->{'cipher'};

    return $stat;
  }
  else {
    return undef;
  }
}

=pod

=head2 cgi

 cgi()

Returns a CGI object.

=cut

sub cgi {
  $_[0]->{cgi} = $_[0]->{cgi} ? $_[0]->{cgi} : new CGI;
}

=pod

=head2 getInputValue

 getInputValue( key )

Method to get input parameter(s)/value(s). Invoked either with

- A list of parameter names. Returns the value of the parameters requested

- No args. Returns the names of all parameters in the input

=cut

sub getInputValue {
  my $self = shift;

  unless ( defined $self->input ) {

    # Collect the input

    my $r = $self->apache_handler;

    # - a mod_perl 1.x -> 2.x gotcha... $r->args, $r->content in array
    # context no longer supported, does not return parsed results.
    # Replaced with Apache::Request_cgi args/contents although I have a
    # feeling there is a more better faster way to do this...
    # my @args = ($self->args, $self->content);
    
    my @args = $self->cgi->param;

    my $input = {};
    foreach my $name (@args) {
      my @values = $self->cgi->param($name);
      if ( @values > 1 ) {
        $input->{$name} = Bedrock::Array->new(@values);
      }
      else {
        $input->{$name} = $values[0];
      }
    }
    $self->input($input);
  }

  if ( @_ > 0 ) {

    # Have some parameters -- need the values
    return @{ $self->input }{@_};
  }
  else {

    # No parameters -- need the names of all parameters
    return keys %{ $self->input };
  }
}

=pod

=head2 new

 new( args )

Constructor for Apache modules.  Returns the created object.

Mandatory arguments are as follows:

=over 5

=item  APACHE_HANDLER

Apache handler object

=item OUTPUT_HANDLER

Output handler supporting a `print()' method. Defaults to APACHE_HANDLER if not specified.

=item CONFIG

Hash containing config info

=item CONFIG_FILE

Name of the configuration file.

=back

=cut

sub new {
  my $class = shift;
  my %args  = @_;

  die "$class->new(): CONFIG or CONFIG_FILE parameter must be specified."
    unless ($args{'CONFIG'} || $args{'CONFIG_FILE'});

  die "$class->new(): APACHE_HANDLER parameter must be specified."
    unless $args{'APACHE_HANDLER'};
  
  my $self = bless {}, $class;

  my $config;

  if ( $args{'CONFIG'} ) {
    $config = $self->config($args{'CONFIG'});
  }
  else {
    $config = $self->config( Bedrock::Config->new( $args{'CONFIG_FILE'} ) );
  }

  # FIXME: we need to replace the notion of "APACHE_HANDLER" in favor
  # of the request object and detangle code from knowing about
  # upstream HTTP request initiators...i.e. could be Apache, Nginx, etc
  $self->request($args{'APACHE_HANDLE'});
  $self->apache_handler( $args{'APACHE_HANDLER'} );

  # ditto for response...
  if ( $args{'OUTPUT_HANDLER'} ) {
    $self->output_handler($args{'OUTPUT_HANDLER'});
    $self->response($args{'OUTPUT_HANLDER'});
  }
  else {
    $self->output_handler( $args{'APACHE_HANDLER'} );
    $self->response($self->request);
  }

  # At some point it was decided not to use the Apache error_log to
  # log message, so where should Bedrock startup messages being going?
  #
  # This logger records all non-page events...primarily used for
  # starting up Bedrock. Once a page is being processed, Bedrock uses
  # the TagX::Log module.

  eval {
    &Bedrock::Log::StartLogger(
			       LOGDIR     => $config->{'LOGDIR'},
			       LOGLEVEL   => $config->{'LOGLEVEL'},
			       LOGFORMAT  => $config->{'LOGFORMAT'} || '%t [%p] [%a]: %L ',
			       LOGFILE    => $config->{'LOGFILE'} || 'bedrock.log'
			      );
  };

  $self;
}

#
# Close method is used when CGI wants to close browser connection and go off
# to do something else and not keep the user waiting
#
sub close {
  shift->output_handler->close;
}

=pod

=head2 print

 print( list );

Sends the array of output to the destination.

=cut

sub print {
  shift->output_handler->print(@_);
}


=pod

=head2 cgi_header_in

 cgi_header_in()

Reads the headers.

=cut


sub cgi_header_in {
  my $self = shift;
  my $r  = $self->apache_handler;

  ref($r) =~ /Apache2/ ? %{ $r->headers_in } : $r->headers_in;
}

=pod

=head2 cgi_header_out

 cgi_header_out( headers )

Sends the headers to the header cache for output.

=cut

sub cgi_header_out {
  my $self = shift;
  my $r = $self->apache_handler;

  # mod_perl 1/2
  ref($r) =~ /Apache2/ ? $r->err_headers_out->add(@_) : $r->header_out(@_);
}


=pod

=head2 send_http_headers

Outputs the headers.

=cut

sub send_http_header {
  shift->apache_handler->send_http_header;
}

=pod

=head2 getOutputValue

 getOutputValue( list )

Returns a list of output values or a list of keys if no list is given.

=cut

sub getOutputValue {
  my $self = shift;

  return unless defined $self->output_vars;

  if ( @_ == 1 ) {
    return $self->output_vars->{ $_[0] };
  }
  elsif (@_) {
    &confess("Scalar context is not valid here: should be array context only")
    unless wantarray;
    return @{ $self->output_vars }{@_};
  }
  else {
    &confess("Scalar context is not valid here: should be array context only")
    unless wantarray;
    return keys %{ $self->output_vars };
  }
}

=pod

=head2 setOutputValue

 setOutputValue(key, value)

=cut

sub setOutputValue {
  my $self = shift;

  $self->output_vars = {} unless defined $self->output_vars;

  my %args = @_;
  my ( $key, $value );

  while ( ( $key, $value ) = each %args ) {
    $self->output_vars->{$key} = $value;
  }
}

=pod

=head2 getConfigValue

 getConfigValue( key || key-list )

Method returns a config parameter value. Used to hide the config
object from the public.

=cut

sub getConfigValue {
  my $self = shift;

  if ( @_ > 0 ) {
    wantarray ? @{ $self->config }{@_} : $self->config->{ $_[0] };
  }
  else {
    keys %{ $self->config };
  }
}

=pod

=head2 getCookieValue

 getCookieValue( cookie || cookie-list )

Method returns one or more cookies.

=cut

sub getCookieValue {
  my $self = shift;

  return unless exists $ENV{'HTTP_COOKIE'};

  my $raw_cookie = $ENV{'HTTP_COOKIE'};

  unless ( exists $self->{'__cookies__'} ) {

    $self->{'__cookies__'} = {};

    for my $cookie ( split( "[;,] ?", $raw_cookie ) ) {
      $cookie =~ s/^\s*(.*?)\s*$/$1/;
      my ( $key, $value ) = split( '=', $cookie );
      $self->{'__cookies__'}->{$key} = &Text::URLEncode::Decode($value);
    }
  }

  if ( @_ == 1 ) {
    $self->{'__cookies__'}->{ $_[0] };
  }
  elsif ( @_ > 1 ) {
    my @values;
    for (@_) {
      push @values, $self->{'__cookies__'}->{$_};
    }

    @values;
  }
  else {
    sort keys %{ $self->{'__cookies__'} };
  }
}

=pod

=head2 setCookieValue

 setCookieValue( cookie )

Set a cookie.

=cut


sub setCookieValue {
  my $self = shift;

  die "something's wrong, no HEADER object defined in the context object!"
    unless $self->header;
  
  $self->header->set('Set-Cookie', shift);
}

=pod

=head1 SETTERS/GETTERS

These will set or get the value associated with the name of the
method. e.g. C<output_handler()> returns the value of the
OUTPUT_HANDLER key.

=cut

=pod

=head2 apache_handler

The Apache request handler.

=head2 config

The Bedrock configuration object.

=head2 header

The header object (typically C<BLM::Startup::Header>).

=head2 input

Hash of CGI values.

=head2 outut_handler

Output handler object.

=head2 output_vars

Hash of output values.

=head2 session

Session object if available.

=cut

sub output_handler {
  _set(@_, 'OUTPUT_HANDLER');
}

sub apache_handler {
  _set(@_, 'APACHE_HANDLER');
}

sub session {
  _set( @_, 'SESSION');
}

sub config {
  _set(@_, 'CONFIG');
}

sub input {
  _set(@_, 'INPUT');
}

sub header {
  _set( @_, 'HEADER');
}

sub output_vars {
  _set( @_, 'output_vars');
}

sub request {
  _set(@_, '_request');
}

sub response {
  _set(@_, '_response');
}

# deprecated
sub set_header {
  _set(@_, 'HEADER');
}

sub _set {
  my $self = shift;

  my $key;
  my $value;

  if ( @_ > 1 ) {
    ($value, $key) = @_;
    $self->{$key} = $value;
  }
  else {
    $key = $_[0];
  }

  $self->{$key};
}


=pod

=head1 AUTHOR

J. Sridhar

Rob Lauer - <rlauer6@comcast.net>

=cut

1;
