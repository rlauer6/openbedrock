package Bedrock::Logger;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use Role::Tiny;

use Bedrock::Constants qw(:log_levels);
use Data::Dumper;
use English    qw(-no_match_vars);
use List::Util qw(none);
use Log::Log4perl::Level;
use Log::Log4perl;

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

our $DEFAULT_CONFIG = <<'END_OF_CONFIG';
log4perl.rootLogger=ERROR, Screen
log4perl.appender.Screen = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr = 1
log4perl.appender.Screen.autoflush = 1
log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Bedrock.layout.ConversionPattern=[%%d{EEE MMM d HH:mm:ss.SSS000 yyyy}] [%%c:%%p] [pid %%P] %%M(%%L) - %%m%%n
log4perl.category.%s = %s, Screen
log4perl.additivity.%s = 0
END_OF_CONFIG

########################################################################
sub get_logger {
########################################################################
  my ($self) = @_;

  my $category = $self && ref $self ? ref $self : $PROGRAM_NAME;

  return Log::Log4perl->get_logger($category)
    if Log::Log4perl->initialized();

  my $level = $ENV{LogLevel};

  if ( !$level || none { lc $level eq $_ } keys %LOG4PERL_LOG_LEVELS ) {
    $level = 'ERROR';
  }
  elsif ( $ENV{DEBUG} ) {
    $level = 'DEBUG';
  }
  else {
    $level = 'ERROR';
  }

  my $conf = sprintf $DEFAULT_CONFIG, $category, uc($level), $category;

  Log::Log4perl->init( \$conf );

  my $logger = Log::Log4perl->get_logger($category);

  $logger->debug( sprintf 'logging initialized with a default logger at [%s] level', $level );

  return $logger;
}

1;

__END__

=pod

=head1 NAME

Bedrock::Logger - Role to provide logging for Bedrock internals and
Bedrock applications

=head1 SYNOPSIS

 use Role::Tiny::With;
 with 'Bedrock::Logger';

 sub method {
   my ($self) = @_;

   $self->get_logger(ref $self)->debug('some message');
   ...
 }

=head1 DESCRIPTION

L<Bedrock::Logger> provides a role for adding logging to Bedrock's
internal modules. Using this role provides centralized, granular
logging throughout the Bedrock implementation. The role can also be
used by other scripts or modules to provide logging via
L<Log::Log4perl>.

Bedrock is more than just a templating engine. Components of Bedrock
can be used to create web applications or Bedrock can be used
stand-alone in a Unix/Linux environment. Logging is an important
feature that helps developers monitor and debug their applications. As
a web application, Bedrock can be used with Apache's C<mod_perl>
handler or  can be run as a CGI script. Because of the
multi-environment nature of Bedrock, logging can become a bit more
complicated. While you could write all message to STDERR and hope
something intelligent is capturing those logs, a better approach is to
use a logger like L<Log::Log4perl>.

Ideally, a framework provides I<granular logging> for your
applications. For logging, granularity means that we can log at at
different log levels at different places in our
application. Historically, Bedrock provided some logging
compartmentalization by creating separate page logs.  Bedrock produced
two types of logs, one that contained messages as Bedrock started and
one as Bedrock began to interpret your Bedrock pages. The latter logs
were called page logs since each log was named for the page being
processed. Logging information from your Bedrock pages is done using
the E<lt>traceE<gt> tag or by using C<--verbose> option in a tag to
dump additional tag processing data to the page log.

This separation of logs tended to make debugging difficult as well
as necessitate fastidious cleanup procedures even though page logs
could be limited in size. Further, the log messages were usually
sparse and not always helpful in finding bugs within Bedrock itself.

Beginning with version 3.2.x of Bedrock, logging is now done using
L<Log::Log4perl> which provides a rich set of features that give
Bedrock much more granularity. Using L<Log::Log4perl>
provides the developer with a mechanism for logging anywhere in the
application (or Bedrock itself) at any level.

=head1 Log::Log4perl CONFIGURATION

All of Bedrock's internal modules use the L<Bedrock::Logger> role for
logging. Modules simply use the the C<get_logger()> method provided by
the role, trusting that the L<Log::Log4perl> initialization and
configuration have already been handled. L<Log::Log4perl>
configuration is controlled centrally via a configuration file
typically located somewhere in Bedrock's configuration path. You can
however override the location of the L<Log::Log4perl> configuration
file by setting the configuration variable C<LOG4PERL> in Bedock's
configuration file (F<tagx.xml>).

 <scalar name="LOG4PERL">/var/www/config/log4perl.conf</scalar>

A default configuration file is provided that looks something like this:

  ########################################################################
  # Appenders
  ########################################################################
  
  ## rootLogger
  log4perl.rootLogger=ERROR, Bedrock
  
  ## Bedrock
  log4perl.appender.Bedrock=Log::Log4perl::Appender::Screen
  log4perl.appender.Bedrock.autoflush=1
  log4perl.appender.Bedrock.stderr=1
  log4perl.appender.Bedrock.layout=PatternLayout
  log4perl.appender.Bedrock.layout.ConversionPattern=%d (%r) (%p) [%P] [%l] %c - %m%n
  
  ### Page Logging
  log4perl.appender.BedrockPage=Log::Log4perl::Appender::Screen
  log4perl.appender.BedrockPage.stderr=1
  log4perl.appender.BedrockPage.autoflush=1
  log4perl.appender.BedrockPage.layout=PatternLayout
  log4perl.appender.Bedrock.layout.ConversionPattern=[%d{EEE MMM d HH:mm:ss.SSS000 yyyy}] [%c:%p] [pid %P] %M(%L) - %m%n
  
  #########################################################################
  ## Categories
  #########################################################################
  ### Bedrock::Apache::Bedrock
  log4perl.category.Apache.Bedrock=ERROR, Bedrock
  log4perl.additivity.Apache.Bedrock=0
  
  ### TagX::
  log4perl.category.TagX=ERROR BedrockPage
  log4perl.additivity.TagX=0

Using this configuration, Bedrock will write all log information to
STDERR at the ERROR level. This implies that, running Bedrock as an
Apache web application context, your logs will be written to wherever
your Apache configuration has directed STDERR. In a command line
context, logs will be written to the console unless you have
redirected STDERR.

Of course, you can alter the <Log::Log4perl>'s configuration file to
configure different appenders writing logs at any level.

Note in the configuration above our category I<TagX> uses the
I<BedrockPage> appender which as configured will send all page
processing messages to STDERR.

If you want to send all of Bedrock's page processing messages to a
different location, you can redefined the appender.

  ### Page Logging
  log4perl.appender.BedrockPage=Log::Log4perl::Appender::File
  log4perl.appender.BedrockPage.filename=/var/log/httpd/bedrock.log
  log4perl.appender.BedrockPage.mode=append
  log4perl.appender.BedrockPage.autoflush=1
  log4perl.appender.BedrockPage.layout=PatternLayout
  log4perl.appender.Bedrock.layout.ConversionPattern=[%d{EEE MMM d HH:mm:ss.SSS000 yyyy}] [%c:%p] [pid %P] %M(%L) - %m%n

=head2 LOG LEVELS

You can control the logging level by altering the configuration file
or using the C<--verbose> option in a tag.

When you use the C<--verbose> option for a tag, Bedrock will set the
logging level during page processing to I<DEBUG>. Using two
C<--verbose> options will set the logging level to I<TRACE>.

Whenever you use the E<lt>traceE<gt> tag the logging level will be set
to I<DEBUG>.

=head2 Log::Log4perl::Layout::PatternLayout

 %c Category of the logging event.
 %C Fully qualified package (or class) name of the caller
 %d Current date in yyyy/MM/dd hh:mm:ss format
 %F File where the logging event occurred
 %H Hostname (if Sys::Hostname is available)
 %l Fully qualified name of the calling method followed by the
    callers source the file name and line number between 
    parentheses.
 %L Line number within the file where the log statement was issued
 %m The message to be logged
 %m{chomp} The message to be logged, stripped off a trailing newline
 %M Method or function where the logging request was issued
 %n Newline (OS-independent)
 %p Priority of the logging event
 %P pid of the current process
 %r Number of milliseconds elapsed from program start to logging 
    event
 %R Number of milliseconds elapsed from last logging event to
    current logging event 
 %T A stack trace of functions called
 %x The topmost NDC (see below)
 %X{key} The entry 'key' of the MDC (see below)
 %% A literal percent (%) sign

=head2 DEFAULT CONFIGURATION

In addition to providing the C<get_logger()> method which returns a
L<Log::Log4perl> logger, the role will also provide a default
configuration if L<Log::Log4perl> has not yet been initialized. The
configuration template is show below. The category and log level
paraemters for the configuration are determined by the caller package
and an environment variable (C<LogLevel> or C<DEBUG>).

 log4perl.rootLogger=ERROR, Screen
 log4perl.appender.Screen = Log::Log4perl::Appender::Screen
 log4perl.appender.Screen.stderr = 1
 log4perl.appender.Screen.autoflush = 1
 log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
 log4perl.appender.Bedrock.layout.ConversionPattern=[%d{EEE MMM d HH:mm:ss.SSS000 yyyy}] [%c:%p] [pid %P] %M(%L) - %m%n
 log4perl.category.%s = %s, Screen
 log4perl.additivity.%s = 0

=head3 Why is there a default configuration?

Prior to Bedrock's initialization phase, if we want to log via
L<Log::Log4perl> then we need to execute it's C<init()>
method. Additionally, if you want to be lazy, but still use
L<Log::Log4perl> in your script, you can do that simply by adding the
role.

 use Role::Tiny::With;
 with 'Bedrock::Logger';

 $ENV{LogLevel} = 'debug';

 get_logger()->debug("Hello World!");

Of course you could also have used L<Log::Log4perl>'s easy mode but
without some of the benefits that the default configuation might
provide.

 use Log::Log4perl qw(:easy);

 Log::Log4perl->easy_init($DEBUG);

 get_logger()->debug("Hello World!");

=head3 When (and where) is L<Log::Log4perl> Initialized?

When you use the L<Bedrock::Logger> role and the C<get_logger()>
method, as mentioned above, the C<get_logger()> method will provide a
default configuration if L<Log::Log4perl> has not yet been
initialized. Bedrock's initialization and the logging initialization
process are described below.

=over 5

=item Bedrock Running with C<mod_perl>

Note that the default configuration will output all log messages to
STDERR implying that all messages will ultimately end up wherever
Apache is sending STDERR output. The level of logging however is
initially determined by the level defined in Apache's
configuration. After the C<Apache::Bedrock> handler processes Bedrock's
configuration files, the level is determined by your F<log4perl.conf>
file.

=over 10

=item 1. Client HTTP requests sent to Apache::Bedrock

In this phase the C<Apache::Bedrock> handler uses Apache's request
object's C<log> method to fetch a logger and log at the level defined
in Apache's configuation file. Startup messages and errors encountered
prior to Bedrock's configuration being completed are therefore logged
using Apache's loggers.

=item 2. Apache::Bedrock processes Bedrock configuration files

The handler reads all of Bedrock's configuration files and creates a
I<context> object using L<Bedrock::Context>. The I<context> object
looks for a F<log4perl.conf> file somewhere in Bedrock's configuration
file or uses the file defined in the C<LOG4PERL> configuration
variable typically set in F<tagx.xml>.

Note that the C<LOG4PERL> configuration value can be defined in any
other configuration file that is merged into the final configuration
object in this phase. L<Bedrock::Context> will attempt to initialize
L<Log::Log4perl> wherever it finds a valid L<Log::Log4perl>
configuration.

=item 3. Apache::Bedrock passes control to Bedrock's tag processor

During this phase, Bedrock modules call the C<get_logger()> method
defined by the L<Bedrock::Logger> role. Logging is controlled by the
configuration found in step 2 above with exception that the
E<lt>traceE<gt> tag and C<--verbose> options will alter the log level
for the during tag processing.

=back

=item Bedrock running as a CGI

Whe Bedrock is run as CGI under Apache, Apache passes control to the
handler defined in Apache's configuration file for C<bedrock-cgi>
(F</usr/lib/bedrock/cgi-bin/bedrock.cgi>). This script creates a
request object using L<Apache::Request_cgi> that it passes to
L<Apache::Bedrock>. This module also provides a C<log> method that
returns a logger, but in this case, the logger was provisioned using
L<Bedrock::Logger>.  Neither C<bedrock.cgi> nor L<Apache::Request_cgi>
intialize L<Log::Log4perl>, therefore the default configuration
provided by L<Bedrock::Logger> is used. Again, the default is to log
messages to STDERR using L<Log::Log4perl>.

The log level that L<Apache::Bedrock> will log at during the
initialization phase is determined by either the environment variables
C<DEBUG> or C<LogLevel> or an environment variable you can
set in Apache's configuration file (C<BedrockLogLevel>). Note this is
analogous to Apache's C<LogLevel> and is only used by the request
object. Once Bedrock is initialized logging is totally controlled by
the L<Log::Log4perl> configuration.

Processing then proceeds to Step 2 as describe for C<mod_perl> above.

=back

=head1 METHODS AND SUBROUTINES

=head2 get_logger

 get_logger(category)

This method will retrieve a logger based on the class of the
caller. If C<Log::Log4perl> has not been initialized, you'll get a
default logger, logging to STDERR.

=head1 SEE OTHER

L<Log::Log4perl>

=head1 AUTHOR

BIGFOOT - <bigfoot@cpan.org>

=cut
