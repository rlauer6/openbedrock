package Bedrock::Logger;

use Role::Tiny;

use Log::Log4perl;
use Log::Log4perl::Level;

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolationOfMetachars)

########################################################################
sub get_logger {
########################################################################
  my ($self) = @_;

  if ( !Log::Log4perl->initialized() ) {

    my $conf = <<'CONF';
log4perl.appender.Screen = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr = 1
log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %%H %%d [%%P] - %%F %%M %%L %%c - %%m%%n
log4perl.category.%s = ERROR, Screen
log4perl.additivity.%s = 0
CONF
    $conf = sprintf $conf, ref $self, ref $self;

    Log::Log4perl->init( \$conf );
    my $logger = Log::Log4perl->get_logger( ref $self );

    $logger->error('logging initialized with a default logger');
  }

  return Log::Log4perl->get_logger( ref $self );
}

1;

__END__

=pod

=head1 Name

Bedrock::Logger - Role to provide logging for Bedrock internals

=head1 SYNOPSIS

 use Role::Tiny::With;
 with 'Bedrock::Logger';

 sub method {
   my ($self) = @_;

   $self->get_logger(ref $self)->debug('some message');
   ...
 }

=head1 DESCRIPTION

A role for adding logging to any Bedrock Perl module. Using this role
will guarantee that you can at least log to STDERR succesfully with a
well formatted log message.

=head1 METHODS AND SUBROUTINES

=head2 get_logger

 get_logger(category)

This method will retrieve a logger based on the class of the
caller. If C<Log::Log4perl> has not been initialized, you'll get a
default logger, logging to STDERR.

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.met>

=cut
