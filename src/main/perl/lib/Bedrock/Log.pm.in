#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Log;

use Carp;

use File::Basename;
use IO::Handle;
use IO::File;
use Cwd;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @EXPORT @EXPORT_OK $CutoffLevel $Log_File);

  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
  @ISA = qw (Exporter);
}

@EXPORT = qw (LOG_MESSAGE
MSG_ABORT MSG_DEBUG MSG_INFO MSG_STATUS MSG_WARNING MSG_ERROR
MSG_SYSERROR MSG_FATAL MSG_QUIT);

@EXPORT_OK = qw (StartLogger);

use constant MSG_ABORT    => 1 << 0;
use constant MSG_DEBUG    => 1 << 1;
use constant MSG_INFO     => 1 << 2;
use constant MSG_STATUS   => 1 << 3;
use constant MSG_WARNING  => 1 << 4;
use constant MSG_ERROR    => 1 << 5;
use constant MSG_SYSERROR => 1 << 6;
use constant MSG_FATAL    => 1 << 7;

# Set abort flag on a loglevel
sub MSG_QUIT { $_[0] | MSG_ABORT }

# Extract level
sub GET_LEVEL { $_[0] & ( ~MSG_ABORT ) }

# Check whether abort set
sub GET_ABORT { $_[0] & MSG_ABORT }

$CutoffLevel = MSG_DEBUG;
$Log_File;

my $MailLevels;
my %LevelStrings = ( &MSG_DEBUG    => q(MSG_DEBUG),
                     &MSG_INFO     => q(MSG_INFO),
                     &MSG_STATUS   => q(MSG_STATUS),
                     &MSG_WARNING  => q(MSG_WARNING),
                     &MSG_ERROR    => q(MSG_ERROR),
                     &MSG_SYSERROR => q(MSG_SYSERROR),
                     &MSG_FATAL    => q(MSG_FATAL)
                   );

sub StartLogger {
  my %args = @_;

  # Pick a directory to write the log file from, depending on where the file
  # can be written: 1. User preference 2. Current dir 3. /tmp

  my $dir = undef;
  for ( $args{'LOGDIR'}, getcwd(), '/tmp' ) {
    next                                     unless $_;
    warn "Warning! [$_] is not a directory!" unless -d $_;
    warn "Warning! [$_] is not writable!"    unless -w $_;
    if ( -d $_ && -w $_ ) {
      $dir = $_;
      last;
    }
  }

  # return undef if cannot open logfile
  return undef unless $dir;

  $CutoffLevel = do {
    if ( $args{'LOGLEVEL'} and $LevelStrings{ $args{'LOGLEVEL'} } ) {
      $args{'LOGLEVEL'};
    }
    elsif ( $args{'LOGLEVEL'} and defined &{ $args{'LOGLEVEL'} } ) {
      &{ $args{'LOGLEVEL'} };
    }
    else { MSG_INFO }
  };

  # Copy maillevels
  $MailLevels = $args{'MAILLEVEL'}
  if defined( $args{'MAILLEVEL'} )
    and ref( $args{'MAILLEVEL'} ) eq 'HASH';

  # Make the logfile name
  if ( $args{'LOGFILE'} ) {
    $Log_File = $dir . q(/) . $args{'LOGFILE'};
  }
  else {
    $Log_File = $dir . q(/) . basename( $0, '.pl', '.cgi' ) . q(.log);
  }

  # Maxsize manipulation
  my $maxsize = defined( $args{'MAXSIZE'} ) ? $args{'MAXSIZE'} : 200000;
  if ( $maxsize == 0 or ( stat($Log_File) )[7] > $maxsize ) {
    open( FILE, ">$Log_File" );
    close FILE;
  }

  warn sprintf( "Bedrock::Log is logging to: [%s]", $Log_File );

  # Redirect STDERR too to append to logfile
  unless ( open( STDERR, ">> $Log_File" ) ) {
    warn "Unable to append to log file $Log_File: $!\n";
    return;
  }

  my $fd = new_from_fd IO::Handle( 'STDERR', "a" );
  $fd->autoflush(1);
  $fd->close;

  # And log a sample message
  LOG_MESSAGE( MSG_INFO, "=" x 80 . "\n$0: Starting now" );

  # Log die and warn errors too if not redirected
  unless ( $SIG{__WARN__} ) {
    $SIG{__WARN__} = sub { unshift @_, MSG_WARNING; goto &LOG_MESSAGE };
  }
  unless ( $SIG{__DIE__} ) {
    $SIG{__DIE__} = sub { unshift @_, MSG_FATAL; goto &LOG_MESSAGE };
  }

  # To indicate success to those who might want it
  1;
}

sub LOG_MESSAGE {
  my $arg_level = shift;
  my $level     = &GET_LEVEL($arg_level);
  my $abort     = &GET_ABORT($arg_level);

  # Check that level is valid and return if below cut off level
  $level = MSG_INFO unless defined($level) and $LevelStrings{$level};
  if ( $level >= $CutoffLevel ) {

    # Convert level to string
    my $level_string = $LevelStrings{$level};

    # Return undef if cannot write to file
    my $fd;

    if ($Log_File) {
      $fd = new IO::File( $Log_File, "a" );
      return undef unless $fd;
    }
    else {
      $fd = IO::Handle->new_from_fd( \*STDERR, "a" );
      return undef unless $fd;
    }

    $fd->autoflush(1);

    # Make time
    my @t = localtime;
    my $time = sprintf "%02d/%02d/%4d %02d:%02d:%02d", $t[4] + 1, $t[3],
    1900 + $t[5], $t[2], $t[1], $t[0];

    # Make caller
    my ( $pack, $filename, $line ) = caller;

    # And print message
    $fd->print(
              "\n$time \[$$\]\t$level_string\t$pack\:\:$filename($line)\n@_\n");
    $fd->print("\t$!\n") if $level == &MSG_SYSERROR;
  }

  confess qq(Program aborted.\n) if $abort;

  1;
}

#
# Name of Release: $Name$
# $Log$
# Revision 1.7  2011/12/28 17:16:43  eutl420
# - export $CutoffLevel, $Log_File as package globals
# - remove spurious warning message
#
# Revision 1.6  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.5  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.4  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.3  2010/11/29 15:57:52  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.2  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.1  2009/12/28 19:30:16  rlauer
# removing SIS:stuff, moving to Bedrock::stuff
#
# Revision 1.6  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.5  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.4  2001/02/14 15:35:48  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2000/12/12 20:19:27  sridhar
# Logfile can be specified with paramter LOGFILE
#
# Revision 1.2  2000/10/17 15:36:19  sridhar
# Complains loudly (using `warn') if unable to open log file. Useful
# while doing bedrock shell
#
# Revision 1.1  2000/09/18 14:20:26  sridhar
# Moved some generally useful modules under Perl/SIS to Perl/Bedrock/SIS.
#
# Revision 1.3  2000/03/30 18:00:46  sridhar
# 1. Implemented MAXSIZE feature where the log file is truncated if its
# size is above a certain limit at the start of logging.
# 2. Added `die' and `warn' handlers to log messages with trace info.
# 3. Changed format of time to one more easily searched
# 4. Added PID to message header
#
# Revision 1.2  2000/02/08 20:26:40  sridhar
# Removed 'use strict' in this modules due to errors.
#
# Revision 1.1  2000/02/04 16:29:15  sridhar
# Added SIS::Log -- the mother of all logger modules.
#
#

1;
