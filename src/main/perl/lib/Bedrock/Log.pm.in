#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Log;

use Carp;

use File::Basename;
use IO::Handle;
use IO::File;
use Cwd;

BEGIN {
  use Exporter ();
  use vars qw (@ISA @EXPORT @EXPORT_OK $CutoffLevel $Log_File $LOGFORMAT);

  @ISA = qw (Exporter);
}

@EXPORT = qw (LOG_MESSAGE
	      MSG_ABORT MSG_DEBUG MSG_INFO MSG_STATUS MSG_WARNING MSG_ERROR
	      MSG_SYSERROR MSG_FATAL MSG_QUIT
	    );

@EXPORT_OK = qw (StartLogger LogLevel);

use constant MSG_ABORT    => 1 << 0;
use constant MSG_DEBUG    => 1 << 1;
use constant MSG_INFO     => 1 << 2;
use constant MSG_STATUS   => 1 << 3;
use constant MSG_WARNING  => 1 << 4;
use constant MSG_ERROR    => 1 << 5;
use constant MSG_SYSERROR => 1 << 6;
use constant MSG_FATAL    => 1 << 7;

=pod

=head1 PUBLIC

C<Bedrock::Log> - Logging functions for Bedrock.

=head1 SYNOPSIS

 use Bedrock::Log qw/StartLogger/;

 StartLogger(
             LOGDIR   => '/var/log',
             LOGLEVEL => MSG_INFO,
             LOGFILE  => 'mylog.log',
             MAXSIZE  => -1
            );

  LOG_MESSAGE( MSG_INFO, "this is a log message" );

=head1 DESCRIPTION

Simple logger with levels.  Levels are defined as constants:

 MSG_ABORT
 MSG_DEBUG
 MSG_INFO
 MSG_STATUS
 MSG_WARN
 MSG_ERROR
 MSG_SYSERROR
 MSG_FATAL

The highest (least verbose) is C<MSG_FATAL>.

=head1 NOTES

=head1 METHODS

=head2 LOG_MESSAGE

 LOG_MESSAGE( level, message )

=head2 StartLogger

=cut

# Set abort flag on a loglevel
sub MSG_QUIT { $_[0] | MSG_ABORT }

# Extract level
sub GET_LEVEL { $_[0] & ( ~MSG_ABORT ) }

# Check whether abort set
sub GET_ABORT { $_[0] & MSG_ABORT }

$CutoffLevel = MSG_DEBUG;

my $MailLevels;
my %LevelStrings = ( &MSG_DEBUG    => q(MSG_DEBUG),
                     &MSG_INFO     => q(MSG_INFO),
                     &MSG_STATUS   => q(MSG_STATUS),
                     &MSG_WARNING  => q(MSG_WARNING),
                     &MSG_ERROR    => q(MSG_ERROR),
                     &MSG_SYSERROR => q(MSG_SYSERROR),
                     &MSG_FATAL    => q(MSG_FATAL)
                   );

sub StartLogger {
  my %args = @_;

  # Pick a directory to write the log file from, depending on where the file
  # can be written: 1. User preference 2. Current dir 3. /tmp

  my $dir = undef;

  for ( $args{'LOGDIR'}, getcwd(), '/tmp' ) {
    next unless $_;

    warn "Warning! [$_] is not a directory!" unless -d $_;
    warn "Warning! [$_] is not writable!"    unless -w $_;

    if ( -d $_ && -w $_ ) {
      $dir = $_;
      last;
    }
  }

  # return undef if cannot open logfile
  return undef unless $dir;

  $CutoffLevel = do {
    if ( $args{'LOGLEVEL'} and $LevelStrings{ $args{'LOGLEVEL'} } ) {
      $args{'LOGLEVEL'};
    }
    elsif ( $args{'LOGLEVEL'} and defined &{ $args{'LOGLEVEL'} } ) {
      &{ $args{'LOGLEVEL'} };
    }
    else { MSG_INFO }
  };

  # Copy maillevels
  $MailLevels = $args{'MAILLEVEL'}
  if defined( $args{'MAILLEVEL'} )
    and ref( $args{'MAILLEVEL'} ) eq 'HASH';

  # Make the logfile name
  if ( $args{'LOGFILE'} ) {
    $Log_File = $dir . q(/) . $args{'LOGFILE'};
  }
  else {
    $Log_File = $dir . q(/) . basename( $0, '.pl', '.cgi' ) . q(.log);
  }

  # Truncate logs if it has reached limit
  my $maxsize = defined( $args{'MAXSIZE'} ) ? $args{'MAXSIZE'} : 200000;
  if ( $maxsize == 0 || ( $maxsize > 0 && ( stat($Log_File) )[7] > $maxsize ) ) {
    open( FILE, ">$Log_File" );
    close FILE;
  }

  unless ( $args{LOG_REDIRECT_STDERR_OFF} ) {
    # Redirect STDERR too to append to logfile
    unless ( open( STDERR, ">> $Log_File" ) ) {
      warn "Unable to append to log file $Log_File: $!\n";
      return;
    }
  }
      
  $LOGFORMAT = $args{'LOGFORMAT'}
    if exists $args{'LOGFORMAT'};

  # Log die and warn errors too if not redirected and not in an eval {} 
  unless ( $SIG{__WARN__} ) {
    $SIG{__WARN__} = sub {
      return unless defined $^S and $^S == 0;
      unshift @_, MSG_WARNING; goto &LOG_MESSAGE
    };
  }
  
  unless ( $SIG{__DIE__} ) {
    $SIG{__DIE__} = sub {
      return unless defined $^S and $^S == 0;
      unshift @_, MSG_FATAL; goto &LOG_MESSAGE
    };
  }

  1;
}

sub LogLevel {
  return $LevelStrings{$_[0]};
}

sub format_message {
  my $level = shift;

  my %vars = (
	      '%a' => $ENV{REMOTE_ADDR},
	      '%A' => $ENV{SERVER_ADDR},
	      '%f' => $ENV{REQUEST_URI},
	      '%h' => $ENV{REMOTE_HOST},
	      '%H' => $ENV{SERVER_PROTOCOL},
	      '%L' => $LevelStrings{$level},
	      '%m' => $ENV{REQUEST_METHOD},
	      '%p' => $ENV{SERVER_NAME},
	      '%P' => $$,
	      '%q' => $ENV{QUERY_STRING},
	      '%t' => scalar(localtime),
	      '%u' => $ENV{REMOTE_USER} || $ENV{REDIRECT_REMOTE_USER}
	     );

  my $message = $LOGFORMAT;

  foreach my $v ( keys %vars ) {
    $message =~s/$v/$vars{$v}/g;
  }

  return $message . "@_\n";
}

sub LOG_MESSAGE {
  my $arg_level = shift;
  
  my $level     = &GET_LEVEL($arg_level);
  my $abort     = &GET_ABORT($arg_level);

  # Check that level is valid and return if below cut off level
  $level = MSG_INFO unless defined($level) and $LevelStrings{$level};
  if ( $level >= $CutoffLevel ) {

    # Convert level to string
    my $level_string = $LevelStrings{$level};

    # Return undef if cannot write to file
    my $fd;

    if ($Log_File) {
      $fd = new IO::File( $Log_File, "a" );
      return undef unless $fd;
    }
    else {
      $fd = IO::Handle->new_from_fd( \*STDERR, "a" );
      return undef unless $fd;
    }

    $fd->autoflush(1);

    # old-school Bedrock log format
    unless ( defined $LOGFORMAT ) {
      # Make time
      my @t = localtime;
      my $time = sprintf(
			 "%02d/%02d/%4d %02d:%02d:%02d", 
			 $t[4] + 1, $t[3], 1900 + $t[5], $t[2], $t[1], $t[0]
			);

      # Make caller
      my ( $pack, $filename, $line ) = caller;

      # And print message
      unshift @_, "$time \[$$\]\t$level_string\t$pack\:\:$filename($line)\n";
    }

    $fd->print( format_message( $level, @_ ) );
    $fd->print("    $!\n") if $level == &MSG_SYSERROR;
  }

  confess qq(Program aborted.\n) if $abort;
}

1;
