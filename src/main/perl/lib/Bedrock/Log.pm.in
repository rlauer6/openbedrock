#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Log;

use strict;
use warnings;

use English qw{-no_match_vars};
use Bedrock::Constants qw{:chars};
use Data::Dumper;
use Cwd;
use Carp;

use parent qw{Exporter};

use Role::Tiny::With;
with 'Bedrock::Logger';

use Log::Log4perl::Level;

use constant {
  MSG_ABORT    => $FATAL,
  MSG_DEBUG    => $DEBUG,
  MSG_ERROR    => $ERROR,
  MSG_FATAL    => $FATAL,
  MSG_INFO     => $INFO,
  MSG_QUIT     => $FATAL,
  MSG_STATUS   => $INFO,
  MSG_SYSERROR => $ERROR,
  MSG_TRACE    => $TRACE,
  MSG_WARNING  => $WARN,
};

our @EXPORT = qw(
  LOG_MESSAGE
  MSG_ABORT
  MSG_DEBUG
  MSG_INFO
  MSG_STATUS
  MSG_WARNING
  MSG_ERROR
  MSG_SYSERROR
  MSG_FATAL
  MSG_QUIT
);

our @EXPORT_OK = qw(StartLogger LogLevel);

our %LEVELSTRINGS = (
  $DEBUG   => 'debug',
  $INFO    => 'info',
  $WARNING => 'warning',
  $ERROR   => 'error',
  $FATAL   => 'fatal',
  $TRACE   => 'trace',
);

sub GET_LEVEL { goto &LogLevel; }

our $LOG_MAXSIZE = 0;

########################################################################
sub StartLogger {
########################################################################
  my (%options) = @_;

  if ( keys %options ) {
    my $logfile = $options{LOGFILE};

    croak 'usage: StartLogger( LOGFILE => some-file, ... );'
      if !$logfile;

    my $level = $options{LOGLEVEL} // $INFO;
    $level = uc $LEVELSTRINGS{$level};

    my $logdir = $options{LOGDIR} // getcwd;

    my $conf = <<'END_OF_CONF';
log4perl.rootLogger=%s, File
log4perl.appender.File = Log::Log4perl::Appender::File
log4perl.appender.File.autoflush = 1
log4perl.appender.File.filename=%s
log4perl.appender.File.mode=append
log4perl.appender.File.layout = Log::Log4perl::Layout::PatternLayout
log4perl.appender.File.layout.ConversionPattern = %%H %%d [%%P] - %%F %%M %%L %%c - %%m%%n
END_OF_CONF

    my $path = sprintf '%s/%s', $logdir, $logfile;

    $conf = sprintf $conf, $level, $path;

    Log::Log4perl->init( \$conf );
  }

  my $logger = get_logger();

  return get_logger();
}

########################################################################
sub LogLevel {
########################################################################
  my $level = get_logger->level;

  return $LEVELSTRINGS{$level};
}

########################################################################
sub LOG_MESSAGE {
########################################################################
  my ( $level, @args ) = @_;

  $level = $LEVELSTRINGS{$level};

  return get_logger()->$level(@args);
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<Bedrock::Log> - Logging functions for Bedrock.

=head1 SYNOPSIS

 use Bedrock::Log qw/StartLogger/;

 StartLogger;

 StartLogger(
             LOGDIR   => '/var/log',
             LOGLEVEL => MSG_INFO,
             LOGFILE  => 'mylog.log',
             MAXSIZE  => -1
            );

 LOG_MESSAGE( MSG_INFO, "this is a log message" );

=head1 DESCRIPTION

I<IMPORTANT!> This module is deprecated and should no longer be
used. Use the L<Bedrock::Logger> role for logging with Log::Log4perl.

 MSG_ABORT
 MSG_DEBUG
 MSG_INFO
 MSG_STATUS
 MSG_WARN
 MSG_ERROR
 MSG_SYSERROR
 MSG_FATAL

=head1 METHODS AND SUBROUTINES

=head2 LOG_MESSAGE

 LOG_MESSAGE( level, message )

=head2 StartLogger

Initializes logging.

=head2 LogLevel

Returns the logging level.

=cut

