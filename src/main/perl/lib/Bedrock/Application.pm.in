package Bedrock::Application;

use strict;
use warnings;

use Data::Dumper;
use English qw(-no_match_vars);
use Bedrock::Constants qw(:booleans :chars :log_levels);
use Module::Load;

use Role::Tiny;
with 'Bedrock::Logger';

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw(
    debug
    dryrun
    loglevel
    mk_accessors
    normalize
    option_specs
    options
  )
);

use parent qw(Class::Accessor::Fast);

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = ref $args[0] ? $args[0] : {@args};

  my $self = $class->SUPER::new($options);

  $self->set_defaults;

  if ( $self->get_option_specs ) {
    $self->_get_options;
  }

  $self->init;

  return $self;
}

########################################################################
sub _get_options {
########################################################################
  my ($self) = @_;

  my $options      = $self->get_options      // {};
  my $normalize    = $self->get_normalize    // $TRUE;
  my $mk_accessors = $self->get_mk_accessors // $TRUE;
  my $specs        = $self->get_option_specs;

  autoload 'Getopt::Long';

  GetOptions( $options, @{$specs}, qw(loglevel=s debug dryrun) );

  $self->set_options($options);

  if ($normalize) {
    normalize_options($options);
  }

  if ($mk_accessors) {
    my @extra_accessors = ref $mk_accessors ? @{$mk_accessors} : ();
    $self->mk_accessors( @extra_accessors, keys %{$options} );

    foreach my $option ( keys %{$options} ) {
      my $method = "set_$option";
      $self->$method( $options->{$option} );
    }
  }

  my $loglevel = $options->{loglevel} // 'error';

  $self->get_logger->level( $LOG4PERL_LOG_LEVELS{$loglevel} // $LOG4PERL_LOG_LEVELS{error} );

  return $self;
}

########################################################################
sub normalize_options {
########################################################################
  my ($options) = @_;

  foreach my $k ( keys %{$options} ) {
    next if $k !~ /\-/xsm;
    my $val = delete $options->{$k};

    $k =~ s/\-/_/gxsm;

    $options->{$k} = $val;
  }

  return %{$options};
}

########################################################################
sub set_defaults {
########################################################################
  return;
}

########################################################################
sub init {
########################################################################
  return;
}

1;
