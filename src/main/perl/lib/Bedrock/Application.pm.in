package Bedrock::Application;

# Yet another simple class framework for writing an application that possibly use
# some Bedrock components...

use strict;
use warnings;

use Data::Dumper;
use English qw(-no_match_vars);
use Bedrock::Constants qw(:booleans :chars :log_levels);
use Module::Load;
use Scalar::Util qw(reftype);
use List::Util qw(any);

use Role::Tiny;
with 'Bedrock::Logger';

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw(
    debug
    dryrun
    loglevel
    accessors
    normalize
    option_specs
    options
  )
);

use parent qw(Class::Accessor::Fast);

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = ref $args[0] ? $args[0] : {@args};

  my $self = $class->SUPER::new($options);

  $self->set_defaults;

  if ( $self->get_option_specs ) {
    die "option_specs must be an array\n"
      if reftype( $self->get_option_specs ) ne 'ARRAY';

    $self->_get_options;
  }

  $self->init;

  return $self;
}

########################################################################
sub _get_options {
########################################################################
  my ($self) = @_;

  my $options      = $self->get_options   // {};
  my $normalize    = $self->get_normalize // $TRUE;
  my $mk_accessors = $self->get_accessors // [];
  my $option_specs = $self->get_option_specs;

  autoload 'Getopt::Long';

  Getopt::Long::Configure('no_ignore_case');
  my @specs = @{$option_specs};

  # add some default options if they aren't already included
  my @default_specs = qw(loglevel=s debug dryrun);

  foreach (@default_specs) {
    my ($opt) = split /[=]/xsm;
    next
      if any { $_ =~ /^$opt/xsm } @specs;
    push @specs, $_;
  }

  GetOptions( $options, @specs );

  $self->set_options($options);

  if ($normalize) {
    normalize_options($options);
  }

  if ($mk_accessors) {
    my @extra_accessors = ref $mk_accessors ? @{$mk_accessors} : [$mk_accessors];

    my @accessors
      = ( @extra_accessors, map { ( split /[|=]/xsm )[0] } @{$option_specs} );

    foreach (@accessors) {
      my $method = $_;
      $method =~ s/\-/_/xsmg;
      $self->mk_accessors($method);
    }

    foreach my $option ( keys %{$options} ) {
      my $method = "set_$option";

      $self->$method( $options->{$option} );
    }
  }

  my $loglevel = $options->{loglevel} // 'error';

  $self->get_logger->level( $LOG4PERL_LOG_LEVELS{$loglevel} // $LOG4PERL_LOG_LEVELS{error} );

  return $self;
}

########################################################################
sub normalize_options {
########################################################################
  my ($options) = @_;

  foreach my $k ( keys %{$options} ) {
    next if $k !~ /\-/xsm;
    my $val = delete $options->{$k};

    $k =~ s/\-/_/gxsm;

    $options->{$k} = $val;
  }

  return %{$options};
}

########################################################################
sub set_defaults {
########################################################################
  return;
}

########################################################################
sub init {
########################################################################
  return;
}

1;

__END__

=pod

=head1 NAME

Bedrock::Application - A simple framework for writing command line
applications that possibly use Bedrock components.

=head1 SYNOPSIS

 package MyApp;

 use parent qw( Bedrock::Application );

 caller() or __PACKAGE__->main();

 sub main {
   my $app = Bedrock::Application->new(option_specs => [ foo=s bar=s ]);
   ...
   return 0;
 } 

=head1 DESCRIPTION

This is a simple class framework for creating command line
applications that possibly use Bedrock components. It is a subclass of
L<Class::Accessor::Fast>. This version does not provide much other
than wrapping L<Getopt::Long> in a more convenient package as well as
providing a default logger based on L<Bedrock::Logger>.

I<TODO:>

=over 5

=item * Add methods that facilitate using L<Bedrock::Template>

=item * Add methods for connecting and working with databases via L<Bedrock::Model>.

=back

=head1 METHODS AND SUBROUTINES

=head2 new

 new(options)

C<options> is hash or list of key/value pairs described below.

=over 5

=item dryrun

Boolean option you can use to execute your script in 'dryrun' mode.

default: false

=item loglevel

Logging level. One of:

 error
 warn
 info
 debug
 trace

default: info

=item option_specs

List of option specifications ala L<Getopt::Long>.

=item accessors

A list of additional accessors to create for your application.

 Bedrock::Application->new(
   option_specs => [qw(outfile=s)],
   accessors    => [qw(foo bar biz-buz)],
 );

I<NOTE: Dashes in accessor names will be converted to underscore.>

=item options

Returns the hash of options passed on the command line and processed
by L<GetOptions>.

=back

=head2 get_logger

Inherited from L<Bedrock::Logger>.  Returns a L<Log::Log4perl> logger.

=head1 SETTERS/GETTERS

You can access all of the options you specified in the C<option_specs>
and C<accesors> arguments to new using C<set_> and C<get_> methods.

=head1 SEE ALSO

L<Getop::Long>, L<Bedrock::Logger>

=head1 AUTHOR

=cut
