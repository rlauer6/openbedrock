package Bedrock::JSON;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use parent qw(Exporter);

use Bedrock            qw(:booleans);
use Bedrock::Constants qw(:booleans);
use Bedrock::Dump;
use Data::Dumper;
use English qw(-no_match_vars);
use JSON;
use Scalar::Util qw(reftype);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

our @EXPORT_OK = qw(evolve);

########################################################################
sub new {
########################################################################
  my ( $class, $thingy ) = @_;

  return bless \$thingy, ref $class || $class;
}

# convert Bedrock objects -> regular perl objects
########################################################################
sub devolve {
########################################################################
  my ($this) = @_;

  if ( is_hash($this) ) {
    my $that = {};

    eval { keys %{$this}; };

    die ref($this) . ' trapped.'
      if $EVAL_ERROR;

    foreach ( keys %{$this} ) {
      $that->{$_} = devolve( $this->{$_} );
    }

    return $that;
  }
  elsif ( is_array($this) ) {
    my $that = [];

    foreach ( @{$this} ) {
      push @{$that}, devolve($_);
    }

    return $that;
  }
  elsif ( ref $this ) {
    die "invalid object\n";
  }
  else {
    return $this;
  }
}

# promote regular perl objects -> Bedrock objects
########################################################################
sub evolve {
########################################################################
  my ($this) = @_;

  require Bedrock::Array;
  require Bedrock::Hash;

  if ( is_hash($this) ) {
    foreach ( keys %{$this} ) {
      $this->{$_} = evolve( $this->{$_} );
    }

    return Bedrock::Hash->new( %{$this} );
  }
  elsif ( is_array($this) ) {
    foreach my $idx ( 0 .. $#{$this} ) {

      $this->[$idx] = evolve( $this->[$idx] );
    }

    return Bedrock::Array->new( @{$this} );
  }
  elsif ( ref($this) =~ /boolean/xsmi ) {
    return $this ? 1 : 0;
  }
  elsif ( ref $this ) {
    die 'Invalid object during promotion: ' . ref $this;
  }
  else {
    return $this;
  }
}

# convert a JSON string into a Bedrock object
########################################################################
sub decode {
########################################################################
  my ($this) = @_;

  $this = ref($this) =~ /Bedrock::JSON/xsm ? ${$this} : $this;

  my $json = JSON->new;

  $json->relaxed(JSON::true);

  my $obj = eval { $json->decode($this); };

  die sprintf "There was a problem converting your JSON string (%s) to a Bedrock object\n%s\n",
    $this, $EVAL_ERROR
    if $EVAL_ERROR;

  if ( $obj && ref($obj) =~ /(array|hash)/xsmi ) {
    $obj = evolve($obj);
  }

  return $obj;
}

# convert a Bedrock object to a JSON string
########################################################################
sub encode {
########################################################################
  my ( $this, $pretty_print ) = @_;

  $this = ref($this) =~ /Bedrock::JSON/xsm ? ${$this} : $this;

  $pretty_print //= $FALSE;

  my $json = JSON->new->pretty($pretty_print);

  # help the Bedrock programmer out with a more appropriate error message
  $this = devolve($this);

  my $json_string;

  eval { return $json_string = $json->encode($this); };

  die "There was a problem converting your Bedrock object (%s) to a JSON string\n%s\n",
    Bedrock::Dump::compact($this), $EVAL_ERROR
    if $EVAL_ERROR;

  return $json_string;
}

1;

__END__

=pod

=head1 NAME

Bedrock::JSON - encode/decode Bedrock/JSON objects.

=head1 SYNOPSIS

 use Bedrock::BedrockJSON;

 my $json = Bedrock::JSON->new($thingy);

 # Depending on $thingy...
 $json->encode(); 
 $json->decode();

 my $obj = Bedrock::JSON::decode('[{foo: "bar", baz : "buzz"}, {foo: "tan", baz: "fuz"}]');

 my $json_string = Bedrock::encode($obj);

=head1 DESCRIPTION

A simple cover (not sub-class) on the CPAN JSON module.

See L<JSON> for more details.

The implementation here is quite simple and does not provide all of
the methods and features of the underlying JSON modules.  Enough has
been implemented to allow the Bedrock developer to use most of the JSON
implementation wwithin Bedrock.

=head1 METHODS AND SUBROUTINES

=head2 new

=head2 decode([JSON string])

Create a Bedrock object (array, hash) from the JSON string if called
as a class method.  If called as an instance method, it operated on
the $thingy that you instantiated the class with.

=head2 encode([Bedrock object])

Create a JSON string from a Bedrock object if called
as a class method.  If called as an instance method, it operated on
the $thingy that you instantiated the class with.

=head1 NOTES

Decoding a string to an object is done with the most relaxed settings
possible to allow the sloppiest JSON constructions to pass muster with
L<JSON>.  This means you can use bare key words in hashes:

  [{label:"Date", value : "09/20/1959"}]

This class is used throughout the underlying Bedrock code to provide
support for JSON in a variety of situations, including:

  <sink --define-var="foo" --json>
  [
    { name: "Ron",    label: "Date", value : "09/20/1959"},
    { name: "Dave",   label: "Date", value : "09/29/1992"}
  ]
  </sink>

  <null --define-var="foo" --json '["a", "b", "c"]>

  <var --json $foo>

Standard objects should probably be constructed using the standard
Bedrock mechanisms, however JSON does give the developer an
opportunity to create complex object without resorting to contortions
within the Bedrock page.  Keeping in mind that Bedrock encourages
programs to be written as BLMs, not web pages, providing a simple way
to construct more complex objects is consistent with that philosophy.

=head1 SEE ALSO

L<JSON>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
