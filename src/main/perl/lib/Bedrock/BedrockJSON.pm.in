#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::JSON;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use Bedrock::Array;
use Bedrock::Hash;
use Bedrock::Dump;
use Data::Dumper;

use JSON -support_by_pp;

sub new {
  my ( $class, $thingy ) = @_;
  bless \$thingy, ref($class) || $class;
}

# convert Bedrock objects -> regular perl objects
sub devolve {
  my $this = shift;

  if ( UNIVERSAL::isa($this, 'HASH') ) {
    my $that = {};
    
    eval { keys %$this; };

    die ref($this) . ' trapped.' if $@;

    foreach ( keys %{$this} ) {
      $that->{$_} = &devolve( $this->{$_} );
    }

    return $that;
  }
  elsif ( UNIVERSAL::isa($this, 'ARRAY') ) { 
    my $that = [];

    foreach ( @{$this} ) {
      push @{$that}, &devolve($_);
    }

    return $that;
  }
  elsif ( ref($this) ) {
    die "invalid object\n";
  }
  else {
    return $this;
  }
}

# promote regular perl objects -> Bedrock objects
sub evolve {
  my $this = shift;

  if ( ref($this) eq 'HASH' ) {
    foreach ( keys %$this ) {
      $this->{$_} = evolve( $this->{$_} );
    }

    return Bedrock::Hash->new(%$this);
  }
  elsif ( ref($this) eq 'ARRAY' ) {
    for ( my $idx = 0 ; $idx < @$this ; $idx++ ) {
      $this->[$idx] = evolve( $this->[$idx] );
    }
    return Bedrock::Array->new(@$this);
  }
  elsif ( ref($this) =~/boolean/i ) {
    return ( $this ) ? 1 : 0; 
  }
  elsif ( ref($this) ) {
    die "Invalid object during promotion: " . ref($this);
  }
  else {
    return $this;
  }
}

# convert a JSON string into a Bedrock object
sub decode {
  my $this = ( ref( $_[0] ) =~ /Bedrock::JSON/ ) ? ${ $_[0] } : $_[0];

  my $json = JSON->new;

  $json->relaxed(JSON::true);
  $json->loose(JSON::true);
  $json->allow_barekey(JSON::true);
  $json->allow_singlequote(JSON::true);

  my $obj;

  eval { $obj = $json->allow_barekey->decode($this); };

  die
"There was a problem converting your JSON string ($this) to a Bedrock object - $@"
  if $@;

  if ( $obj && ref($obj) =~ /(array|hash)/i ) {
    $obj = &evolve($obj);
  }

  return $obj;
}

# convert a Bedrock object to a JSON string
sub encode {
  my ($this, $pretty_print) = @_;

  $this = ( ref($this)  =~ /Bedrock::JSON/ ) ? ${ $this } : $this;
  
  my $json = JSON->new;

  # help the Bedrock programmer out with a more appropriate error message
  $this = &devolve( $this );

  my $json_string;

  eval { 
    $json_string = $json->pretty($pretty_print)->encode( $this );
  };

  die "There was a problem converting your Bedrock object ("
    . Bedrock::Dump::compact($this)
      . ") to a JSON string - $@"
	if $@;
  
  return $json_string;
}

=pod

=head1 NAME

C<Bedrock::JSON> - encode/decode Bedrock/JSON objects.

=head1 SYNOPSIS

 my $json = Bedrock::JSON->new($thingy);

 # Depending on $thingy...
 $json->encode(); 
 $json->decode();

 my $obj = Bedrock::JSON::decode('[{foo: "bar", baz : "buzz"}, {foo: "tan", baz: "fuz"}]');

 my $json_string = Bedrock::encode($obj);

=head1 DESCRIPTION

A simple cover (not sub-class) on the CPAN JSON module.

perldoc C<JSON> for gory details.

The implementation here is quite simple and does not provide all of
the methods and features of the underlying JSON modules.  Enough has
been implemented to allow the Bedrock developer to use most JSON
representations within Bedrock to be fairly dangerous.

=head1 METHODS

=head2 new

=head2 decode([JSON string])

Create a Bedrock object (array, hash) from the JSON string if called
as a class method.  If called as an instance method, it operated on
the $thingy that you instantiated the class with.

=head2 encode([Bedrock object])

Create a JSON string from a Bedrock object if called
as a class method.  If called as an instance method, it operated on
the $thingy that you instantiated the class with.

=head1 NOTES

Decoding (string -> object) is done with the most relaxed settings
possible to allow the sloppiest JSON constructions to pass muster with
C<JSON::PP>.  This means you can use bare key words in hashes:

  [{label:"Date", value : "09/20/1959"}]

This class is used throughout the underlying Bedrock code to provide
support for JSON in a variety of situations, including:

  <sink --define-var="foo" --json>
  [
    { name: "Ron",    label: "Date", value : "09/20/1959"},
    { name: "Dave",   label: "Date", value : "09/29/1992"}
  ]
  </sink>

  <null --define-var="foo" --json '["a", "b", "c"]>

  <var --json $foo>

Standard objects should probably be constructed using the standard
Bedrock mechanisms, however JSON does give the developer an
opportunity to create complex object without resorting to contortions
within the Bedrock page.  Keeping in mind that Bedrock encourages
programs to be written as BLMs, not web pages, providing a simple way
to construct more complex objects is consistent with that philosophy.

=head1 AUTHOR

Rob Lauer - rlauer@signatureinfo.com

=cut

1;

#
# Revision 1.14  2012/09/23 12:43:28  rlauer
# - pod and typos
#
# Revision 1.13  2012/09/15 12:21:23  rlauer
# - devolve was not properly diving into regular ARRAYs and HASHEs
#
# Revision 1.12  2012/07/18 13:42:24  lauerrc
# - devolve() method now handles objects other than Bedrock::Hash and Bedrock::Array
#
# Revision 1.11  2011/11/14 14:14:50  eutl420
# - -support_by_pp was appended to previous string by tidy
#
# Revision 1.10  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.9  2011/08/07 16:28:54  eutl420
# - renamed this file from JSON.pm.in to BedrockJSON.pm.in
# - JSON::true not JSON::PP::true
# - eval the decode to get a Bedrock error message along with JSON error message
# - update pod to reflect the fact that JSON hash objects will no longer be ordered
#
# Revision 1.8  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.7  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.6  2010/12/12 17:13:31  eutl420
# - remove use of Data::Dumper
#
# Revision 1.5  2010/11/29 15:57:52  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.4  2010/11/23 00:01:01  rlauer
# - no dependency on Tie::Hash::Indexed here
#
# Revision 1.3  2009/12/28 23:30:45  rlauer
# use constants from JSON::PP package
#
# Revision 1.2  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.1  2009/12/28 19:30:16  rlauer
# removing SIS:stuff, moving to Bedrock::stuff
#
# Revision 1.5  2009/12/26 15:38:36  rlauer
# remove BLM::OrderedObject, all objects now ordered
#
# Revision 1.4  2009/12/18 13:01:36  rlauer
# revert to SIS:Hash for promotiions in evolve, remove debugging stuff
#
# Revision 1.3  2009/12/17 23:22:49  rlauer
# use singlequote, ordered objects?
#
# Revision 1.2  2009/12/16 23:26:05  rlauer
# pod, use SIS::JSON_PP_Ix
#
# Revision 1.1  2009/12/15 23:05:54  rlauer
# first check-in
#
