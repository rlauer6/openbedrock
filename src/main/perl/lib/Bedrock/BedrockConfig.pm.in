use strict;
use warnings;

package Bedrock::BedrockConfig;

our $VERSION = '@PACKAGE_VERSION@';

package Bedrock::Config;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

BEGIN {

  # Note we do not use Bedrock::Logger here since Bedrock::Config is
  # used load configuration information for Bedrock::Logger
  # (Log::Log4perl). Instead we use carp & croak.

  use Carp;

  local $SIG{__DIE__} = \&Carp::confess;
}

use Bedrock qw(:booleans slurp_file);
use Bedrock::Dump;
use Bedrock::Serializer qw( evolve devolve);
use Bedrock::XML;
use Bedrock::Constants qw(:defaults :chars :booleans);
use Bedrock::LoadConfig qw(load_config validate_config_paths locate_file);

use Cwd;
use Data::Dumper;
use English qw( -no_match_vars );
use File::Basename;
use JSON qw( decode_json encode_json );
use List::Util qw( pairs uniq );
use Scalar::Util qw( reftype openhandle );
use YAML qw( LoadFile Dump );

use parent qw( Exporter Bedrock::Hash );

our @EXPORT_OK = qw(validate_config_paths source);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

########################################################################
sub new {
########################################################################
  my ( $class, $file ) = @_;

  $class = ref $class || $class;

  my $self = $file ? load_config($file) : {};

  $self = bless $self, $class;

  return $self;
}

########################################################################
sub newFromXML {  ## no critic (NamingConventions::Capitalization)
########################################################################
  my ( $self, @args ) = @_;

  carp "WARN: newFromXML is deprecated: use new() instead.\n";

  return $self->new(@args);
}

########################################################################
sub source {
########################################################################
  my ($file) = @_;

  die "env file $file not found"
    if !$file || !-f $file;

  my @env = slurp_file $file;

  foreach (@env) {
    next if /^[#]/xsm;

    my ( $k, $v ) = split /\s*=\s*/xms;
    $ENV{$k} //= $v;
  }

  return;
}

########################################################################
sub version { return $VERSION }
########################################################################

########################################################################
sub newFromString {  ## no critic (NamingConventions::Capitalization)
########################################################################
  my ( $class, @args ) = @_;

  $class = ref $class || $class;

  my $obj = eval { Bedrock::XML->newFromString(@args); };

  my $errstr = $EVAL_ERROR;

  if ( !$obj || $errstr ) {
    $obj = eval { decode_json(@args); };
  }

  $errstr //= $EVAL_ERROR;

  die "$errstr"
    if $errstr;

  return bless $obj, $class;
}

########################################################################
sub config_path {
########################################################################
  my (@args) = @_;

  my $path = _set_get( _config_path => @args );

  return
    if !defined $path;

  return $path =~ /^\//xsm ? $path : sprintf '%s/%s', cwd, $path;
}

########################################################################
sub dbnames {
########################################################################
  my (@args) = @_;

  return _set_get( dbnames => @args );
}

########################################################################
# Usage      : get_module_config(name)
#            : get_module_config()
# Purpose    : Returns the array of modules or the configuration object
#            : a specific module.
# Parameters : name => name of a module (or fragment of the name)
# Returns    : array of modules or hash representing a configuration
#            : for the module
# Errors     : throws exception if there is no MODULES object
########################################################################
sub get_module_config {
########################################################################
  my ( $self, $module_name ) = @_;

  my $modules = $self->{MODULES};

  carp "no MODULES or MODULES is not an array\n"
    if !is_array($modules);

  return $modules
    if !$module_name;

  my $module = $self->get_module($module_name);

  return $module ? $module->{config} : $module;
}

########################################################################
sub merge_config {
########################################################################
  my ( $self, $config ) = @_;

  return
    if !$config || !ref $config;

  foreach my $key ( keys %{$config} ) {
    next
      if $key eq 'MODULES';

    $self->{$key} = $config->{$key};
  }

  # merge modules separately
  $self->merge_modules($config);

  return $self;
}

########################################################################
sub get_module {
########################################################################
  my ( $self, $name ) = @_;

  my $modules = $self->{MODULES};

  return $modules
    if !$name;

  my ($module) = grep { $_->{module} =~ /$name$/xsmi } @{$modules};

  return $module;
}

########################################################################
sub merge {
########################################################################
  my ( $self, $file ) = @_;

  my $fh = openhandle($file);

  if ( !$fh ) {
    croak "no such file ($file) or empty"
      if !$file || !-s $file;

    open $fh, '<', $file
      or die "could not open $file\n";
  }

  my $config = eval { return Bedrock::XML->new($fh); };

  croak "could not read $file\n$EVAL_ERROR"
    if !$config;

  croak 'invalid configuration file, root object must be hashes or arrays'
    if !ref $config;

  my $merge_config = $config->{MERGE_CONFIG} // 'yes';

  return $self
    if !to_boolean($merge_config);

  if ( is_array($config) ) {
    my ( $key, undef, undef ) = fileparse( $file, qr/[.][^.]+$/xsm );
    $key = uc $key;

    if ($key) {
      $config = Bedrock::Hash->new( $key => $config );
    }
  }

  return $self->merge_config($config);
}

########################################################################
sub merge_modules {
########################################################################
  my ( $self, $config ) = @_;

  my $config_modules = $config->{MODULES};

  return $self
    if !is_array($config_modules) || !@{$config_modules};

  my $modules = $self->{MODULES};

  if ( !is_array($modules) || !@{$modules} ) {
    $self->{MODULES} = $config_modules;

    return $self;
  }

  # use the binding names to convenient hashes to merge
  my %merged_modules  = map { ( $_->{binding} => $_ ); } @{$modules};
  my %source_bindings = map { $_->{binding} => $_ } @{$config_modules};

  foreach my $binding ( keys %source_bindings ) {
    if ( $merged_modules{$binding} ) {

      my $dest_overwrite = to_boolean( $merged_modules{$binding} // 'no' );

      # If the current config has the overwrite flag set for this
      # binding, we assume it should take precendence over the config
      # to be merged. I believe the thought here is that the base
      # config should never set overwrite unless is plans to block
      # other configs from getting merged into the base configuration.

      next
        if $dest_overwrite;

      my $src_overwrite = to_boolean( $source_bindings{$binding}->{overwrite} // 'no' );

      die sprintf 'duplicate binding name for modules (%s)', $binding
        if !$src_overwrite;
    }

    $merged_modules{$binding} = $source_bindings{$binding};
  }

  $self->{MODULES} = [ values %merged_modules ];

  return $self;
}

########################################################################
sub to_json {
########################################################################
  my ($self) = @_;

  my $obj = devolve $self;

  return JSON->new->ascii->pretty->encode($obj);
}

########################################################################
sub to_yaml {
########################################################################
  my ($self) = @_;

  return Dump( devolve $self);
}

########################################################################
sub to_xml {
########################################################################
  my ($self) = @_;

  return Bedrock::XML::writeXMLString($self);
}

########################################################################
sub XML {
########################################################################
  my ( $self, $in_out, @args ) = @_;

  ## no critic (:RequireInterpolationOfMetachars)
  croak q{Usage: $config.XML('in|out', option, value, ...)}
    if $in_out !~ /^in|out$/xsm;

  croak 'XML config object not set in tagx.xml'
    if !$self->{XML}->{$in_out};

  my $xml_config = $self->{XML}->{$in_out};

  # set or get values from XML config object
  my $last_value;

  if ( @args == 1 || @args % 2 ) {
    $last_value = $xml_config->{ $args[0] };
  }
  else {

    foreach my $p ( pairs @args ) {
      my ( $key, $value ) = @{$p};

      $last_value = $xml_config->{$key};

      $xml_config->{$key} = $value;
    }
  }

  return $last_value;
}

########################################################################
sub uniq_list {
########################################################################
  my (@list) = @_;

  return join $COLON, uniq grep {defined} @list;
}

########################################################################
sub get_dir_list {
########################################################################
  my ( $self, $extra_dirs, @dir_names ) = @_;

  $extra_dirs //= [];

  my @dir_list = @ENV{@dir_names};

  push @dir_list, @{$self}{@dir_names};

  return uniq_list( @dir_list, @{$extra_dirs} );
}

########################################################################
sub get_include_dir {
########################################################################
  my ($self) = @_;

  return $self->get_dir_list( [$DEFAULT_BEDROCK_INCLUDE_DIR], qw(INCLUDE_DIR BEDROCK_INCLUDE_DIR) );
}

########################################################################
sub get_pebble_dir {
########################################################################
  my ($self) = @_;

  return $self->get_dir_list( [$DEFAULT_BEDROCK_PEBBLE_DIR], qw(PEBBLE_DIR BEDROCK_PEBBLE_DIR) );
}

########################################################################
sub init_plugin_path {
########################################################################
  my ($self) = @_;

  return
    if !$self->{PLUGIN_PATH};

  # add PLUGIN_PATH to @INC
  my @plugin_inc = split /:/xsm, $self->{PLUGIN_PATH};

  foreach my $path (@plugin_inc) {
    if ( !any {/$path/xsm} @INC ) {
      push @INC, $path;
    }
  }

  return;
}

# + --------------- +
# | PRIVATE METHODS |
# + --------------- +

########################################################################
sub _set_get {
########################################################################
  my ( $key, $self, @args ) = @_;

  if ( @args > 0 ) {
    $self->{$key} = $args[0];
  }

  return $self->{$key};
}

# _locate_file will return the path to a file or throw an exception if
# the file cannot be found or cannot be read.

# file can be an absolute path (start with /) or just the name of a
# file.

# if the file is not an absolute path, the function will attempt to
# find the file in either a configuration path (BEDROCK_CONFIG_PATH
# or CONFIG_PATH).
#
# if BEDROCK_CONFIG_PATH is set but not defined or empty, then the
# BEDROCK_CONFIG_PATH will not be used in the search
#
# if BEDROCK_CONFIG_PATH is not set at all, the the default Bedrock
# site configuration path will be used (typically @configdir@)

# the function will use the CONFIG_PATH then BEDROCK_CONFIG_PATH
#
########################################################################
sub _locate_file { goto &locate_file; }
########################################################################

1;

__END__

=pod

=head1 NAME

Bedrock::Config - methods for interacting with a serialized configuration files.

=head1 SYNOPSIS

 use Bedrock::BedrockConfig;

 my $config = Bedrock::Config->new($config_file);

=head1 DESCRIPTION

The C<Bedrock::Config> object provides methods for interacting with
serialized configuration files used by Bedrock. Configuration files
can be serialized as Bedrock XML, JSON or YAML.

=head1 METHODS AND SUBROUTINES

=head2 new

  my $config = Bedrock::Config->new($filename);
  my $config = Bedrock::Config->new($filehandle);

Reads and deserializes a serialized configuration file from either:

=over 4

=item *

A filename (a string containing the path to a config file)

=item *

A filehandle (an already opened filehandle, such as C<DATA> or an
instance of L<IO::Handle>)

=back

Returns a L<Bedrock::Config> object.

If a filehandle is provided, the format will be automatically detected
based on the file contents.  Once detected, the corresponding
deserializer (JSON, YAML, or XML) is invoked to parse the
configuration.

=head3 Additional Fields

The returned object includes an extra field:

=over 4

=item *

B<_config_path> — The original source of the configuration (filename
or C<< <filehandle> >>)

=back

This field can be useful for logging, debugging, or tracking the
origin of a loaded configuration.

If the format cannot be determined, an error is thrown.

=head2 config_path

Sets or returns the path to the configuration file passed to new.

=head2 dbnames

Return the C<dbnames> object from the configuration object.

=head2 merge

  merge(fh|file)

Merge the contents of the read from a file handle or file the current
configuration object.

You can set a MERGE_CONFIG element to 'no' to avoid merging the
configuration object. Normally and F<.xml> file found in Bedrock's
configuration directory will be merged in the Bedrock's
configuration. If don't want that file merged, set MERGE_CONFIG to
'no'.

See L</merge_config>

=head2 merge_config

 merge_config(hash)

Merges the passed hash into the current configuration overwriting any
keys that might have existed in the current configuration. The
C<MODULES> element will will be merged respecting the 'overwrite' flag
in the module's configuration.

=head2 merge_modules

 merge_modules(array)

Merges the array of modules passed into the C<MODULES> element of the
configuration object. The module can set a key C<overwrite> to 'yes'
to indicate that this module should overwrite any other module with
the same binding name. This method is called by C<merge_config()>

=head2 newFromString

See L<Bedrock::XML>

=head2 to_json

 to_json(object)

Serializes the current configuation object as a JSON string.

=head2 to_xml

 to_xml(object)

Serializes the current configuration object as a Bedrock XML string.

=head2 to_yaml

 to_yaml(object)

Serializes the current configuration object as a YAML string.

=head2 get_module_config

 get_module_config([module-name])

Returns a startup module's configuration object or the entire array of
module configurations.

 my $session_config = $config->get_module_config

=head2 source

 source(file)

Adds values to the environment from a file that of the form:

 VAR=value

=head2 XML

 XML([in|out], key)
 XML([in|out], key, value, key, value, ...)

Get or set values from the XML configuration object. The first
parameter indicates either the XMLin or XMLout configuration.

  <!-- XML Options -->
  <object name="XML">
    <scalar name="handler">Bedrock::Serializer::XML</scalar>
    <object name="out">
      <scalar name="NoAttr">1</scalar>
      <scalar name="KeepRoot">0</scalar>
      <scalar name="RootName">response</scalar>
      <scalar name="NoSort">1</scalar>
      <array name="KeyAttr"></array>
      <scalar name="XMLDecl">1</scalar>
      <scalar name="NoEscape">1</scalar>
    </object>
    <object name="in">
      <scalar name="NoAttr">0</scalar>
      <scalar name="KeepRoot">1</scalar>
      <array name="KeyAttr"></array>
    </object>
  </object>

=head2 locate_file

 locate_file( file )
 $self->locate_file( file )

Searches for a file in Bedrock's configuration path and returns the
path or throws an exception if the file cannot be found or cannot be
read.

C<file> can be an absolute path (starts with /) or just the name of a
file.

If the file is not an absolute path, the function will attempt to find
the file in either the paths pointed to by the environement variables
C<CONFIG_PATH> and C<BEDROCK_CONFIG_PATH> (in that order).

If C<BEDROCK_CONFIG_PATH> is set but I<not defined> or I<empty>, then
only C<CONFIG_PATH> will be used in the search.

If C<BEDROCK_CONFIG_PATH> does not exists in C<%ENV>, the the default Bedrock
site configuration path will be included in the search.

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

L<Bedrock::XML>

=cut
