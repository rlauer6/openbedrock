#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Config;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.04;
}

use IO::File;
use File::Basename;
use Bedrock::Hash 1.01;
use Bedrock::XML;
use Data::Dumper;

@ISA	= qw (Bedrock::Hash);

sub _locate_file
{
    my $file = shift;

    if ( $file =~ m!/! ) {
	# No search for config file if filename specified with path
	die "_locate_file: Config file $file not found" unless -e $file;
	die "_locate_file: Cannot open config file $file for reading."
	    unless -r $file;
	return $file;
    } elsif ( -e $file ) {
	# look for file in current dir
	die "_locate_file: Cannot open config file $file for reading."
	    unless -r $file;
	return $file;
    } else {
	# search for config file in path
	my $path = $ENV{BEDROCK_CONFIG_PATH} || $ENV{CONFIG_PATH};
	warn "[Bedrock::Config] deprecated use of CONFIG_PATH. Use BEDROCK_CONFIG_PATH instead." if $ENV{CONFIG_PATH};
	die "_locate_file: Could not locate $file and BEDROCK_CONFIG_PATH not set in environment"
	    unless $path;
	for my $dir (split ':', $path) {
	    my $fullpath = $dir . '/' . $file;
	    next unless -e $fullpath;
	    die "_locate_file: Cannot open config file $fullpath for reading."
		unless -r $fullpath;
	    return $fullpath;
	}
	die "_locate_file: Could not locate $file in $path";
    }
}

sub _load
{
    my $self = shift;
    my $fd = shift;

    my (@keys, $line, $var, $value, $include_file);
    while ( $line = <$fd> ) {
	chomp $line;
	for ($line) {
	    # Skip comments
	    /^\s*\#/ and last;

	    # kick out comments on the same line as a var defn.
	    s/\s*\#.*//;

	    # End of subobject
	    /^\s*\}/ and return;

	    # Definition of a variable
	    /^\s*(\w+)\s*(.*)$/oi and do {
		($var, $value) = ($1, $2);
		push @keys, $var unless exists $self->{$var};
		if ( $value =~ /^\s*\{\s*$/oi ) {
		    # Begin subobject
		    $self->{$var} = $self->new ( $fd );
		} else {
		    # var definition
		    $self->{$var} = $value;
		}
		last;
	    };

	    # file inclusion directive
	    /^<include\s+(\S+)\s*>$/oi and do {
		$include_file = $1;
		my $newObj = $self->new ( $include_file );
		my ($key, $value);
		while (($key, $value) = each %{$newObj}) {
		    push @keys, $key unless exists $self->{$key};
		    $self->{$key} = $value;
		}
		last;
	    };

	    # begin environment export
	    /^<export_env>$/oi and do {
		my $env = $self->new ($fd)->flatten;
		my ($key, $value);
		while (($key, $value) = each %{$env}) {
		    next if ref( $value );
		    $key =~ s!^/!!o; $key =~ s!/!_!g;
		    $ENV{$key} = $value;
		}
		last;
	    };

	    # end environment export
	    m!^</export_env>$!oi and return;

	    # Skip line if no match with above
	}
    }
    $fd->close;
}

sub _interp_vars
{
    my $self = shift;
    for my $key (keys %{$self}) {
	$self->{$key} =~ s/(?<!\\)\~(\w+)/$self->{$1}/g;
    }
}

sub newFromXML
{
    my $class = shift;
    bless Bedrock::XML->new( shift ), $class;
}

sub new
{
    my $proto = shift;
    my $class = ref ($proto) || $proto;
    my $self = bless $class->SUPER::new, $class;

    return $self unless @_ > 0;

    my $fd = shift;
    my $counter;
    unless ( ref( $fd ) ) {
	my $file = $fd;
	my $config = Bedrock::Config->newFromXML( &_locate_file( $file ) ) if $file =~ /\.xml$/i;

	if ($config) {
	  my $path = $ENV{BEDROCK_CONFIG_PATH} || $ENV{CONFIG_PATH};
	  my $config_d = sprintf("%s.d", $path);
	  my @modules;
	  @modules = @{$config->{MODULES}} if $config->{MODULES};

# - merge additional .xml files in sub-directory $ENV{BEDROCK_CONFIG_PATH}.d/*.xml
	  if ( -d "$config_d") {
	    opendir CONFIGS, "$config_d";
	    while (my $file = readdir CONFIGS) {
	      next unless $file=~/\.xml$/;
	      my $newObj = Bedrock::Config->newFromXML("$config_d/$file");
# -- merge keys, except for MODULES...which we will append
	      foreach (keys %{$newObj}) {
		unless ($_ eq 'MODULES') {
		  $config->{$_} = $newObj->{$_};
		}
		else {
		  warn "Adding a new MODULE..";
		  warn  Data::Dumper->Dump([@{$newObj->{MODULES}}]);
		  push @modules, @{$newObj->{MODULES}};
		}
	      }
	    }

	    $config->{MODULES} = Bedrock::Array->new(@modules);
	    closedir CONFIGS;
	  }

# - look for application specific BLM::Startup modules, iterate over
#   $ENV{BEDROCK_CONFIG_PATH}.d/startup/*.xml
	  my $startup_dir = sprintf("%s.d/startup", $path);
	  if ( -d "$startup_dir") {
	    opendir MODULES, "$startup_dir";
	    while (my $file = readdir MODULES) {
	      next unless $file=~/\.xml$/;
	      my $newObj = Bedrock::Config->newFromXML("$startup_dir/$file");
	      warn "Adding a new MODULE..";
	      warn  Data::Dumper->Dump([$newObj]);
	      push @modules, $newObj if $newObj;
	    }

	    closedir MODULES;

	    $config->{MODULES} = Bedrock::Array->new(@modules);
	  }

	  return $config;
	}

	if ( $file =~ m!/! ) {
	    my $dir = dirname ( $file );
	    if ( $ENV{BEDROCK_CONFIG_PATH} || $ENV{CONFIG_PATH} ) {
	      $ENV{BEDROCK_CONFIG_PATH} = $ENV{CONFIG_PATH} if $ENV{CONFIG_PATH}; # deprecated use of CONFIG_PATH
	      $ENV{'BEDROCK_CONFIG_PATH'} = $dir . ':' . $ENV{'BEDROCK_CONFIG_PATH'};
	    } else {
		$ENV{BEDROCK_CONFIG_PATH} = $dir;
	    }
	}
	$fd = IO::File->new ( &_locate_file( $file ) );
	die "$self: Unable to open $file: $!\n" unless $fd;
    }

    $self->_load( $fd );
    $self->_interp_vars;


    $self;
}

sub XML {
  my $self = shift;
  my $dir = shift; # 'in', 'out'

  die "Usage: \$config.XML('in|out', option, value, ...)" 
    unless $dir=~/^(in|out)$/;

  die "XML config object not set in tagx.xml"
    unless $self->{XML}->{$dir};

  if (@_ == 1 || @_ % 2) {
    return $self->{XML}->{$dir}->{$_[0]};
  }
  else {
    my $config = $self->{XML}->{$dir};
    my $last;
    my %options = @_;
    while (my ($opt, $value) = each %options) {
      $last = $config->{$opt};
      $config->{$opt} = $value;
    }
    return $last;
  }
}

sub get_module_config {
  my $self = shift;
  my $module_name = shift;

  my $modules = $self->{MODULES};

  return undef unless $modules && ref($modules) =~/array/i && @$modules;

  foreach (@$modules) {
    if ($_->{module} =~/$module_name/i) {
      return $_->{config};
    }
  }

  return undef;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2010/01/03 19:13:11  rlauer
# add XML method for setting XML conversion options
#
# Revision 1.3  2009/12/31 00:02:44  rlauer
# make sure arrays are Bedrock::Arrays when storing the modules
#
# Revision 1.2  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.1  2009/12/28 19:30:15  rlauer
# removing SIS:stuff, moving to Bedrock::stuff
#
# Revision 1.6  2008/12/23 13:36:03  rlauer
# - added get_module_config
#
# Revision 1.5  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.4  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.3  2001/02/14 15:35:48  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/11/01 21:03:03  sridhar
# Supports loading regular `.cfg' files and XML files `.xml' files too.
#
# Revision 1.1  2000/09/18 14:20:26  sridhar
# Moved some generally useful modules under Perl/SIS to Perl/Bedrock/SIS.
#
# Revision 1.5  2000/06/06 19:52:38  sridhar
# 1. Brand new implementation in terms of a tied hash class SIS::Hash
# 2. Support concept of CONFIG_PATH for locating config file
# 3. All accesses are direct accesses
#
#
