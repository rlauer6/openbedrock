#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Config;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION);
}

use IO::File;
use File::Basename;

use Bedrock::XML;
use Bedrock::Dump;
use Data::Dumper;
use Scalar::Util qw/reftype/;

use parent qw/Bedrock::Hash/;

# Note: 'warn' is used instead of a logging function in this module,
# since this function may be called prior to logging being configured
# - Bedrock::Config is used to get configuration information, which
# includes logging configuration thus its premature to assume logging
# is available.


sub new {
  my $class = shift;
  $class = ref($class) || $class;

  my $file = shift;

  die "[$file] - only .xml files are supported as Bedrock configuration files.\n"
    if $file && $file !~/\.xml$/i;
  
  my $self = $file ? Bedrock::XML->new(&_locate_file($file)) : {};

  return bless $self, $class;
}

# misnamed
sub newFromXML {
  warn "deprecated: no need to use this! use new() instead.\n";
  &new;
}

sub newFromString {
  my $class = shift;
  $class = ref($class) || $class;
  my $self = Bedrock::XML->newFromString(shift);

  bless $self, $class;
}

sub dbnames {
  my $self = shift;

  if ( @_ ) {
    $self->{'_dbnames'} = shift;
  }

  $self->{'_dbnames'};
}

=pod

=head2 _locate_file

 _locate_file( file )

=cut

sub _locate_file {
  my $file = shift;

  if ( $file =~ m!/! ) {
    # No search for config file if filename specified with path

    die "_locate_file: Config file $file not found"
      unless -e $file;

    die "_locate_file: Cannot open config file $file for reading."
      unless -r $file;

    return $file;
  }
  elsif ( -e $file ) {
    # file exists in current directory, but can we read it?
    die "_locate_file: Cannot open config file $file for reading."
      unless -r $file;

    return $file;
  }
  else {
    # search for config file in path
    my @search_paths;

    push @search_paths, $ENV{CONFIG_PATH}
      if $ENV{CONFIG_PATH};

    die  "_locate_file: Could not locate $file and BEDROCK_CONFIG_PATH not set in environment"
      unless $ENV{BEDROCK_CONFIG_PATH};

    push @search_paths, $ENV{BEDROCK_CONFIG_PATH};

    for my $dir ( @search_paths ) {
      my $fullpath = $dir . '/' . $file;
      next unless -e $fullpath;

      # found it but it's unreadable
      die "_locate_file: Cannot open config file $fullpath for reading."
	unless -r $fullpath;

      # found it
      return $fullpath;
    }

    die "_locate_file: Could not locate $file in " . join(':', @search_paths);
  }
}

sub merge_config {
  my ($self, $config) = @_;

  # merge source-config with master
  map { $self->{$_} = $config->{$_} unless $_ eq 'MODULES'; } keys %$config;

  # merge modules separately
  $self->merge_modules($config);

  return $self;
}

sub merge_modules {
  my ($self, $config) = @_;

  # no modules in source or config
  unless ( @{$self->{MODULES}} ) {
    $self->{MODULES} = $config->{MODULES}
      if exists $config->{MODULES};
  }
  elsif ( exists $config->{MODULES} && @{$config->{MODULES}} ) {
    # get the binding names for existing modules as these should be
    # unique and use these to create a hash of all module configurations
    my %modules;
    map { $modules{$_->{binding}} = $_; } @{$self->{MODULES}};
    
    # possible overrwite modules from source
    map { $modules{$_->{binding}} = $_; } @{$config->{MODULES}};
    
    $self->{MODULES} = [ values %modules ];
  }

  return $self;
}

sub merge {
  my $self = shift;
  my $file = shift;

  if ( -s $file ) {
    my $config = Bedrock::XML->new($file);
    $self->merge_config($config);
  }

  return $self;
}

sub XML {
  my $self = shift;
  my $in_out = shift;

  warn "$self::XML() has been deprecated, consider using <var --xml>\n";

  die "Usage: \$config.XML('in|out', option, value, ...)"
    unless $in_out =~ /^(in|out)$/;

  die "XML config object not set in tagx.xml"
    unless $self->{XML}->{$in_out};

  if ( @_ == 1 || @_ % 2 ) {
    return $self->{XML}->{$in_out}->{ $_[0] };
  }
  else {
    my $config = $self->{XML}->{$in_out};
    my $last;
    my %options = @_;

    while ( my ( $opt, $value ) = each %options ) {
      $last = $config->{$opt};
      $config->{$opt} = $value;
    }

    return $last;
  }
}

=pod

=head2 get_module_config

Returns a startup module's configuration object.

=cut

sub get_module_config {
  my ($self, $module_name) = @_;

  my $modules = $self->{MODULES};
  my $config;

  if ( reftype($modules) eq 'ARRAY') {
    foreach (@$modules) {
      if ( $_->{module} =~ /$module_name/i ) {
	$config = $_->{config};
	last;
      }
    }
  }
  
  return $config;
}

1;

#
# Revision 1.13  2012/08/06 15:41:12  lauerrc
# - added BEDROCK_CONFIG_PATH to search path in _locate_file()
#
# Revision 1.12  2012/07/31 20:17:53  lauerrc
# - in _locate_file, look in CONFIG_PATH first
#
# Revision 1.11  2011/09/15 16:05:32  eutl420
# - perl tidy
#
# Revision 1.10  2011/08/16 20:39:18  eutl420
# - look for files in CONFIG_PATH too
#
# Revision 1.9  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.8  2011/07/12 19:10:36  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.7  2010/12/17 16:49:59  eutl420
# - revert to old Bedrock::Config->new behavior and take out default merging
#   of config.d/startup/*.xml.  This behavior should be implemented in the
#   Bedrock handler, not here, since this module could conceivably be used
#   outside of Bedrock in perhaps a CGI script.
# - _locate_file sub was slightly altered and returned
#    along with new() to its original and upright position ;-)
#
# Revision 1.6  2010/12/12 17:16:40  eutl420
# - remove use of Data::Dumper
#
# Revision 1.5  2010/11/29 15:57:52  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.4  2010/01/03 19:13:11  rlauer
# add XML method for setting XML conversion options
#
# Revision 1.3  2009/12/31 00:02:44  rlauer
# make sure arrays are Bedrock::Arrays when storing the modules
#
# Revision 1.2  2009/12/28 20:31:34  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.1  2009/12/28 19:30:15  rlauer
# removing SIS:stuff, moving to Bedrock::stuff
#
# Revision 1.6  2008/12/23 13:36:03  rlauer
# - added get_module_config
#
# Revision 1.5  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.4  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.3  2001/02/14 15:35:48  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/11/01 21:03:03  sridhar
# Supports loading regular `.cfg' files and XML files `.xml' files too.
#
# Revision 1.1  2000/09/18 14:20:26  sridhar
# Moved some generally useful modules under Perl/SIS to Perl/Bedrock/SIS.
#
# Revision 1.5  2000/06/06 19:52:38  sridhar
# 1. Brand new implementation in terms of a tied hash class SIS::Hash
# 2. Support concept of CONFIG_PATH for locating config file
# 3. All accesses are direct accesses
#
#
