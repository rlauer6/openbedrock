#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package SIS::Hash;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.11;
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw(isa);
use SIS::Array;
use SIS::Dump;
use SIS::JSON;
use Tie::Hash::Indexed;

#sub FIRSTKEY	{ my $a = scalar CORE::keys %{$_[0]}; each %{$_[0]} }
sub FIRSTKEY	{ my $a = scalar keys %{$_[0]}; each %{$_[0]} }
sub NEXTKEY	{ each %{$_[0]} }
sub FETCH	{ $_[0]->{$_[1]} }
sub EXISTS	{ exists $_[0]->{$_[1]} }
sub STORE	{ $_[0]->{$_[1]} = $_[2] }
sub DELETE	{ delete $_[0]->{$_[1]} }
sub CLEAR	{ %{$_[0]} = () }

sub TIEHASH
{
    my $class = shift;
    my %foo;
    tie %foo, 'Tie::Hash::Indexed';
    my $self = bless \%foo, $class;
    %{$self} = @_;
    $self;
}


sub _regular_dump
{
    goto &SIS::Dump::regular;
}

sub _compact_dump
{
    goto &SIS::Dump::compact;
}

sub devolve {
  my $this = shift;

  if (ref($this) =~/^(HASH|ARRAY)$/) {
    return $this;
  }
  elsif (ref($this) =~/SIS::Hash/) {
    my $that = {};
    foreach (keys %$this) {
      $that->{$_} = devolve($this->{$_});
    }
    return $that;
  }
  elsif (ref($this) =~/SIS::Array/) {
    my $that = [];
    foreach (@$this) {
      push @$that, devolve($_);
    }
    return $that;
  }
  else {
    return $this;
  }
}

sub json {
  my $self = shift;

  SIS::JSON::encode($self->devolve);
}

sub flatten
{
    my $self = shift;
    my $path = shift;
    my $href = shift;

    # Starter condition
    $href = {} unless defined ($href);
    $path = '' unless defined ($path);

    for my $key (keys %{$self}) {
	$href->{$path . '/' . $key} = $self->{$key};
	if ( ref ( $self->{$key} ) ) {
	    $self->{$key}->flatten ( $path . '/' . $key, $href );
	}
    }

    wantarray ? %{$href} : $href;
}


sub new
{
  my $proto = shift;
  my $class = ref ($proto) || $proto;
  my $self = bless {}, $class;
  tie %{$self}, $class, @_;
  $self;
}

sub set
{
    my $self = shift;
    my $nArgs = @_;
    my %args;
    if ( int($nArgs / 2) * 2 == $nArgs ) {
	%args = @_;
    } else {
	die "Odd number of elements($nArgs) in prop assignment list.\n"
	    if $nArgs > 1;
	my $arg = shift;
	if ( &UNIVERSAL::isa( $arg, 'ARRAY' ) ) {
	    %args = @{$arg};
	} elsif ( &UNIVERSAL::isa( $arg, 'HASH' ) ) {
	    %args = %{$arg};
	} else {
	    die "Invalid type of single argument for assignment: must be an object or an array to be merged.\n";
	}
    }

    my ($key, $value);
    while (($key, $value) = each %args) {
	$self->{$key} = $value;
    }
}

# Method to delete one or more keys from hash
sub delete
{
    my $self = shift;
    if ( @_ == 1 ) {
	return delete $self->{$_[0]};
    } else {
	for (@_) {
	    delete $self->{$_};
	}
    }
}

#
# Method for extracting a value -- useful as the method of a subclass
#
sub get
{
    my $obj = shift;
    return @_ == 1 ? $obj->{$_[0]} : SIS::Array->new(@{$obj}{@_});
}

sub print
{
    my $self = shift;
    my $str = &_regular_dump( $self );
    return $str unless @_ > 0;
    open( FILE, "> $_[0]" ) or die "$self->print: Could not create $_[0]: $!";
    print FILE $str;
    close FILE;
}

sub print_compact
{
    my $self = shift;
    my $str = &_compact_dump( $self );
    return $str unless @_ > 0;
    open( FILE, "> $_[0]" ) or die "$self->print_compact: Could not create $_[0]: $!";
    print FILE $str;
    close FILE;
}

#
# Deprecated methods
#
sub value
{
    my $self = shift;
    my ($pack, $file, $line) = caller;
    warn "$self->value: Usage of deprecated method at $file($line)\n";
    if ( @_ > 0 ) {
	wantarray ? @{$self}{@_} : $self->{$_[0]};
    } else {
#	CORE::keys %{$self};
	keys %{$self};
    }
}

sub keys
{
    goto &names;
}

sub names
{
#    my @a = CORE::keys %{$_[0]};
    my @a = keys %{$_[0]};
    SIS::Array->new( @a );
}

sub isEmpty
{
#    return CORE::keys %{$_[0]} > 0 ? 0 : 1;
    return keys %{$_[0]} > 0 ? 0 : 1;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.14  2009/12/18 12:55:32  rlauer
# - use Tie::Hash::Indexed to force every SIS::Hash to effectively be an ordered object
# - change use of CORE:keys to support use of Tie::Hash:Indexed
#
# Revision 1.13  2009/12/06 23:56:13  rlauer
# JSON support
#
# Revision 1.12  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.11  2008/02/28 18:14:41  rlauer
# Applying Rob's patches to make Bedrock work on Apache 2.x
# (plus a few other obvious bug fixes).
#
# Revision 1.10  2001/02/14 15:35:48  sridhar
# Added copyright and GPL notice
#
# Revision 1.9  2001/01/09 20:27:24  sridhar
# Method `get()' can be invoked with multiple params -- caller gets an
# array of corresponding values
#
# Revision 1.8  2000/12/08 20:04:57  sridhar
# Method `delete()' returns the deleted value if a single item was
# deleted.
#
# Revision 1.7  2000/11/29 20:52:56  sridhar
# 1. Bug fix: Method `names()' creates and returns a SIS::Array
# 2. Added method `isEmpty()'
# 3. Can pass a single argument to method `set()' which means to take
# the properties to set from the array or object arg.
#
# Revision 1.6  2000/11/22 15:57:02  sridhar
# Method `keys()' superceded in favor of `names()'
#
# Revision 1.5  2000/11/13 14:50:42  sridhar
# Added `delete()' to delete one or more properties from objects
#
# Revision 1.4  2000/11/07 13:55:16  sridhar
# Fixed method `keys()' to return an array ref instead of an array.
#
# Revision 1.3  2000/10/12 14:15:27  sridhar
# 1. Method `set()' simplified -- expects to get a list of name-value
# pairs.
# 2. Get simplified.
# 3. Keys returns all the property names without carping.
#
# Revision 1.2  2000/10/06 15:40:05  sridhar
# Foolish decision to initialize hash in new() after doing tie(). Should
# be done in TIEHASH() instead.
#
# Revision 1.1  2000/09/18 14:20:26  sridhar
# Moved some generally useful modules under Perl/SIS to Perl/Bedrock/SIS.
#
# Revision 1.3  2000/07/05 17:54:35  sridhar
# Moved out regular_dump and compact_dump to a separate module.
#
# Revision 1.2  2000/06/21 15:58:16  sridhar
# 1. Added method CLEAR() for emptying the hash
# 2. Can initialize hash at construction
# 3. Added method get() to get a value
#
# Revision 1.1  2000/06/06 19:49:18  sridhar
# Tied module for managing hashes
#
#
