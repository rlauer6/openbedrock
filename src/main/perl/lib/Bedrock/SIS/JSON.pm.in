#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package SIS::JSON;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.11;
    @ISA	= qw (Exporter);
}

use SIS::Array;
use SIS::Hash;

use JSON -support_by_pp;


sub new {
  my ($class, $thingy) = @_;
  bless \$thingy, ref($class) || $class;
}

sub devolve {
  my $this = shift;

  if (ref($this) =~/^(HASH|ARRAY)$/) {
    return $this;
  }
  elsif (ref($this) =~/SIS::Hash/) {
    my $that = {};
    foreach (keys %$this) {
      $that->{$_} = devolve($this->{$_});
    }
    return $that;
  }
  elsif (ref($this) =~/SIS::Array/) {
    my $that = [];
    foreach (@$this) {
      push @$that, devolve($_);
    }
    return $that;
  }
  else {
    return $this;
  }
}

sub evolve {
  my $this = shift;

  if (ref($this) eq 'HASH') {
    foreach (keys %$this) {
      $this->{$_} = evolve($this->{$_});
    }
    return SIS::Hash->new(%$this);
  }
  elsif (ref($this) eq 'ARRAY') {
    for (my $idx=0; $idx<@$this; $idx++) {
      $this->[$idx] = evolve($this->[$idx]);
    }
    return SIS::Array->new(@$this);
  }
  else {
    return $this;
  }
}

sub decode {
  my $this = ref($_[0]) ? ${$_[0]} : $_[0];

  my $json = JSON->new;

  $json->relaxed(JSON::true);
  $json->loose(JSON::true);
  $json->allow_barekey(JSON::true);
  
  my $this = $json->allow_barekey->decode($this);
  if ($this && ref($this) =~/^(ARRAY|HASH)$/) {
    $this = &evolve($this);
  }

  return $this;
}

sub encode {
  my $this = ref($_[0]) ? ${$_[0]} : $_[0];

  my $json = new JSON;
  
  return $json->encode(&devolve($this));
}


1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2009/12/15 23:05:54  rlauer
# first check-in
#
