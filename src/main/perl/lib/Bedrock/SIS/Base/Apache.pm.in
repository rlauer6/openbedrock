#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package SIS::Base::Apache;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use SIS::Base;
use SIS::Config;

@ISA	= qw (SIS::Base);

#
# Overridden method to get input parameter(s)/value(s)
# Invoked either with 
#    1. a list of parameter names. Returns the value of the
#       parameters requested
#    2. No args. Returns the names of all parameters in the
#       input
sub getInputValue
{
    my $self = shift;
    if ( @_ > 0 ) {
	# Have some parameters -- need the values
	return @{$self->{'INPUT'}}{@_};
    } else {
	# No parameters -- need the names of all parameters
	return keys %{$self->{'INPUT'}};
    }
}

#
# Constructor for Apache modules
# Returns the created object
# Mandatory Arguments are as follows:
#    APACHE_HANDLER	=> Apache handler object
#    OUTPUT_HANDLER	=>
#	Output handler supporting a `print()' method. Defaults to APACHE_HANDLER
#	if not specified.
# One of the following must be present
#    CONFIG	        => Hash containing config info
#    CONFIG_FILE	=> Name of the config file
#
sub new
{
    my $class = shift;
    my %args = @_;

    die "$class->new(): CONFIG or CONFIG_FILE parameter must be specified."
	unless $args{'CONFIG'} or $args{'CONFIG_FILE'};

    die "$class->new(): APACHE_HANDLER parameter must be specified."
	unless $args{'APACHE_HANDLER'};

    my $self = bless {}, $class;
    if ( $args{'CONFIG'} ) {
	$self->{'CONFIG'} = $args{'CONFIG'};
    } else {
	$self->{'CONFIG'} = SIS::Config->new ( $args{'CONFIG_FILE'} );
    }

    $self->{'APACHE_HANDLER'} = $args{'APACHE_HANDLER'};

    $self->{'OUTPUT'} = $args{OUTPUT_HANDLER} || $args{APACHE_HANDLER};

    # Collect the input
    my $r = $self->{'APACHE_HANDLER'};
    my @args = ($r->args, $r->content);
    my ($name, $value);
    my $input = {};
    while (($name, $value) = splice @args, 0, 2) {
	if ( exists $input->{$name} ) {
	    $input->{$name} = [$input->{$name}] unless &UNIVERSAL::isa( $input->{$name}, 'ARRAY' );
	    push @{$input->{$name}}, $value;
	} else {
	    $input->{$name} = $value;
	}
    }
    $self->{'INPUT'} = $input;

    $self;
}

sub print
{
    shift->{'OUTPUT'}->print(@_);
}

sub cgi_header_in
{
    $_[0]->{'APACHE_HANDLER'}->headers_in;
}

sub cgi_header_out
{
    my $self = shift;
    $self->{'APACHE_HANDLER'}->cgi_header_out( @_ );
}

sub send_http_header
{
    my $self = shift;
    $self->{'APACHE_HANDLER'}->send_http_header;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.6  2000/11/07 13:53:01  sridhar
# Can pass a config object to constructor instead of a config file.
#
# Revision 1.5  2000/09/15 14:30:29  sridhar
# Can now specify OUTPUT_HANDLER separate from APACHE_HANDLER; this is
# used for output if specified.
#
# Revision 1.4  2000/08/23 17:30:24  sridhar
# Added cgi_header_in() method which returns the HTTP headers sent by
# the browser.
#
# Revision 1.3  2000/07/18 19:27:24  sridhar
# Oops! forgot to declare UNIVERSAL::isa() properly.
#
# Revision 1.2  2000/07/06 18:32:58  sridhar
# Added methods cgi_header_out(), print() and send_http_header() which
# invoke the corresponding methods of the apache request object.
#
# Revision 1.1  2000/06/09 17:51:07  sridhar
# Base module for all Apache applications, providing same functionality
# as SIS::Base for CGIs
#
#
