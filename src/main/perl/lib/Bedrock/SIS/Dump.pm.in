#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package SIS::Dump;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Exporter);
}

use UNIVERSAL qw(isa);
use SIS::Log;

sub compact
{
    my ($ref, $ctx, $string) = @_;
    $ctx = '' unless defined( $ctx);
    my $l = length( $ctx );
    if ( &isa( $ref, 'HASH' ) ) {
	my $i = 0;
	for my $key (sort keys %$ref) {
	    my $value = $ref->{$key};
	    if ( ref( $value ) ) {
		$string = &compact( $value, $ctx ? "$ctx.$key" : $key, $string );
	    } else {
		$string .= ($i ? ' ' x $l . ".$key = " : "$ctx.$key = " ) .
		    (defined( $value ) ? "($value)\n" : "*** Undefined ***\n");
	    }
	    $i++;
	}
    } elsif ( &isa( $ref, 'ARRAY' ) ) {
	my ($i, $value);
	for ($i = 0 ; $i < @$ref ; $i++ ) {
	    $value = $ref->[$i];
	    if ( ref( $value ) ) {
		$string = &compact( $value,
				    $ctx ? ($i > 0 ? (' ' x $l . ".[$i]") : ("$ctx.[$i]")) : "[$i]",
				    $string );
	    } else {
		if ( $i ) {
		    $string .= ' ' x $l . ".[$i] = ($value)\n";
		} else {
		    $string .= "$ctx.[$i] = ($value)\n";
		}
	    }
	}
    } else {
	$string .= "$ctx = ($ref)\n";
    }
    $string;
}

sub regular
{
    my ($ref, $nspaces, $string) = @_;
    $nspaces = 2 unless defined( $nspaces );
    $string = '' unless defined( $string );
    if ( &isa( $ref, 'HASH' ) ) {
	$string .= "{\n";
	for my $key (sort keys %$ref) {
	    my $value = $ref->{$key};
	    $string .= ' ' x $nspaces . "$key => ";
	    if ( ref( $value ) ) {
		$string = &regular( $value, $nspaces + 2, $string );
	    } else {
		$string .= defined( $value ) ? "($value)\n" : "*** Undefined ***\n";
	    }
	}
	$string .= ' ' x $nspaces . "}\n";
    } elsif ( &isa( $ref, 'ARRAY' ) ) {
	$string .= "[\n";
	my ($i, $value);
	for ($i = 0 ; $i < @{$ref} ; $i++ ) {
	    $value = $ref->[$i];
	    $string .= ' ' x $nspaces . "[$i] .. ";
	    if ( ref( $value ) ) {
		$string = &regular( $value, $nspaces + 2, $string );
	    } else {
		$string .= "($value)\n";
	    }
	}
	$string .= ' ' x $nspaces . "]\n";
    } else {
	$string .= "($ref)\n";
    }
    $string;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/09/18 14:20:26  sridhar
# Moved some generally useful modules under Perl/SIS to Perl/Bedrock/SIS.
#
# Revision 1.1  2000/07/05 17:53:25  sridhar
# New module for dumping data structures since these functions are being
# used in more than one place.
#
#
