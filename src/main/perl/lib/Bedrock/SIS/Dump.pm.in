#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package SIS::Dump;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.06;
    @ISA	= qw (Exporter);
}

use UNIVERSAL;
use SIS::Log;

sub compact
{
    my ($ref, $prefix, $string) = @_;

    # prefix -- what prints on a line before the current item's key and value
    $prefix = '' unless defined( $prefix );

    # What has been printed so far
    $string = '' unless defined( $string );
    if ( &UNIVERSAL::isa($ref, 'HASH') ) {
	# need to keep track of empty hashes
	my $i = 0;
#	for my $key (sort keys %$ref) {
	for my $key (keys %$ref) {
	    my $value = $ref->{$key};
	    if ( ref($value) ) {
		# recursive invocation if value is a reference

		# $p is the prefix for the recursive call to compact()
		# Need to have this since we want $prefix unchanged after the
		# recursive call
		my $p = ( $i ? ' ' x length( $prefix ) : $prefix );

		# Append the key to the current item
		if ( length( $p ) ) {
		    $p .= ".$key";
		} else {
		    $p = $key;
		}

		# And invoke compact()
		$string = &compact( $value, $p, $string );
	    } else {
		$string .=  ( $i ? ' ' x length($prefix) : $prefix );
		$string .= '.' if length($prefix);
		$string .= "$key = ($value)\n";
	    }
	    $i++;
	}

	# Need this to mark empty hashes
	$string .= "$prefix = (*** Empty Hash ***)\n" unless $i;
    } elsif ( &UNIVERSAL::isa($ref, 'ARRAY') ) {
	# To keep track of empty arrays
	my $i = 0;
	for ( ; $i <@{$ref} ; $i++ ) {
	    my $value = $ref->[$i];
	    if ( ref( $value ) ) {
		# $p is the prefix for the recursive call to compact()
		# Need to have this since we want $prefix unchanged after the
		# recursive call
		my $p = ( $i ? ' ' x length( $prefix ) :  $prefix );

		# Append current item index
		$p .= ".[$i]";
		$string = &compact( $value, $p, $string );
	    } else {
		$string .= ( $i ? ' ' x length( $prefix ) : $prefix );
		$string .= ".[$i] = ($value)\n";
	    }
	}

	# To mark empty arrays
	$string .= "$prefix = (*** Empty Array ***)\n" unless $i;
    } else {
	$string .= "$prefix = ($ref)\n";
    }
    $string;
}

sub regular
{
    my ($ref, $nspaces, $string) = @_;
    $nspaces = 2 unless defined( $nspaces );
    $string = '' unless defined( $string );
    if ( &UNIVERSAL::isa( $ref, 'HASH' ) ) {
	$string .= "{\n";
	for my $key (sort keys %$ref) {
	    my $value = $ref->{$key};
	    $string .= ' ' x $nspaces . "$key => ";
	    if ( ref( $value ) ) {
		$string = &regular( $value, $nspaces + 2, $string );
	    } else {
		$string .= defined( $value ) ? "($value)\n" : "*** Undefined ***\n";
	    }
	}
	$string .= ' ' x $nspaces . "}\n";
    } elsif ( &UNIVERSAL::isa( $ref, 'ARRAY' ) ) {
	$string .= "[\n";
	my ($i, $value);
	for ($i = 0 ; $i < @{$ref} ; $i++ ) {
	    $value = $ref->[$i];
	    $string .= ' ' x $nspaces . "[$i] .. ";
	    if ( ref( $value ) ) {
		$string = &regular( $value, $nspaces + 2, $string );
	    } else {
		$string .= "($value)\n";
	    }
	}
	$string .= ' ' x $nspaces . "]\n";
    } else {
	$string .= "($ref)\n";
    }
    $string;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.8  2009/12/23 00:57:13  rlauer
# ordered dumps
#
# Revision 1.7  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.6  2001/02/14 15:35:48  sridhar
# Added copyright and GPL notice
#
# Revision 1.5  2001/01/09 20:26:44  sridhar
# Removed an extra hash value extraction -- was causing an extra FETCH()
# lookup.
#
# Revision 1.4  2000/11/01 19:57:08  sridhar
# One more fucking bug in this shit! Any more bugs and I am junking
# this.
#
# Revision 1.3  2000/11/01 15:58:33  sridhar
# New implementation of `compact()'
#
# Revision 1.2  2000/10/26 14:09:44  sridhar
# Fixed a bug in `compact()' where empty arrays and hashed were not
# being indicated.
#
# Revision 1.1  2000/09/18 14:20:26  sridhar
# Moved some generally useful modules under Perl/SIS to Perl/Bedrock/SIS.
#
# Revision 1.1  2000/07/05 17:53:25  sridhar
# New module for dumping data structures since these functions are being
# used in more than one place.
#
#
