package Bedrock::Test::Utils;

use strict;
use warnings;

use Cwd;
use Data::Dumper;
use English qw{-no_match_vars};
use File::Copy;
use File::Path qw{make_path};
use File::Temp qw{tempdir tempfile};
use List::Util qw{uniq};
use Scalar::Util qw{reftype};

use parent qw{Exporter};

use Readonly;

Readonly our $TRUE    => 1;
Readonly our $FALSE   => 0;
Readonly our $SUCCESS => 1;
Readonly our $FAILURE => 0;
Readonly our $YES     => 'yes';
Readonly our $NO      => 'no';

Readonly our $AMPERSAND          => q{&};
Readonly our $ASTERISK           => q{*};
Readonly our $COLON              => q{:};
Readonly our $COMMA              => q{,};
Readonly our $DASH               => q{-};
Readonly our $DOUBLE_COLON       => q{::};
Readonly our $DOT                => q{.};
Readonly our $DOLLAR_SIGN        => q{$};
Readonly our $EMPTY              => q{};
Readonly our $EQUALS_SIGN        => q{=};
Readonly our $PERIOD             => q{.};
Readonly our $PERCENT            => q{%};
Readonly our $QUESTION_MARK      => q{?};
Readonly our $SLASH              => q{/};
Readonly our $SEMICOLON          => q{;};
Readonly our $SPACE              => q{ };
Readonly our $TEMPLATE_DELIMITER => q{@};
Readonly our $UNDERSCORE         => q{_};
Readonly our $PLUS_SIGN          => q{+};
Readonly our $MINUS_SIGN         => q{-};

our @EXPORT_OK = ();

our %EXPORT_TAGS = (
  'subs' => [
    qw(
      fetch_test_descriptions
      create_temp_file
    ),
  ],
  'booleans' => [
    qw(
      $TRUE
      $FALSE
      $SUCCESS
      $FAILURE
      $YES
      $NO
    ),
  ],
  'chars' => [
    qw(
      $ASTERISK
      $AMPERSAND
      $COLON
      $COLOR
      $COMMA
      $DASH
      $DOLLAR_SIGN
      $DOUBLE_COLON
      $DOT
      $EMPTY
      $EQUALS_SIGN
      $PERIOD
      $PERCENT
      $PLUS_SIGN
      $MINUS_SIGN
      $QUESTION_MARK
      $SEMICOLON
      $SLASH
      $SPACE
      $TEMPLATE_DELIMITER
      $UNDERSCORE
    )
  ],
);

foreach my $k ( keys %EXPORT_TAGS ) {
  push @EXPORT_OK, @{ $EXPORT_TAGS{$k} };
}

$EXPORT_TAGS{'all'} = [@EXPORT_OK];

########################################################################
sub create_temp_file {
########################################################################
  my (%options) = @_;

  my ( $name, $content, $dir ) = @options{qw{ name content dir}};

  my ( $fh, $filename ) = tempfile('test-XXXXXX');

  my $text = $content;

  if ( $content && fileno $content ) {
    local $RS = undef;

    $text = <$content>;
  }
  elsif ( ref $content && reftype($content) eq 'SCALAR' ) {
    open my $fh, '<', ${$content}
      or die "could not open ${$content} for reading\n";

    local $RS = undef;

    $text = <$fh>;

    close $fh;
  }

  if ($text) {
    print {$fh} $text;
  }

  close $fh;

  if ($name) {
    rename $filename, $name;
    $filename = $name;
  }

  if ($dir) {
    if ( !-d $dir ) {
      make_path($dir);
    }

    move( $filename, "$dir/$filename" );
    $name = "$dir/$name";
  }

  return $name;
}

########################################################################
# Usage      : fetch_test_descriptions(fh)
# Purpose    : read test descriptions from __DATA__ section to
#            : determine test plan
# Parameters : fh => handle to source of name => description pairs
# Returns    : hash of test (name, description)
# Errors     : none
########################################################################
sub fetch_test_descriptions {
########################################################################
  my ($fh) = @_;

  my %test_descriptions;

  no warnings 'once';  ## no critic (ProhibitNoWarning)

  while ( my $test = <$fh> ) {
    chomp $test;

    $test =~ s/\A\s*(.*)\s*\z/$1/xsm;

    next if $test =~ /^[#]/xsm || !$test;
    last if $test =~ /^END_OF_PLAN/xsm;

    my ( $name, $description ) = split /\s*=>\s*/xsm, $test;
    $test_descriptions{$name} = $description;
  }

  return %test_descriptions;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

Bedrock::Test::Utils - utilities useful for unit testing

=head1 SYNOPSIS

 use Bedock::Test::Utils qw{:all}

=head1 DESCRIPTION

=head1 METHODS AND SUBROUTINES

=head2 fetch_test_descriptions

 fetch_test_descriptions(fh)

Read test descriptions from file handle (typically C<__DATA__>
section) to determine test plan.

Returns a hash of test name, descriptions pairs. Use the number of
keys as your test plan. Typically used as shown below.

 use Bedrock::Test:::Utils qw(fetch_test_descriptions);

 our %TESTS = fetch_test_descriptions(*DATA);

 plan tests => keys %TESTS;

 subtest 'test1' => sub {
   ...
 };

 subtest 'test1' => sub {
   ...
 };

 __DATA__
 test1 => description for test 1
 test2 => description for test 2

=head2 create_temp_file

 create_temp_file(options)

Creates a temporary file for testing. Using this method you can create
one or more files and directories for testing. By default
C<create_temp_file()> will create a temporary file in the current
working directory and return you the name of the file.

There is no facility for automatically removing the file or any
directories created as a result of calling this subroutine.

=over 5

=item name

Optional name of the file you want to create.

=item content

Optional content you want written to the file. The C<content> argument can be one of:

=over 10

=item * scalar text

=item * scalar reference containing the filename

=item * file handle that will be read and used as the content for the new file

=back

=item dir

Optional directory you want to create or move the file to.

=back dir

I<Example:>

 create_temp_file(name => 'foo.txt');

=head1 AUTHOR

Rob Lauer - rclauer@gmail.com

=head1 SEE OTHER

=cut
