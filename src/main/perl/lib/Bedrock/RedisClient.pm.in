package Bedrock::RedisClient;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use Role::Tiny;

use Bedrock::XML;
use Data::Dumper;
use English qw(-no_match_vars);
use Redis;

use Readonly;

Readonly our $DEFAULT_PORT   => 6379;
Readonly our $DEFAULT_SERVER => 'localhost';
Readonly our $REDIS_CONFIG   => 'redis-session.xml';

our $VERSION = '@PACKAGE_VERSION@';  ## no critic RequireInterpolationOfMetachars

our $HANDLE;
our $CONFIG;

########################################################################
sub redis_config {
########################################################################
  return $CONFIG
    if $CONFIG;

  my @paths;

  for ( grep {defined} $ENV{CONFIG_PATH}, $ENV{BEDROCK_CONFIG_PATH} ) {
    push @paths, ( $_, "$_.d", "$_.d/startup", "$_.d/plugin" );
  }

  my $config_name = $ENV{REDIS_CONFIG} // $REDIS_CONFIG;

  for (@paths) {
    my $xml_file = sprintf '%s/%s', $_, $config_name;
    next if !-e $xml_file;

    $CONFIG = eval { return Bedrock::XML->new($xml_file); };

    last if $CONFIG;
  }

  die sprintf 'unable to find a valid Redis configuration file (%s): %s', $config_name,
    Dumper( join "\n", @paths )
    if !$CONFIG;

  return $CONFIG;
}

########################################################################
sub redis_connect {
########################################################################
  my ($config) = @_;

  $config = redis_config()->{config};

  my $port = $config->{port}   || $DEFAULT_PORT;
  my $host = $config->{server} || $DEFAULT_SERVER;
  my $sock = $config->{sock};

  my $connect_options = $config->{options} // {};

  $connect_options->{name}
    = 'bedrock_' . ( $config->{name} || 'session' );

  if ($sock) {
    $connect_options->{sock} = $sock;
  }
  else {
    $connect_options->{server} = "$host:$port";
  }

  return eval { return Redis->new( %{$connect_options} ); };
}

########################################################################
sub redis_key {
########################################################################
  my ($session_id) = @_;

  return 'bedrock:session:' . $session_id;
}

########################################################################
sub redis_session {
########################################################################
  my ( $session_key, @args ) = @_;

  my $redis = redis_connect;

  my $session;

  if (@args) {
    my $session_ref = ref $args[0] ? $args[0] : {@args};
    my $session     = Bedrock::XML::writeXML($session_ref);

    my $config = redis_config->{config};

    $redis->set( $session_key, $session, );
    $redis->expire( $session_key, $config->{cookie}->{expiry_secs} );

    return $session_ref;
  }

  return
    if !$redis->exists($session_key);

  return eval { return Bedrock::XML->newFromString( $redis->get($session_key) ); };
}

########################################################################
sub redis_handle {
########################################################################
  return $HANDLE
    if $HANDLE;

  $HANDLE = redis_connect();

  die $EVAL_ERROR
    if !$HANDLE;

  return $HANDLE;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

Bedrock::RedisClient - role to provide common methods for connecting to Redis server

=head1 SYNOPSIS

 use Role::Tiny:With;
 with 'Bedrock::RedisClient';

 my $redis = redis_handle();

=head1 DESCRIPTION

Implements a role used by L<BLM::Startup::RedisSession>,
L<Bedrock::Apache::RedisSessionHandler> that provides some methods
used by both of these modules.

A Bedrock session using Redis.

=head1 METHODS AND SUBROUTINES

=head2 redis_config

Returns the Redis session configuration as a hash.  Typically the
Redis configuration is stored in a Bedrock XML file named
F<redis-session.xml>. The configuration file must exist somewhere in
one of the typcial places Bedrock config files located. The method
will search for the file in:

 $ENV{CONFIG_PATH}
 $ENV{CONFIG_PATH}.d
 $ENV{CONFIG_PATH}.d/startup
 $ENV{CONFIG_PATH}.d/plugin

or the same directories rooted at Bedrock's configuration path
$ENV{BEDROCK_CONFIG_PATH}.

The configuration file is a standard Bedrock session configuration
file with provisions for Redis specific requirements like server name,
port, etc.  See L<BLM::Startup::RedisSession> for more information
about the format of the configuration file.

You can add whatever additional values you would like to the
configuration and access them from the hash returned by this method.

=head2 redis_handle

Returns a handle to a L<Redis> object.

=head2 redis_key

 redis_key(session-id)

Returns a formatted Redis key that can be used to retrieve a
session. The key stored in Redis will be formatted with a namespace
prefix (C<bedrock:session>). You can override the namespace prefix in the
configuration file by setting the C<namespace> value.

 <!-- Bedrock RedisSessions -->
 <object>
   <scalar name="binding">session</scalar>
   <scalar name="session">yes</scalar>
   <scalar name="module">BLM::Startup::RedisSession</scalar>
 
   <object name="config">
     <scalar name="verbose">2</scalar>
     <scalar name="param">session</scalar>
     <scalar name="namespace">bedrock:session</scalar>
 
     <!-- Redis connect information -->
     <scalar name="server">localhost</scalar>
     <scalar name="port">6379</scalar>
 
     <object name="cookie">
       <scalar name="path">/</scalar>
       <scalar name="expiry_secs">3600</scalar>
       <scalar name="domain"></scalar>
     </object>
   </object>
 </object>

=head2 redis_session

 redis_session(session-key)

Returns a reference to a hash that represents a user's session.

=head1 AUTHOR

BIGFOOT - <bigfoot@cpan.org>

=head1 SEE OTHER

L<BLM::Startup::RedisSession>, L<Redis>, L<Bedrock::Apache::RedisSessionManager>

=cut
