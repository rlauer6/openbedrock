#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package Bedrock::Dump;

use strict;
use warnings;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  @ISA = qw (Exporter);
}

use Bedrock::Log;

use Scalar::Util qw/reftype/;

sub _Htmlencode {
  return Bedrock::Text::URLEncode::Htmlencode(shift);
}

sub compact {
  my ( $ref, $prefix, $string, $encode ) = @_;

  # prefix -- what prints on a line before the current item's key and value
  $prefix = '' unless defined($prefix);

  # What has been printed so far
  $string = '' unless defined($string);
  if ( ref($ref) && reftype($ref) eq 'HASH' ) {

    # need to keep track of empty hashes
    my $i = 0;
    for my $key ( keys %$ref ) {
      my $value = $ref->{$key};
      if ( ref($value) ) {

        # recursive invocation if value is a reference

        # $p is the prefix for the recursive call to compact()
        # Need to have this since we want $prefix unchanged after the
        # recursive call
        my $p = ( $i ? ' ' x length($prefix) : $prefix );

        # Append the key to the current item
        if ( length($p) ) {
          $p .= ".$key";
        }
        else {
          $p = $key;
        }

        # And invoke compact()
        $string = &compact( $value, $p, $string, $encode );
      }
      else {
        $string .= ( $i ? ' ' x length($prefix) : $prefix );
        $string .= '.' if length($prefix);
        $value = _Htmlencode($value) if $encode;
        $string .= "$key = ($value)\n";
      }
      $i++;
    }

    # Need this to mark empty hashes
    $string .= "$prefix = (*** Empty Hash ***)\n" unless $i;
  }
  elsif ( ref($ref) && reftype($ref) eq 'ARRAY' ) {

    # To keep track of empty arrays
    my $i = 0;
    for ( ; $i < @{$ref} ; $i++ ) {
      my $value = $ref->[$i];
      if ( ref($value) ) {

        # $p is the prefix for the recursive call to compact()
        # Need to have this since we want $prefix unchanged after the
        # recursive call
        my $p = ( $i ? ' ' x length($prefix) : $prefix );

        # Append current item index
        $p .= ".[$i]";
        $string = &compact( $value, $p, $string, $encode );
      }
      else {
        $string .= ( $i ? ' ' x length($prefix) : $prefix );
        $value = _Htmlencode($value) if $encode;
        $string .= ".[$i] = ($value)\n";
      }
    }

    # To mark empty arrays
    $string .= "$prefix = (*** Empty Array ***)\n" unless $i;
  }
  else {
    $ref = _Htmlencode($ref) if $encode;
    $string .= "$prefix = ($ref)\n";
  }
  $string;
}

sub regular {
  my ( $ref, $nspaces, $string, $encode ) = @_;

  $nspaces = 2  unless defined($nspaces);
  $string  = '' unless defined($string);
  if ( ref($ref) && reftype($ref) eq 'HASH' ) {
    $string .= "{\n";
    for my $key ( keys %$ref ) {
      my $value = $ref->{$key};
      $string .= ' ' x $nspaces . "$key => ";
      if ( ref($value) ) {
        $string = &regular( $value, $nspaces + 2, $string, $encode );
      }
      else {
        $value = _Htmlencode($value)
        if $encode && defined $value;
        $string .= defined($value) ? "($value)\n" : "*** Undefined ***\n";
      }
    }
    $string .= ' ' x $nspaces . "}\n";
  }
  elsif ( ref($ref)  && reftype($ref) eq 'ARRAY' ) {
    $string .= "[\n";
    my ( $i, $value );
    for ( $i = 0 ; $i < @{$ref} ; $i++ ) {
      $value = $ref->[$i];
      $string .= ' ' x $nspaces . "[$i] .. ";
      if ( ref($value) ) {
        $string = &regular( $value, $nspaces + 2, $string, $encode );
      }
      else {
        $value = _Htmlencode($value) if $encode;
        $string .= "($value)\n";
      }
    }
    $string .= ' ' x $nspaces . "]\n";
  }
  else {
    $ref = _Htmlencode($ref) if $encode;
    $string .= "($ref)\n";
  }
  $string;
}

1;

