package Bedrock;
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use File::Basename;
use English qw{-no_match_vars};

use strict;
use warnings;

use parent qw{Exporter};
use Scalar::Util qw{reftype};

our @EXPORT_OK = qw{is_array is_hash force_array is_scalar};

our %EXPORT_TAGS = ( utils => [@EXPORT_OK] );

BEGIN {

  # Hack to get `???/Bedrock/' in the right place in @INC
  my $txpath = $INC{'Bedrock.pm'} || $PROGRAM_NAME;

  if ($txpath) {
    my $act = dirname($txpath);

    for my $i ( 0 .. $#INC ) {
      next if $act ne $INC[$i];

      CORE::splice @INC, $i + 1, 0, $act . '/Bedrock', $act . '/Bedrock/Text';
      last;
    }
  }
}

########################################################################
sub is_array {
########################################################################
  my ($thing) = @_;

  return _is( $thing, 'ARRAY' );
}

########################################################################
sub force_array {
########################################################################
  my (@args) = @_;

  if ( @args == 1 && is_array( $args[0] ) ) {
    return $args[0];
  }
  else {
    return [@args];
  }
}

########################################################################
sub is_hash {
########################################################################
  my ($thing) = @_;

  return _is( $thing, 'HASH' );
}

########################################################################
sub is_scalar {
########################################################################
  my ($thing) = @_;

  return !ref $thing;
}

########################################################################
sub _is {
########################################################################
  my ( $thing, $type ) = @_;

  return ref $thing && reftype($thing) eq $type;
}

1;
