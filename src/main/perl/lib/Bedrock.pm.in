package Bedrock;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Constants qw(:booleans :chars);
use Cwd qw(getcwd abs_path);
use English qw(-no_match_vars);
use File::Basename;
use File::Copy;
use File::Find;
use File::Path qw(make_path);
use File::Temp qw(tempdir);
use List::Util qw(uniq);
use Scalar::Util qw(reftype blessed);

use parent qw(Exporter);

our @EXPORT_OK = qw(
  create_temp_dir
  find_in_path
  force_array
  force_hash
  is_array
  is_bedrock_array
  is_bedrock_hash
  is_blessed
  is_code
  is_hash
  is_regexp
  is_scalar
  slurp_file
  to_boolean
);

our %EXPORT_TAGS = (
  all  => [@EXPORT_OK],
  file => [
    qw(
      slurp_file
      find_in_path
      create_temp_dir
    ),
  ],
  booleans => [
    qw(
      is_array
      is_bedrock_array
      is_bedrock_hash
      is_blessed
      is_code
      is_hash
      is_regexp
      is_scalar
      to_boolean
    ),
  ],
);

BEGIN {

  # Hack to get `???/Bedrock/' in the right place in @INC
  # ...apparently to shorten module references like
  # Bedrock::Text::TagX::TAG::NoBody::Var ...or because the modules
  # were all originally rooted at TagX and someone did not want to
  # edit the files and change the names

  my $txpath = $INC{'Bedrock.pm'} || $PROGRAM_NAME;

  if ($txpath) {
    my $act = dirname($txpath);

    for my $i ( 0 .. $#INC ) {
      next if $act ne $INC[$i];

      CORE::splice @INC, $i + 1, 0, $act . '/Bedrock', $act . '/Bedrock/Text';
      last;
    }
  }
}

########################################################################
sub is_array {
########################################################################
  my ($thing) = @_;

  return _is( $thing, 'ARRAY' );
}

########################################################################
sub is_code {
########################################################################
  my ($thing) = @_;

  return _is( $thing, 'CODE' );
}

########################################################################
sub force_array {
########################################################################
  my (@args) = @_;

  if ( @args == 1 && is_array( $args[0] ) ) {
    return $args[0];
  }
  else {
    return [@args];
  }
}

########################################################################
sub force_hash {
########################################################################
  my (@args) = @_;

  if ( @args == 1 && is_hash( $args[0] ) ) {
    return $args[0];
  }
  else {
    return {@args};
  }
}

########################################################################
sub is_hash {
########################################################################
  my ($thing) = @_;

  return _is( $thing, 'HASH' );
}

########################################################################
sub is_scalar {
########################################################################
  my ($thing) = @_;

  return !ref $thing;
}

########################################################################
sub is_regexp {
########################################################################
  my ($thing) = @_;

  return _is( $thing, 'Regexp' );
}

########################################################################
sub _is {
########################################################################
  my ( $thing, $type ) = @_;

  return ref $thing && ( reftype($thing) eq $type || ref $thing eq $type );
}

########################################################################
sub is_bedrock_object {
########################################################################
  my ( $thing, $type ) = @_;

  return ref($thing) && ref($thing) =~ /^Bedrock::$type$/xsm;
}

########################################################################
sub is_bedrock_hash {
########################################################################
  my ($thing) = @_;

  return is_bedrock_object $thing, 'hash';
}

########################################################################
sub is_bedrock_array {
########################################################################
  my ($thing) = @_;

  return is_bedrock_object $thing, 'array';
}

########################################################################
sub is_blessed {
########################################################################
  my ($thing) = @_;

  return ref $thing && blessed $thing;
}

########################################################################
# Usage      : find_in_path(options)
# Purpose    : return a list of paths to a file or file pattern
# Parameters : hash of options
#            :   pattern   => regexp to use for finding files
#            :   file      => file to find if not using a pattern
#            :   max_items => max items to return
#            :   path_list => array of paths to search (default: cwd)
# Returns    : in list context, list of files found
#            : in scalar context, number of files found
# Errors     : throws exception 'found' if finding just 1 file
########################################################################
sub find_in_path {
########################################################################
  my (%options) = @_;

  my ( $max_items, $file, $pattern ) = @options{qw{max_items file pattern}};

  if ( $options{find_one} ) {
    $max_items = 1;
  }

  my $path_list = $options{path_list};
  $path_list //= getcwd;

  $path_list = is_array($path_list) ? $path_list : [$path_list];

  my @found_list;

  $pattern //= $file;

  my $cwd = getcwd;

  eval {
    find(
      { wanted => sub {
          return if /^[.]+$/xsm;

          my $found;

          if ( is_regexp($pattern) ) {
            $found = $_ =~ $pattern;
          }
          else {
            $found = $_ eq $pattern;
          }

          if ($found) {
            no warnings 'once';  ## no critic (ProhibitNoWarnings)

            push @found_list, abs_path $File::Find::name;

            die 'found'
              if $max_items && @found_list >= $max_items;
          }
        },
        no_chdir => $FALSE,
      },
      @{$path_list}
    );
  };

  my $err = $EVAL_ERROR;

  chdir $cwd;

  if ( $err && $err !~ /found/xsm ) {
    print {*STDERR} $err;

    @found_list = ();
  }

  return @found_list;
}

########################################################################
# Usage      : create_temp_dir( options )
# Purpose    : create a temp directory and possibly copy files to it
# Parameters : options => hash of arguments
#                cleanup  => remove directory when program terminates
#                dir      => array or name of directories to create
#                manifest => hash of arguments
#                  source   => source directory
#                  dest_dir => destination directory
#                  files    => array of file names
# Returns    : temporary directory created
# Errors     : throws exceptions if cannot create path or copy files
# Examples   : create_temp_dir( dir => 'foo')
#            : create_temp_dir( manifest => [ { files => [ 'foo.bar' ]} ]
########################################################################
sub create_temp_dir {
########################################################################
  my (%options) = @_;

  my $temp_dir = tempdir( CLEANUP => $options{cleanup} // $TRUE );

  my ( $manifest, $dir ) = @options{qw{manifest dir}};

  $manifest //= [];
  $dir      //= [];

  if ($dir) {
    my $dir_list = ref $dir ? $dir : [$dir];

    my @path_list
      = map {"$temp_dir/$_"} ( uniq @{$dir_list}, map { $_->{dest_dir} || () } @{$manifest} );

    if (@path_list) {
      my $paths_created = make_path(@path_list);

      die sprintf "could not create path(s): %s %s\n", $paths_created, join "$COMMA ", @path_list
        if $paths_created < @path_list;
    }
  }

  foreach my $file_list ( @{$manifest} ) {
    my ( $source, $dest_dir, $files )
      = @{$file_list}{qw{source dest_dir files}};

    $files    //= [];
    $source   //= getcwd;
    $dest_dir //= $EMPTY;  # just copy files to temp directory

    foreach my $file ( @{$files} ) {

      copy( "$source/$file", "$temp_dir/$dest_dir" );

      die "could not copy $source/$file $temp_dir/$dest_dir\n"
        if -e "$temp_dir/dest_dir/$file";
    }
  }

  return $temp_dir;
}

########################################################################
sub slurp_file {
########################################################################
  my ($file) = @_;

  local $RS = undef;

  open my $fh, '<', $file
    or die "could not open $file for reading: $OS_ERROR";

  my $content = <$fh>;

  close $fh;

  return wantarray ? split /\n/xsm, $content : $content;
}

########################################################################
sub to_boolean {
########################################################################
  my ($val) = @_;

  # undefined may trigger defaults, so return
  return
    if !defined $val;

  $val =~ s/^\s+|\s+$//xsmg;

  $val = lc $val;

  my %booleans = (
    true  => 1,
    false => 0,
    yes   => 1,
    no    => 0,
    on    => 1,
    off   => 0,
    '0'   => 0,
    '1'   => 1,
  );

  return $booleans{$val};
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 PUBLIC

Bedrock - Used to add Bedrock, Bedrock/Text to @INC and/or import utility functions

=head1 SYNOPSIS

 use Bedrock qw(:all);

 my $text = slurp_file 'foo.txt';

=head1 DESCRIPTION

This module is used to add the F<Bedrock> and F<Bedrock/Text>
sub-directories of the path to Bedrock's Perl modules to
C<@INC>. Because the module hierarchy is so deep it became easier to
and clearer in modules to use:

 use TagX::TAG;

rather than...

 use Bedrock::Text::TagX::TAG;

...or even more deeply into the hierarchy...

 use TagX::TAG::WithBody::If;

rather than...

 use Bedrock::Text::TagX::TAG::WithBody::If;

The module also provides a set of utilities that can be imported by
Bedrock modules.

=head1 EXPORT TAGS

=head2 :all

C<:booleans>, C<:file>, C<compile_regexp>, C<force_array>

=head2 :booleans

 is_array
 is_bedrock_array
 is_bedrock_hash
 is_blessed
 is_hash
 is_regexp
 is_scalar
 to_boolean

=head2 :file

 create_temp_file
 slurp_file
 find_in_path

=head1 METHODS AND SUBROUTINES

=head2 OBJECT METHODS

=head3 is_array

Equivalent to:

 ref $x && reftype($x) eq 'ARRAY'

=head3 is_bedrock_array

Equivalent to:

 ref $x && ref($x) eq 'Bedrock::Array'

=head3 is_bedrock_hash

Equivalent to:

 ref $x && ref($x) eq 'Bedrock::Hash'

=head3 is_blessed

Equivalent to:

 ref $x && blessed($x)

=head3 is_hash

Equivalent to:

 ref $x && reftype($x) eq 'HASH'

=head3 is_regexp

Equivalent to:

 ref $x && ref($x) eq 'Regexp'

=head3 is_scalar

Equivalent to:

 ref $x

=head2 FILE UTILITIES

=head3 find_in_path

 find_in_path(options)

In list context, returns a list of files found in a list of path based
on a filter pattern or a file name. In scalar context, returns the
number of files found.

Either C<file> or C<pattern> is required. Options are described below:

=over 5

=item max_items

Maximum number of items to return.

=item path_list

An array reference to a list of paths to search. If no C<path_list> is
passed or the list is empty, the current working directory (and it's
sub-directories) will be traversed.

=item file

The name of the file to search for.

=item pattern

A regular expression that will be used as a filter.

=back

Examples:

Find the first occurrence of file F<foo> in current working directory
( and sub-directories ).

 my ($file) = find_in_path(file => 'foo', max_items => 1);

More less equivalent to:

 $ find . -name foo

Find all files named F<foo> in a list of directories.

 my @files = find_in_path( file => 'foo', path_list => [ $ENV{PATH} ] );

Find all F<.xml> files in list of directories.

 my @xml_files = find_in_path(pattern => qr/[.]xml$/, path_list => [$ENV{CONFIG_PATH}]);

=head3 slurp_file

Returns entire contents of a file. Throws an exception if the file
cannot be opened.

=head3 create_temp_dir

Creates a temporary directory (or sub-directories) and optionally
populates those directories copies with files from a manifest. Returns
the name of the temporary directory created.

 create_temp_dir(options)

=over 5

=item cleanup

Boolean that indicates that the directory and all files beneath it
should be removed when the program terminates.

=item manifest

Reference to a hash where each element of the hash represent a set of
files to be copied from a soruce to a sub-directory of the temporary
directory.

=over 10

=item source

Source of the files to copy.

=item dest_dir

Destination directory.  If omitted, files are copied to the root of
the temporary directory.

=item files

List of file names to copy.

=back

=item dir

=back

=head2 MISCELLANEOUS

=head3 force_array

Returns a reference to an array that contains the passed
parameter(s). If the passed value is already an array reference it is
simply returned. This method is useful for ensuring a value is a
reference or creating a new array reference from a list.

 my $array = force_array(@_);

=head3 to_boolean

Converts a string (case insensitive) that represents a boolean into a
0 or 1.

  true  => 1
  false => 0
  yes   => 1
  no    => 0
  on    => 1
  off   => 0
  '0'   => 0
  '1'   => 1

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=cut
