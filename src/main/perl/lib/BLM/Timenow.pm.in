#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Timenow;

use strict;
use warnings;

use parent qw/Bedrock::Hash/;

use Readonly;

Readonly::Array our @MONTHS =>
  qw (jan feb mar apr may jun jul aug sep oct nov dec);

Readonly::Array our @DAY =>
  qw (sunday monday tuesday wednesday thursday friday saturday);

Readonly::Array our @DAY_ABBREV => qw (sun mon tue wed thu fri sat);

#
# Local time functions
#
########################################################################
sub SS   { return sprintf '%02d', $_[0] }
sub MI   { return sprintf '%02d', $_[1] }
sub HH24 { return sprintf '%02d', $_[2] }
########################################################################

########################################################################
sub HH {
########################################################################
  my @args = @_;
  return sprintf '%02d', $args[2] > 12 ? $args[2] - 12 : $args[2];
}

########################################################################
sub D   { my @args = @_; return $args[6] }
sub DD  { my @args = @_; return sprintf '%02d', $args[3] }
sub DDD { my @args = @_; return sprintf '%03d', $args[7] + 1 }
sub DAY { my @args = @_; return uc $DAY[ $args[6] ] }
sub day { my @args = @_; return lc $DAY[ $args[6] ] }
sub Day { my @args = @_; return ucfirst $DAY[ $args[6] ] }
sub DY  { my @args = @_; return uc $DAY_ABBREV[ $args[6] ] }
sub dy  { my @args = @_; return lc $DAY_ABBREV[ $args[6] ] }
sub Dy  { my @args = @_; return ucfirst $DAY_ABBREV[ $args[6] ] }
########################################################################

########################################################################
sub YY {
########################################################################
  my @args = @_;
  return sprintf '%02d', $args[5] >= 100 ? $args[5] - 100 : $args[5];
}

########################################################################
sub YYYY     { my @args = @_; return sprintf '%04d', $args[5] + 1900 }
sub MM       { my @args = @_; return sprintf '%02d', $args[4] + 1 }
sub MON      { my @args = @_; return uc $MONTHS[ $args[4] ] }
sub mon      { my @args = @_; return lc $MONTHS[ $args[4] ] }
sub Mon      { my @args = @_; return ucfirst $MONTHS[ $args[4] ] }
sub ctime    { my @args = @_; return scalar localtime $args[-1] }
sub meridian { my @args = @_; return $args[2] > 12 ? 'PM' : 'AM'; }
########################################################################

#
# GM time functions
#
########################################################################
sub rfc1123 {
########################################################################
  my @args = @_;

  my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst, $time )
    = @args;

  return sprintf
    '%s, %02d %s %d %02d:%02d:%02d GMT',
    ucfirst( $DAY_ABBREV[$wday] ),
    $mday,
    ucfirst( $MONTHS[$mon] ),
    $year + 1900,
    $hour, $min, $sec;
}

########################################################################
sub rfc850 {
########################################################################
  my @args = @_;

  my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst, $time )
    = @args;

  return sprintf
    '%s, %02d-%s-%d %02d:%02d:%02d GMT',
    ucfirst( $DAY[$wday] ),
    $mday,
    ucfirst( $MONTHS[$mon] ),
    $year + 1900,
    $hour, $min, $sec;
}

########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;

  my %localtime = (
    'SS'    => \&SS,
    'MI'    => \&MI,
    'HH24'  => \&HH24,
    'HH12'  => \&HH,
    'HH'    => \&HH,
    'D'     => \&D,
    'DD'    => \&DD,
    'DDD'   => \&DDD,
    'DAY'   => \&DAY,
    'day'   => \&day,
    'Day'   => \&Day,
    'DY'    => \&DY,
    'dy'    => \&dy,
    'Dy'    => \&Dy,
    'MM'    => \&MM,
    'MON'   => \&MON,
    'mon'   => \&mon,
    'Mon'   => \&Mon,
    'YY'    => \&YY,
    'YYYY'  => \&YYYY,
    'ctime' => \&ctime,
    'PM'    => \&meridian,
    'AM'    => \&meridian,
  );

  my %gmtime = (
    'RFC1123' => \&rfc1123,
    'RFC850'  => \&rfc850
  );

  if ( exists $localtime{$key} ) {
    return $localtime{$key}->( localtime, time );
  }
  elsif ( exists $gmtime{$key} ) {
    return $gmtime{$key}->( gmtime, time );
  }

  return;
}

1;

## no critic (RequirePerlSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Timenow> -- Expose current date/time via Bedrock hash.

=head1 SYNOPSIS

 <plugin:Timenow>

 <var $Timenow.Day> <var $Timenow.Mon> <var $Timenow.DAY> <var $Timenow.YYYY>

=head1 DESCRIPTION

The C<BLM::Timenow> plugin will explose the various components of
current date and as properties.  The properties correspond to the
way you might get at this information in an Oracle C<TO_CHAR> format
string for example.

=head1 PROPERTIES

Use any of the properties below to expose the current time elements.

=over 5

=item * AM

Same as PM. Meridian - AM or PM.

=item * D	

Day of week.

=item * DD	

2-digit day of month.

=item * DDD	

3-digit day of year (julian).

=item * DAY	

Capitalized day of week.

=item * day	

Lower case day of week.

=item * Day	

First letter capitalized day of week.

=item * DY	

Upper case 3 character abbreviation for day of week.

=item * dy	

Lower case 3 character abbreviation for day of week.

=item * Dy

First letter capitalized  3 character abbreviation for day of week.

=item * HH24	

00-23 hour of the day.

=item * HH12	

0-12 hour of the day.

=item * HH	

hour of the day 

=item * MI	

minutes of our

=item * MM	

2-digit month.

=item * MON	

Capitalized month name.

=item * mon	

Lower case month name.

=item * Mon	

First letter capitalized month name.

=item * PM

Same as AM. Meridian - AM or PM.

=item * SS	

2-digit seconds.

=item * YY	

2-digit year

=item * YYYY	

4-digit year

=item * ctime	

Return a formatted date string that looks like:

 Sat Nov 20 10:57:51 2010

=item * RFC1123

Return a formatted date string that looks like:

 Sat, 20 Nov 2010 15:57:51 GMT

=item * RFC850

Return a formatted date string that looks like:

 Saturday, 20-Nov-2010 15:57:51 GMT

=back

=head1 EXAMPLE

 <plugin:Timenow>

 <null:properties SS MI HH24 HH12 HH D DD DDD DAY day Day DY dy Dy MM MON mon Mon YY YYYY ctime RFC1123  RFC850>

 <table>
 <foreach $properties>
  <tr>
    <th><var $_></th>
    <td><var $Timenow.get($_)></td>
  </tr>
 </foreach>
 </table>

=head1 AUTHOR

J. Sridhar

=cut
