#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Timenow;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
}

use parent qw/Bedrock::Hash/;

my @__mon = qw (jan feb mar apr may jun jul aug sep oct nov dec);
my @__day = qw (sunday monday tuesday wednesday thursday friday saturday);
my @__dy  = qw (sun mon tue wed thu fri sat);

#
# Local time functions
#
sub SS   { sprintf "%02d", $_[0] }
sub MI   { sprintf "%02d", $_[1] }
sub HH24 { sprintf "%02d", $_[2] }
sub HH { my $hour = $_[2]; sprintf "%02d", $hour > 12 ? $hour - 12 : $hour }
sub D { $_[6] }
sub DD  { sprintf "%02d", $_[3] }
sub DDD { sprintf "%03d", $_[7] + 1 }
sub DAY { uc( $__day[ $_[6] ] ) }
sub day { lc( $__day[ $_[6] ] ) }
sub Day { ucfirst( $__day[ $_[6] ] ) }
sub DY  { uc( $__dy[ $_[6] ] ) }
sub dy  { lc( $__dy[ $_[6] ] ) }
sub Dy  { ucfirst( $__dy[ $_[6] ] ) }
sub YY { my $year = $_[5]; sprintf "%02d", $year >= 100 ? $year - 100 : $year }
sub YYYY { sprintf "%04d", $_[5] + 1900 }
sub MM   { sprintf "%02d", $_[4] + 1 }
sub MON  { uc( $__mon[ $_[4] ] ) }
sub mon  { lc( $__mon[ $_[4] ] ) }
sub Mon  { ucfirst( $__mon[ $_[4] ] ) }
sub ctime { scalar( localtime( $_[-1] ) ) }
sub meridian { return $_[2] > 12 ? 'PM' : 'AM'; }

#
# GM time functions
#
sub rfc1123 {
  my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst, $time ) =
  @_;
  sprintf( "%s, %02d %s %d %02d:%02d:%02d GMT",
           ucfirst( $__dy[$wday] ),
           $mday,
           ucfirst( $__mon[$mon] ),
           $year + 1900,
           $hour, $min, $sec );
}

sub rfc850 {
  my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst, $time ) =
  @_;
  sprintf( "%s, %02d-%s-%d %02d:%02d:%02d GMT",
           ucfirst( $__day[$wday] ),
           $mday,
           ucfirst( $__mon[$mon] ),
           $year + 1900,
           $hour, $min, $sec );
}

sub FETCH {
  my $self = shift;
  my $key  = shift;

  my %localtime = ( 'SS'    => \&SS,
                    'MI'    => \&MI,
                    'HH24'  => \&HH24,
                    'HH12'  => \&HH,
                    'HH'    => \&HH,
                    'D'     => \&D,
                    'DD'    => \&DD,
                    'DDD'   => \&DDD,
                    'DAY'   => \&DAY,
                    'day'   => \&day,
                    'Day'   => \&Day,
                    'DY'    => \&DY,
                    'dy'    => \&dy,
                    'Dy'    => \&Dy,
                    'MM'    => \&MM,
                    'MON'   => \&MON,
                    'mon'   => \&mon,
                    'Mon'   => \&Mon,
                    'YY'    => \&YY,
                    'YYYY'  => \&YYYY,
                    'ctime' => \&ctime,
                    'PM'    => \&meridian,
                    'AM'    => \&meridian
                  );

  my %gmtime = ( 'RFC1123' => \&rfc1123,
                 'RFC850'  => \&rfc850 );

  if ( exists $localtime{$key} ) {
    return $localtime{$key}->( localtime, time );
  }
  elsif ( exists $gmtime{$key} ) { return $gmtime{$key}->( gmtime, time ); }
  undef;
}

1;

#
# Revision 1.12  2011/09/15 16:05:31  eutl420
# - perl tidy
#
# Revision 1.11  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.10  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.9  2010/11/29 15:57:51  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.8  2010/11/20 18:43:56  rlauer
# - add AM/PM
# - pod cleanup
#
# Revision 1.7  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.6  2009/12/31 00:03:57  rlauer
# tweak docs
#
# Revision 1.5  2009/12/30 12:40:10  rlauer
# updated docs
#
# Revision 1.4  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.3  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.2  2001/02/14 15:35:44  sridhar
# Added copyright and GPL notice
#
# Revision 1.1  2000/09/18 18:30:14  sridhar
# Moving some general purpose BLMs from Perl/BLM to Perl/Bedrock/BLM
#
# Revision 1.1  2000/06/06 20:47:57  sridhar
# BLM for current time -- moved from Bedrock/Modules directory
#
# Revision 1.2  2000/05/17 19:55:43  sridhar
# Added ctime.
#
# Revision 1.1  2000/05/17 14:29:42  sridhar
# Adding Loadable module TimeNow -- support for current date and time in
# Bedrock pages
#
#

=pod

=head1 PUBLIC

C<BLM::Timenow> -- Expose current date/time via Bedrock hash.

=head1 SYNOPSIS

 <plugin:Timenow>

 <var $Timenow.Day> <var $Timenow.Mon> <var $Timenow.DAY> <var $Timenow.YYYY>

=head1 DESCRIPTION

The C<BLM::Timenow> plugin will explose the various components of
current date and as properties.  The properties correspond to the
way you might get at this information in an Oracle C<TO_CHAR> format
string for example.

=head1 PROPERTIES

Use any of the properties below to expose the current time elements.

=over 5

=item * AM

Same as PM. Meridian - AM or PM.

=item * D	

Day of week.

=item * DD	

2-digit day of month.

=item * DDD	

3-digit day of year (julian).

=item * DAY	

Capitalized day of week.

=item * day	

Lower case day of week.

=item * Day	

First letter capitalized day of week.

=item * DY	

Upper case 3 character abbreviation for day of week.

=item * dy	

Lower case 3 character abbreviation for day of week.

=item * Dy

First letter capitalized  3 character abbreviation for day of week.

=item * HH24	

00-23 hour of the day.

=item * HH12	

0-12 hour of the day.

=item * HH	

hour of the day 

=item * MI	

minutes of our

=item * MM	

2-digit month.

=item * MON	

Capitalized month name.

=item * mon	

Lower case month name.

=item * Mon	

First letter capitalized month name.

=item * PM

Same as AM. Meridian - AM or PM.

=item * SS	

2-digit seconds.

=item * YY	

2-digit year

=item * YYYY	

4-digit year

=item * ctime	

Return a formatted date string that looks like:

 Sat Nov 20 10:57:51 2010

=item * RFC1123

Return a formatted date string that looks like:

 Sat, 20 Nov 2010 15:57:51 GMT

=item * RFC850

Return a formatted date string that looks like:

 Saturday, 20-Nov-2010 15:57:51 GMT

=back

=head1 EXAMPLE

 <plugin:Timenow>

 <null:properties SS MI HH24 HH12 HH D DD DDD DAY day Day DY dy Dy MM MON mon Mon YY YYYY ctime RFC1123  RFC850>

 <table>
 <foreach $properties>
  <tr>
    <th><var $_></th>
    <td><var $Timenow.get($_)></td>
  </tr>
 </foreach>
 </table>

=head1 AUTHOR

J. Sridhar

=cut
