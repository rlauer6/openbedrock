#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Benchmark;

use strict;
use warnings;

use Bedrock qw(:booleans);
use Benchmark;

use parent qw( Bedrock::Hash );

use constant ANON_BENCHMARK => '__anon_benchmark__';

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless Bedrock::Hash->new, $class;

  # start the clock on an anonymous benchmark
  $self->start(ANON_BENCHMARK);

  for (@args) {
    # and any additional ones requested.
    $self->start($_);
  }

  return $self;
}

########################################################################
sub FETCH {
########################################################################
  my ( $self, $name ) = @_;

  die "$self: Unknown benchmark named `$name'\n"
    if !exists $self->{$name};

  if ( !is_array( $self->{$name} ) ) {
    $self->{$name} = [ Benchmark->new, $self->{$name} ];
  }

  return timestr( timediff( @{ $self->{$name} } ) );
}

########################################################################
sub start {
########################################################################
  my ( $self, $name ) = @_;

  die "must specify name of counter\n"
    if !$name;

  my $start = Benchmark->new;

  $self->{$name} = $start;

  return $start;
}

########################################################################
sub stop {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 0 ) {
    return $self->{ $args[0] };
  }
  else {
    my $name = ANON_BENCHMARK;

    my $value = $self->{$name};

    delete $self->{$name};

    return $value;
  }
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::Benchmark -  Bedrock module for benchmarking your Bedrock pages.

=head1 SYNOPSIS
  
  <plugin:Benchmark>

  <null $Benchmark.start("query_1")>

  The query took <var $Benchmark.query_1> seconds.
  
  This page was generated in <var $Benchmark.stop()> seconds.

=head1 DESCRIPTION

Use the C<BLM::Benchmark> plugin to compute and display the time
needed to process a Bedrock page and display the output.

=head2 PROPERTIES

The benchmark object has, as properties, whatever counters are
currently running. The act of retrieving a property effectively stops
the counter from running any more.  The value retrieved is the time
taken for execution from when the counter was started.  I<It is possible
to retrieve a property more than once, you will get the same values
back since the counter no longer runs after the first retrieval.>

If no named counters have been set, then the benchmark object has no
properties. In this case, the only way to stop and retrieve the time
taken by the anonymous benchmark (started at construction) is to invoke the
C<stop()> method.

=head2 METHODS AND SUBROUTINES

=head3 start( [benchmark-name] )

Use C<start()> to start a new named benchmark counter at any point in
the life of the benchmark object. If no name is provided it is
considered an anonymous benchmark. Stop an anonymous benchmark by
invoking the C<stop()> method with no argument.

  <null $Benchmark.start("new")>
  <null $Benchmark.start("another")>

=head3 stop

To stop a named counter,

  That took <var $Benchmark.stop("new")>

Note that the return value from stop is the time taken since the counter was initialized.

To stop the anonymous benchmark,

  That one was <var $Benchmark.stop()>

Note that the only way to get the time taken for an anonymous benchmark is to capture the
return value from C<stop()>. For a named benchmark, it is possible to fetch it again as a 
property.

  <null $Benchmark.stop("new")>
  That one took <var $Benchmark.new>

=head1 AUTHOR

J. Sridhar

=cut
