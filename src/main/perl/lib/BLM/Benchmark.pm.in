#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Benchmark;

use strict;
use Carp;
use constant ANON_BENCHMARK		=> '__anon_benchmark__';
use Benchmark;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.03;
}

use SIS::Hash;

@ISA = qw( SIS::Hash );

sub TIEHASH
{
    my $class = shift;
    my $self = bless SIS::Hash->new, $class;
    # start the clock on an anonymous benchmark
    $self->start(ANON_BENCHMARK);
    for (@_) {
	# and any additional ones requested.
	$self->start($_);
    }
    $self;
}

sub FETCH
{
    my $self = shift;
    my $name = shift;
    die "$self: Unknown benchmark named `$name'\n" unless exists $self->{$name};
    $self->{$name} = [Benchmark->new, $self->{$name}] unless ref($self->{$name}) eq 'ARRAY';
    return timestr(timediff( @{$self->{$name}} ));
}

sub start
{
    my $self = shift;
    die ref($self), "->start(): must specify name of counter.\n" unless @_ > 0;
    my $name = shift;
    my $start = Benchmark->new;
    $self->{$name} = $start;
    return $start;
}

sub stop
{
    &Carp::cluck( "In stop(@_)" );
    my $self = shift;
    if ( @_ > 0 ) {
	return $self->{$_[0]};
    } else {
	my $name = ANON_BENCHMARK;
	my $value = $self->{$name};
	delete $self->{$name};
	return $value;
    }
}

1;

=head1 SYNOPSIS

BLM::Benchmark -- Bedrock module for benchmarking your Bedrock pages. I<(v $Revision$)>

=head1 USAGE

  <null --define-var = "bm" $Bedrock.new("BLM::Benchmark" [, <identifier> ..] )>
  .
  . Bedrock code
  .
  . Let us start another benchmark here
  . <null $bm.start("another")
  .
  . More bedrock here 
  .
  . That took <var $bm.another>
  .
  This page was generated in <var $bm.stop()>

=head1 DESCRIPTION

Use the C<BLM::Benchmark> module to compute and display the time needed to process a Bedrock
page and display the output.

=head2 Constructor

=over 4

=item *

  $Bedrock.new("BLM::Benchmark")

This creates and returns a new benchmark object and starts an anonymous counter running.

=item *

  $Bedrock.new("BLM::Benchmark", <Identifier> ..)

Use it like this to create one or more named benchmarks

=back

=head2 Properties

The benchmark object has, as properties, whatever counters are currently running.
The act of retrieving a property effectively stops the counter from running any more.
The value retrieved is the time taken for execution from when the counter was started.
It is possible to retrieve a property more than once, you will get the same values back
since the counter no longer runs after the first retrieval.

If no named counters have been set, then the benchmark object has no properties. In this case,
the only way to stop and retrieve the time taken by the anon benchmark (started at construction)
is to invoke the C<stop()> method.

=head2 Methods

=head3 start()

Use C<start()> to start a new named benchmark counter at any point in the life of the benchmark object.

  <null $bm.start("new")>
  <null $bm.start("another")>

=head3 stop()

To stop a named counter,

  That took <var $bm.stop("new")>

Note that the return value from stop is the time taken since the counter was initialized.

To stop the anonymous benchmark,

  That one was <var $bm.stop()>

Note that the only way to get the time taken for an anonymous benchmark is to capture the
return value from C<stop()>. For a named benchmark, it is possible to fetch it again as a 
property.

  <null $bm.stop("new")>
  That one took <var $bm.new>

=head1 AUTHOR

J. Sridhar

=head1 ChangeLog

  $Log$
  Revision 1.4  2008/12/03 14:01:18  alans
  We now use a hard-coded value for module $VERSION rather than a munged
  version of the expansion of the CVS 'Revision' keyword; the module API
  version number is orthogonal to the identifyer in the source control
  system.

  This change makes it safe to import the Bedrock codebase into another
  source repository (even CVS!) without breaking the code. We hit this
  issue when we first released the libbedrock-perl .deb package, for which
  we imported the release tarball sources into the 'bedrock-deb' CVS project.

  Revision 1.3  2001/02/14 15:35:43  sridhar
  Added copyright and GPL notice

  Revision 1.2  2000/10/06 15:38:03  sridhar
  1. Anonymous benchmark started at object creation
  2. POD


=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2008/12/03 14:01:18  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.3  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/10/06 15:38:03  sridhar
# 1. Anonymous benchmark started at object creation
# 2. POD
#
# Revision 1.1  2000/09/25 20:13:20  sridhar
# Benchmarking module
#
#
