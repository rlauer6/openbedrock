package BLM::DBHandler;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use DBI;

use Bedrock::Array;
use Scalar::Util qw/reftype/;
use Carp;

use parent qw/Bedrock::Hash/;

=pod

=head1 PUBLIC

C<BLM::DBHandler> - Provides support for MySQL database operations in
a Bedrock environment.  Typically used as the base class for a perl
module package used when building a Bedrock application.

=head1 SYNOPSIS

 package BLM::MyJunk;

 use parent qw/BLM::DBHandler/;

 1;

..and voila your C<BLM::MyJunk> now has some nifty data access methods.

or in a standalone situation...

 my $dbi = DBI->connect('dbi:mysql:mydb', 'user', 'password');

 my $dbhandler = BLM::DBHandler->new( $dbi );

 my $results = $dbhandler->select_list("select * from custmr where name acct = ?", $acct);

=head1 METHODS

=head2 CONSTRUCTOR

=head3 new

 new( dbi, [options] )
 
Create a new C<DBHandler object>.

  my $dbhandler = BLM::DBHandler->new( $dbi, max_rows => 100 );

B<dbi> is a C<DBI> handle to an open MySQL database.

Options

=over 5

=item max_rows 

Limit the number of rows returned in a query.  The default is 100.

=back

=cut

sub new {
  my ($class, $dbi, %options) = @_;

  die "usage: BLM::DBHandler->new(dbi-handle, key, value, ...)"
    unless ref($dbi) && ref($dbi) =~/DBI::db/;
  
  my $max_rows = exists $options{max_rows} ? $options{max_rows} : 100;
  
  $class->SUPER::new( _db => $dbi, _dbi => $dbi,  _max_rows => $max_rows);
}

=pod

=head2 SETTER/GETTER METHODS

=cut

=pod

=head3 dbi

 dbi()

Set/get the current C<DBI> handle.

=cut

sub dbi {
  my $self = shift;
  
  if ( @_ ) {
    $self->{_dbi} = shift;
  }

  return $self->{_dbi};
}

=pod

=head3 errstr

 errstr()

Sets/get the error message from the last executed statement.

=cut

sub setErr  { goto &errstr; }
sub set_err { goto &errstr; }
sub get_err { goto &errstr; }

sub errstr {
  my $self = shift;
  
  if ( @_ ) {
    $self->{_err} = shift;
  }
  
  return $self->{_err};
}

=pod

=head3 get_bind_vars

 get_bind_vars()

Return an array containing the last bind variables used.  Helpful in debugging.

=cut

sub _dbGetBindVars { goto &bind_vars; }
sub get_bind_vars  { goto &bind_vars; }
sub setBindVars    { goto &bind_vars; }
sub set_bind_vars  { goto &bind_vars; }

sub bind_vars {
  my $self = shift;
  my @args = @_;
  
  if ( @args ) {
    $self->{__args} = $self->{_args};
    $self->{_args} = \@args;
    $self->arg_list(join("|", map { defined $_ ? $_ : 'null'} @args));
  }
  
  return $self->{_args} ? @{$self->{_args}} : ();
}

sub arg_list {
  my $self = shift;
  
  if ( @_ ) {
    $self->{_arg_list} = shift;
  }
  
  return $self->{_arg_list};
}

=pod

=head3 get_query

 get_query()

Return the last query executed. Helpful in debugging.

=cut

sub _dbGetQuery { goto &query; }
sub get_query   { goto &query; }
sub setQuery    { goto &query; }
sub set_query   { goto &query; }

sub query {
  my $self = shift;

  if ( @_ ) {
    $self->{__query} = $self->{_query};
    $self->{_query} = shift;
  }

  return $self->{_query};
}

=pod

=head3 max_rows

 max_rows( [rows] )

Set or retrieve the maximum number of rows to return in a C<SelectList> call.  The default is 100.

=cut

sub max_rows {
  my $self = shift;
  
  if ( @_ ) {
    $self->{_max_rows} = shift;
  }
  
  return $self->{_max_rows};
}


sub mysql_insertid {
  my $self = shift;

  if ( @_ ) {
    $self->{mysql_insertid} = shift;
  }
  
  return $self->{mysql_insertid};
}

sub rows {
  my $self = shift;

  if ( @_ ) {
    $self->{rows} = shift;
  }
  
  return $self->{rows};
}


=pod

=head2 SQL METHODS

=cut

=pod

=head3 commit

 commit()

Commit a transaction if C<AutoCommit> is not set.

=cut

sub commit {
  my $self = shift;

  $self->dbi->commit 
    unless $self->dbi->{AutoCommit};
}


=pod

=head3 date_format

 date_format( date, format-string, [utc-flag] )

Returns the result of the MySQL DATE_FORMAT function.

  <var $tb.date_format('2011-01-01', '%a')>

 Sat

=over 5

=item date

A MySQL date field.

=item format-string

MySQL format string.  See MySQL C<DATE_FORMAT> documentation.

=item utc-flag

Indicates the date is a UTC date and should be adjusted this many
hours.

=back

=cut

sub date_format {
  my $self = shift;
  my ($date, $fmt, $utc) = @_;
  
  my $hour = $utc || 0;

  my $dbh = $self->dbhandler;
  
  my $ref = $dbh->Select("select date_format( date_add(?, INTERVAL ? HOUR), ?) date_fmt",$date, $hour, $fmt);

  return $ref->{date_fmt};
}

=pod

=head3 Do

Deprecated.  See C<do()>

=head3 do

 do( query, [args] )

Execute a SQL statement.

  $dbhandler->do("update results set status='1' where order_num = ?", $order_num);

=over 5

=item query

The SQL statement to execute.

=item args

The bind variables to use in the query.

=back

Returns a non-zero value if there was an error.  Use
C<errstr()> to retrieve error message.  Also sets C<-E<gt>{rows}> to
the number of rows affected by the statement.

=cut

sub Do { goto &do; }

sub do {
  my $self = shift;

  $self->_dbDo( $self->dbi, @_);
}

sub _dbDo {
  my ($self, $db, $query, @args) = @_;
  
  $self->set_bind_vars(@args);

  my $sth = $self->_dbPrepare($db, $query);
  my $rv = $sth->err();
  $self->set_err($sth->errstr());
  
  # make sure we start out with 0
  $self->rows(0);
  
  unless ( $sth->err() ) {
    $sth->execute( @args );
    $rv = $sth->err();
    
    $self->rows($sth->rows());
    $self->set_err( $sth->errstr() );
  }
  
  $self->mysql_insertid($sth->{mysql_insertid});
  
  $sth->finish;
  
  return $rv;
}

=pod

=head3 prepare

 prepare( query )

Prepare a statement for execution. Returns a statement handle.

=over 5

=item query

The query to execute.

=back

Example:

 my $sth = $dbhandler->prepare("select * from my_table where ...");
 $sth->execute;

Why would you do this instead of:

   my $sth = $dbi->prepare("select * from my_table where ....");
   $sth->execute;

...well because this class handles errors, saves querys, etc. (see below).

=cut

sub Prepare {  goto &prepare; }

sub prepare {
  my $self = shift;

  return $self->_dbPrepare($self->dbi, @_);
}

sub _dbPrepare {
  my ($self, $db, $stmt) = @_;
  
  $self->set_query( $stmt );
  
  my $sth;
  die "no database handle for: [$stmt]:[" . ref($db) . "]" 
    unless ref($db) && ref($db) =~/DBI::db/;
  
  $sth = $db->prepare($stmt);
  
  return $sth;
}

=pod

=head3 rollback

 rollback()

Rollback a transaction if C<AutoCommit> is not enabled.

=cut

sub rollback {
  my $self = shift;

  $self->dbi->rollback 
    unless $self->dbi->{AutoCommit};
}

sub _dbSelect {
  my $self = shift;
  my $db = shift;
  my $query = shift;
  
  $self->set_bind_vars(@_);
  
  my $sth = $self->_dbPrepare($db, $query);
  $sth->execute(@_);
  
  # probably bad design to throw an error here...since the caller
  # should probably indicate how errors should be handled using
  # RaiseError when connecting...
  if ( $db->{mysql_errno} ) {
    die "$query - [" . $_[0] . "] " . $self->bind_vars();
  }
  
  my $ref = $sth->fetchrow_hashref;
  
  $sth->finish;
  
  return $ref;
}

=pod

=head3 Select

Deprecated.  See C<select()>.

=head3 select

 select( query, [args] )

Select a record from a database. Returns a C<Bedrock::Hash> containing
the fields of the record.  Returns C<undef> if the query does not
return a result.

Example:

  my $rec = $dbhandler->select("select * from custmr where acct = ?", 1);

  printf "%s\n", $rec->{'NAME'};

=over 5

=item query

The SQL query to execute.

=item args

The bind variables to use in the query.

=back

=cut

sub select {
  my $self = shift;

  $self->_dbSelect($self->dbi, @_);
}

sub Select {
  carp "Select deprecated: use 'select()'\n";
  goto &select;
}

sub _dbSelectList {
  my $self = shift;
  my $db = shift;
  my $query = shift;
  
  $self->set_bind_vars(@_);
  my $sth = $self->_dbPrepare($db, $query);
  $sth->execute(@_);
  
  my @list;
  my $ref;
  my $nrows = 0 ;
  
  while ($ref = $sth->fetchrow_hashref) {
    push @list, new Bedrock::Hash(%$ref);
    last if $self->max_rows() && $nrows++ >= $self->max_rows();
  }
  
  $sth->finish;
  
  return new Bedrock::Array(@list);
}

=pod

=head3 SelectList

Deprecated. See C<select_list()>.

=head3 select_list

 select_list( query, [args] )

Selects multiple records from a database.  Returns a C<Bedrock::Array>
of C<Bedrock::Hash> objects.

  my $list = $dbhandler->select_list("select * from custmr where name like 'TEST%'");

  foreach $rec (@$list) {
    printf "%s\n", $rec->{'NAME'};
  }

Returns a 0 length C<Bedrock::Array> object if no records are selected.

=over 5

=item query

The query to execute.

=item args

The bind variables to use in the query.

=back

=cut

sub SelectList {  goto &select_list; }

sub select_list {
  my $self = shift;
  
  $self->_dbSelectList($self->dbi, @_);
}

=pod

=head2 ATTRIBUTES

Several attributes are stored within this class that you might find useful.

=head3 err

Last error message returned by an executed statement. Can be retrieved with the C<errstr()> method.

=head3 max_rows

Maximum number of rows to return on a C<SelectList> call.  Can be set
or retrieved via the C<max_rows()> method.

=head3 mysql_insertid

Updated after a C<Do> just in case you were doing an insert on a table
with an C<auto_increment> field.

=head3 rows

Number of rows affected by the last execute statement.

=head1 SEE ALSO

C<DBI>, C<BLM::IndexedTableHandler>

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=cut

1;
