# $Id$

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::DBHandler;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use DBI;

use Bedrock::Hash;
use Bedrock::Array;

@ISA = qw( Bedrock::Hash );

=pod

=head1 PUBLIC

C<BLM::DBHandler> - Provides support for MySQL database operations in
a Bedrock environment.  Typically used as the base class for a perl
module package used when building a Bedrock application.

=head1 SYNOPSIS

 package BLM::MyJunk;

 use BLM::DBHandler;

 @ISA = qw(BLM::DBHandler);

 1;

..and voila your C<BLM::MyJunk> now has some nifty data access methods.

or in a standalone situation...

 my $dbi = DBI->connect('dbi:mysql:mydb', 'user', 'password');

 my $dbhandler = BLM::DBHandler->new( $dbi );

 my $results = $dbhandler->SelectList("select * from custmr where name acct = ?", $acct);

=head1 METHODS

=head2 CONSTRUCTOR

=head3 new

 new( dbi )
 
Create a new C<DBHandler object>.

  my $dbhandler = BLM::DBHandler->new( $dbi );

B<dbi> is a C<DBI> handle to an open MySQL database.

=cut

sub new {
  my ($class, $dbi) = @_;

  die ref($class) . "->new([db handle])!" 
    unless UNIVERSAL::isa( $dbi, "DBI::db");

  return bless $class->SUPER::new(
				  _db       => $dbi,
				  _dbi      => $dbi,
				  _max_rows => 100
				 ),
				   $class;
}

=pod

=head2 SETTER/GETTER METHODS

=cut

=pod

=head3 dbi

 dbi()

Returns the current C<DBI> handle.

=cut

sub dbi {
  return $_[0]->{_dbi};
}

=pod

=head3 errstr

 errstr()

Returns the error message from the last executed statement.

=cut

sub errstr {
    my $self = shift;

    return $self->{_err};
}

=pod

=head3 get_bind_vars

 get_bind_vars()

Return an array containing the last bind variables used.  Helpful in debugging.

=cut

sub _dbGetBindVars { return $_[0]->{_args}; }
sub get_bind_vars { goto &_dbGetBindVars; }

=pod

=head3 get_query

 get_query()

Return the last query executed. Helpful in debugging.

=cut

sub _dbGetQuery { return $_[0]->{_query}; }
sub get_query { goto &_dbGetQuery; }

=pod

=head3 max_rows

 max_rows( [rows] )

Set or retrieve the maximum number of rows to return in a C<SelectList> call.  The default is 100.

=cut

sub max_rows {
    my $self = shift;

    $self->{_max_rows} = $_[0] 
      if exists $_[0];

    return $self->{_max_rows};
}


=pod

=head2 SQL METHODS

=cut

=pod

=head3 commit

 commit()

Commit a transaction if C<AutoCommit> is not set.

=cut

sub commit {
  my $self = shift;

  $self->dbi->commit 
    unless $self->dbi->{AutoCommit};
}




=pod

=head3 date_format

 date_format( date, format-string, [utc-flag] )

Returns the result of the MySQL DATE_FORMAT function.

  <var $tb.date_format('2011-01-01', '%a')>

 Sat

=over 5

=item date

A MySQL date field.

=item format-string

MySQL format string.  See MySQL C<DATE_FORMAT> documentation.

=item utc-flag

Indicates the date is a UTC date and should be adjusted this many
hours.

=back

=cut

sub date_format {
  my $self = shift;
  my ($date, $fmt, $utc) = @_;
  
  my $hour = $utc || 0;

  my $dbh = $self->dbhandler;
  
  my $ref = $dbh->Select("select date_format( date_add(?, INTERVAL ? HOUR), ?) date_fmt",$date, $hour, $fmt);

  return $ref->{date_fmt};
}

sub _dbDo {
  my $self = shift;
  my $db = shift;
  my $query = shift;
  
  $self->set_bind_vars(@_);
  
  my $sth = $self->_dbPrepare($db, $query);
  my $rv = $sth->err();
  $self->set_err($sth->errstr());
  
  # make sure we start out with 0
  $self->{rows} = 0;
  
  unless ( $sth->err() ) {
    $sth->execute( @_ );
    $rv = $sth->err();
    
    $self->{rows} = $sth->rows();
    $self->set_err( $sth->errstr() );
  }
  
  $self->{mysql_insertid} = $sth->{mysql_insertid};
  
  $sth->finish;
  
  return $rv;
}

=pod

=head3 Do

Deprecated.  See C<do()>

=head3 do

 do( query, [args] )

Execute a SQL statement.

  $dbhandler->do("update results set status='1' where order_num = ?", $order_num);

=over 5

=item query

The SQL statement to execute.

=item args

The bind variables to use in the query.

=back

Returns a non-zero value if there was an error.  Use
C<errstr()> to retrieve error message.  Also sets C<-E<gt>{rows}> to
the number of rows affected by the statement.

=cut

sub do {
  my $self = shift;

  return $self->_dbDo( $self->dbi, @_);
}

sub Do {
  goto &do;
}

=pod

=head3 prepare

 prepare( query )

Prepare a statement for execution. Returns a statement handle.

=over 5

=item query

The query to execute.

=back

Example:

 my $sth = $dbhandler->prepare("select * from my_table where ...");
 $sth->execute;

Why would you do this instead of:

   my $sth = $dbi->prepare("select * from my_table where ....");
   $sth->execute;

...well because this class handles errors, saves querys, etc. (see below).

=cut

sub _dbPrepare {
  my $self = shift;
  my $db = shift;
  my $stmt = shift;
  
  $self->set_query( $stmt );
  
  my $sth;
  die "no database handle for: [$stmt]:[" . ref($db) . "]" 
    unless UNIVERSAL::isa($db, "DBI::db");
  
  $sth = $db->prepare($stmt);
  
  return $sth;
}

sub Prepare {
  goto &prepare;
}

sub prepare {
  my $self = shift;

  return $self->_dbPrepare($self->dbi, @_);
}

=pod

=head3 rollback

 rollback()

Rollback a transaction if C<AutoCommit> is not enabled.

=cut

sub rollback {
  my $self = shift;

  $self->dbi->rollback 
    unless $self->dbi->{AutoCommit};
}


sub _dbSelect {
  my $self = shift;
  my $db = shift;
  my $query = shift;
  my $arg1 = $_[0];
  
  $self->set_bind_vars(@_);
  
  my $sth = $self->_dbPrepare($db, $query);
  $sth->execute(@_);
  
  # - probably bad design to throw an error here...since the caller should probably indicate how
  #   errors should be handled using RaiseError when connecting...
  if ( $db->{mysql_errno} ) {
    die "$query - [$arg1] - [".$_[0]."] ".$self->{args};
  }
  
  my $ref = $sth->fetchrow_hashref;
  $sth->finish;
  
  return $ref;
}

=pod

=head3 Select

Deprecated.  See C<select()>.

=head3 select

 select( query, [args] )

Select a record from a database. Returns a C<Bedrock::Hash> containing the fields of the record.

Example:

  my $rec = $dbhandler->select("select * from custmr where acct = ?", 1);

  printf "%s\n", $rec->{'NAME'};

=over 5

=item query

The SQL query to execute.

=item args

The bind variables to use in the query.

=back

=cut

sub select {
  my $self = shift;

  $self->_dbSelect($self->dbi, @_);
}

sub Select {
  goto &select;
}

sub _dbSelectList {
  my $self = shift;
  my $db = shift;
  my $query = shift;
  
  $self->set_bind_vars(@_);
  my $sth = $self->_dbPrepare($db, $query);
  $sth->execute(@_);
  
  my @list;
  my $ref;
  my $nrows = 0 ;
  
  while ($ref = $sth->fetchrow_hashref) {
    push @list, Bedrock::Hash->new( %$ref );
    last if $self->max_rows && $nrows++ >= $self->max_rows;
  }
  
  $sth->finish;
  
  return Bedrock::Array->new(@list);
}

=pod

=head3 SelectList

Deprecated. See C<select_list()>.

=head3 select_list

 select_list( query, [args] )

Selects multiple records from a database.  Returns a C<Bedrock::Array> of C<Bedrock::Hash> objects.

  my $list = $dbhandler->select_list("select * from custmr where name like 'TEST%'");

  foreach $rec (@$list) {
    printf "%s\n", $rec->{'NAME'};
  }

=over 5

=item query

The query to execute.

=item args

The bind variables to use in the query.

=back

=cut

sub SelectList {
  goto &select_list;
}

sub select_list {
  my $self = shift;
  
  $self->_dbSelectList($self->dbi, @_);
}

# +-----------------+
# | private methods |
# +-----------------+

sub setErr {
  goto &set_err;
}

sub set_err {
    my $self = shift;

    if ( UNIVERSAL::isa($self, 'HASH') ) {
	$self->{_err} = shift;
    }

    $self->{_err};
}


sub setBindVars {
  goto &set_bind_vars;
}

sub set_bind_vars {
  my $self = shift;
  
  if (UNIVERSAL::isa($self, 'HASH')) {
    $self->{_args} = @_;
    $self->{_arg_list} = join("|", @_);
  }
}

sub setQuery {
  goto &set_query;
}

sub set_query {
  my $self = shift;
  
  if ( UNIVERSAL::isa( $self, 'HASH') ) {
    $self->{_query} = shift;
  }
}
    

=pod

=head2 ATTRIBUTES

Several attributes are stored within this class that you might find useful.

=head3 err

Last error message returned by an executed statement. Can be retrieved with the C<errstr()> method.

=head3 max_rows

Maximum number of rows to return on a C<SelectList> call.  Can be set
or retrieved via the C<max_rows()> method.

=head3 mysql_insertid

Updated after a C<Do> just in case you were doing an insert on a table
with an C<auto_increment> field.

=head3 rows

Number of rows affected by the last execute statement.

=head1 SEE ALSO

C<DBI>, C<BLM::IndexedTableHandler>

=head1 AUTHOR

Rob Lauer - rlauer@signatureinfo.com

=cut

# $Log$
# Revision 1.17  2013/03/26 20:32:21  rlauer
# - added date_format() method
#
# Revision 1.16  2012/07/29 16:18:59  lauerrc
# - added rollback(), commit() methods as part of changes that now support locking with BLM::IndexedTableHandler
#
# Revision 1.15  2012/06/13 13:56:15  eutl420
# - reorganized, tweaked pod
# - added new names for old method calls to hopefully deprecated CamelCase UpperCase method names
#   + Prepare -> prepare
#   + Select -> select
#   + Do -> do
#   + SelectList -> select_list
#   + GetQuery -> get_query
#   + GetBindVars -> get_bind_vars
#   + SetBindVars -> set_bind_vars
#   + setErr -> set_err
#   + setQuery -> set_query
#
# Revision 1.14  2012/04/16 13:08:51  eutl420
# - new method was not shifting off both argument
#
# Revision 1.13  2012/03/19 14:02:04  eutl420
# - set rows to 0 before executing SQL statement in _dbDo
# - pod tweaks
#
# Revision 1.12  2011/12/05 15:16:04  eutl420
# - in max_rows() if you sent 0, it would not set the value.  We should have allowed 0 to indicate
#   unlimited rows
#
# Revision 1.11  2011/12/01 21:55:54  eutl420
# - use '_' prefix for has variables so we don't collide with actual field names
#
# Revision 1.10  2011/11/13 16:13:16  eutl420
# adding back to project
#
# Revision 1.8  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.7  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.6  2010/11/15 02:26:51  rlauer
# - minor documentation tweaks
#
# Revision 1.5  2009/12/28 20:32:32  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.4  2009/01/13 20:00:19  rlauer
# - added dbi hash member
#
# Revision 1.3  2008/12/03 14:01:18  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.2  2008/11/25 14:35:55  rlauer
# add arg list to object for debugging
#
# Revision 1.1  2008/11/12 12:45:24  rlauer
# added to bedrock project
#
# Revision 1.1.1.1  2008/07/03 19:38:50  rlauer
# imported sources
#
# Revision 1.1.1.1  2007/06/07 13:30:42  rlauer
# Imported sources
#

1;
