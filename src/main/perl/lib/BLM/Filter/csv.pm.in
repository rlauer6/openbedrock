#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Filter::csv;

use strict;
use warnings;

use Bedrock::Handle;
use Bedrock::Array;

use IO::File;
use Text::CSV_XS;
use Scalar::Util qw/reftype/;

use parent qw{ BLM::Filter };

########################################################################
sub TIEHANDLE {
########################################################################
  my ( $class, $file, $mode ) = @_;

  $mode //= 'r';

  my $self = bless {}, $class;

  $self->{'filename'} = $file;

  $self->{'parser'} = Text::CSV_XS->new;

  $self->{'fh'} = IO::File->new( $file, $mode );

  die "Could not open file: $file mode: $mode\n"
    if !$self->{'fh'};

  return $self;
}

########################################################################
{
  ## no critic (RequireArgUnpacking)

  sub quote_char   { return $_[0]->_self->{parser}->quote_char( $_[1] ) }
  sub sep_char     { return $_[0]->_self->{parser}->sep_char( $_[1] ) }
  sub eol          { return $_[0]->_self->{parser}->eol( $_[1] ) }
  sub always_quote { return $_[0]->_self->{parser}->always_quote( $_[1] ) }
  sub quote_space  { return $_[0]->_self->{parser}->quote_space( $_[1] ) }
  sub quote_null   { return $_[0]->_self->{parser}->quote_null( $_[1] ) }
  sub binary       { return $_[0]->_self->{parser}->binary( $_[1] ) }
  sub verbatim     { return $_[0]->_self->{parser}->verbatim( $_[1] ) }
  sub auto_diag    { return $_[0]->_self->{parser}->auto_diag( $_[1] ) }

  sub keep_meta_info {
    return $_[0]->_self->{parser}->keep_meta_info( $_[1] );
  }

  sub allow_whitespace {
    return $_[0]->_self->{parser}->allow_whitespace( $_[1] );
  }

  sub blank_is_undef {
    return $_[0]->_self->{parser}->blank_is_undef( $_[1] );
  }

  sub empty_is_undef {
    return $_[0]->_self->{parser}->empty_is_undef( $_[1] );
  }

  sub allow_loose_quotes {
    return $_[0]->_self->{parser}->allow_loose_quotes( $_[1] );
  }

  sub allow_loose_escapes {
    return $_[0]->_self->{parser}->allow_loose_escapes( $_[1] );
  }
}

########################################################################

########################################################################
sub _write {
########################################################################
  my ( $self, @args ) = @_;

  die "file opened in read/only mode\n"
    if $self->{mode} eq 'r';

  my @columns;

  foreach my $elem (@args) {
    if ( ref $elem && reftype($elem) eq 'ARRAY' ) {
      push @columns, map {$_} @{$elem};
    }
    else {
      push @columns, $elem;
    }
  }

  $self->{parser}->combine(@columns);

  return $self->{fh}->print( $self->{parser}->string(), "\n" );
}

########################################################################
sub READLINE {
########################################################################
  my ($self) = @_;

  return
    if $self->{fh}->eof();

  my $line = $self->{fh}->getline();

  $self->{parser}->parse($line);

  my @fields = $self->{parser}->fields();

  return Bedrock::Array->new(@fields);
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Filter::csv> - Bedrock Command Separated Variables filter

=head1 SYNOPSIS

 <open:fh --filter=csv "foo.cvs">

 <table>
 <while $fh>
  <tr>
    <foreach $_>
      <td><var $_></td></foreach>
  </tr></while>
 </table>

Yes, it really is that easy.

=head1 DESCRIPTION

This module implements a Bedrock C<E<lt>openE<gt>> tag filter.  It
allows you to read and write rows to a so-called CSV file.

This is an experimental filter that demonstrates the use of tied
handles and the C<E<lt>whileE<gt>> tagE<039>s new (from Bedrock 2.3.0)
ability to take a HANDLE as an argument.

The C<E<lt>whileE<gt>> tag, when passed a HANDLE as an argument will
"read a line" from the handle.  For this filter, this is interpretted
to mean "read a row" from a comma separated file.  The return value is
a Bedrock array representing the columns in that row of the CSV file.

The filter returns "undef" when an attempt is made to read
beyond the last row of the CSV file.

=head1 NOTES

This filter  subclasses C<IO::File> and C<Tie::Handle>. Accordingly, some
of the methods you might expect to invoke on a file handle actually
work.  Some donE<039>t.

=head1 METHODS

=head1 EXAMPLE

 <open:fh --filter=csv "foo.csv">

 <table>
 <while $fh>
  <tr>
    <foreach $_>
      <td><var $_></td></foreach>
  </tr></while>
 </table>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

C<Text::CSV_XS>

=cut
