#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Filter::crypt;

use strict;
use warnings;

use Bedrock::Array;
use Bedrock::Constants qw{:chars :booleans};
use Bedrock::Handle;
use Crypt::CBC;
use Crypt::DES;
use Data::Dumper;
use IO::File;
use Text::CSV_XS;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw{ BLM::Filter };

########################################################################
sub TIEHANDLE {
########################################################################
  my ( $class, $file, $mode, $passkey, $cipher ) = @_;

  $mode //= 'r';

  $cipher //= 'DES';

  my $self = bless {}, $class;

  $self->{'filename'} = $file;
  $self->{'mode'}     = $mode;
  $self->{'buffer'}   = $EMPTY;

  $self->{cipher} = $cipher;

  $self->{crypt} = Crypt::CBC->new(
    -cipher      => $cipher,
    -key         => $passkey,
    -salt        => $TRUE,
    -nodeprecate => 1,
  );

  if ( $mode eq 'w' ) {
    $self->{crypt}->start('encrypting');
  }
  elsif ( $mode eq 'r' ) {
    $self->{crypt}->start('decrypting');
  }
  else {
    die "invalid mode \'$mode\': must be \'r\' or \'w\'\n";
  }

  $self->{'fh'} = IO::File->new( $file, $mode );

  die sprintf "Could not open file: %s  mode: %s\n", $file, $mode
    if !$self->{'fh'};

  return $self;
}

########################################################################
sub _write {
########################################################################
  my ( $self, @args ) = @_;

  $self = $self->_self;

  die ref($self) . ": file opened in read/only mode\n"
    if $self->{mode} eq 'r';

  return $self->{fh}->print( $self->{crypt}->crypt(@args) );
}

########################################################################
sub read_buf {
########################################################################
  my ( $self, $nbytes ) = @_;

  $self = $self->_self;

  return
    if $self->{fh}->eof() && !length( $self->{buffer} );

  my $tmp_buf;

  while ( ( length $self->{buffer} < $nbytes ) && !$self->{fh}->eof ) {
    if ( $self->{fh}->read( $tmp_buf, 256 ) ) {
      my $tmp = $self->{crypt}->crypt($tmp_buf);

      if ( $self->{fh}->eof() ) {
        $tmp .= $self->{crypt}->finish;
      }

      $self->{buffer} .= $tmp;
    }
  }

  my $len
    = $nbytes < length $self->{buffer}
    ? $nbytes
    : length $self->{buffer};

  my $buf;

  if ( $len == length $self->{buffer} ) {
    $buf = $self->{buffer};
    $self->{buffer} = $EMPTY;
  }
  else {
    $buf = substr $self->{buffer}, 0, $len;
    my $rest = length( $self->{buffer} ) - $len;

    my $newbuf = substr $self->{buffer}, $len,
      length( $self->{buffer} ) - $len;
    $self->{buffer} = $newbuf;
  }

  return $buf;
}

########################################################################
sub READ {
########################################################################
  my ( $self, $buf, $nbytes, $offset ) = @_;

  die "file opened in write mode\n"
    if $self->{mode} eq 'w';

  ${$buf} = $self->read_buf($nbytes);

  return length ${$buf};
}

########################################################################
sub getline {
########################################################################
  my ($self) = @_;

  $self = $self->_self;

  my $line;
  my $buf;

  while ( !$self->EOF ) {

    $buf .= $self->read_buf(256);

    if ( $buf =~ /^(.*\n)/xsm ) {
      $line = $1;
      $buf =~ s/^$line//xsm;

      # put it back in buffer
      $self->{buffer} = $buf . $self->{buffer};

      last;
    }
    # if no newline, but we've already read all the data from the encrypted file...
    elsif ( $self->{fh}->eof() ) {
      $line = $buf;             # rest of buffer
      $self->{buffer} = $EMPTY;
      last;
    }
  }

  return $line;
}

########################################################################
sub getlines {
########################################################################
  my ($self) = @_;

  $self = $self->_self;

  die "getlines() called in scalar context\n"
    if !wantarray;

  my @lines;

  while ( my $line = $self->getline ) {
    last if !defined $line;

    push @lines, $line;
  }

  return @lines;
}

########################################################################
sub EOF {
########################################################################
  my ($self) = @_;

  $self = $self->_self;

  return $self->{fh}->eof() && !length $self->{buffer};
}

########################################################################
sub CLOSE {
########################################################################
  my ($self) = @_;

  $self = $self->_self;

  if ( $self->{mode} eq 'w' ) {
    $self->{fh}->print( $self->{crypt}->finish() );
  }

  my $retval = $self->{fh}->close;

  return $self->{fh} = undef;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Filter::crypt> - filter to read/write encrypted files

=head1 SYNOPSIS

 <open:fh --filter=crypt --mode='w' 'encrypted.txt' "some passkey">

=head1 DESCRIPTION

Implements a filter for encrypting/decrypting text.

=head1 NOTES

This filter  subclasses C<IO::File> and C<Tie::Handle>. Accordingly, some
of the methods you might expect to invoke on a file handle actually
work.  Some donE<039>t.

=head1 EXAMPLE

  <open:fd --filter=crypt --mode="w" "foo.txt" "passkey">
  <sink $fd>Hello World!</sink>
  <null $fd.close()>
  
  <open:fd --filter=crypt --mode="r" "foo.txt" "passkey">
  <null:foo $fd.getline()><flush><var $foo>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>>

=head1 SEE ALSO

=cut
