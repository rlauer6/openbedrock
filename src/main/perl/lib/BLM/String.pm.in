#!/usr/local/bin/perl -w
#
# It's all a hack..J. will do it better, but this works to some degree for now...
#
package BLM::String;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use TagX::Log 1.01;
use SIS::Hash 1.01;

@ISA = qw(SIS::Hash);

#
# new("string")
#
sub TIEHASH
{
    my $class = shift;
    my $string = shift;

    my $self = bless {}, $class;
    $self->{'string'} = $string;

    $self;
}

sub FETCH
{
    my $self = shift;

    my $what = shift;

    return $self->{$what};
}

#
# simple substring
#
sub substr
{
    my ($self, $off, $len, $string) = @_;

    return substr(($string || $self->{'string'}), $off, $len);
}

#
# upper case a string
#
sub uc
{
    my ($self, $string) = @_;

    return uc($string || $self->{'string'});
}

#
# lower case a string
#
sub lc
{
    my ($self, $string) = @_;

    return lc($string || $self->{'string'});
}

#
# upper case first letter of word
#
sub ucfirst
{
    my ($self, $string) = @_;

    return ucfirst($string || $self->{'string'});
}

#
# lower case first letter of word
#
sub lcfirst
{
    my ($self, $string) = @_;

    return lcfirst($string || $self->{'string'});
}

#
# split a string on a char or string
# (I'm sure this has a pretty good potential to break in a lot of circumstances
# but I think it will do for now)
#
sub split 
{
    my $self = shift;
    my $onWhat = shift;
    my @result = split $onWhat, (shift || $self->{'string'});
 
   return \@result;
}

#
# length of string
#
sub length
{
    my $self = shift;

    my $string = shift || $self->{'string'};

    return length($string);
}

#
# non-destructive replace
#
sub replace
{
    my $self = shift;
    my ($this, $that) = @_;
    my $result = $self->{'string'};

    $result =~s/$this/$that/g;

    return $result;
}

#
# return the string
#
sub get
{
    my $self = shift;

    $self->{'string'};
}

#
# re-set string
#
sub set
{
    my $self = shift;

    my $was = $self->{'string'};

    $self->{'string'}  = shift;

    return $was;
}

#
# trim a string
#
sub trim
{
    my $self = shift;
    my $string = shift || $self->{'string'};
    
    $string =~s/^\s*(.*?)\s*$/$1/;
    
    return $string;
}

1;
