package BLM::IndexedTableHandler::Common;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use base qw( Exporter );

use vars qw( @VERSION @EXPORT_OK );

@EXPORT_OK = qw( create_html_element
create_label_name
create_xhtml_element
create_xhtml_element_header
create_radio_buttons
create_checkbox
create_select_list
);

sub create_html_element {
  my $element    = shift;
  my %attributes = @_;

  return sprintf(
    "<%s%s>", $element,
    join(
      "",
      map {
        ( defined $attributes{$_} && $attributes{$_} ne "undef" )
        ? " $_=\"$attributes{$_}\""
        : " $_"
      } keys %attributes
    )
  );
}

sub create_xhtml_element_header {
  my $element    = shift;
  my %attributes = @_;

  sprintf(
    "<%s%s>", $element,
    join(
      "",
      map {
        ( defined $attributes{$_} && $attributes{$_} ne "undef" )
        ? " $_=\"$attributes{$_}\""
        : " $_"
      } keys %attributes
    )
  );
}

sub create_xhtml_element {
  my $element    = shift;
  my $value      = shift;
  my %attributes = @_;

  if ( defined $value ) {
    sprintf(
      "<%s%s>%s</%s>",
      $element,
      join(
        "",
        map {
          defined $attributes{$_}
          ? " $_=\"$attributes{$_}\""
          : " $_"
        } keys %attributes
      ),
      $value,
      $element
           );
  }
  else {
    sprintf(
      "<%s%s/>",
      $element,
      join(
        "",
        map {
          ( defined $attributes{$_} && $attributes ne "undef" )
          ? " $_=\"$attributes{$_}\""
          : " $_"
        } keys %attributes
      )
    );
  }

}

sub create_label_name {
  my $label = shift;
  $label =~ s/_/ /g;

  return join " ", map { ucfirst($_) } split " ", $label;
}

=pod

=head2 create_checkbox

=cut

sub create_checkbox {
  my $field_name = shift;
  my $value      = shift;
  my $attributes = shift;
  my $options;

  unless ( ref( $_[0] ) ) {
    $options = [];
    while (@_) {
      push @$options,
      { item => shift,
        id   => shift
      };
    }
  }
  else {
    $options = shift;
  }

  die "You must supply a list of check labels and values." unless $options;

  my @values = ref($value) ? @$value : ($value);

  my @items = map { $_->{item} } @{$options};

  my $html;

  foreach my $ref ( @{$options} ) {
    my $span =
    $ref->{item}
    ? create_xhtml_element( "span", $ref->{item}, %{ $attributes->{label} } )
    : "";
    $html .= sprintf( "%s&nbsp;%s&nbsp;&nbsp;&nbsp;",
                      create_html_element(
                                   'input',
                                   ( type  => "checkbox",
                                     name  => $field_name,
                                     value => $ref->{id}
                                   ),
                                   $attributes ? %{ $attributes->{input} } : (),
                                   scalar( grep { $ref->{id} eq $_ } @values )
                                   ? ( "checked" => undef )
                                   : ()
                      ),
                      $span
                    );
  }

  return $html;
}

sub create_radio_buttons {
  my $name       = shift;
  my $value      = shift;
  my $attributes = shift;
  my $options;

  if ( ref( $_[0] ) ) {
    $options = shift;
  }
  else {
    $options = [];
    while (@_) {
      push @$options, { item => shift, id => shift };
    }
  }

  my $radio_buttons;

  foreach (@$options) {
    my $span =
    create_xhtml_element( "span", $_->{item}, %{ $attributes->{label} } );
    $radio_buttons .= sprintf( "%s&nbsp;%s&nbsp;&nbsp;&nbsp;",
                               create_html_element(
                                  'input',
                                  %{ $attributes->{input} },
                                  ( type => 'radio', name => $name ),
                                  defined $_->{id} ? ( "value" => $_->{id} )
                                  : (),
                                  defined $_->{id}
                                  && $value eq $_->{id} ? ( "checked" => undef )
                                  : ()
                               ),
                               $span
                             );
  }

  return $radio_buttons;
}

=pod

$value = current value of select list (could be multiple elements selected)

<null --define-var="options" "red" 1 "blue" 2>
<null $obj.create_select_list("joe", $input.joe, $options>

=cut

sub create_select_list {
  my $name       = shift;
  my $value      = shift;
  my $attributes = shift;
  my $options;

  if ( ref( $_[0] ) ) {
    $options = shift;
  }
  else {
    $options = [];
    while (@_) {
      push @$options, { item => shift, id => shift };
    }
  }

  if (@$options) {
    my $pick_list .= sprintf( "%s\n",
                              create_html_element(
                                  'select',
                                  %{ $attributes->{select} },
                                  ( "name" => $name ),
                                  ref($value)
                                  ? (
                                    "multiple" => undef,
                                    "size" => ( @$options <= 5 ? @$options : 5 )
                                  )
                                  : ()
                              )
                            );

    my @values = ref($value) ? @$value : ($value);

    foreach my $option (@$options) {
      $pick_list .= sprintf( "%s%s</option>\n",
                             create_html_element(
                                  'option',
                                  %{ $attributes->{option} },
                                  ( "value" => $option->{id} ),
                                  scalar( grep { $option->{id} eq $_ } @values )
                                  ? ( "selected" => undef )
                                  : ()
                             ),
                             $option->{item}
                           );
    }
    return $pick_list .= "</select>\n";
  }
  else {
    return create_html_element( "input", type => "hidden", name => $name );
  }

}

1;
