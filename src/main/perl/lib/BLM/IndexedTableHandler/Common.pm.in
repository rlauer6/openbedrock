package BLM::IndexedTableHandler::Common;

use strict;
use warnings;

use Bedrock::Constants qw(:chars :booleans);
use Bedrock::Hash;
use Data::Dumper;
use English qw(-no_match_vars);

use List::Util qw(pairs any);
use Scalar::Util qw(reftype);

use parent qw(Exporter);

our @EXPORT_OK = qw(
  create_attribute_list
  create_checkbox
  create_generic_tag
  create_html_element
  create_item_list
  create_label_name
  create_link_tag
  create_radio_buttons
  create_script_tag
  create_select_list
  create_style_tag
  create_title_tag
  create_xhtml_element
  create_xhtml_element_header
  tidy
);

our %EXPORT_TAGS = ( all => \@EXPORT_OK );

########################################################################
sub create_html_element {
########################################################################
  my ( $element, @args ) = @_;

  my $attribute_list = create_attribute_list(@args);

  return sprintf '<%s%s/>', $element, $attribute_list;
}

########################################################################
sub create_attribute_list {
########################################################################
  my (@args) = @_;

  return $EMPTY
    if !@args;

  my $attributes = ref $args[0] ? $args[0] : {@args};

  my @attribute_list;

  foreach ( sort keys %{$attributes} ) {
    my $attribute = $attributes->{$_};

    if ( !defined $attribute || $attribute eq 'undef' ) {
      push @attribute_list, $_;
    }
    else {
      push @attribute_list, qq{$_="$attribute"};
    }
  }

  return join $SPACE, $EMPTY, @attribute_list;
}

########################################################################
sub create_xhtml_element_header {
########################################################################
  my ( $element, %attributes ) = @_;

  return sprintf '<%s%s>', $element, create_attribute_list(%attributes);
}

########################################################################
sub create_xhtml_element {
########################################################################
  my ( $element, $value, %attributes ) = @_;

  my $tag;

  if ( defined $value ) {
    $tag = sprintf '<%s%s>%s</%s>', $element, create_attribute_list(%attributes), $value, $element;
  }
  else {
    $tag = sprintf '<%s%s/>', $element, create_attribute_list(%attributes);
  }

  return $tag;
}

########################################################################
sub create_label_name {
########################################################################
  my ($label) = @_;

  $label =~ s/_/ /xsmg;

  return join q{ }, map { ucfirst $_ } split /\s+/xsm, $label;
}

########################################################################
sub _checkbox_or_radio {
########################################################################
  my ( $type, @args ) = @_;

  return _create_checkbox_or_radio( $type, @args )
    if !ref $args[0];

  my ( $name, $value, $attributes, $items ) = @{ $args[0] }{qw(name checked attributes values)};

  die "values must be an array ref\n"
    if !reftype($items) eq 'ARRAY';

  return _create_checkbox_or_radio( $type, $name, $value, $attributes, $items );
}

########################################################################
sub create_radio_buttons {
########################################################################
  my (@args) = @_;

  return _checkbox_or_radio( 'radio', @args );
}

########################################################################
sub create_checkbox {
########################################################################
  my (@args) = @_;

  return _checkbox_or_radio( 'checkbox', @args );
}

########################################################################
sub get_labeled_attributes {
########################################################################
  my ( $attributes, $name ) = @_;

  if ( !$attributes ) {
    $attributes = {
      input => { id  => $name },
      label => { for => $name },
    };
  }
  else {
    $attributes->{input} //= { id  => $name };
    $attributes->{label} //= { for => $name };
  }

  return $attributes;
}

########################################################################
sub _create_checkbox_or_radio {
########################################################################
  my ( $type, $name, $value, $attributes, @args ) = @_;

  $attributes = get_labeled_attributes( $attributes, $name );

  my $options;

  if ( ref $args[0] ) {
    $options = reftype( $args[0] ) eq 'HASH' ? [ %{$options} ] : create_item_list( @{ $args[0] } );
  }
  else {
    $options = create_item_list(@args);
  }

  $options //= [];

  die "You must supply a list of checkbox labels and values.\n"
    if !@{$options};

  $value = ref $value ? $value : [$value];

  my @values = @{$value};

  my @elements;

  foreach my $option ( @{$options} ) {
    my ( $item, $id ) = @{$option}{qw(item id)};

    $id //= $EMPTY;

    my $span = $item ? create_xhtml_element( 'label', $item, %{ $attributes->{label} } ) : $EMPTY;

    my %attribute_list = (
      type  => $type,
      name  => $name,
      value => $id,
      %{ $attributes->{input} },
    );

    if ( any { $id eq $_ } grep {defined} @values ) {
      $attribute_list{checked} = 'undef';
    }

    push @elements, sprintf '%s%s', create_html_element( 'input', %attribute_list ), $span;
  }

  return join $SPACE, @elements;
}

########################################################################
sub create_item_list {
########################################################################
  my (@args) = @_;

  my $items = ref $args[0] ? $args[0] : Bedrock::Hash->new(@args);

  return
    if !$items;

  my @item_list;

  if ( ref $items ) {
    if ( reftype($items) eq 'HASH' ) {
      foreach ( keys %{$items} ) {
        push @item_list, { item => $_, id => $items->{$_} };
      }
    }
    else {
      @item_list = map { { id => $_, item => $_ } } @{$items};
    }
  }
  else {
    @item_list = create_item_list( [ split /\s*$COMMA\s*/xsm, $items ] );
  }

  return \@item_list;
}

########################################################################
sub create_script_tag { unshift @_, 'script'; goto &create_generic_tag; }
sub create_title_tag  { unshift @_, 'title';  goto &create_generic_tag; }
sub create_link_tag   { unshift @_, 'link';   goto &create_generic_tag; }
sub create_style_tag  { unshift @_, 'link';   goto &create_generic_tag; }
########################################################################

########################################################################
sub create_generic_tag {
########################################################################
  my ( $tag, undef, @args ) = @_;

  my $src;

  if ( ref $args[0] ) {
    $src = $EMPTY;
  }
  elsif ( @args % 2 ) {
    $src = shift @args;
  }

  if ( ref $args[0] ) {
    @args = reftype( $args[0] ) eq 'HASH' ? %{ $args[0] } : @{ $args[0] };
  }

  return create_xhtml_element( $tag, $src, @args );
}

########################################################################
sub create_select_list {
########################################################################
  my ( $name, $value, $attributes, @args ) = @_;

  $attributes //= {};

  my $select_attributes = { %{$attributes} };
  $attributes->{select} //= $select_attributes;
  $attributes->{option} //= {};

  my $options = ref $args[0] ? shift @args : create_item_list(@args);

  return create_html_element( 'input', type => 'hidden', name => $name )
    if !@{$options};

  my $size = @{$options} <= 5 ? @{$options} : 5;

  my %attribute_list = (
    %{ $attributes->{select} },
    name => $name,
    ref $value ? ( multiple => undef, size => $size ) : (),
  );

  my @values = ref $value ? @{$value} : ( $value // $EMPTY );
  my @option_list;

  my %option_attributes = %{ $attributes->{option} // {} };

  foreach my $option ( @{$options} ) {

    my $is_selected = any { $option->{id} eq $_ } @values;

    my %attributes = (
      %option_attributes,
      'value' => $option->{id},
      $is_selected ? ( 'selected' => undef ) : (),
    );

    push @option_list, create_xhtml_element( 'option', $option->{item}, %attributes );
  }

  return create_xhtml_element( 'select', join( "\n", $EMPTY, @option_list, $EMPTY ), %attribute_list );
}

########################################################################
sub tidy {
########################################################################
  my (@args) = @_;

  if ( ref $args[0] ) {
    shift @args;
  }

  my ( $show_body_only, $html ) = @args;

  my $tidy = eval {
    require HTML::Tidy;

    my $options = {
      'show-body-only' => $show_body_only,
      indent           => 'yes',
    };

    return HTML::Tidy->new($options);

  };

  return $html
    if !$tidy;

  my $tidy_html = $tidy->clean($html);

  if ( !$tidy_html || $EVAL_ERROR ) {
    print {*STDERR} $tidy->messages();
  }

  return $tidy_html || $html;
}

1;
