package BLM::IndexedTableHandler::RecordSet;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Array;
use Bedrock::Constants qw(:chars :booleans);
use Data::Dumper;
use Scalar::Util qw(reftype);

use parent -norequire => qw(Bedrock::RecordSet);

use Bedrock::HTML::Helper qw(
  create_html_element
  create_label_name
  create_xhtml_element
  create_xhtml_element_header
  create_radio_buttons
  create_select_list
  tidy
);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

########################################################################
sub as_ref { goto &asref; }
########################################################################
########################################################################
sub asref {
########################################################################
  my ($self) = @_;

  return Bedrock::Array->new( map { $_->asref(); } @{$self} );
}

########################################################################
sub html_form_header {
########################################################################
  my ( $self, $attributes ) = @_;

  $attributes //= {};
  my %form_attributes = %{$attributes};

  my $action = delete $form_attributes{action};
  $action //= $ENV{REQUEST_URI};

  my $table_name = $self->[0]->get_table_name;

  my $element = create_xhtml_element_header(
    'form',
    ( name   => $table_name . '_set',
      method => 'POST',
      $action ? ( action => $action ) : (),
    ),
    %{$attributes}
  );
  return $element;
}

########################################################################
sub html_form_footer {
########################################################################
  my ( $self, $attributes, $buttons ) = @_;

  if ( !$buttons || !ref $buttons ) {
    $buttons = [qw(Edit Delete)];
  }

  my %button_attributes = %{ $attributes // {} };

  my $div_attributes = delete $button_attributes{div};

  my $table_name = $self->[0]->get_table_name;

  my @elements = create_html_element(
    'input',
    type  => 'hidden',
    name  => 'action',
    value => $EMPTY,
  );

  push @elements,
    create_html_element(
    'input',
    type  => 'hidden',
    name  => 'table',
    value => $table_name,
    );

  foreach my $button ( @{$buttons} ) {
    my $id = sprintf '%s-%s', map {lc} $table_name, $button;
    push @elements, create_xhtml_element( 'button', $button, %button_attributes, id => $id );
  }

  my $div = create_xhtml_element( 'div', ( join "\n", @elements ), %{ $div_attributes // {} } );

  return sprintf "%s\n</form>\n", $div;
}

########################################################################
sub html_form {
########################################################################
  my ( $self, %args ) = @_;

  my ( $labels, $attributes, $fields, $buttons ) = @args{qw(labels attributes fields buttons)};

  my $header = $self->html_form_header( $attributes->{form} );

  my $form = $self->html_form_body( $labels, $attributes, $fields );

  my $footer = $self->html_form_footer( $attributes, $buttons );

  return $header . $form . $footer;
}

########################################################################
sub html_form_body {
########################################################################
  my ( $self, $labels, $attributes, $fields ) = @_;

  $labels     //= {};
  $attributes //= {};
  $fields     //= $self->[0]->fields();

  my @columns = @{$fields};

  my @label_names = grep { $_ ne 'id' } ( '&nbsp;', @columns );

  @label_names = map { $labels->{$_} ? $labels->{$_} : create_label_name($_) } @label_names;

  my $headings = join "\n", map { create_xhtml_element( 'th', $_, %{ $attributes->{th} } ) } @label_names;

  my $headings_row = create_xhtml_element( 'tr', $headings, %{ $attributes->{tr} } );
  my @rows         = $headings_row;

  foreach my $rec ( @{$self} ) {
    my @td_elements;

    foreach my $column (@columns) {
      my $value = $rec->get($column);

      if ( $column eq 'id' ) {
        push @td_elements,
          create_html_element(
          'input',
          type  => 'radio',
          name  => 'id',
          value => $value,
          %{ $attributes->{input} }
          );
      }
      else {
        push @td_elements, $value;
      }
    }

    my $row = join "\n", map { create_xhtml_element( 'td', $_, %{ $attributes->{td} } ) } @td_elements;
    push @rows, create_xhtml_element( 'tr', $row, %{ $attributes->{tr} } );
  }

  my $data = join "\n", @rows;

  return create_xhtml_element( 'table', $data, %{ $attributes->{table} } );
}

########################################################################
sub html_ordered_list {
########################################################################
  my ( $self, %args ) = @_;

  my ( $attributes, $column ) = @args{qw(attributes column)};

  my @column_names = @{ $self->[0]->fields() };
  $column //= $column_names[1];  # assuming that id is always field 0?

  my $callback = _create_callback($column);

  $callback //= sub { return shift->{$column}; };

  $attributes //= {};

  my @items;

  foreach my $row ( @{$self} ) {
    my $link
      = create_xhtml_element( 'a', $callback->($row), ( href => '?id=' . $row->{id} ), %{ $attributes->{a} }, );

    push @items, create_xhtml_element( 'li', $link, %{ $attributes->{li} } );
  }

  return tidy( create_xhtml_element( 'ol', join( "\n", @items ), %{ $attributes->{ol} } ) );
}

########################################################################
sub _create_callback {
########################################################################
  my ($column) = @_;

  my $callback;

  if ( ref $column ) {
    if ( reftype($column) eq 'ARRAY' ) {
      $callback = sub {
        my $row = shift;
        return join $SPACE, @{$row}{ @{$column} };
      };
    }
    elsif ( reftype($column) eq 'CODE' ) {
      $callback = $column;
    }
    else {
      die "invalid column type\n";
    }
  }

  $callback //= sub {
    return shift->{$column};
  };

  return $callback;
}

########################################################################
sub html_select_list {
########################################################################
  my ( $self, %args ) = @_;

  my ( $attributes, $column ) = @args{qw(attributes column)};

  my @column_names = @{ $self->[0]->fields() };
  $column //= $column_names[1];  # assuming that id is always field 0?

  my $callback = _create_callback($column);

  $attributes //= {};

  my @options;

  foreach my $row ( @{$self} ) {
    push @options,
      create_xhtml_element( 'option', $callback->($row), ( value => $row->{id} ), %{ $attributes->{a} }, );
  }

  return create_xhtml_element( 'select', join( "\n", @options ), %{ $attributes->{select} } );
}

1;

__END__

=pod

=head1 PUBLIC

BLM::IndexedTableHandler::RecordSet - a collection of BLM::IndexedTableHandler objects

=head1 SYNOPSIS

  my $ith = BLM::IndexedTableHandler->new( $dbi, { table_name => 'foo' } );

  # return all record in table as a record set
  my $record_set = $ith->find();

  <sqlconnect --data-source=dbi:mysql:bedrock --username=fred --password=flintstone --db=dbi>
  <plugin:IndexedTablehander --define-plugin=ith $dbi 0 foo>
  <null:record_set $ith.find()>

=head1 DESCRIPTION

Represents a set of rows from a MySQL table. Each element of the
record set is a C<BLM::IndexedTableHandler> object.

=head1 METHODS AND SUBROUTINES

=head2 asref

=head2 as_ref

 asref()

Returns an array of hashes from the record set (as opposed to an array
of C<BLM::IndexedTableHandler>) objects).

=head1 HTML HELPER METHODS

These methods can be used or overridden to create an HTML form or HTML
snippets consisting of the records from the record set.

=head2 html_form

 html_form(options)

Creates a complete HTML form from the record set. Each row contains a
radio button and the columns you specify arranged in a table.  A div
with buttons can be rendered under the table.

 <plugin:IndexedTableHandler $dbi 0 foo>
 <null:list $foo.find()>

 <var $list.html_form()>


=over 5

=item labels

A hash the contains the column headings to be used for each column you specify.

=item attributes

A hash of attributes for the various HTML elements being rendered.
Each element of the hash is a hash of attributes. The elements
rendered include table, th, td, button, div, form and button.

Create hashes the elements for which you want to apply attributes:

 <hash:form_attributes action '/foo' class foo>
 <hash:button_attributes class 'foo bs-button'>

 <hash:attributes form $form_attributes button $button_attributes>

 <var $list.html_form(attributes, $attributes)>

=items fields

Array of column names to include in the form. Defaults to all columns
in the table.

=items buttons

An array of button labels. Defaults to 'Edit', 'Delete'.

=back

=head2 html_form_header

=head2 html_form_footer

=head2 html_ordered_list

=head1 AUTHOR

bigfoot@cpan.org

=cut
