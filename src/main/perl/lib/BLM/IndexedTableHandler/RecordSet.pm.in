package BLM::IndexedTableHandler::RecordSet;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Array;
use parent -norequire, qw/Bedrock::RecordSet/;

use Bedrock::HTML::Helper qw( create_html_element
create_label_name
create_xhtml_element
create_radio_buttons
create_select_list
);


=pod

=head1 NAME

BLM::IndexedTableHandler::RecordSet

=head1 SYNOPSIS

    my $record_set = BLM::IndexedTableHandler::RecordSet->new(@list);

    my $ith = new BLM::IndexedTableHandler( $dbi, { id => $id, table_name => 'foo' } );

    # return all record in table as a record set
    my $record_set = $ith->find();

=head1 DESCRIPTION

Creates an object which represents a set of rows from a MySQL table.
Each element of the record set is a C<BLM::IndexedTableHandler>
object.

=head1 METHODS

=cut

=pod

=head2 asref

 asref()

Returns an array of hashes from the record set (as opposed to an array
of C<BLM::IndexedTableHandler>) objects).

=cut

sub asref {
  return new Bedrock::Array( map { $_->asref(); } @{$_[0]} );
}

=pod

=head2 html_form_header

=cut

sub html_form_header {
  my $self       = shift;
  my $attributes = shift || {};
  my $table_name = $self->[0]->{_table};

  return
  create_html_element( 'form',
                       ( name   => $table_name . '_set',
                         method => "post",
                         action => $ENV{REQUEST_URI}
                       ),
                       %$attributes
                     );
}

=pod

=head2 html_form_footer

=cut

sub html_form_footer {
  my $self = shift;
  my $attributes = shift || {};

  my $table_name = $self->[0]->{_table};

  return
  sprintf( "%s\n%s\n%s\n%s\n",
           create_html_element( 'input',
                                ( type  => 'hidden',
                                  name  => 'action',
                                  value => 'edit'
                                )
                              ),
           create_html_element( 'input',
                                ( type  => 'hidden',
                                  name  => 'table',
                                  value => $table_name
                                )
                              ),
           create_html_element( 'input', ( type => 'submit', value => 'Edit' ),
                                %{$attributes}
                              ),
           "</form>"
         );
}

=pod

=head2 html_form_body

=cut

sub html_form_body {
  my $self       = shift;
  my $labels     = shift || {};
  my $attributes = shift || {};
  my $fields     = shift;

  my $html = create_html_element( 'table', %{ $attributes->{table} } );

  $html .=
  sprintf( "%s\n", create_html_element( 'tr', %{ $attributes->{tr} } ) );

  my @columns;
  if ( $fields ) {
    @columns = @$fields;
  }
  else {
    @columns = @{ $self->[0]->fields() };
  }

  foreach ( "&nbsp;", @columns ) {
    next if $_ eq 'id';
    $html .= sprintf( "%s%s</th>\n",
                      create_html_element( 'th', %{ $attributes->{th} } ),
                      $labels->{$_} || create_label_name($_) );
  }

  $html .= "</tr>\n";

  foreach my $rec ( @{$self} ) {

    $html .=
    sprintf( "%s\n", create_html_element( 'tr', %{ $attributes->{tr} } ) );
    foreach ( "idx", @columns ) {
      next if $_ eq 'id';
      if ( $_ eq 'idx' ) {
        $html .= sprintf( "%s%s</td>\n",
                          create_html_element( 'td', %{ $attributes->{td} } ),
                          create_html_element( 'input',
                                               ( type  => 'radio',
                                                 name  => 'id',
                                                 value => $rec->{id}
                                               ),
                                               %{ $attributes->{input} }
                                             )
                        );
      }
      else {
        $html .= sprintf( "%s%s</td>\n",
                          create_html_element( 'td', %{ $attributes->{td} } ),
                          $rec->get($_) );
      }
    }

    $html .= "</tr>\n";
  }

  $html .= "</table>\n";

  return $html;
}


=pod

=head2 html_result_list

 html_result_list

=cut

sub html_result_list {
  my $self = shift;
  my $attributes = shift || {};

  my $html = create_html_element('ol', %{ $attributes->{ol}});
  my $first_field = $self->[0]->fields()->[1];

  foreach (@{$self}) {
    my $link = sprintf("%s%s</a>", 
		       create_html_element('a',
					   ( 
					    href => "?id=" . $_->{id}
					   ),
					   %{$attributes->{a}}, 
					  ),
		       $_->{$first_field}
		      );
    $html .= sprintf("%s%s</li>\n", create_html_element('li', %{ $attributes->{li}}), $link);
  }

  $html .= "</ol>";

  return $html;
}





=pod

=head1 NOTES

=head1 AUTHOR

rlauer6@comcast.net

=cut

1;
