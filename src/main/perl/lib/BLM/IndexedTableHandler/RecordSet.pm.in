package BLM::IndexedTableHandler::RecordSet;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Array;
use Bedrock::Constants qw{:chars};

use parent -norequire, qw/Bedrock::RecordSet/;

use Bedrock::HTML::Helper qw( create_html_element
  create_label_name
  create_xhtml_element
  create_radio_buttons
  create_select_list
);

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolationOfMetachars)

########################################################################
sub asref {
########################################################################
  my ($self) = @_;

  return Bedrock::Array->new( map { $_->asref(); } @{$self} );
}

########################################################################
sub html_form_header {
########################################################################
  my ( $self, $attributes ) = @_;

  $attributes //= {};

  my $table_name = $self->[0]->{_table};

  my $element = create_html_element(
    'form',
    ( name   => $table_name . '_set',
      method => 'post',
      action => $ENV{REQUEST_URI}
    ),
    %{$attributes}
  );
  return $element;
}

########################################################################
sub html_form_footer {
########################################################################
  my ( $self, $attributes ) = @_;

  $attributes //= {};

  my $table_name = $self->[0]->{_table};

  my $action_element = create_html_element(
    'input',
    type  => 'hidden',
    name  => 'action',
    value => 'edit',

  );

  my $table_element = create_html_element(
    'input',
    type  => 'hidden',
    name  => 'table',
    value => $table_name,
  );

  my $submit_element = create_html_element(
    'button',
    type  => 'submit',
    value => 'Edit',
    %{$attributes},
  );

  my $element = sprintf "%s\n%s\n%s\n</form>\n", $action_element,
    $table_element, $submit_element;

  return $element;
}

########################################################################
sub html_form_body {
########################################################################
  my ( $self, $labels, $attributes, $fields ) = @_;

  $labels     //= {};
  $attributes //= {};

  my $table_element
    = create_html_element( 'table', %{ $attributes->{table} } );
  my $row_element = create_html_element( 'tr', %{ $attributes->{tr} } );

  my @html = sprintf '%s%s', $table_element, $row_element;

  my @columns;

  if ($fields) {
    @columns = @{$fields};
  }
  else {
    @columns = @{ $self->[0]->fields() };
  }

  foreach my $column ( '&nbsp;', @columns ) {
    next if $column eq 'id';

    my $th_element = create_html_element( 'th', %{ $attributes->{th} } );
    my $label_name = $labels->{$_} || create_label_name($column);

    push @html, sprintf '%s%s</th>', $th_element, $label_name;
  }

  push @html, '</tr>';

  foreach my $rec ( @{$self} ) {

    my $row_element = create_html_element( 'tr', %{ $attributes->{tr} } );

    push @html, sprintf ' %s', $row_element;

    foreach my $column ( 'idx', @columns ) {
      next if $column eq 'id';

      if ( $column eq 'idx' ) {

        my $td_element = create_html_element( 'td', %{ $attributes->{td} } );

        my $radio_element = create_html_element(
          'input',
          type  => 'radio',
          name  => 'id',
          value => $rec->{id},
          %{ $attributes->{input} },
        );

        push @html, sprintf '%s%s</td>', $td_element, $radio_element;
      }
      else {
        my $td_element = create_html_element( 'td', %{ $attributes->{td} } );
        push @html, printf '%s%s</td>', $td_element, $rec->get($column);
      }
    }

    push @html, '</tr>';
  }

  push @html, '</table>';

  return join $EMPTY, @html;
}

########################################################################
sub html_result_list {
########################################################################
  my ( $self, $attributes ) = @_;

  $attributes //= {};

  my @html = create_html_element( 'ol', %{ $attributes->{ol} } );

  my $first_field = $self->[0]->fields()->[1];

  foreach ( @{$self} ) {
    my $anchor_element = create_html_element(
      'a',
      href => '?id=' . $_->{id},
      %{ $attributes->{a} },
    );

    my $link = sprintf '%s%s</a>', $anchor_element, $_->{$first_field};

    my $li_element = create_html_element( 'li', %{ $attributes->{li} } );

    push @html, sprintf '%s%s</li>', $li_element, $link;
  }

  push @html, '</ol>';

  return join $EMPTY, @html;
}

1;

__END__

=pod

=head1 PUBLIC

BLM::IndexedTableHandler::RecordSet

=head1 SYNOPSIS

    my $record_set = BLM::IndexedTableHandler::RecordSet->new(@list);

    my $ith = new BLM::IndexedTableHandler( $dbi, { id => $id, table_name => 'foo' } );

    # return all record in table as a record set
    my $record_set = $ith->find();

=head1 DESCRIPTION

Creates an object which represents a set of rows from a MySQL table.
Each element of the record set is a C<BLM::IndexedTableHandler>
object.

=head1 METHODS AND SUBROUTINES

=head2 asref

 asref()

Returns an array of hashes from the record set (as opposed to an array
of C<BLM::IndexedTableHandler>) objects).

=head2 html_result_list

=head2 html_form_header

=head2 html_form_footer

=head1 AUTHOR

rlauer6@comcast.net

=cut
