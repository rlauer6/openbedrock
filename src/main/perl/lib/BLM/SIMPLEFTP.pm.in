#!/usr/local/bin/perl -w
#
# -- R & D version of a simple FTP BLM
#

package BLM::SIMPLEFTP;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use TagX::Log 1.01;
use SIS::Handle;
use Net::FTP;    
@ISA = qw(SIS::Hash);

sub TIEHANDLE
{
    my $class = shift;
    my $host = shift;

    my $self = bless {}, $class;
    $self->{'host'} = $host;

    my $ftp = Net::FTP->new($host);

    die "connect failed: $@" unless defined $ftp;

    $self->{'ftp'} = $ftp;

    $self;
}

sub WRITE
{
    my $self = shift;
    my ($buf, $len, $offset) = @_;

    die "WRITE: no connection" unless $self->{'conn'};
    
    my $conn = $self->{'conn'};
    warn "($len) $buf\n";
    $conn->write($buf, $len);
}

sub CLOSE
{
    my $self = shift;
    my $ftp = $self->{'ftp'};
    my $conn = $self->{'conn'};

    $conn->close if $conn;
}


sub login
{
    my $fd = shift;
    my $self = tied(*{$fd});
    
    my ($user, $pass, $acct) = @_;

    my $ftp = $self->{'ftp'};

    die $@ unless defined $ftp->login($user, $pass, $acct);
}

sub ascii
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $args = @_;

    my $ftp = $self->{'ftp'};

    my $last = $ftp->ascii($args);
    die $@ unless defined $last;

    $last;
}

sub binary
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $args = @_;

    my $ftp = $self->{'ftp'};

    my $last = $ftp->binary($args);
    die $@ if !$last;

    $last;
}

sub cwd
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $args = @_;

    my $ftp = $self->{'ftp'};

    my $last = $ftp->cwd($args);
    die $@ if !$last;

    $last;
}

sub pwd
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $ftp = $self->{'ftp'};

    my $pwd = $ftp->pwd();

    die $@ unless defined $pwd;

    $pwd;
}

sub ls
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $dir = @_;

    my $ftp = $self->{'ftp'};

    $dir = ($dir or ".");

    return SIS::Array->new(@{$ftp->ls($dir)});
}

sub dir
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $dir = shift;
    warn "dir = $dir\n";

    my $ftp = $self->{'ftp'};

    $dir = ($dir or ".");
    
    return SIS::Array->new(@{$ftp->dir($dir)});
}

sub quit
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $ftp = $self->{'ftp'};

    $ftp->quit;

    $self->{'ftp'} = undef;
}

sub stor 
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $file = shift;

    my $ftp = $self->{'ftp'};

    my $conn = $ftp->stor($file);

    die "stor: $@" unless defined $conn;

    $self->{'conn'} = $conn;

    $fd;
}

sub retr
{
    my $fd = shift;
    my $self = tied(*{$fd});
    my $file = shift;

    my $ftp = $self->{'ftp'};

    my $conn = $ftp->retr($file);

    die "retr: $@" unless defined $conn;

    $self->{'conn'} = $conn;
}

sub read 
{
    my $fd = shift;
    my $self = tied(*{$fd});
    my ($size, $timeout) = @_;
    
    my $ftp = $self->{'ftp'};
    my $conn = $self->{'conn'};

    my $buffer;

    die "read: $@" unless defined $conn->read($buffer, $size, $timeout);

    $buffer;
}

sub write 
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my ($buffer, $timeout) = @_;
    
    my $conn = $self->{'conn'};

    die $@ unless defined $conn->write($buffer, length($buffer), $timeout);

    $buffer;
}

sub close
{
    my $fd = shift;
    my $self = tied(*{$fd});

    die "no connection" unless exists $self->{'conn'};

    my $conn = $self->{'conn'};

    $conn->close;

    $self->{'conn'} = undef;
}

sub put
{
    my $fd = shift;
    my $self = tied(*{$fd});

    my $ftp = $self->{'ftp'};

    die "put: log in first" unless $ftp;

    $ftp->put(@_);
}

sub get
{
    my $fd = shift;
    my $self = tied(*{$fd});


    my $ftp = $self->{'ftp'};

    die "get: login first" unless defined $ftp->get(@_);
}

sub getline
{
    my $fd = shift;
    my $self = tied(*{$fd});

    die "getline: no connection" unless exists $self->{'conn'};

    my $conn = $self->{'conn'};

    return $conn->getline;
}

sub getlines
{
    my $fd = shift;
    my $self = tied(*{$fd});

    die "getlines: no connection" unless exists $self->{'conn'};

    my $conn = $self->{'conn'};

    my @lines = $conn->getlines;

    return SIS::Array->new(@lines);
}

1;

