#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::SMTP;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use Net::SMTP;
use Bedrock::Handle;

@ISA = qw( Bedrock::Handle );

sub TIEHANDLE
{
    my $class = shift;
    die "Usage: $class->new( SMTP_Server, Sender_Addr [, To_Addr1 .. ] )\n" unless @_ > 1;
    my $server = shift;
    my $sender = shift;
    my $self = bless {}, $class;
    $self->{'sender'} = $sender;
    $self->{'server'} = Net::SMTP->new( $server );
    die "$class->new(): unable to connect to $server.\n" unless $self->{'server'};
    $self->{'server'}->mail( $sender );
    $self->{'to'} = [@_] if @_ > 0;
    $self;
}

sub WRITE
{
    my $self = shift;
    my ($buf, $len, $offset) = @_;

    my $server = $self->{'server'};

    # If writing for first time, need to do some things
    unless ( exists $self->{'start_send'} ) {
	# croak if some required stuff not specified
	die ref($self), "->WRITE(): `to' address not specified.\n" unless $self->{'to'};

	# mark to indicate we are sending and no more headers accepted
        $self->{'start_send'} = 1;

	# Set the to address -- this is the only header really required.
        $server->to( @{$self->{'to'}} );

	# Start sending the data.
        $server->data;

	# Need to write subject and cc headers now
	$server->datasend("To: " . join(",", @{$self->{to}}) . "\n");
	$server->datasend("From: " . $self->{sender} . "\n");
	$server->datasend("Subject: $self->{'subject'}\n") if exists $self->{'subject'};
	if ( exists $self->{'cc'} ) {
	    local $" = ", ";
	    $server->datasend("CC: @{$self->{'cc'}}\n");
	}

	# Write the rest of the headers now
	if ( exists $self->{'header'} ) {
	    my ($key, $value);
	    while (($key, $value) = each %{$self->{'header'}}) {
		$server->datasend("$key: $value\n");
	    }
	}

	# End of all headers
	$server->datasend("\n");
    }

    $server->datasend($buf);
}

sub CLOSE
{
    my $self = shift;
    $self->{'server'}->dataend;
}

sub to
{
    my $fd = shift;
    my $self = tied(*{$fd});
    die ref($fd), "->to(): cannot specify `to' address once message send has been started.\n"
	if exists $self->{'start_send'};
    $self->{'to'} = [] unless exists $self->{'to'};
    push @{$self->{'to'}}, @_;
}

sub recipient {
    $_[0]->to(@_);
}

sub cc
{
    my $fd = shift;
    my $self = tied(*{$fd});
    die ref($fd), "->cc(): cannot specify `CC' address once message send has been started.\n"
	if exists $self->{'start_send'};
    $self->{'cc'} = [] unless exists $self->{'cc'};
    push @{$self->{'cc'}}, @_;
}

sub subject
{
    my $fd = shift;
    my $self = tied(*{$fd});
    die ref($fd), "->subject(): cannot specify `Subject' once message send has been started.\n"
	if exists $self->{'start_send'};
    $self->{'subject'} = "@_";
}

sub header
{
    my $fd = shift;
    my $self = tied(*{$fd});
    die ref($fd), "->header(): cannot specify any header(s) once message send has been started.\n"
	if exists $self->{'start_send'};
    my %args = @_;
    my ($key, $value);
    $self->{'header'} = {} unless exists $self->{'header'};
    while (($key, $value) = each %args) {
	next if $key =~ /^(cc|to|from|subject)$/i;
	$self->{'header'}->{ucfirst($key)} = $value;
    }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.10  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.9  2010/11/29 15:57:51  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.8  2010/11/20 18:47:29  rlauer
# - cleanup pod
#
# Revision 1.7  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.6  2009/12/30 00:23:31  rlauer
# update docs for Bedrock II
#
# Revision 1.5  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.4  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.3  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.2  2001/02/14 15:35:44  sridhar
# Added copyright and GPL notice
#
# Revision 1.1  2000/10/19 20:51:20  sridhar
# Module SMTP implements a handle to talk with an SMTP server.
#
#

=pod

=head1 PUBLIC

C<BLM::SMTP> - Bedrock interface to an SMTP server via C<Net::SMTP>.

=head1 SYNOPSIS

  <plugin:SMTP localhost rlauer@signatureinfo.com somebody@etherland.com>

=head1 DESCRIPTION

Enables Bedrock to interact directly with an SMTP server.

=head1 NOTES

I<NOTE>: This module differs from C<BLM::Mail> in that it implements a handle which can be use with the C<sink> tag.

Use the object methods B<before> using the handle for sending data.

=head1 METHODS

=head2 to( address, address, ... )

Specify one or more addresses to send the message to.

=head2 cc( address, address, ... )

Specify one more addresses to be included as C<CC:>

=head2 subject( subject )

Set the subject header of the message

=head2 header( header-name, header-value, .. )

Specify key/value pairs for the SMTP header value which are set in the
outgoing message. These headers are not parsed.

For example, use the following to specify that message body contains HTML

  <null $STMP.header( "Content-type", "text/html")>

=head1 EXAMPLE

Use the object returned when you invoke the C<plugin> tag as the argument to the C<sink> tag. The body of the C<sink> tag becomes
the body of the message.

  <plugin:SMTP localhost rlauer@signatureinfo.com>

  <sink $STMP>
    message body here
  </sink>

=head1 AUTHOR

J. Sridhar

=head1 SEE ALSO

C<BLM::Mail>

=cut

