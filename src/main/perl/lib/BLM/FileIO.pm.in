#!/usr/bin/perl -w

# $Id$

package BLM::FileIO;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA @EXPORT);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use strict;

use SIS::Hash 1.01;
use SIS::Array 1.01;
use IO::File;

@ISA = qw(SIS::Hash);


sub TIEHASH
{
    my $class = shift;
    my $file = shift;
    my $mode = shift;

    my $self = bless {}, $class;

    my $fh = IO::File->new($file, $mode);

    die "FileIO: Could not open [$file]" unless $fh;

    $self->{'handle'} = $fh;

    $self;
}

sub close 
{
    my $self = shift;

    $self->{'handle'}->close;
}

sub DESTROY
{
    my $self = shift;
    
    $self->{'handle'}->close;
}

# just over IO::Handle function calls
sub getline { return $_[0]->{'handle'}->getline; }
sub getlines { return SIS::Array->new($_[0]->{'handle'}->getlines); }
sub eof { return $_[0]->{'handle'}->eof; }
sub flush { return $_[0]->{'handle'}->flush; }
sub printf { my $self = shift; return $self->{'handle'}->printf(@_); }
sub print { my $self = shift; return $self->{'handle'}->printf(@_); }
sub read { my $self = shift; return $self->{'handle'}->read(@_); }
sub write { my $self = shift; return $self->{'handle'}->write(@_); }
sub sysread { my $self = shift; return $self->{'handle'}->sysread(@_); }
sub syswrite { my $self = shift; return $self->{'handle'}->syswrite(@_); }
sub truncate { my $self = shift; return $self->{'handle'}->truncate(@_); }
sub getc { return $_[0]->{'handle'}->getc; }

# see - man 'stat'
sub stat 
{
    my $self = shift;
    
    my @info = $self->{'handle'}->stat;
    my @tmp;
    for (my $i=8; $i<11; $i++) {
	# these elements are time doobies
	@tmp = localtime($info[$i]);
	# save the time doobie at the end of the array
	push(@tmp, $info[$i]);
	# co-erce them into a real array
	$info[$i] = SIS::Array->new(@tmp);
    }

    return SIS::Array->new(@info);
}

=head1 NAME

C<BLM::FileIO> - An interface to IO::File

=head1 DESCRIPTION

Allows Bedrock to read/write files.

=head1 OVERVIEW

C<BLM::FileIO> allows the Bedrock scripter to read and write files to
the file system.  Remember, however, that Bedrock is running as the
user that Apache is running as (usually nobody or webuser or some such
fictitious user, so your file rights may be limited.

=head1 SYNOPSIS

   <null --define-var = "file" $Bedrock.new("BLM::FileIO", "/tmp/joe.dat", "w")>
   <null $file.print("blah blah blah")>
   <sink $file.handle>
 Here's some text that will go into the file.
   </sink>

   <null $file.close()>

=head1 CONSTRUCTOR

  <null --define-var = "file" $Bedrock.new("BLM::FileIO", pathname, [mode])>

   mode = "r" -> read
        = "w" -> write/clobber
        = "a" -> append
        = "r+" -> reading/writing

=head1 METHODS

=head2 $file.print( data )

Write C<data> to file.

=head2 $file.printf(FMT, [ARGS])>

Formatted print, using 'C' style format string.  I have noticed that Bedrock does not 
like \\n for some reason?

=head1 CHANGELOG

  $Log$
  Revision 1.1  2002/10/24 16:42:00  rlauer
  - initial checkin

  Revision 1.1  2002/02/12 05:47:59  rlauer
  - Initial check-in


=head1 AUTHOR

Rob Lauer - rlauer@cji.com

=head1 CREDITS

Just a wrapper on C<IO::File>.  Credit to that author.

=cut

1;                                                                                                                                                                                                         
