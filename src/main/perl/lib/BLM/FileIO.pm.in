#!@PERL@ -w

# $Id$

package BLM::FileIO;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA @EXPORT);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
}

use strict;

use Bedrock::Hash;
use Bedrock::Array;

use IO::File;
use IO::Handle;
use TagX::Scalar;

@ISA = qw( Bedrock::Handle IO::File );

=pod

=head1 PUBLIC

C<BLM::FileIO> - An interface to IO::File

=head1 SYNOPSIS

 <plugin:FileIO "/tmp/joe.dat" "w">

 <null $FileIO.print("blah blah blah")>
 <sink $FileIO>

 HereE<039>s some text that will go into the file.
 </sink>

 <null $FileIO.close()>


 <plugin:FileIO>
 <while $FileIO><var $_>
 </while>

=head1 DESCRIPTION

The C<FileIO> plugin provides a facility for reading and writing files.

=head1 OVERVIEW

C<BLM::FileIO> allows enables Bedrock to read and write files to the
file system.  Remember, however, that Bedrock is running as the user
that Apache is running as (usually C<nobody>, C<apache>, C<www-data>
or some such application user, so your permissions are dictated by
that users rights on the file system.

=head1 CONSTRUCTOR

 <plugin:FileIO  pathname [mode]>

=over 5

=item * mode

"r" -> read

"w" -> write

"a" -> append

"r+" -> reading/writing

=back

If C<mode> is not given the file is opened in read-only mode.

If C<pathname> is not given, then STDIN is opened for reading.

=cut

sub TIEHANDLE {
  my $class = shift;
  my $file  = shift;
  my $mode  = shift || "r";

  my $self = bless {}, $class;

  my $fh;
  if ($file) {
    $fh = IO::File->new( $file, $mode );
  }
  else {
    $fh = new IO::Handle;
    $fh->fdopen( fileno(STDIN), "r" );
  }

  die "FileIO: Could not open [$file]" unless $fh;

  $self->{'handle'} = $fh;

  $self;
}

sub _self {
  my $self = shift;

  $self = $self->isa('HASH') ? $self : tied( *{$self} );
}

sub READ {
  my $self = shift;

  $self->{handle}->read(@_);
}

sub READLINE {
  my $self = shift;

  return undef unless defined $self->{handle} && !$self->{handle}->eof();

  my $line = $self->{handle}->getline;
  chomp $line if $self->{chomp_mode};

  return $line;
}

sub EOF {
  my $self = shift;

  return $self->{handle}->eof;
}

sub BINMODE {
  my $self = shift;

  $self->{handle}->binmode(@_);
}

sub OPEN {
  my $self = shift;

  $self->{handle}->open(@_);
}

sub PRINT {
  my $self = shift;

  $self->{handle}->print(@_);
}

sub WRITE {
  my $self = shift;

  $self->{handle}->write(@_);
}

sub WRITE {
  my $self = shift;

  $self->{handle}->write(@_);
}

sub GETC {
  my $self = shift;

  $self->{handle}->getc(@_);
}

sub SEEK {
  my $self = shift;

  $self->{handle}->seek(@_);
}

sub TELL {
  my $self = shift;

  $self->{handle}->tell(@_);
}

sub PRINTF {
  my $self = shift;

  $self->{handle}->printf(@_);
}

sub CLOSE {
  $_[0]->close();
}

sub chomp_mode {
  my $self = _self(shift);

  return $self->{chomp_mode} = $_[0];
}

sub getlines {
  my $self = _self(shift);

  my @lines = $self->{'handle'}->getlines;
  return Bedrock::Array->new(@lines);
}

sub close {
  my $self = _self(shift);

  $self->{'handle'}->close()
  if defined $self->{'handle'} && $self->{'handle'}->can('close');

  $self->{handle} = undef;
}

# deprecated
sub not_eof { return !$_[0]->{'handle'}->eof; }

=pod

=head1 METHODS

=head2 close

Close the file.

=head2 getlines

Return a Bedrock array containing all of the lines of the file.  If
C<chomp-mode> is true, trailing new line characters will be removed.

 <plugin:FileIO "file.txt">
 <null:lines $FileIO.getlines()>

=head2 getline

Return a line from the file. Optinally remove new line.

 <plugin:FileIO "file.txt">
 <null:lines $FileIO.getline()>

=head2 eof

=head2 flush

=head2 read

=head2 write

=head2 sysread

=head2 syswrite

=head2 truncate

=head2 getc

See C<IO::File> for a complete description of these methods.

=head2 chomp_mode

Set the chomp mode.  Lines read will have trailing new lines
characters removed if set to true.

 <null $FileIO.chomp_mode(1)>

=head2 printf(FMT, [ARGS])

Formatted print, using 'C' style format string.

=head2 stat

I<See C<perlfunc -f stat> for more details>

I<See also C<BLM::Stat>, C<BLM::Date>>

=head2 localtime

Convenience routine to return localtime, typically used against 8th,
9th, 10th elements of the C<stat()> method return array.

  <null:stat $FileIO.stat()>

  <null:atime $FileIO.localtime($stat.[8])>
  <null:mtime $FileIO.localtime($stat.[9])>
  <null:ctime $FileIO.localtime($stat.[10])>

  #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)

=cut

sub stat {
  my $self = _self(shift);

  my @info = $self->{'handle'}->stat;

  return Bedrock::Array->new(@info);
}

sub localtime {
  my $self = _self(shift);

  return Bedrock::Array->new( CORE::localtime(shift) );
}

=head1 SEE ALSO

C<E<lt>openE<gt>>, C<E<lt>whileE<gt>>

=head1 AUTHOR

Rob Lauer - rlauer@signatureinfo.com

=head1 CREDITS

Just a wrapper on C<IO::File>.

=cut

1;

# $Log$
# Revision 1.14  2012/02/15 20:03:05  eutl420
# - update documentation since this module is now implemented as a tied handle
#
# Revision 1.13  2011/09/15 16:05:31  eutl420
# - perl tidy
#
# Revision 1.12  2011/09/09 17:40:16  eutl420
# - BLM::FileIO has now been implemented as a handle.  This version essentially breaks compatibility with
#   the previous version of the API in several significant ways.  Since this is probably going to be deployed
#   as Bedrock 2.3.0, users should be wary of the upgrade anyway and carefully read the release notes.
# - reverted the getline(), getlines() methods to their standard form, removing the chomp flag, instead
#   implementing a chomp_mode() method that sets the chomp mode
# - the stat() method previously tacked on 3 columns that contained Bedrock array references to
#   the return value of localtime on the atime, mtime, and ctime elements of the stat array.  This version
#   of FileIO removes those values and implements a localtime() convenience method that returns the localtime
#   array given the time argument.  This was done to make the stat() method behave in a true fashion to the
#   standard stat() implementation
#
# Revision 1.11  2011/08/31 02:43:42  eutl420
# - getline() now accepts chomp-mode as well
# - if no filename is given, then STDIN is opened, especially useful with bedrock shell
#
# Revision 1.10  2011/08/30 12:34:12  eutl420
# - added the chomp-mode option to getlines() to allow for automatic removal of new line
#   characters
# - if no file mode is given, then the file is opened "r" (read only)
#
# Revision 1.9  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.8  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.7  2010/11/20 18:47:26  rlauer
# - cleanup pod
#
# Revision 1.6  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.5  2009/12/30 00:23:31  rlauer
# update docs for Bedrock II
#
