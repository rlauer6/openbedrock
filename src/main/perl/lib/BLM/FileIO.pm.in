#!@PERL@ -w

# $Id$

package BLM::FileIO;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA @EXPORT);
    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use strict;

use Bedrock::Hash;
use Bedrock::Array;
use IO::File;

@ISA = qw(Bedrock::Hash);

=pod

=head1 PUBLIC

C<BLM::FileIO> - An interface to IO::File

=head1 SYNOPSIS

 <plugin:FileIO "/tmp/joe.dat" "w">

 <null $FileIO.print("blah blah blah")>
 <sink $FileIO.handle>

 Here's some text that will go into the file.
   </sink>

   <null $FileIO.close()>

=head1 DESCRIPTION

Allows Bedrock to read/write files.

=head1 OVERVIEW

C<BLM::FileIO> allows enables Bedrock to read and write files to the
file system.  Remember, however, that Bedrock is running as the user
that Apache is running as (usually C<nobody>, C<apache>, C<www-data>
or some such application user, so your permissions are dictated by
that users rights on the file system.

=head1 CONSTRUCTOR

 <plugin:FileIO  pathname [mode]>

=over 5

=item * mode

"r" -> read

"w" -> write

"a" -> append

"r+" -> reading/writing

=back

=cut

sub TIEHASH
{
    my $class = shift;
    my $file = shift;
    my $mode = shift;

    my $self = bless {}, $class;

    my $fh = IO::File->new($file, $mode);

    die "FileIO: Could not open [$file]" unless $fh;

    $self->{'handle'} = $fh;

    $self;
}

sub DESTROY
{
    my $self = shift;

    $self->{'handle'}->close;
}

=pod

=head1 METHODS

=head2 close

=cut

# just over IO::Handle function calls
sub close
{
    my $self = shift;

    $self->{'handle'}->close;
}

=pod

=head2 getline

=head2 getlines

=head2 eof

=head2 flush

=head2 read

=head2 write

=head2 sysread

=head2 syswrite

=head2 truncate

=head2 getc

See C<IO::File> for a complete description of these methods.

=cut

sub getline { return $_[0]->{'handle'}->getline; }
sub getlines { return Bedrock::Array->new($_[0]->{'handle'}->getlines); }
sub eof { return $_[0]->{'handle'}->eof; }
sub flush { return $_[0]->{'handle'}->flush; }
sub read { my $self = shift; return $self->{'handle'}->read(@_); }
sub write { my $self = shift; return $self->{'handle'}->write(@_); }
sub sysread { my $self = shift; return $self->{'handle'}->sysread(@_); }
sub syswrite { my $self = shift; return $self->{'handle'}->syswrite(@_); }
sub truncate { my $self = shift; return $self->{'handle'}->truncate(@_); }
sub getc { return $_[0]->{'handle'}->getc; }

=pod

=head2 not_eof

Convenience routine for determining if you are NOT at the C<eof>
condition for a file handle.  You need this to implement a loop across a
file handle as show below.

  <while "$FileIO.not_eof()">
  ...
  </while>

I<Note that the construction:>

  <while "--not $FileIO.eof()">
  ...
  </while>

I<...will not work! Bedrock does not allow expressions as the while
loop argument. Bedrock essentially evaluates the value of the term as
a boolean.>

=cut

sub not_eof { return ! $_[0]->{'handle'}->eof; }

=pod

=head2 printf(FMT, [ARGS])

Formatted print, using 'C' style format string.

=cut

sub printf { my $self = shift; return $self->{'handle'}->printf(@_); }

=pod

=head2 print( data )

Write C<data> to file.

=cut

sub print { my $self = shift; return $self->{'handle'}->printf(@_); }

# see - man 'stat'

=pod

=head2 stat

I<See C<perlfunc stat> for more details>

As a convenience, the 8th, 9th, and 10th elements of the return array
which represent the last access time, modify time, and create time
respectively are returned as array objects since they are themselves
Unix time values.

I<See also C<BLM::Stat>, C<BLM::Date>>

=cut

sub stat
{
    my $self = shift;

    my @info = $self->{'handle'}->stat;
    my @tmp;
    for (my $i=8; $i<11; $i++) {
	# these elements are time doobies
	@tmp = localtime($info[$i]);
	# save the time doobie at the end of the array
	push(@tmp, $info[$i]);
	# co-erce them into a real array
	$info[$i] = Bedrock::Array->new(@tmp);
    }

    return Bedrock::Array->new(@info);
}

=head1 SEE ALSO

The C<open> tag may be more useful, as it returns an C<IO::File> handle.

=head1 AUTHOR

Rob Lauer - rlauer@signatureinfo.com

=head1 CREDITS

Just a wrapper on C<IO::File>.  Credit to that author.

=cut

1;                                                                                                                                                                                                         
# $Log$
# Revision 1.9  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.8  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.7  2010/11/20 18:47:26  rlauer
# - cleanup pod
#
# Revision 1.6  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.5  2009/12/30 00:23:31  rlauer
# update docs for Bedrock II
#
