package BLM::FileIO;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Hash;
use Bedrock::Array;

use IO::Handle;
use TagX::Scalar;
use Data::Dumper;

use parent qw( Bedrock::Handle IO::File );

########################################################################
sub TIEHANDLE {
########################################################################
  my ( $class, $file, $mode ) = @_;

  $mode ||= 'r';

  my $self = bless {}, $class;

  my $fh;

  if ($file) {
    $fh = IO::File->new( $file, $mode );
  }
  else {
    $fh = IO::Handle->new;
    $fh->fdopen( fileno(STDIN), 'r' );
  }

  die "FileIO: Could not open [$file]\n"
    if !$fh;

  $self->{'handle'} = $fh;

  return $self;
}

sub _self {
  my ($self) = @_;

  return $self = $self->isa('HASH') ? $self : tied *{$self};
}

sub READ {
  my ( $self, @args ) = @_;

  return $self->{handle}->read(@args);
}

sub READLINE {
  my ($self) = @_;

  return
    if !defined $self->{handle} || $self->{handle}->eof();

  my $line = $self->{handle}->getline;

  if ( $self->{chomp_mode} ) {
    chomp $line;
  }

  return $line;
}

sub EOF {
  my ($self) = @_;

  return $self->{handle}->eof;
}

sub BINMODE {
  my ( $self, @args ) = @_;

  return $self->{handle}->binmode(@args);
}

sub OPEN {
  my ( $self, @args ) = @_;

  return $self->{handle}->open(@args);
}

sub PRINT {
  my ( $self, @args ) = @_;

  return $self->{handle}->print(@args);
}

sub WRITE {
  my ( $self, @args ) = @_;

  return $self->{handle}->write(@args);
}

sub GETC {
  my $self = shift;

  return $self->{handle}->getc(@_);
}

sub SEEK {
  my ( $self, @args ) = @_;

  return $self->{handle}->seek(@args);
}

sub TELL {
  my ( $self, @args ) = @_;

  return $self->{handle}->tell(@args);
}

sub PRINTF {
  my ( $self, @args ) = @_;

  return $self->{handle}->printf(@args);
}

sub CLOSE {
  my ($self) = @_;

  return $self->close();
}

sub chomp_mode {
  my ( $self, $mode ) = @_;

  $self = _self($self);

  return $self->{chomp_mode} = $mode;
}

sub getlines {
  my ($self) = @_;

  $self = _self($self);

  my @lines = $self->{'handle'}->getlines;

  return Bedrock::Array->new(@lines);
}

sub close {  ## no critic (ProhibitAmbiguousNames, ProhibitBuiltinHomonyms)
  my ($self) = @_;

  $self = _self($self);

  if ( defined $self->{'handle'} && $self->{'handle'}->can('close') ) {
    $self->{'handle'}->close();
  }

  return $self->{handle} = undef;
}

# deprecated
sub not_eof {
  my ($self) = @_;

  return !$self->{'handle'}->eof;
}

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 METHODS

=head2 close

Close the file.

=head2 getlines

Return a Bedrock array containing all of the lines of the file.  If
C<chomp-mode> is true, trailing new line characters will be removed.

 <plugin:FileIO "file.txt">
 <null:lines $FileIO.getlines()>

=head2 getline

Return a line from the file. Optinally remove new line.

 <plugin:FileIO "file.txt">
 <null:lines $FileIO.getline()>

=head2 eof

=head2 flush

=head2 read

=head2 write

=head2 sysread

=head2 syswrite

=head2 truncate

=head2 getc

See C<IO::File> for a complete description of these methods.

=head2 chomp_mode

Set the chomp mode.  Lines read will have trailing new lines
characters removed if set to true.

 <null $FileIO.chomp_mode(1)>

=head2 printf(FMT, [ARGS])

Formatted print, using 'C' style format string.

=head2 stat

I<See C<perlfunc -f stat> for more details>

I<See also C<BLM::Stat>, C<BLM::Date>>

=head2 localtime

Convenience routine to return localtime, typically used against 8th,
9th, 10th elements of the C<stat()> method return array.

  <null:stat $FileIO.stat()>

  <null:atime $FileIO.localtime($stat.[8])>
  <null:mtime $FileIO.localtime($stat.[9])>
  <null:ctime $FileIO.localtime($stat.[10])>

  #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)

=cut

sub stat {
  my $self = _self(shift);

  my @info = $self->{'handle'}->stat;

  return Bedrock::Array->new(@info);
}

sub localtime {
  my $self = _self(shift);

  return Bedrock::Array->new( CORE::localtime(shift) );
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::FileIO - An interface to IO::File

=head1 SYNOPSIS

 <plugin:FileIO "/tmp/joe.dat" "w">

 <null $FileIO.print("blah blah blah")>
 <sink $FileIO>

 HereE<039>s some text that will go into the file.
 </sink>

 <null $FileIO.close()>


 <plugin:FileIO>
 <while $FileIO><var $_>
 </while>

=head1 DESCRIPTION

The C<FileIO> plugin provides a facility for reading and writing files.

=head1 OVERVIEW

C<BLM::FileIO> allows enables Bedrock to read and write files to the
file system.  Remember, however, that Bedrock is running as the user
that Apache is running as (usually C<nobody>, C<apache>, C<www-data>
or some such application user, so your permissions are dictated by
that users rights on the file system.

=head1 CONSTRUCTOR

 <plugin:FileIO  pathname [mode]>

=over 5

=item * mode

"r" -> read

"w" -> write

"a" -> append

"r+" -> reading/writing

=back

If C<mode> is not given the file is opened in read-only mode.

If C<pathname> is not given, then STDIN is opened for reading.

=head1 SEE ALSO

C<E<lt>openE<gt>>, C<E<lt>whileE<gt>>

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

=head1 CREDITS

Just a wrapper on C<IO::File>.

=cut
