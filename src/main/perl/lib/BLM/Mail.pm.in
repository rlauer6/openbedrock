package BLM::Mail;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Authen::SASL;
use Bedrock::Constants qw(:booleans :chars);
use Bedrock::XML;
use Data::Dumper;
use English qw(-no_match_vars);
use List::Util qw(pairs any);
use Net::SMTP;

use Role::Tiny;
with 'Bedrock::Logger';

use parent qw(Bedrock::Hash);

use Readonly;

Readonly our $DEFAULT_TIMEOUT           => 60;
Readonly our $DEFAULT_HOST              => 'localhost';
Readonly our $DEFAULT_PORT              => 25;
Readonly our $SSL_PORT                  => [qw(465 587)];
Readonly our $DEFAULT_CONTENT_TYPE      => 'text/plain';
Readonly our $DEFAULT_TRANSFER_ENCODING => '7bit';

########################################################################
sub init_plugin {
########################################################################
  my ( $self, $server, $timeout, $debug ) = @_;

  $self->set_defaults( $server, $timeout, $debug );

  $self->fetch_config();

  return $self;
}

########################################################################
sub fetch_config {
########################################################################
  my ($self) = @_;

  my %options = %{ $self->options || {} };

  my $config_file = $options{config};

  if ( $config_file && $config_file !~ /[.]xml$/xsm ) {
    $config_file .= '.xml';
  }

  $config_file //= 'mail.xml';

  my @paths
    = $ENV{CONFIG_PATH} ? map { $ENV{CONFIG_PATH} . $_ } ( $EMPTY, '.d', '.d/startup', '.d/plugin' ) : ();
  push @paths, $ENV{BEDROCK_CONFIG_PATH};

  @paths = grep { defined $_ && -d $_ } @paths;

  @paths = map { sprintf "%s/$config_file", $_ } @paths;

  ($config_file) = grep { -e $_ } @paths;

  my $config = eval {
    return Bedrock::XML->new($config_file)
      if $config_file;

    return $self->_create_config;
  };

  $self->smtp_server( $options{host} // $config->{host}    // $self->smtp_server );
  $self->timeout( $options{timeout}  // $config->{timeout} // $self->timeout );
  $self->port( $options{port}        // $config->{port}    // $self->port // $DEFAULT_PORT );
  $self->debug( $options{debug}      // $config->{debug}   // $self->debug );

  if ( $config->{user} && $config->{pass} ) {
    my $user = $options{user} // $config->{user} // $self->auth->[0];
    my $pass = $options{pass} // $config->{pass} // $self->auth->[1];

    $self->auth( [ $user, $pass ] );
  }

  $self->ssl( $options{ssl} // $config->{ssl} // $self->ssl // any { $self->port eq $_ } @{$SSL_PORT} );

  my $new_config = $self->_create_config;

  foreach ( keys %{$new_config} ) {
    $config->{$_} = $new_config->{$_};
  }

  $self->config($config);

  return $self;
}

########################################################################
sub _create_config {
########################################################################
  my ($self) = @_;

  my $auth = $self->auth // [];

  return {
    host    => $self->smtp_server,
    port    => $self->port,
    timeout => $self->timeout,
    debug   => $self->debug,
    user    => $auth->[0],
    pass    => $auth->[1],
    ssl     => $self->ssl,
  };
}

########################################################################
sub set_defaults {
########################################################################
  my ( $self, $server, $timeout, $debug ) = @_;

  my %options = %{ $self->options // {} };

  $self->timeout( $options{timeout} // $DEFAULT_TIMEOUT );

  $self->debug( $options{debug} // $FALSE );

  $self->smtp_server( $options{server} // $DEFAULT_HOST );

  $self->content_type($DEFAULT_CONTENT_TYPE);

  $self->content_transfer_encoding($DEFAULT_TRANSFER_ENCODING);

  return $self;
}

{
  ## no critic (RequireArgUnpacking)

  sub cc           { unshift @_, 'cc';                        goto &_set_get; }
  sub config       { unshift @_, 'config';                    goto &_set_get; }
  sub content_type { unshift @_, 'content-type';              goto &_set_get; }
  sub debug        { unshift @_, 'debug';                     goto &_set_get; }
  sub encoding     { unshift @_, 'content-transfer-encoding'; goto &_set_get; }
  sub from         { unshift @_, 'from';                      goto &_set_get; }
  sub message      { unshift @_, 'message';                   goto &_set_get; }
  sub options      { unshift @_, 'options';                   goto &_set_get; }
  sub port         { unshift @_, 'port';                      goto &_set_get; }
  sub smtp_server  { unshift @_, 'smtp-server';               goto &_set_get; }
  sub ssl          { unshift @_, 'ssl';                       goto &_set_get; }
  sub subject      { unshift @_, 'subject';                   goto &_set_get; }
  sub timeout      { unshift @_, 'timeout';                   goto &_set_get; }
  sub to           { unshift @_, 'to';                        goto &_set_get; }

  sub content_transfer_encoding {
    unshift @_, 'content-transfer-encoding';
    goto &_set_get;
  }
}

########################################################################
sub auth {
########################################################################
  my ( $self, @args ) = @_;

  return $self->{auth} // []
    if !@args;

  $self->{auth} = ref $args[0] ? $args[0] : [@args];

  return $self->{auth};
}

########################################################################
sub _set_get {
########################################################################
  my ( $key, @args ) = @_;

  if ( @args == 2 ) {
    $args[0]->{$key} = $args[1];
  }

  return $args[0]->{$key};
}

########################################################################
sub sendmail {
########################################################################
  my ( $self, @args ) = @_;

  my $raw;

  if (@args) {
    $self->message( $args[0] );
    $raw = $args[1];
  }

  die "TO ERROR\n"
    if !$self->to;

  die "NO MESSAGE\n"
    if !$self->message;

  die "FROM ERROR\n"
    if !$self->from;

  my %options = (
    Timeout => $self->timeout,
    Port    => $self->port // '25',
    Debug   => $self->debug,
  );

  if ( $self->ssl ) {
    $options{SSL} = $self->ssl;
  }

  my $smtp = Net::SMTP->new( $self->smtp_server, %options );

  die "SMTP CONNECT ERROR: $EVAL_ERROR\n"
    if !$smtp;

  if ( $self->auth ) {
    $smtp->auth( @{ $self->auth } );
  }

  $smtp->mail( $self->from );

  my @email = split /;/xsm, $self->to;

  if ( $self->cc ) {
    push @email, split /;/xsm, $self->cc;
  }

  foreach my $to (@email) {
    $self->get_logger->info( sprintf "to: %s %s\n", $to, $smtp->to($to) );

    if ( !$smtp->to($to) ) {
      die "SEND ERROR\n";
    }
  }

  if ($raw) {
    $smtp->data( $self->message );
    $smtp->quit;
    return;
  }

  $smtp->data();

  my @headers = qw(
    to To
    from From
    subject Subject
    content-type Content-type
    cc CC
    content-transfer-encoding Content-Transfer-Encoding
  );

  foreach my $p ( pairs @headers ) {
    my ( $key, $name ) = @{$p};
    next if !exists $self->{$key} || !defined $self->{$key};

    $smtp->datasend( sprintf "%s: %s\n", $name, $self->{$key} );
  }

  $smtp->datasend( "\n", $self->message );

  $smtp->dataend();

  $smtp->quit;

  # reset vars
  foreach (@headers) {
    delete $self->{$_};
  }

  return $TRUE;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::Mail - An interface to Net::SMTP

=head1 SYNOPSIS

 <plugin:Mail localhost 60>

 <null $Mail.to("fred@openbedrock.net")>
 <null $Mail.from("wilma@openbedrock.net")>
 <null $Mail.cc("barney@opendbedrock.net;betty@openbedrock.net")>

 <null $Mail.subject("Bowling")>

 <sink:message>
   Let's get together Friday after the Buffalo Lodge
   meeting and roll some frames! Dino and Hoppy can watch the kids.
 </sink>

 <null $Mail.sendmail($message)>

=head1 DESCRIPTION

Provides a mail sending capabilty for Bedrock via L<Net::SMTP>.

=head1 OVERVIEW

L<BLM::Mail> allows Bedrock pages to send mail messages through an
SMTP server.  Messages of arbritrary content may be sent using this
facility.  You can send plain text or HTML by altering the
content header sent with the message.

=head1 CONSTRUCTOR

 <plugin:Mail host [timeout, debug, config]>

If C<timeout> is not provided, the C<timeout> value will default to 60
seconds. C<host> defaults to C<localhost>.

In the spirit of TIMTOWTDI...you can also use tag options for
configuration values. Option values override values found in your
config file.

 <plugin:Mail --enable-custom-options --host=localhost --debug --user=fred --pass=flintstone>
 <plugin:Mail --config=ses>

The constructor automatically looks for a configuration file named
F<mail.xml> and will use those setting I<unless you use options on the
command line or specify the configuration file using the C<--config>
option.>  The method searches for the file in the usual places one
would find Bedrock configuration files.  Namely:

=over 5

=item * $ENV{CONFIG_PATH}

=item * $ENV{CONFIG_PATH}.d

=item * $ENV{CONFIG_PATH}.d/startup

=item * $ENV{CONFIG_PATH}.d/plugin

=item * $ENV{BEDROCK_CONFIG_PATH}

=back

The configuration file should look something like this:

  <object name="mail">
    <scalar name="user">some-user</scalar>
    <scalar name="pass">some-pass</scalar>
    <scalar name="host">localhost</scalar>
    <scalar name="port">465</scalar>
    <scalar name="ssl">1</scalar>
    <scalar name="MERGE_CONFIG">no</scalar>
  
    <!-- your custom stuff here -->
    <object name="support">
      <scalar name="to">support@treasurersbriefcase.com</scalar>
    </object>
  </object>

Of course, you can add any addition items here that you would like and
access the entire object using the C<config()> method.

Normally, Bedrock will merge F<.xml> files it finds in its root
configuration paths. If you want to prevent merging, add the
MERGE_CONFIG element with a value of 'no'.

=head1 METHODS AND SUBROUTINES

=head2 auth

 auth(username, password)
 auth(array-ref)

If you are using SSL, you need to have the L<Authen::SASL>
installed. (See L</Net::SMTP>)

=head2 cc( address )

Set the 'CC' address.  This can be a ';' delimited list of email
addresses.

=head2 config

Returns the current configuration which will be used when connecting
to the SMTP server.

=head2 content_type( type )

Sets the 'Content-type' field of the mail header.  The default is
'text/plain'.  To send HTML in your email message use 'text/html'.

Example:

  <plugin:Mail localhost>

  <null $Mail.to("barney@openbedrock.net")>
  <null $Mail.from("fred@openbedrock.net")>
  <null $Mail.subject("html mojo")>

  <null $Mail.content_type("text/html")>

  <sink:message>
    <font color="red">Buffalo Lodge meeting Friday!</font><br>
  </sink>

  <null $Mail.sendmail($message)>

=head2 encoding( encoding )

Sets the 'Content-Transfer-Encoding' field of the mail
header. Normally you don't need to worry about this.  The default is
'7bit'.

=head2 from( address )

Set the 'From' address for the mail message.

=head2 message ( message )

Sets the message content.

=head2 subject( subject )

Set the 'Subject' field of the mail header.

=head2 port( port )

Port to connect to.

default: 25

See the note regarding SSL ports below. (L</ssl>)

=head2 sendmail( [message], [raw] )

Send the mail message.  The message can be passed as an argument or
the Plugin will call the C<message()> method to retrieve the
message. The plugin connect to the SMTP server and deliver the message
if possible.  Note that the connection to the server is made when you
invoke this method.  All of the properties ('to', 'from', etc.)  of
the message are reset after the send is complete.

You can send a MIME encoded message by setting the C<raw> flag to a
true value.  Here's an example of using L<MIME::Entity> to construct a
MIME encode message.

 <plugin:Mail --enable-custom-options --debug > 
 <plugin:MIME::Entity --define-plugin="mime">
 
 <array:message "this is a test">
 <null $mime.build( 'From', 'bigfoot@example.com',
                    'To', 'sasquatch@example.com', 
                    'Data', "test",
                    'Subject', 'test') >
 
 <null $Mail.to('sasquatch@example.com')>
 <null $Mail.from('bigfoot@example.com')>
 <null $Mail.sendmail($mime.stringify(), 1)>

=head2 ssl

 ssl(0|1)

Boolean that determines if an SSL connection will be used. (see
L<Net::SMTP>). This will automatically be set to true if you do not
explicitly set the SSL flag and the port value is set to one of
the standard SSL enabled ports (465 or 587).

=head2 timeout

 timeout( timeout) 

Sets the timeout value (in seconds) for connecting to the SMTP server.
The default is 60 seconds.  The Plugin will throw an exception if a
timeout occurs.

=head2 to

 to( recipient )

Set the 'To' address for the mail message.

=head1 HINT

If you're having issues with this module, try setting the debug option.

 <plugin:Mail localhost 60 1>

=head1 AUTHOR

Rob Lauer - bigfoot@cpan.org

Just a wrapper on L<Net::SMTP>.

=head1 SEE ALSO

L<Net::SMTP>, L<BLM::SMTP>

=cut
