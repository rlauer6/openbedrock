#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Mail;

use strict;
use warnings;

use Bedrock::Constants qw(:booleans);
use Bedrock::Hash;
use List::Util qw(pairs);
use Net::SMTP;

use parent qw(Bedrock::Hash);

use Readonly;

Readonly our $DEFAULT_TIMEOUT           => 60;
Readonly our $DEFAULT_HOST              => q{localhost};
Readonly our $DEFAULT_CONTENT_TYPE      => 'text/plain';
Readonly our $DEFAULT_TRANSFER_ENCODING => '7bit';

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $server, $timeout ) = @_;

  my $self = bless {}, $class;

  $server //= $DEFAULT_HOST;

  $timeout //= $DEFAULT_TIMEOUT;

  $self->smtp_server($server);

  $self->content_type($DEFAULT_CONTENT_TYPE);

  $self->content_transfer_encoding($DEFAULT_TRANSFER_ENCODING);

  $self->timeout($timeout);

  return $self;
}

{
  ## no critic (RequireArgUnpacking)

  sub to           { unshift @_, 'to';           goto &_set_get; }
  sub cc           { unshift @_, 'cc';           goto &_set_get; }
  sub from         { unshift @_, 'from';         goto &_set_get; }
  sub subject      { unshift @_, 'subject';      goto &_set_get; }
  sub message      { unshift @_, 'message';      goto &_set_get; }
  sub timeout      { unshift @_, 'timeout';      goto &_set_get; }
  sub content_type { unshift @_, 'content-type'; goto &_set_get; }
  sub smtp_server  { unshift @_, 'smtp-server';  goto &_set_get; }
  sub encoding { unshift @_, 'content-transfer-encoding'; goto &_set_get; }

  sub content_transfer_encoding {
    unshift @_, 'content-transfer-encoding';
    goto &_set_get;
  }
}

########################################################################
sub _set_get {
########################################################################
  my ( $key, @args ) = @_;

  if ( @args == 2 ) {
    $args[0]->{$key} = $args[1];
  }

  return $args[0]->{$key};
}

########################################################################
sub sendmail {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args == 1 ) {
    $self->message( $args[0] );
  }

  die "TO ERROR\n"
    if !$self->to;

  die "NO MESSAGE\n"
    if !$self->message;

  die "FROM ERROR\n"
    if !$self->from;

  my $smtp = Net::SMTP->new( $self->smtp_server, Timeout => $self->timeout );

  die "SMTP CONNECT ERROR\n"
    if !$smtp;

  $smtp->mail( $self->from );

  my @email = split /;/xsm, $self->to;

  if ( $self->cc ) {
    push @email, split /;/xsm, $self->cc;
  }

  foreach my $to (@email) {
    if ( !$smtp->to($to) ) {
      die "SEND ERROR\n";
    }
  }

  $smtp->data();

  my @headers = qw(
    to To
    from From
    subject Subject
    content-type Content-type
    cc CC
    content-transfer-encoding Content-Transfer-Encoding
  );

  foreach my $p ( pairs @headers ) {
    my ( $key, $name ) = @{$p};
    next if !exists $self->{$key} || !defined $self->{$key};

    $smtp->datasend( sprintf "%s: %s\n", $name, $self->{$key} );
  }

  $smtp->datasend( "\n", $self->message );

  $smtp->dataend();

  $smtp->quit;

  # reset vars
  foreach (@headers) {
    delete $self->{$_};
  }

  return $TRUE;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Mail> - An interface to Net::SMTP

=head1 SYNOPSIS

 <plugin:Mail localhost 60>

 <null $Mail.to("fred@openbedrock.net")>
 <null $Mail.from("wilma@openbedrock.net")>
 <null $Mail.cc("barney@opendbedrock.net;betty@openbedrock.net")>

 <null $Mail.subject("Bowling")>

 <sink:message>
   Let's get together Friday after the Buffalo Lodge
   meeting and roll some frames! Dino and Hoppy can watch the kids.
 </sink>

 <null $Mail.sendmail($message)>

=head1 DESCRIPTION

Provides a mail sending capabilty for Bedrock via L<Net::SMTP>.

=head1 OVERVIEW

C<BLM::Mail> allows Bedrock pages to send mail messages through an
SMTP server.  Messages of arbritrary content may be sent using this
facility.  You can send plain text or HTML by altering the
content header sent with the message.

=head1 CONSTRUCTOR

 <plugin:Mail host [timeout]>

If C<timeout> is not provided, the C<timeout> value will default to 60
seconds. C<host> defaults to C<localhost>.

=head1 METHODS

=head2 to( recipient )

Set the 'To' address for the mail message.

=head2 from( address )

Set the 'From' address for the mail message.

=head2 cc( address )

Set the 'CC' address.  This can be a ';' delimited list of email addresses.

=head2 subject( subject )

Set the 'Subject' field of the mail header.

=head2 sendmail( [message] )

Send the mail message.  The message can be passed as an argument or
the Plugin will look to the C<message> property. The Plugin will
connect to the SMTP server and deliver the message if possible.  Note
that the connection to the server is made when you invokde this
method.  All of the properties ('to', 'from', etc.)  of the message
are reset after the send is complete.

=head2 encoding( encoding )

Sets the 'Content-Transfer-Encoding' field of the mail
header. Normally you don't need to worry about this.  The default is
'7bit'.

=head2 content_type( type )

Sets the 'Content-type' field of the mail header.  The default is
'text/plain'.  To send HTML in your email message use 'text/html'.

Example:

  <plugin:Mail localhost>

  <null $Mail.to("barney@openbedrock.net")>
  <null $Mail.from("fred@openbedrock.net")>
  <null $Mail.subject("html mojo")>

  <null $Mail.content_type("text/html")>

  <sink:message>
    <font color="red">Buffalo Lodge meeting Friday!</font><br>
  </sink>

  <null $Mail.sendmail($message)>

=head2 timeout ( timeout) 

Sets the timeout value (in seconds) for connecting to the SMTP server.
The default is 60 seconds.  The Plugin will throw an exception if a
timeout occurs.

=head2 message ( message )

Sets the message content.

=head1 AUTHOR

Just a wrapper on C<Net::SMTP>.

Rob Lauer - rlauer6@comcast.net

=head1 SEE ALSO

C<Net::SMTP>

=cut
