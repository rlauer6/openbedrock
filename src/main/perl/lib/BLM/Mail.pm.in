package BLM::Mail;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock::Constants qw(:booleans);
use Bedrock::XML;

use Data::Dumper;
use English qw(-no_match_vars);

use List::Util qw(pairs);
use Net::SMTP;

use Role::Tiny;

with 'Bedrock::Logger';

use parent qw(Bedrock::Hash);

use Readonly;

Readonly our $DEFAULT_TIMEOUT           => 60;
Readonly our $DEFAULT_HOST              => 'localhost';
Readonly our $DEFAULT_CONTENT_TYPE      => 'text/plain';
Readonly our $DEFAULT_TRANSFER_ENCODING => '7bit';

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $server, $timeout, $debug, $config_file ) = @_;

  my $self = bless {}, $class;

  $self->set_defaults( $server, $timeout, $debug );
  $self->fetch_config($config_file);

  return $self;
}

########################################################################
sub fetch_config {
########################################################################
  my ( $self, $config_file ) = @_;

  foreach ( $ENV{CONFIG}, $ENV{BEDROCK_CONFIG} ) {
    $config_file = sprintf '%s/mail.xml';
    last if -e $config_file;
    undef $config_file;
  }

  return
    if !$config_file;

  my $config = Bedrock::XML->new($config_file);

  $self->smtp_server( $config->{host} );
  $self->timeout( $config->{timeout} );
  $self->debug( $config->{debug} );

  if ( $config->{user} && $config->{pass} ) {
    $self->auth( @{$config}{qw(user pass)} );
  }

  $self->ssl( $config->{ssl} );

  return $self;
}

########################################################################
sub set_defaults {
########################################################################
  my ( $self, $server, $timeout, $debug ) = @_;

  $server //= $DEFAULT_HOST;

  $timeout //= $DEFAULT_TIMEOUT;

  $debug //= $FALSE;

  $self->smtp_server($server);

  $self->content_type($DEFAULT_CONTENT_TYPE);

  $self->content_transfer_encoding($DEFAULT_TRANSFER_ENCODING);

  return $self;
}

{
  ## no critic (RequireArgUnpacking)

  sub debug        { unshift @_, 'debug';                     goto &_set_get; }
  sub to           { unshift @_, 'to';                        goto &_set_get; }
  sub cc           { unshift @_, 'cc';                        goto &_set_get; }
  sub from         { unshift @_, 'from';                      goto &_set_get; }
  sub subject      { unshift @_, 'subject';                   goto &_set_get; }
  sub message      { unshift @_, 'message';                   goto &_set_get; }
  sub port         { unshift @_, 'port';                      goto &_set_get; }
  sub ssl          { unshift @_, 'ssl';                       goto &_set_get; }
  sub timeout      { unshift @_, 'timeout';                   goto &_set_get; }
  sub content_type { unshift @_, 'content-type';              goto &_set_get; }
  sub smtp_server  { unshift @_, 'smtp-server';               goto &_set_get; }
  sub encoding     { unshift @_, 'content-transfer-encoding'; goto &_set_get; }

  sub content_transfer_encoding {
    unshift @_, 'content-transfer-encoding';
    goto &_set_get;
  }
}

########################################################################
sub auth {
########################################################################
  my ( $self, @args ) = @_;

  return $self->{auth} = \@args;
}

########################################################################
sub _set_get {
########################################################################
  my ( $key, @args ) = @_;

  if ( @args == 2 ) {
    $args[0]->{$key} = $args[1];
  }

  return $args[0]->{$key};
}

########################################################################
sub sendmail {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args == 1 ) {
    $self->message( $args[0] );
  }

  die "TO ERROR\n"
    if !$self->to;

  die "NO MESSAGE\n"
    if !$self->message;

  die "FROM ERROR\n"
    if !$self->from;

  my %options = (
    Timeout => $self->timeout,
    Port    => $self->port // '25',
    Debug   => $self->debug,
  );

  if ( $self->ssl ) {
    $options{SSL} = $self->ssl;
  }

  my $smtp = Net::SMTP->new( $self->smtp_server, %options );

  die "SMTP CONNECT ERROR: $EVAL_ERROR\n"
    if !$smtp;

  if ( $self->{auth} ) {
    $smtp->auth( @{ $self->{auth} } );
  }

  $smtp->mail( $self->from );

  my @email = split /;/xsm, $self->to;

  if ( $self->cc ) {
    push @email, split /;/xsm, $self->cc;
  }

  foreach my $to (@email) {
    $self->get_logger->info( sprintf "to: %s %s\n", $to, $smtp->to($to) );

    if ( !$smtp->to($to) ) {
      die "SEND ERROR\n";
    }
  }

  $smtp->data();

  my @headers = qw(
    to To
    from From
    subject Subject
    content-type Content-type
    cc CC
    content-transfer-encoding Content-Transfer-Encoding
  );

  foreach my $p ( pairs @headers ) {
    my ( $key, $name ) = @{$p};
    next if !exists $self->{$key} || !defined $self->{$key};

    $smtp->datasend( sprintf "%s: %s\n", $name, $self->{$key} );
  }

  $smtp->datasend( "\n", $self->message );

  $smtp->dataend();

  $smtp->quit;

  # reset vars
  foreach (@headers) {
    delete $self->{$_};
  }

  return $TRUE;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Mail> - An interface to Net::SMTP

=head1 SYNOPSIS

 <plugin:Mail localhost 60>

 <null $Mail.to("fred@openbedrock.net")>
 <null $Mail.from("wilma@openbedrock.net")>
 <null $Mail.cc("barney@opendbedrock.net;betty@openbedrock.net")>

 <null $Mail.subject("Bowling")>

 <sink:message>
   Let's get together Friday after the Buffalo Lodge
   meeting and roll some frames! Dino and Hoppy can watch the kids.
 </sink>

 <null $Mail.sendmail($message)>

=head1 DESCRIPTION

Provides a mail sending capabilty for Bedrock via L<Net::SMTP>.

=head1 OVERVIEW

L<BLM::Mail> allows Bedrock pages to send mail messages through an
SMTP server.  Messages of arbritrary content may be sent using this
facility.  You can send plain text or HTML by altering the
content header sent with the message.

=head1 CONSTRUCTOR

 <plugin:Mail host [timeout, debug]>

If C<timeout> is not provided, the C<timeout> value will default to 60
seconds. C<host> defaults to C<localhost>.

=head1 METHODS AND SUBROUTINES

=head2 auth

 auth(username, password)
 auth(SASL)

If authentication is used, you can the username and password for the
server or pass an L<Authen::SASL> object. (See L</Net::SMTP>)

=head2 cc( address )

Set the 'CC' address.  This can be a ';' delimited list of email
addresses.

=head2 content_type( type )

Sets the 'Content-type' field of the mail header.  The default is
'text/plain'.  To send HTML in your email message use 'text/html'.

Example:

  <plugin:Mail localhost>

  <null $Mail.to("barney@openbedrock.net")>
  <null $Mail.from("fred@openbedrock.net")>
  <null $Mail.subject("html mojo")>

  <null $Mail.content_type("text/html")>

  <sink:message>
    <font color="red">Buffalo Lodge meeting Friday!</font><br>
  </sink>

  <null $Mail.sendmail($message)>

=head2 encoding( encoding )

Sets the 'Content-Transfer-Encoding' field of the mail
header. Normally you don't need to worry about this.  The default is
'7bit'.

=head2 from( address )

Set the 'From' address for the mail message.

=head2 message ( message )

Sets the message content.
=head2 subject( subject )

Set the 'Subject' field of the mail header.

=head2 port( port )

Port to connect to.

default: 25

=head2 sendmail( [message] )

Send the mail message.  The message can be passed as an argument or
the Plugin will look to the C<message> property. The Plugin will
connect to the SMTP server and deliver the message if possible.  Note
that the connection to the server is made when you invokde this
method.  All of the properties ('to', 'from', etc.)  of the message
are reset after the send is complete.

=head2 ssl( option ) 

SSL options (see L<Net::SMTP>).

=head2 timeout ( timeout) 

Sets the timeout value (in seconds) for connecting to the SMTP server.
The default is 60 seconds.  The Plugin will throw an exception if a
timeout occurs.

=head2 to( recipient )

Set the 'To' address for the mail message.

=head1 HINT

If you're having issues with this module, try setting the debug option.

 <plugin:Mail localhost 60 1>

=head1 AUTHOR

Rob Lauer - rlauer6@comcast.net

Just a wrapper on L<Net::SMTP>.

=head1 SEE ALSO

L<Net::SMTP>, L<BLM::SMTP>

=cut
