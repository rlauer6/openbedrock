#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Filter;

use strict;
use warnings;

use parent qw( Bedrock::Handle IO::File);

# since this is a handle, tied as a GLOB by Bedrock, we may be called
# from the Bedrock page, hence we need to access the blessed hashref
# OTOH...we may want to call these same functions internally from the
# implemented methods (caps) and we can, since we are all part of
# the same bless-ed family ;-)  Perl OO hoops... perlfunc -f tied
#
########################################################################
sub _self {
########################################################################
  my ($self) = @_;

  return tied *{$self}
    if !$self->isa('HASH');

  return $self;
}

########################################################################
{
  ## no critic (RequireArgUnpacking)
  sub WRITE  { return shift->_write(@_); }
  sub PRINT  { return shift->_write(@_); }
  sub PRINTF { return shift->_write(@_); }
  sub SEEK   { return shift->{fh}->seek(@_); }
}
########################################################################

########################################################################
sub EOF   { return shift->{fh}->eof(); }
sub TELL  { return shift->{fh}->tell(); }
sub CLOSE { return shift->{fh}->close(); }

########################################################################

########################################################################
sub DESTROY {
########################################################################
  my $self = shift;

  return
    if !$self->{fh};

  return $self->CLOSE;
}

########################################################################
sub READLINE {
########################################################################
  if (wantarray) {
    goto &getlines;
  }

  goto &getline;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Filter> - Filter parent class

=head1 SYNOPSIS

 use parent qw{BLM::Filter};

 sub TIEHASH {
 }

 ...

=head1 DESCRIPTION

Use L<BLM::Filter> as a starting point to create your own input/output
filters. See L<BLM::Filter::csv> or L<BLM::Filter::xls> for examples
of how to write a filter.

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=head1 SEE ALSO

=cut
