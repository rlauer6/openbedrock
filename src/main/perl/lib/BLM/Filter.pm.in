#!/usr/bin/perl

package BLM::Filter;

use Bedrock::JSON;
use Bedrock::Dump;

use Date::Calc qw(:all);
use Tie::Array;

use strict;

BEGIN
{
    use Exporter ();
    use Tie::Hash;
    use vars	qw ($VERSION @ISA);

    $VERSION	= 1.0;
    @ISA	= qw (Tie::StdArray);
}

my %OPTIONS = (verbose => undef );
my %FILTERS;

sub TIEARRAY {
  my $class = shift;
  $class = ref($class) || $class;

  die "ERROR: BLM::Filter operates on arrays of hashes or simple arrays...perldoc BLM::Filter."
    unless (UNIVERSAL::isa($_[0], 'ARRAY'));

  my $self = bless [], $class;
  @{$self} = @{$_[0]};

  if (UNIVERSAL::isa($_[1], 'HASH')) {
    map { $OPTIONS{$_} = $_[1]->{$_}; } keys %{$_[1]}; 
  }

  return $self;
}

sub new
{
    my $proto = shift;
    my $class = ref ($proto) || $proto;
    my $self = bless [], $class;
    tie @{$self}, $class, @_;
    $self;
}

sub convert_to_days {
  my ($year, $month, $day);

  if (($year, $month, $day) = Decode_Date_US($_[0])) {
    return Date_to_Days($year, $month, $day);
  }

  return $_[0];
}

sub add_filter {
  my $type = shift;
  my $filter = shift;
  my $filter_types = shift;

  # future versions can afford to spend some time analyzing filters
  # for sanity and even perhaps sanity between filters...not sure what
  # this means exactly just yet
  # 
  # some examples:
  #
  # -if the filter type is 'between' then the argument
  # must be an ARRAY ref with two consistent arguments min, max based
  # on the type. 
  # - possible that this phase may also 'compile' filters, e.g. dates need to be
  # converted using Date_to_Days so comparisons make sense (see below).

  if ($filter->{type} eq 'date') {
    foreach ('eq', 'ge', 'gt', 'le', 'lt', 'between') {
      if ($_ ne 'between') {
	# FIXME: eq can be array
	$filter->{$_} = convert_to_days($filter->{$_});
      }
      else {
	die "ERROR: value of between must be an ARRAY ref"
	  unless UNIVERSAL::isa($filter->{'between'}, 'ARRAY');
	my @range;
	foreach (@{$filter->{'between'}}) {
	  push @range, convert_to_days($_);
	}
	$filter->{'between'} = \@range;
      }
    }
  }

  # 'pre-compile' regular expression
  if (exists $filter->{re}) {
    my $regexp = $filter->{re};
    $regexp = qr/$regexp/;
    $filter->{re} = $regexp;
  }

  $filter_types->{$type} = [] unless $filter_types->{$type};
  push @{$filter_types->{$type}}, $filter;
}

sub get_args {
  my $op = shift;
  my $thingy = shift;
  my $filter = shift;

  my $arg1 = $thingy;
  my $arg2 = $filter->{$op};
  my $arg3;

  if ($op eq 'between') {
    die "between value must be ARRAY" unless UNIVERSAL::isa($arg2, 'ARRAY');
    $arg3 = $arg2->[1];
    $arg2 = $arg2->[0];
  }

  if (UNIVERSAL::isa($thingy, 'HASH')) {
    if ( exists $filter->{key}  && exists $thingy->{$filter->{key}}) {
      $arg1 = $thingy->{$filter->{key}};
    }
    else {
      print STDERR "NO ARGUMENT!" if $OPTIONS{verbose};
      return ();
    }
  }

  print STDERR sprintf("RAW ARGS: [%s] [%s] [%s] \n", $arg1, $arg2, $arg3) if $OPTIONS{verbose};
  if ($filter->{type} eq 'date') {
    $arg1 = convert_to_days($arg1);
  }
  my @args = ($arg1, $arg2);
  push @args, $arg3 if defined $arg3;
  
  return @args;
}


sub compare_numbers {
  my $op = shift;

  # arg for eq can be set of valid values
  if ($op eq 'eq') {
    if (UNIVERSAL::isa($_[1], 'ARRAY')) {
      foreach my $val (@{$_[1]}) {
	return 1 if $val == $_[0]; 
      }
      return 0;
    }
    else {
      return $_[0] == $_[1];
    }
  }
  elsif ($op eq 'gt') {
    return $_[0] > $_[1];
  }
  elsif ($op eq 'ge') {
    return $_[0] >= $_[1];
  }
  elsif ($op eq 'lt') {
    return $_[0] < $_[1];
  }
  elsif ($op eq 'le') {
    return $_[0] <= $_[1];
  }
  elsif ($op eq 'between') {
    return ( $_[0] >= $_[1] && $_[0] <= $_[2]);
  }

  return 0;
}

sub compare_chars {
  my $op = shift;

  if ($op eq 'eq') {
    if (UNIVERSAL::isa($_[1], 'ARRAY')) {
      foreach my $val (@{$_[1]}) {
	return 1 if $val eq $_[0]; 
      }
      return 0;
    }
    else {
      return $_[0] eq $_[1];
    }
  }
  elsif ($op eq 'gt') {
    return $_[0] gt $_[1];
  }
  elsif ($op eq 'ge') {
    return $_[0] ge $_[1];
  }
  elsif ($op eq 'lt') {
    return $_[0] lt $_[1];
  }
  elsif ($op eq 'le') {
    return $_[0] le $_[1];
  }

  return 0;
}

sub stats {
}
  
sub execute {
  my $self = shift;
  my $filter = shift;

  # interesting behaviour!  allows reuse of filters on subsequent invocations of execute();
  %FILTERS = () if $filter;

  my @filters;
  if ($filter) {
    if (UNIVERSAL::isa($filter, 'HASH')) {
      push @filters, $filter;
    }
    elsif (UNIVERSAL::isa($filter, 'ARRAY')) {
      @filters = @$filter;
    }
    else {
      push @filters, Bedrock::JSON::decode($filter);
    }
  }

  # analyze filters...however you get there a filter is a hash!
  foreach (@filters) {
    die "ERROR: filters must be well define hashes...see perldoc BLM::Filter" 
      unless UNIVERSAL::isa($_, 'HASH');

    add_filter('re', $_, \%FILTERS) if $_->{re};
    add_filter('eq', $_, \%FILTERS) if $_->{eq};
    add_filter('gt', $_, \%FILTERS) if $_->{gt};
    add_filter('ge', $_, \%FILTERS) if $_->{ge};
    add_filter('lt', $_, \%FILTERS) if $_->{lt};
    add_filter('le', $_, \%FILTERS) if $_->{le};
    add_filter('between', $_, \%FILTERS) if $_->{between};
  }

  print STDERR Bedrock::Dump::compact(\%FILTERS) if $OPTIONS{verbose};

  my @things = @$self;
  my @new_things;
  my @args;

  # $thingy can be a HASH or scalar
 THINGY:  foreach my $thingy (@things) {
    print STDERR "Filtering: ". Bedrock::Dump::compact($thingy) if $OPTIONS{verbose};
    
    if (exists $FILTERS{re}) {
      foreach my $filter (@{$FILTERS{re}}) {
	print STDERR "RE\n" if $OPTIONS{verbose};
	print STDERR "filter=".Bedrock::Dump::compact($filter) if $OPTIONS{verbose};
	next unless (@args  = get_args('re', $thingy, $filter));
	print STDERR sprintf("PROCESSED ARGS: [%s] [%s]\n", @args) if $OPTIONS{verbose};
	my $match = ($args[0] =~/$args[1]/);

	if ($match) {
	  print STDERR "Match!\n" if $OPTIONS{verbose};
	  push @new_things, $thingy;
	  next THINGY; # if we already match, then no need to go go through lot's of re's
	}
	else {
	  print STDERR sprintf("no match %s/%s\n", @args) if $OPTIONS{verbose};
	}
      }
    }

    foreach my $op ('eq', 'gt', 'ge', 'lt', 'le', 'between') {
      if (exists $FILTERS{$op}) {
	print STDERR "$op\n" if $OPTIONS{verbose};
	foreach my $filter (@{$FILTERS{$op}}) {
	  my $type = (exists $filter->{type}) ? $filter->{type} : 'char';
	  print STDERR "filter=".Bedrock::Dump::compact($filter) if $OPTIONS{verbose};
	  # check if argument for this operator
	  next unless (@args = get_args($op, $thingy, $filter));
	  print STDERR sprintf("PROCESSED ARGS: [%s] [%s] [%s]\n", @args) if $OPTIONS{verbose};
	  
	  my $match;
	  if ($type eq 'char') {
	    $match = compare_chars($op, @args);
	  }
	  elsif ($type =~/(number|int)/) {
	    $match = compare_numbers($op, @args);
	  }
	  elsif ($type eq 'date') {
	    $match = compare_numbers($op, @args);
	  }

	  if ($OPTIONS{keep_stats}) {

	  }

	  if ($match) {
	    push @new_things, $thingy;
	    next THINGY; # if we already match, then no need to go go through lot's of re's
	  }
	}
      }
    }

  }
  return Bedrock::Array->new(@new_things);
}

1;
