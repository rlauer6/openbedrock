#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Include;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.04;
}

use IO::File;
use TagX::Log 1.01;
use SIS::Hash 1.01;
@ISA = qw(SIS::Hash);

sub TIEHASH
{
    my $class = shift;
    my $filename = shift;

    die "Usage: ", __PACKAGE__, "( filename )\n" unless $filename;
    die "Cannot open $filename: file does not exist.\n" unless -e $filename;
    die "Cannot open $filename: check permissions.\n" unless -r $filename;
    my $self = bless {'filename' => $filename}, $class;
    $self;
}

sub open_file
{
    my $self = shift;
    my $fd = IO::File->new( $self->{'filename'} );
    die __PACKAGE__, ": Could not open file $self->{'filename'}: $!\n"
	unless $fd;
    &log_message( undef, "fd = [$fd]" );
    $self->{'fd'} = $fd;
    $fd;
}

sub nextRecord
{
    my $self = shift;

    my $fd = $self->{'fd'};
    $fd = $self->open_file unless $fd;
    &log_message( undef, "fd = [$fd]" );

    my $line;
    if ( exists $self->{'RS'} ) {
	local $/ = $self->{'RS'};
	$line = <$fd>;
    } else {
	$line = <$fd>;
    }

    # Close file if all done. we don't want long hanging open files
    $fd->close unless defined($line);

    $line;
}

sub include {
    my $self = shift;
    $self->set('RS', undef);

    return $self->nextRecord();
}

sub set
{
    my $self = shift;
    my ($key, $value) = shift;

    if ( $key eq 'INPUT_RECORD_SEPARATOR'
	 or $key eq 'RS' ) {
	$self->{'RS'} = $value;
    }
    $value;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.5  2008/12/03 14:01:18  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.4  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.3  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/09/29 19:14:05  sridhar
# 1. No need for encoding HTML special chars now
# 2. Closing filehandle explicitly after reading all lines to avoid
# left-over file handles.
#
# Revision 1.1  2000/09/18 18:30:13  sridhar
# Moving some general purpose BLMs from Perl/BLM to Perl/Bedrock/BLM
#
# Revision 1.1  2000/07/18 19:03:32  sridhar
# Adding BLM::Include which provides for reading a file.
#
#
