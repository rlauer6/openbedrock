#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Recycle;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.02;
}

use Bedrock::Hash;

@ISA = qw( Bedrock::Hash );

sub TIEHASH
{
    my $class = shift;
    my $self = bless Bedrock::Hash->new;
    $self->{'items'} = [@_];
    $self->{'index'} = 0;
    $self;
}

sub push
{
    my $self = shift;
    push @{$self->{'items'}}, @_;
}

sub pop
{
    my $self = shift;
    pop @{$self->{'items'}};
}

sub shift
{
    my $self = shift;
    shift @{$self->{'items'}};
}

sub unshift
{
    my $self = shift;
    unshift @{$self->{'items'}}, @_;
}

sub curr
{
    my $self = shift;
    $self->{'index'} = 0 if $self->{'index'} == scalar(@{$self->{'items'}});
    my @a = @{$self->{'items'}};
    my $item = $a[$self->{'index'}];
    $self->{'index'}++;
    return $item;
}

1;

=pod

=head1 PUBLIC

C<BLM::Recycle> - cycle through a list

=head1 SYNOPSIS

Create a recycler object:

  <plugin:Recycle item1 item2 item3>

Extract current object -- returns I<item1>

  Item is <var $Recycle.curr()>

Extract again -- returns I<item2>

  Item is <var $Recycle.curr()>

=head1 DESCRIPTION

Object for retrieving a set of values that recycle.

=head1 METHODS

=head2 CONSTRUCTOR

 <plugin:Recycle  item ... >

Construct and return a C<BLM::Recycle> object. One or more items to be recycled can
be passed in.

=head2 curr

Return the current item and increment the iterator. Reset the iterator
to the beginning if the next item is beyond the end of the list.

=head2 push( item )


Append one or more items to the end of the list.

=head2 pop

Remove the last element in the list and return it.

=head2 shift

Remove the first element in the list and return it.

=head2 unshift( item ) 

Prepend one or more items to the head of the list.

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.6  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.5  2009/12/30 00:23:31  rlauer
# update docs for Bedrock II
#
# Revision 1.4  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.3  2008/12/03 14:01:18  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.2  2001/02/14 15:35:44  sridhar
# Added copyright and GPL notice
#
# Revision 1.1  2000/09/27 15:34:33  sridhar
# List element recycler.
#
#
