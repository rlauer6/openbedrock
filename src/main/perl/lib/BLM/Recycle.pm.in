#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package BLM::Recycle;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use SIS::Hash;

@ISA = qw( SIS::Hash );

sub TIEHASH
{
    my $class = shift;
    my $self = bless SIS::Hash->new;
    $self->{'items'} = [@_];
    $self->{'index'} = 0;
    $self;
}

sub push
{
    my $self = shift;
    push @{$self->{'items'}}, @_;
}

sub pop
{
    my $self = shift;
    pop @{$self->{'items'}};
}

sub shift
{
    my $self = shift;
    shift @{$self->{'items'}};
}

sub unshift
{
    my $self = shift;
    unshift @{$self->{'items'}}, @_;
}

sub curr
{
    my $self = shift;
    $self->{'index'} = 0 if $self->{'index'} == scalar(@{$self->{'items'}});
    my @a = @{$self->{'items'}};
    my $item = $a[$self->{'index'}];
    $self->{'index'}++;
    return $item;
}

1;

=head1 SYNOPSIS

BLM::Recycle -- Bedrock module to recycle the elements of a list

=head1 USAGE

Create a recycler object:

  <null --define-var = "rc" $Bedrock.new( "BLM::Recycle", "item1", "item2", "item3")>

Extract current object -- returns I<item1>

  Item is <var $rc.curr()>

Extract again -- returns I<item2>

  Item is <var $rc.curr()>

=head1 DESCRIPTION

=head2 $Bedrock.new("BLM::Recycle" [, <item> .. ])

Construct and return a C<BLM::Recycle> object. One or more items to be recycled can
be passed in.

=head2 $rc.curr()

Return the current item and increment the iterator. Reset the iterator
to the beginning if the next item is beyond the end of the list.

=head2 $rc.push(item, ..)

Append one or more items to the end of the list.

=head2 $rc.pop()

Remove the last element in the list and return it.

=head2 $rc.shift()

Remove the first element in the list and return it.

=head2 $rc.unshift(item, .. )

Prepend one or more items to the head of the list.

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/09/27 15:34:33  sridhar
# List element recycler.
#
#
