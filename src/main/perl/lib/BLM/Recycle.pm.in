#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Recycle;

use strict;
use warnings;

use parent qw/Bedrock::Hash/;

## no critic (ProhibitBuiltinHomonyms)

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless Bedrock::Hash->new, $class;

  $self->{'items'} = [@args];

  $self->{'index'} = 0;

  return $self;
}

########################################################################
sub push {
########################################################################
  my ( $self, @args ) = @_;

  return CORE::push @{ $self->{'items'} }, @args;
}

########################################################################
sub pop {
########################################################################
  my $self = shift;

  return CORE::pop @{ $self->{'items'} };
}

########################################################################
sub shift {
########################################################################
  my $self = shift;

  return CORE::shift @{ $self->{'items'} };
}

########################################################################
sub unshift {
########################################################################
  my ( $self, @args ) = @_;

  return CORE::unshift @{ $self->{'items'} }, @args;
}

########################################################################
sub curr {
########################################################################
  my $self = CORE::shift;

  if ( $self->{'index'} == scalar @{ $self->{'items'} } ) {
    $self->{'index'} = 0;
  }

  my @a = @{ $self->{'items'} };

  my $item = $a[ $self->{'index'} ];

  $self->{'index'}++;

  return $item;
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Recycle> - cycle through a list

=head1 SYNOPSIS

  <plugin:Recycle item1 item2 item3>

  First is <var $Recycle.curr()>

  Next item is <var $Recycle.curr()>

  Next item is <var $Recycle.curr()>

=head1 DESCRIPTION

Object for accessing a circular queue of items.

=head1 CONSTRUCTOR

 <plugin:Recycle  item ... >

Construct and return a C<BLM::Recycle> object. One or more items to be
recycled can be passed in.

=head1 METHODS

=head2 curr

Return the current item and increment the iterator. Reset the iterator
to the beginning if the next item is beyond the end of the list.

=head2 push( item )

Append one or more items to the end of the list.

=head2 pop

Remove the last element in the list and return it.

=head2 shift

Remove the first element in the list and return it.

=head2 unshift( item ) 

Prepend one or more items to the head of the list.

=head1 EXAMPLE

=over 5

=item * Create a recycler object:

  <plugin:Recycle item1 item2 item3>

=item * Extract current object

  Item is <var $Recycle.curr()>

=item * Alternate the row color in a table

  <hash:row red 1 blue 2 green 3>
  
  <plugin:Recycle --define-plugin="bgcolor" "#cccccc" "#ffffff"> 
  
  <table>
    <foreach $row>
      <tr bgcolor="<var $bgcolor.curr()>">
        <td><var $_.key> : <var $_.value></td>
     </tr>
    </foreach>
  </table>

=back

=head1 SEE ALSO

The C<var> tag's C<--toggle> option can do something similar.

=head1 AUTHOR

J. Sridhar

=cut
