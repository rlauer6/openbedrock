package BLM::Date;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Date::Calc qw(:all);

use Bedrock::Array;
use Bedrock::Constants qw(:chars);
use List::Util qw(any);

use parent qw(Bedrock::Hash);

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, @args ) = @_;

  my $self = bless {}, $class;

  my $private = {};

  $self->{'__private'} = \$private;

  # init with current date and time
  ( @args == 0 ) && do {

    @{$private}{qw(sec min hour mday mon year wday yday isdst)} = localtime;

    $private->{'mon'}++;

    $private->{'yday'}++;

    $private->{'year'} += 1900;

    return $self;
  };

  # init with days since 1900
  ( @args == 1 ) && do {

    $private->{'days_since_1900'} = $args[0];

    @{$private}{qw(year mon mday)} = Add_Delta_Days(
      1900,  # year
      1,     # month
      1,     # mday
      $private->{'days_since_1900'} - 1
    );       # delta days

    @{$private}{qw(hour min sec)} = ( 0, 0, 0 );

    return $self;
  };

  # localtime seconds_since_epoch
  ( @args == 2 ) && do {

    if ( $args[0] eq 'localtime' ) {

      @{$private}{qw(sec min hour mday mon year wday yday isdst)}
        = localtime $args[1];

      $private->{'mon'}++;

      $private->{'yday'}++;

      $private->{'year'} += 1900;
    }

    return $self;
  };

  # yy mm dd
  ( @args == 3 ) && do {

    $private->{'days_since_1900'} = Delta_Days( 1900, 1, 1, @args ) + 1;

    @{$private}{qw(year mon mday hour min sec)} = ( @args, 0, 0, 0 );

    return $self;
  };

  # yy mm dd hh
  ( @args == 4 ) && do {

    # we have ($yy, $mm, $dd, $hour) as args
    # Invoke Date::Calc's routine which does check for validity
    $private->{'days_since_1900'}
      = ( Delta_DHMS( 1900, 1, 1, 0, 0, 0, @args, 0, 0 ) )[0] + 1;

    @{$private}{qw(year mon mday hour min sec)} = ( @args, 0, 0 );
    return $self;
  };

  # yy mm dd hh mi
  ( @args == 5 ) && do {

    # we have ($yy, $mm, $dd, $hour, $min) as args
    # Invoke Date::Calc's routine which does check for validity
    $private->{'days_since_1900'}
      = ( Delta_DHMS( 1900, 1, 1, 0, 0, 0, @args, 0 ) )[0] + 1;

    @{$private}{qw(year mon mday hour min sec)} = ( @args, 0 );

    return $self;
  };

  # yy mm dd hh mi sec
  ( @args == 6 ) && do {

    # we have ($yy, $mm, $dd, $hour, $min, $secs) as args
    # Invoke Date::Calc's routine which does check for validity
    $private->{'days_since_1900'}
      = ( Delta_DHMS( 1900, 1, 1, 0, 0, 0, @args ) )[0] + 1;

    @{$private}{qw(year mon mday hour min sec)} = @args;

    return $self;
  };

  die "BLM::Date->new(@args): Invalid date\n";
}

########################################################################
sub private {
########################################################################
  my ($self) = @_;

  return ${ $self->{'__private'} };
}

########################################################################
my $weekday = sub {
########################################################################
  my ($private) = @_;

  if ( !exists $private->{'wday'} ) {

    # we count wday from 0 => Sunday, whereas Date::Calc computes
    # Day_of_Week from 1 => Monday, so we are in sync here except
    # for Day_of_Week => 7, which we must convert to wday => 0
    $private->{'wday'} = Day_of_Week( @{$private}{qw(year mon mday)} );

    if ( $private->{'wday'} == 7 ) {
      $private->{'wday'} = 0;
    }
  }

  return $private->{'wday'};
};

########################################################################
sub STORE {
########################################################################
  die "properties of this object cannot be modified\n";
}

########################################################################
sub FETCH {
########################################################################
  my ( $self, $what ) = @_;

  my $private = $self->private;

  return $private->{$what}
    if exists $private->{$what};

  return $private
    if $what eq '__private';

  for ($what) {

    # handle common requests first
    $_ eq 'DD'
      and return $private->{'DD'} = sprintf '%02d', $private->{'mday'};

    $_ eq 'MM'
      and return $private->{'MM'} = sprintf '%02d', $private->{'mon'};

    $_ eq 'YYYY'
      and return $private->{'YYYY'} = sprintf '%04d', $private->{'year'};

    $_ eq 'HH24'
      and return $private->{'HH24'} = sprintf '%02d', $private->{'hour'};

    $_ eq 'MI'
      and return $private->{'MI'} = sprintf '%02d', $private->{'min'};

    $_ eq 'SS'
      and return $private->{'SS'} = sprintf '%02d', $private->{'sec'};

    # year handling
    $_ eq 'Y'
      and return $private->{'Y'} = substr sprintf( '%04d', $private->{'year'} ), 3;

    $_ eq 'YY'
      and return $private->{'YY'} = substr sprintf( '%04d', $private->{'year'} ), 2;

    $_ eq 'YYY'
      and return $private->{'YYY'} = substr sprintf( '%04d', $private->{'year'} ), 1;

    # day handling
    $_ eq 'D' and do {

      # Return weekday (1..7) with 1 => Sunday
      if ( !exists $private->{'wday'} ) {
        $weekday->($private);
      }

      return $private->{'D'} = $private->{'wday'} + 1;
    };

    $_ eq 'DDD' and do {
      return $private->{'DDD'} = $private->{'yday'}
        if exists $private->{'yday'};

      return $private->{'DDD'}
        = Day_of_Year( @{$private}{qw(year mon mday)} );
    };

    # Return abbreviated day of the week.
    # Need some tricky calculation here since wday is (0..6) with 0 => Sunday
    # while Date::Calc considers arg to be (1..7) with 1 => Monday
    # wday for all except when wday is 0 when we pass 7
    $_ eq 'DY' and do {

      if ( !exists $private->{'wday'} ) {
        $weekday->($private);
      }

      my $arg = $private->{'wday'};

      $arg ||= 7;

      return $private->{'DY'} = Day_of_Week_Abbreviation($arg);
    };

    $_ eq 'DAY' and do {
      if ( !exists $private->{'wday'} ) {
        $weekday->($private);
      }

      my $arg = $private->{'wday'};
      $arg ||= 7;

      return $private->{'DAY'} = Day_of_Week_to_Text($arg);
    };

    /^days_since_1900|day_of_century|D_1900$/xsm and do {

      if ( !exists $private->{'days_since_1900'} ) {
        $private->{'days_since_1900'}
          = Delta_Days( 1900, 1, 1, @{$private}{qw(year mon mday)} ) + 1;
      }

      return $private->{'day_of_century'} = $private->{'D_1900'}
        = $private->{'days_since_1900'};
    };

    # week handling
    $_ eq 'IW'
      and return $private->{'IW'} = ( Week_of_Year( @{$private}{qw(year mon mday)} ) )[0];

    $_ eq 'W'
      and return $private->{'W'} = int( $private->{'mday'} / 7 ) + ( $private->{'mday'} % 7 ? 1 : 0 );

    $_ eq 'WW' and do {
      if ( !exists $private->{'DDD'} ) {
        $private->{'DDD'} = (
          exists $private->{'yday'}
          ? $private->{'yday'}
          : Day_of_Year( @{$private}{qw(year mon mday)} )
        );
      }

      return $private->{'WW'}
        = int( $private->{'DDD'} / 7 ) + ( $private->{'DDD'} % 7 ? 1 : 0 );
    };

    # month handling
    $_ eq 'MON' and do {

      if ( !exists $private->{'MONTH'} ) {
        $private->{'MONTH'} = Month_to_Text( $private->{'mon'} );
      }

      return $private->{'MON'} = sprintf '%.3s', $private->{'MONTH'};
    };

    $_ eq 'MONTH'
      and return $private->{'MONTH'} = Month_to_Text( $private->{'mon'} );

    # hour handling
    /^HH|HH12$/xsm and do {
      return $private->{'HH'} = $private->{'HH12'}
        = sprintf '%02d', $private->{'hour'} > 12
        ? $private->{'hour'} - 12
        : $private->{'hour'};
    };

    # Seconds handling
    $_ eq 'SSSSS'
      and return $private->{'SSSSS'} = $private->{'hour'} * 3600 + $private->{'min'} * 60 + $private->{'sec'};

    # meridian
    /^AM|PM$/xsm
      and return $private->{'AM'} = $private->{'PM'} = $private->{'hour'} > 12 ? 'PM' : 'AM';

    die "unknown property ($_)\n";
  }

  return $private->{$what}
    if exists $private->{$what};

  if ( any { $what eq $_ } qw{ year month day} ) {
    _day_of_century( $self, $self->{'day_of_century'} );

    return $self->{$what};
  }
  elsif ( $what eq 'day_of_century' ) {
    my $base_date = Date_to_Days( 1900, 1, 1 ) - 1;

    my $this_date
      = Date_to_Days( $self->{'year'}, $self->{'month'}, $self->{'day'} );

    $self->{'day_of_century'} = $this_date - $base_date;

    return $self->{$what};
  }
  elsif ( $what eq 'today' ) {
    my ( $year, $month, $day ) = Today();

    $self->{'year'}  = $year;
    $self->{'month'} = $month;
    $self->{'day'}   = $day;

    FETCH( $self, 'day_of_century' );

    return Date_to_Text( Today() );
  }
  elsif ( $what eq 'day_of_year' ) {
    return Day_of_Year( $self->{'year'}, $self->{'month'}, $self->{'day'} );
  }
  elsif ( $what eq 'day_of_week' ) {
    return Day_of_Week( $self->{'year'}, $self->{'month'}, $self->{'day'} );
  }
  elsif ( $what eq 'day_text' ) {
    return Day_of_Week_to_Text( Day_of_Week( $self->{'year'}, $self->{'month'}, $self->{'day'} ) );
  }
  elsif ( $what eq 'month_text' ) {
    return Month_to_Text( $self->{'month'} );
  }
}

########################################################################
sub _day_of_century {
########################################################################
  my ( $self, $value ) = @_;

  my ( $year, $month, $day, $hour, $min, $sec ) = Add_Delta_DHMS( 1900, 1, 1, 0, 0, 0, $value - 1, 0, 0, 0 );

  $self->{'year'}  = $year;
  $self->{'month'} = $month;
  $self->{'day'}   = $day;

  return $value;
}

########################################################################
sub calendar {
########################################################################
  my $self = shift;

  my @weeks;

  foreach ( split /\n/xsm, Calendar( $self->{'year'}, $self->{'mon'} ) ) {
    push @weeks, $_;
  }

  splice @weeks, 0, 3;

  my @days_of_the_week = map { uc $_ } qw(mod tue wed thu fri sat sun);

  my $cal = Bedrock::Array->new;

  foreach (@weeks) {
    my @line = unpack 'A4' x 7, $_;

    my $day = 0;

    my $w = Bedrock::Hash->new;

    foreach my $item (@line) {
      $w->{ $days_of_the_week[$day] } = $item ? 0 + $item : undef;
      $day++;
    }
    push @{$cal}, $w;
  }

  return $cal;
}

########################################################################
sub cal {
########################################################################
  my ($self) = @_;

  my @weeks;

  foreach ( split /\n/xsm, Calendar( $self->{'year'}, $self->{'mon'} ) ) {
    push @weeks, $_;
  }

  # remove and throw out three lines from top which consist of two blank lines
  # and a line with the month year echoed out.
  splice @weeks, 0, 3;

  # Object for holding the calendar
  my $cal = Bedrock::Array->new;

  foreach (@weeks) {

    # 1. Unpack each week-line
    # 2. Do an int() on each date to remove leading and trailing spaces
    # 3. Since int() returns 0 if no date in some field, make it undef to avoid printing 0's
    my @cal;
    for my $day ( unpack 'A4' x 7, $_ ) {

      if ( defined $day && length $day > 0 ) {
        push @cal, int $day;
      }
      else {
        push @cal, $EMPTY;
      }
    }

    push @{$cal}, Bedrock::Array->new(@cal);
  }

  # and return the calendar
  return $cal;
}

########################################################################
sub format_mysql {
########################################################################
  my ( $self, $format ) = @_;

  $format =~ s/%M/$self->{'MONTH'}/xsmg;
  $format =~ s/%W/$self->{'DAY'}/xsmg;
  $format =~ s/%D/&English_Ordinal($self->{'DD'})/egxsm;
  $format =~ s/%Y/$self->{'YYYY'}/xsmg;
  $format =~ s/%y/$self->{'YY'}/xsmg;
  $format =~ s/%a/$self->{'DY'}/xsmg;
  $format =~ s/%d/$self->{'DD'}/xsmg;
  $format =~ s/%e/$self->{'mday'}/xsmg;
  $format =~ s/%m/$self->{'MM'}/xsmg;
  $format =~ s/%c/$self->{'mon'}/xsmg;
  $format =~ s/%b/$self->{'MON'}/xsmg;
  $format =~ s/%j/$self->{'DDD'}/xsmg;
  $format =~ s/%H/$self->{'HH24'}/xsmg;
  $format =~ s/%k/$self->{'hour'}/xsmg;
  $format =~ s/%h/$self->{'HH'}/xsmg;
  $format =~ s/%I/$self->{'HH'}/xsmg;
  $format =~ s/%i/$self->{'SS'}/xsmg;
  $format =~ s/%r/$self->{'HH'}:$self->{'MI'}:$self->{'SS'} $self->{'AM'}/xsmg;
  $format =~ s/%T/$self->{'HH24'}:$self->{'MI'}:$self->{'SS'}/xsmg;
  $format =~ s/%s/$self->{'SS'}/igxsm;
  $format =~ s/%p/$self->{'PM'}/xsmg;
  $format =~ s/%w/$self->{'D'} - 1/egxsm;
  $format =~ s/%%/%/xsmg;

  return $format;
}

########################################################################
sub date_delta {
########################################################################
  my ( $self, $days ) = @_;

  die "Usage: \$date.date_delta(\$days)\n"
    if !defined $days;

  my $days_since_1900 = $self->{'days_since_1900'} + $days;

  return $self->new($days_since_1900);
}

########################################################################
sub localtime {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, $time ) = @_;

  return Bedrock::Array->new( localtime( $time || time ) );
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC 

C<BLM::Date> -  date manipulation

=head1 SYNOPSIS

=over 5

=item *

Initialize with current date and time.

  <plugin:Date>

=item *

Initialize with days since Jan B<0>, 1900 (I<Note that 1 day since
this date is Jan 1, 1900.>)

I<A scalar...>

  <plugin:Date $days_since_1900>

=item *

I<A specific time based on the epoch...for example a file modification time>

  <plugin:Stat $file>
  <plugin:Date 'localtime' $Stat.mtime>

=item *

Initialize with a 4-digit year, month and day of the month:

  <plugin:Date $yyyy $mm $dd>

=item *

Initialize with 4-digit year, month, day of the month, and time in 24-hour clock:

  <plugin:Date  $yyyy $mm $dd  $hh24 [ $min  $sec ]>

=back

=head1 PROPERTIES

I<All properties of the date object are read-only.>
 
Access properties of the date object like this:

  <var $Date.prop_name>

where C<prop_name> is the name of the property of interest.

The date object has the following properties. 

=over 5

=item * AM

C<$Date.AM>: Returns meridian (AM or PM)

=item * D

C<$Date.D>: Day of week (1-7, with 1 = Sunday).

=item * DAY

C<$Date.DAY>: Full name of weekday (Monday Tuesday ..).

=item * DD

C<$Date.DD>: Day of the month (01-31).

=item * DDD

C<$Date.DDD>: Day of year (1-366).

=item * DST

C<$Date.DST>: Returns 1 if Daylight Savings Time

=item * DY

C<$Date.DY>: Abbreviated name of week-day (Mon Tue ..)

=item * D_1900

C<$Date.D_1900>: Days since 1900. I<Note that value of this property is
always greater than 0 since Jan 1, 1900 is treated as day 1>

=item * HH

C<$Date.HH>: Hour of day (1-12).

=item * HH12

C<$Date.HH12>: Hour of day (1-12).

=item * HH24

C<$Date.HH24>: Hour of day (0-23).


=item * IW

C<$Date.IW>: Week of year (1-52 or 1-53) based on the ISO standard.

=item * MI

C<$Date.MI>: Minute (0-59).

=item * MM

C<$Date.MM>: Two-digit numeric abbreviation of month (01-12; JAN = 01)

=item * MON

C<$Date.MON>: Abbreviated name of month. (Jan Feb ..).

=item * MONTH

C<$Date.MONTH>: Full name of month (January .. ).

=item * PM

C<$Date.PM>: Returns meridian (AM or PM)

=item * SS

C<$Date.SS>: Second (0-59).

=item * SSSSS

C<$Date.SSSSS>: Seconds past midnight (0-86399).

=item * W

C<$Date.W>: Week of month (1-5) where week 1 starts on the first day of the month and ends on the seventh.

=item * WW

C<$Date.WW>: Week of year (1-53) where week 1 starts on the first day of the year
and continues to the seventh day of the year.

=item * Y

C<$Date.Y>: Last 1 digit of year.

=item * YY

C<$Date.YY>: Last 2 digits of year.

=item * YYY

C<$Date.YYY>: Last 3 digits of year.

=item * YYYY

C<$Date.YYYY>: Four-digit year.

=back

=head1 METHODS

The Date object supports the following methods.

=head2 format_mysql

Use this method to format a date (and time) with a format specification similar
to that supported by B<MySQL>.

  <var $Date.format_mysql($format)>

Returns a string with the date formatted as specified by C<$format>. The format string
can consist of C<printf()>-like escape sequences (a "%" followed by a character)
which are translated as described below. All other characters are copied into the
return string unchanged. Use "%%" to include a "%" in the output.

=over 4

=item *

C<%M>: Month name (January..December)  

=item *

C<%W>: Weekday name (Sunday..Saturday)

=item *

C<%D>:  Day of the month with english suffix (1st, 2nd, 3rd, etc.)

=item *

C<%Y>:  Year, numeric, 4 digits

=item *

C<%y>:  Year, numeric, 2 digits

=item *

C<%a>:  Abbreviated weekday name (Sun..Sat)

=item *

C<%d>:  Day of the month, numeric (00..31)

=item *

C<%e>:  Day of the month, numeric (0..31)

=item *

C<%m>:  Month, numeric (01..12)

=item *

C<%c>:  Month, numeric (1..12)

=item *

C<%b>:  Abbreviated month name (Jan..Dec)

=item *

C<%j>:  Day of year (001..366)

=item *

C<%H>:  Hour (00..23)

=item *

C<%k>:  Hour (0..23)

=item *

C<%h>:  Hour (01..12)

=item *

C<%I>:  Hour (01..12)

=item *

C<%i>:  Minutes, numeric (00..59)

=item *

C<%r>:  Time, 12-hour (hh:mm:ss [AP]M)

=item *

C<%T>:  Time, 24-hour (hh:mm:ss)

=item *

C<%S>:  Seconds (00..59)

=item *

C<%s>:  Seconds (00..59)

=item *

C<%p>:  AM or PM

=item *

C<%w>:  Day of the week (0=Sunday..6=Saturday)

=back

=head2 calendar

Use this method to create and return a calendar for the current year and month.
The return value from this method is an array of weeks, each week being an obj
with the properties C<MON TUE WED THU FRI SAT SUN>. The value of the property
will be the date. An example would be in order here to explain the concept more
clearly.

The following table prints out a calendar using this method of the C<$Date> object.
 <plugin:Date>

 <table>
 <tr>
   <th>Mon</th>
   <th>Tue</th>
   <th>Wed</th>
   <th>Thu</th>
   <th>Fri</th>
   <th>Sat</th>
   <th>Sun</th>
 </tr>
 
 <foreach $Date.calendar()>
 <tr>
   <td align=right><var $MON></td>
   <td align=right><var $TUE></td>
   <td align=right><var $WED></td>
   <td align=right><var $THU></td>
   <td align=right><var $FRI></td>
   <td align=right><var $SAT></td>
   <td align=right><var $SUN></td>
 </tr>
 </foreach>
 </table>

=head2 cal

Use this method for a slightly different interface to the calendar
capabilities of the date object. The return value here is an array of
weeks, each element of the array being an array of dates within the
week, starting from Monday.

With this method, it is easier to highlight the current date as shown,
whereas the C<calendar()> method might be easier to understand.

  <table>
    <tr>
      <th>Mon</th>
      <th>Tue</th>
      <th>Wed</th>
      <th>Thu</th>
      <th>Fri</th>
      <th>Sat</th>
      <th>Sun</th>
    </tr>
  
  <foreach --alias = "week" $Date.cal()>
  <tr>
    <foreach --alias = "day" $week>
      <td align=right>
  	<if $day --eq $Date.mday><b><var $day></b><else><var $day></if>
      </td>
    </foreach>
  </tr>
  </foreach>
  </table>

=head2 date_delta

Create a new date object which is C<n> days from an existing date.

 <null:delta $Date.date_delta($num_days)>

=head2 localtime

Returns a C<Bedrock::Array> containing the array elements of the Perl
C<localtime> function.

=head1 AUTHOR

BIGFOOT - bigfoot@cpan.org

J Sridhar

=cut

