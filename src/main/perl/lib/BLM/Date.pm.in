#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Date;

use strict;
use Date::Calc qw(:all);

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.06;
}

use Bedrock::Hash 1.01;
use Bedrock::Array;

@ISA = qw(Bedrock::Hash);

sub TIEHASH
{
    my $class = shift;
    my $self = bless {}, $class;
    my $private = {};
    $self->{'__private'} = \$private;

    if ( @_ == 0 ) {
	# init with current date and time
	@{$private}{qw(sec min hour mday mon year wday yday isdst)} = localtime;
	$private->{'mon'}++;
	$private->{'yday'}++;
	$private->{'year'} += 1900;
    } elsif ( @_ == 2 ) {
      if ($_[0] eq 'localtime') {
	@{$private}{qw(sec min hour mday mon year wday yday isdst)} = localtime($_[1]);
	$private->{'mon'}++;
	$private->{'yday'}++;
	$private->{'year'} += 1900;
      }
    }
    elsif (@_ == 1) {
      # init with days since 1900
      $private->{'days_since_1900'} = shift;
      @{$private}{qw(year mon mday)} = 
	    Add_Delta_Days( 1900, # year
			    1,	# month
			    1,	# mday
			    $private->{'days_since_1900'} - 1); # delta days
      @{$private}{qw(hour min sec)} = (0, 0, 0);
    } elsif ( @_ == 3 ) {
	# we have ($yy, $mm, $dd) as args
	# Invoke Date::Calc's routine which does check for validity
	$private->{'days_since_1900'} = &Delta_Days(1900, 1, 1, @_) + 1;
	@{$private}{qw(year mon mday hour min sec)} = (@_, 0, 0, 0);
    } elsif ( @_ == 4 ) {
	# we have ($yy, $mm, $dd, $hour) as args
	# Invoke Date::Calc's routine which does check for validity
	$private->{'days_since_1900'} = (&Delta_DHMS(1900, 1, 1, 0, 0, 0,
						    @_, 0, 0))[0] + 1;
	@{$private}{qw(year mon mday hour min sec)} = (@_, 0, 0);
    } elsif ( @_ == 5 ) {
	# we have ($yy, $mm, $dd, $hour, $min) as args
	# Invoke Date::Calc's routine which does check for validity
	$private->{'days_since_1900'} = (&Delta_DHMS(1900, 1, 1, 0, 0, 0,
						    @_, 0))[0] + 1;
	@{$private}{qw(year mon mday hour min sec)} = (@_, 0);
    } elsif ( @_ == 6 ) {
	# we have ($yy, $mm, $dd, $hour, $min, $secs) as args
	# Invoke Date::Calc's routine which does check for validity
	$private->{'days_since_1900'} = (&Delta_DHMS(1900, 1, 1, 0, 0, 0,
						    @_))[0] + 1;
	@{$private}{qw(year mon mday hour min sec)} = @_;
    } else {
	die "BLM::Date->new(@_): Invalid date\n";
    }

    #  At this point we should have the following valid elements
    #    year(..), mon(1..12), mday(1..31), hour(0..23), min(0..59), sec(0..59)
    #  We could also have the following elements
    #    days_since_1900(..)
    #  We can compute the following
    #    wday(0..6, with 0 = Sunday), yday (1..366)

    $self;
}

sub private
{
    ${$_[0]->{'__private'}};
}

my $weekday = sub
{
    my $private = shift;
    unless ( exists $private->{'wday'} ) {
	# we count wday from 0 => Sunday, whereas Date::Calc computes
	# Day_of_Week from 1 => Monday, so we are in sync here except
	# for Day_of_Week => 7, which we must convert to wday => 0
	$private->{'wday'} = &Day_of_Week(@{$private}{qw(year mon mday)});
	$private->{'wday'} = 0 if $private->{'wday'} == 7;
    }
    $private->{'wday'};
};

sub STORE
{
    die ref($_[0]), ": properties of this object cannot be modified (RTFM, Luke)\n";
}

sub FETCH 
{
    my $self = shift;
    my $what = shift;
    my $private = $self->private;
    return $private->{$what} if exists $private->{$what};
    return $private if $what eq '__private';

    for ($what) {
	# handle common requests first
	$_ eq 'DD' and return $private->{'DD'} = sprintf( "%02d", $private->{'mday'} );
	$_ eq 'MM' and return $private->{'MM'} = sprintf( "%02d", $private->{'mon'} );
	$_ eq 'YYYY' and return $private->{'YYYY'} = sprintf( "%04d", $private->{'year'} );
	$_ eq 'HH24' and return $private->{'HH24'} = sprintf( "%02d", $private->{'hour'} );
	$_ eq 'MI' and return $private->{'MI'} = sprintf( "%02d", $private->{'min'} );
	$_ eq 'SS' and return $private->{'SS'} = sprintf( "%02d", $private->{'sec'} );

	# year handling
	$_ eq 'Y' and return $private->{'Y'} = substr(sprintf("%04d", $private->{'year'}), 3);
	$_ eq 'YY' and return $private->{'YY'} = substr(sprintf("%04d", $private->{'year'}), 2 );
	$_ eq 'YYY' and return $private->{'YYY'} = substr(sprintf("%04d", $private->{'year'}), 1 );

	# day handling
	$_ eq 'D' and do {
	    # Return weekday (1..7) with 1 => Sunday
	    $weekday->($private) unless exists $private->{'wday'};
	    return $private->{'D'} = $private->{'wday'} + 1;
	};
	$_ eq 'DDD' and do {
	    return $private->{'DDD'} = $private->{'yday'} if exists $private->{'yday'};
	    return $private->{'DDD'} = &Day_of_Year(@{$private}{qw(year mon mday)});
	};

	# Return Abbreviated day of the week.
	# Need some tricky calculation here since wday is (0..6) with 0 => Sunday
	# while Date::Calc considers arg to be (1..7) with 1 => Monday
	# What we need to do is pass wday for all except when wday is 0 when
	# we pass 7
	$_ eq 'DY' and do {
	    $weekday->($private) unless exists $private->{'wday'};
	    my $arg = $private->{'wday'};
	    $arg = 7 unless $arg;
	    return $private->{'DY'} = &Day_of_Week_Abbreviation($arg);
	};
	$_ eq 'DAY' and do {
	    $weekday->($private) unless exists $private->{'wday'};
	    my $arg = $private->{'wday'};
	    $arg = 7 unless $arg;
	    return $private->{'DAY'} = &Day_of_Week_to_Text($arg);
	};

	/^(days_since_1900|day_of_century|D_1900)$/ and do {
	    $private->{'days_since_1900'} = &Delta_Days(1900, 1, 1, @{$private}{qw(year mon mday)}) + 1
		unless exists $private->{'days_since_1900'};
	    return $private->{'day_of_century'} = $private->{'D_1900'} = $private->{'days_since_1900'};
	};

	# week handling
	$_ eq 'IW' and return $private->{'IW'} = (&Week_of_Year(@{$private}{qw(year mon mday)}))[0];
	$_ eq 'W' and return $private->{'W'} = int($private->{'mday'} / 7)
	    + ($private->{'mday'} % 7 ? 1 : 0);
	$_ eq 'WW' and do {
	    unless ( exists $private->{'DDD'} ) {
		$private->{'DDD'} = (exists $private->{'yday'} ? $private->{'yday'}
				     :&Day_of_Year(@{$private}{qw(year mon mday)}) );
	    }
	    return $private->{'WW'} = int($private->{'DDD'} / 7)
		+ ($private->{'DDD'} % 7 ? 1 : 0);
	};

	# month handling
	$_ eq 'MON' and do {
	    $private->{'MONTH'} = &Month_to_Text($private->{'mon'}) unless exists $private->{'MONTH'};
	    return $private->{'MON'} = sprintf("%.3s", $private->{'MONTH'});
	};
	$_ eq 'MONTH' and return $private->{'MONTH'} = &Month_to_Text($private->{'mon'});

	# hour handling
	/^(HH|HH12)$/ and do {
	    return $private->{'HH'} = $private->{'HH12'} =
		sprintf("%02d", $private->{'hour'} > 12
			? $private->{'hour'} - 12 : $private->{'hour'} );
	};

	# Seconds handling
	$_ eq 'SSSSS' and return $private->{'SSSSS'} =
	    $private->{'hour'} * 3600 + $private->{'min'} * 60 + $private->{'sec'};

	# meridian
	/^(AM|PM)$/ and return $private->{'AM'} = $private->{'PM'} = $private->{'hour'} > 12 ? 'PM' : 'AM';

	die ref($self), ": unknown property ($_)\n";
    }

    return $private->{$what} if exists $private->{$what};

    if ( $what =~/^(year|month|day)$/ ) {
	_day_of_century($self, $self->{'day_of_century'});

	return $self->{$what};
    }
    elsif ($what =~/^day_of_century$/ ) {
	my $base_date = Date_to_Days(1900, 1, 1) - 1;
	my $this_date = Date_to_Days($self->{'year'}, $self->{'month'}, $self->{'day'});
	$self->{'day_of_century'} = $this_date - $base_date;

	return $self->{$what};
    }
    elsif ($what =~/^today$/) {
	my ($year, $month, $day) = Today();
    
	$self->{'year'} = $year;
	$self->{'month'} = $month;
	$self->{'day'} = $day;

	FETCH($self, 'day_of_century');

	return Date_to_Text(Today());
    }
    elsif ($what =~/^day_of_year$/) {
	return Day_of_Year($self->{'year'}, $self->{'month'}, $self->{'day'});
    }
    elsif ($what =~/^day_of_week$/) {
	return Day_of_Week($self->{'year'}, $self->{'month'}, $self->{'day'});
    }
    elsif ($what =~/^day_text$/) {
	return Day_of_Week_to_Text(Day_of_Week($self->{'year'}, $self->{'month'}, $self->{'day'}));
    }
    elsif ($what =~/^month_text$/) {
	return Month_to_Text($self->{'month'});
    }
}

sub _day_of_century
{
    my $self = shift;
    my $value = shift;

    my ($year, $month, $day, $hour,$min, $sec) = 
	Add_Delta_DHMS(1900,1,1, 0,0,0, $value-1, 0, 0, 0);
    
    $self->{'year'} = $year;
    $self->{'month'} = $month;
    $self->{'day'} = $day;
    $value;
}

sub calendar 
{
    my $self = shift;

    my @weeks;
    foreach (split( "\n", Calendar($self->{'year'}, $self->{'mon'}))) {
	push @weeks,$_;
    }
    splice @weeks, 0, 3;

    my @days_of_the_week = ('MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN');
    my $cal = Bedrock::Array->new;

    foreach (@weeks) {
	my @line = unpack "A4" x 7, $_;
	my $day = 0;
	my $w = Bedrock::Hash->new;
	foreach my $item (@line) {
	    $w->{$days_of_the_week[$day]} = $item ? 0+$item : undef;
	    $day++;
	}
	push @{$cal}, $w;
    }

    return $cal;
}

#
# Make a calendar as an array of arrays
#
sub cal
{
    my $self = shift;

    my @weeks;
    foreach (split( "\n", Calendar($self->{'year'}, $self->{'mon'}))) {
	push @weeks,$_;
    }
    # remove and throw out three lines from top which consist of two blank lines
    # and a line with the month year echoed out.
    splice @weeks, 0, 3;

    # Object for holding the calendar
    my $cal = Bedrock::Array->new;
    foreach (@weeks) {
	# 1. Unpack each week-line
	# 2. Do an int() on each date to remove leading and trailing spaces
	# 3. Since int() returns 0 if no date in some field, make it undef to avoid printing 0's
	my @cal;
	for my $day (unpack "A4" x 7, $_) {
	    if (defined($day) and length($day) > 0) {
		push @cal, int($day);
	    } else {
		push @cal, '';
	    }
	}
	push @{$cal}, Bedrock::Array->new(@cal);
    }
    # and return the calendar
    return $cal;
}

sub format_mysql
{
    my $self = shift;
    my $format = shift;

    $format =~ s/%M/$self->{'MONTH'}/g;
    $format =~ s/%W/$self->{'DAY'}/g;
    $format =~ s/%D/&English_Ordinal($self->{'DD'})/eg;
    $format =~ s/%Y/$self->{'YYYY'}/g;
    $format =~ s/%y/$self->{'YY'}/g;
    $format =~ s/%a/$self->{'DY'}/g;
    $format =~ s/%d/$self->{'DD'}/g;
    $format =~ s/%e/$self->{'mday'}/g;
    $format =~ s/%m/$self->{'MM'}/g;
    $format =~ s/%c/$self->{'mon'}/g;
    $format =~ s/%b/$self->{'MON'}/g;
    $format =~ s/%j/$self->{'DDD'}/g;
    $format =~ s/%H/$self->{'HH24'}/g;
    $format =~ s/%k/$self->{'hour'}/g;
    $format =~ s/%h/$self->{'HH'}/g;
    $format =~ s/%I/$self->{'HH'}/g;
    $format =~ s/%i/$self->{'SS'}/g;
    $format =~ s/%r/$self->{'HH'}:$self->{'MI'}:$self->{'SS'} $self->{'AM'}/g;
    $format =~ s/%T/$self->{'HH24'}:$self->{'MI'}:$self->{'SS'}/g;
    $format =~ s/%s/$self->{'SS'}/ig;
    $format =~ s/%p/$self->{'PM'}/g;
    $format =~ s/%w/$self->{'D'} - 1/eg;
    $format =~ s/%%/%/g;
    $format;
}

sub date_delta
{
    my $self = shift;
    die "Usage: \$date.date_delta(\$days)\n" unless @_ == 1;
    my $days_since_1900 = $self->{'days_since_1900'} + shift;
    return $self->new($days_since_1900);
}

sub localtime {
  my $self = shift;
  return Bedrock::Array->new(localtime($_[0]));
}

1;

=pod

=head1 PUBLIC 

C<BLM::Date> -  date manipulation

=head1 SYNOPSIS

=over 5

=item *

Initialize with current date and time.

  <plugin:Date>

=item *

Initialize with days since Jan B<0>, 1900 (I<Note that 1 day since this date
is Jan 1, 1900. This is the way C<cjconvdate()> works. So we maintain the same
behavior to avoid breaking all those applications.>):

I<A scalar...>

  <plugin:Date $days_since_1900>

=item *

I<A specific time based on the epoch...for example a file modification time>

  <plugin:Stat $file>
  <plugin:Date 'localtime' $Stat.mtime>

=item *

Initialize with a 4-digit year, month and day of the month:

  <plugin:Date $yyyy $mm $dd>

=item *

Initialize with 4-digit year, month, day of the month, and time in 24-hour clock:

  <plugin:Date  $yyyy $mm $dd  $hh24 [ $min  $sec ]>

=back

=head1 PROPERTIES

B<Note:> All properties of the date object are read-only. You may not directly
modify any property.

Access properties of the date object like this:

  <var $Date.prop_name>

where C<prop_name> is the name of the property you are looking for.

The date object has the following properties. 

=over 5

=item * AM

C<$Date.AM>: Returns meridian (AM or PM)

=item * D

C<$Date.D>: Day of week (1-7, with 1 = Sunday).

=item * DAY

C<$Date.DAY>: Full name of weekday (Monday Tuesday ..).

=item * DD

C<$Date.DD>: Day of the month (01-31).

=item * DDD

C<$Date.DDD>: Day of year (1-366).

=item DST

C<$Date.DST>: Returns 1 if Daylight Savings Time

=item * DY

C<$Date.DY>: Abbreviated name of week-day (Mon Tue ..)

=item * D_1900

C<$Date.D_1900>: Days since 1900. I<Note that value of this property is
always greater than 0 since Jan 1, 1900 is treated as day 1>

=item * HH

C<$Date.HH>: Hour of day (1-12).

=item * HH12

C<$Date.HH12>: Hour of day (1-12).

=item * HH24

C<$Date.HH24>: Hour of day (0-23).


=item * IW

C<$Date.IW>: Week of year (1-52 or 1-53) based on the ISO standard.

=item * MI

C<$Date.MI>: Minute (0-59).

=item * MM

C<$Date.MM>: Two-digit numeric abbreviation of month (01-12; JAN = 01)

=item * MON

C<$Date.MON>: Abbreviated name of month. (Jan Feb ..).

=item * MONTH

C<$Date.MONTH>: Full name of month (January .. ).

=item * PM

C<$Date.PM>: Returns meridian (AM or PM)

=item * SS

C<$Date.SS>: Second (0-59).

=item * SSSSS

C<$Date.SSSSS>: Seconds past midnight (0-86399).

=item * W

C<$Date.W>: Week of month (1-5) where week 1 starts on the first day of the month and ends on the seventh.

=item * WW

C<$Date.WW>: Week of year (1-53) where week 1 starts on the first day of the year
and continues to the seventh day of the year.

=item * Y

C<$Date.Y>: Last 1 digit of year.

=item * YY

C<$Date.YY>: Last 2 digits of year.

=item * YYY

C<$Date.YYY>: Last 3 digits of year.

=item * YYYY

C<$Date.YYYY>: Four-digit year.

=back

=head1 METHODS

The Date object supports the following methods.

=head2 format_mysql

Use this method to format a date (and time) with a format specification similar
to that supported by B<MySQL>.

  <var $Date.format_mysql($format)>

Returns a string with the date formatted as specified by C<$format>. The format string
can consist of C<printf()>-like escape sequences (a "%" followed by a character)
which are translated as described below. All other characters are copied into the
return string unchanged. Use "%%" to include a "%" in the output.

=over 4

=item *

C<%M>: Month name (January..December)  

=item *

C<%W>: Weekday name (Sunday..Saturday)

=item *

C<%D>:  Day of the month with english suffix (1st, 2nd, 3rd, etc.)

=item *

C<%Y>:  Year, numeric, 4 digits

=item *

C<%y>:  Year, numeric, 2 digits

=item *

C<%a>:  Abbreviated weekday name (Sun..Sat)

=item *

C<%d>:  Day of the month, numeric (00..31)

=item *

C<%e>:  Day of the month, numeric (0..31)

=item *

C<%m>:  Month, numeric (01..12)

=item *

C<%c>:  Month, numeric (1..12)

=item *

C<%b>:  Abbreviated month name (Jan..Dec)

=item *

C<%j>:  Day of year (001..366)

=item *

C<%H>:  Hour (00..23)

=item *

C<%k>:  Hour (0..23)

=item *

C<%h>:  Hour (01..12)

=item *

C<%I>:  Hour (01..12)

=item *

C<%i>:  Minutes, numeric (00..59)

=item *

C<%r>:  Time, 12-hour (hh:mm:ss [AP]M)

=item *

C<%T>:  Time, 24-hour (hh:mm:ss)

=item *

C<%S>:  Seconds (00..59)

=item *

C<%s>:  Seconds (00..59)

=item *

C<%p>:  AM or PM

=item *

C<%w>:  Day of the week (0=Sunday..6=Saturday)

=back

=head2 calendar

Use this method to create and return a calendar for the current year and month.
The return value from this method is an array of weeks, each week being an obj
with the properties C<MON TUE WED THU FRI SAT SUN>. The value of the property
will be the date. An example would be in order here to explain the concept more
clearly.

The following table prints out a calendar using this method of the C<$Date> object.

  <table>
  <tr>
    <th>Mon</th>
    <th>Tue</th>
    <th>Wed</th>
    <th>Thu</th>
    <th>Fri</th>
    <th>Sat</th>
    <th>Sun</th>
  </tr>
  
  <foreach $Date.calendar()>
  <tr>
    <td align=right><var $MON></td>
    <td align=right><var $TUE></td>
    <td align=right><var $WED></td>
    <td align=right><var $THU></td>
    <td align=right><var $FRI></td>
    <td align=right><var $SAT></td>
    <td align=right><var $SUN></td>
  </tr>
  </foreach>
  </table>

=head2 cal

Use this method for a slightly different interface to the calendar capabilities of
the date object. The return value here is an array of weeks, each element of the
array being an array of dates within the week, starting from Monday.

Again, an example would illustrate the picture better.
With this form, it is easier to highlight the current date as shown, whereas the previous
form could be easier to understand.

  <table>
    <tr>
      <th>Mon</th>
      <th>Tue</th>
      <th>Wed</th>
      <th>Thu</th>
      <th>Fri</th>
      <th>Sat</th>
      <th>Sun</th>
    </tr>
  
  <foreach --alias = "week" $Date.cal()>
  <tr>
    <foreach --alias = "day" $week>
      <td align=right>
  	<if $day --eq $Date.mday><b><var $day></b><else><var $day></if>
      </td>
    </foreach>
  </tr>
  </foreach>
  </table>

=head2 date_delta

Create a new date object which is C<n> days from an existing date.

  <null:delta $Date.date_delta($num_days)>

=head2 localtime

Returns a C<Bedrock::Array> containing the array elements of the perl
C<localtime> function.

=head1 AUTHOR

=over 4

=item * Rob Lauer - rlauer@signatureinfo.com

=item * J Sridhar

=back

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.14  2010/11/29 15:57:50  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.13  2010/11/20 18:40:35  rlauer
# - cleanup pod
# - document AM/PM
#
# Revision 1.12  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.11  2009/12/29 12:18:40  rlauer
# udpate docs
#
# Revision 1.10  2009/12/28 23:30:08  rlauer
# add way to instantiate based on a localtime scalar
#
# Revision 1.9  2009/12/28 20:32:32  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.8  2009/12/26 15:38:44  rlauer
# fix docs to reflect Bedrock II syntax
#
# Revision 1.7  2008/12/03 14:01:18  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.6  2008/11/25 19:04:13  rlauer
# changes based on Bedrock 2.0 migration plan
#
# Revision 1.5  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.4  2000/10/16 13:49:45  sridhar
# Fixed calendar generation to avoid some perl warnings.
#
# Revision 1.3  2000/10/06 14:50:33  sridhar
# Major revamping
# 1. Constructor can take 1 arg(days since Jan 1, 1900), 3 args(year,
# month, day), 4, 5 or 6 args(year, month, day, hour, min and sec)
# 2. Properties are similar to Oracle date format elements
# 3. The date object may not be modified once it is constructed.
# 4. Have two interfaces to the calendar capabilities, one returning an
# array of objects, and another returning an array of arrays.
# 5. Have a format_mysql() for formatting the date (and time) using
# mysql-like date format elements.
# 6. POD documentation
#
#

