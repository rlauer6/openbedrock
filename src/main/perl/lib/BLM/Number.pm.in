#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Number;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.07;
}

use TagX::Log 1.01;
use Tie::Scalar;
use TagX::Scalar;

@ISA = qw(Tie::StdScalar);

sub get_arg {
  return UNIVERSAL::isa($_[0], 'SCALAR') ? ${$_[0]} : $_[0];
}

sub add
{
    my $self = shift;
    
    return $$self + get_arg($_[0]);
}

sub minus
{
  my $self = shift;
  return $$self - get_arg($_[0]);
}

sub times
{
    my $self = shift;
    return $$self * get_arg($_[0]);
}

sub divide
{
    my $self = shift;

    return get_arg($_[0]) ? ${$self}/get_arg($_[0]) : undef;
}

sub printf
{
    my $self = shift;
    my $str = shift;
    
    $str = sprintf($str, $$self);

    return $str;
}

sub gt
{
    my $self = shift;
    my $value = get_arg($_[0]);

    $$self > $value ? 1 : 0;
}

sub lt
{
    my $self = shift;
    my $value = get_arg($_[0]);

    $$self < $value ? 1 : 0;
}

sub eq
{
    my $self = shift;
    my $value = get_arg($_[0]);

    $$self == $value ? 1 : 0;
}

sub ge
{
    my $self = shift;
    my $value = get_arg($_[0]);

    $$self >= $value ? 1 : 0;
}

sub le
{
    my $self = shift;
    my $value = get_arg($_[0]);

    $$self <= $value ? 1 : 0;
}


sub nmod
{
    my $self = shift;
    my $n = get_arg($_[0]);
    my $m = $$self;
    $m = ($m - 1)/$n;
    $m = int($m) + 1;
    
    return $m;
}

sub min 
{
    my $self = shift;
    my $arg = get_arg($_[0]);

    return (($$self < $arg ) ? $$self : $arg);
}

sub max 
{
    my $self = shift;
    my $arg = get_arg($_[0]);

    return (($$self > $arg ) ? $$self : $arg);
}

sub set {
  my $self = shift;
  die "Deprecated use of set, must be .set('value', scalar) or set(scalar)."
    if (@_ > 1) && $_[0] ne 'value';

  $$self = get_arg($_[-1]);
}

sub get {
  my $self = shift;
  die "Deprecated use of get, must be \$Number.get('value') - use \$Number instead."
    if (@_ > 1) && $_[0] ne 'value';

  return $$self;
}

sub sign {
  my $self = shift;
  my $value = shift;

  return  $$self-$value > 0 ? 1 : $$self-$value == 0 ? 0 : -1;
}

=pod

=head1 PUBLIC

C<BLM::Number> - Methods to manipulate numerics in Bedrock

=head1 DESCRIPTION

If you need to add, subtract, multipy, divide or compare some numbers use this.

=head1 OVERVIEW

C<BLM::Number> provides Bedrock pages with a limited mechanism for operating on numbers.

A number object supports basic arithmetic operations (+, -, *, /) in addition to comparison operations
(<, <=, > >=, and ==).  These operations are encapsulated in methods described below.

The methods B<do not> alter the object's value.  Repeat..the methods B<do not> alter the object's value.
You must use the C<set> method to alter the object's value.

=head1 SYNOPSIS

   <plugin:Number:nine 9>
   <plugin:Number:eight 8>
   <plugin:Number:number 0>

   <var $number.set('value', $number.add($eight.value))>
   <var $number.set('value', $number.times(15))>
   <var $number.set('value', $number.divide(2))>

   <if $number.gt(15)>
     <null $number.set('value', 15)>
   </if>

=head1 CONSTRUCTOR

  <plugin:Number [value]>

If C<value> is not provided, the C<value> property will be set to 0.

=head1 METHODS

Once again fans, B<NONE> of the methods alter the object's value, except C<set>.

=head2 add( value )

Returns the sum of the object's C<value> property and C<value>.

=head2 minus( value )

Returns the difference between the object's C<value> property and C<value>.

=head2 sign( value) 

Returns 0 if value == object's value

Returns 1 if value < object's value

Returns -1 if value > object's value

 <if $Number.sign(4) --eq "-1"><var $Number.value> is less than 4</if>
 <if $Number.sign(4) --eq "0"><var $Number.value> is equal to  4</if>
 <if $Number.sign(4) --eq "1"><var $Number.value> is great than  4</if>
  
=head2 times( value )

Returns the product of the object's C<value> property and C<value>.

=head2 divide( value )

Returns the ratio of the object's C<value> property and C<value>.

=head2 nmod( n )

Returns the result of the following formula:

     1 + int((v - 1)/n)

Where C<v> is the object's value and n is the argument passed to C<nmod>.  In a nutshell, this 
function is useful in conjunction with C<BLM::Series> in order to create an array of 
numbers to be used to segment a set.  Huh?

B<Example:> I have 99 eggs.  I can cram 10 eggs in each basket.  How many baskets do I need?

B<Answer:> 10 baskets (but I still have room for one more...)

B<Morale:> I<Don't put all your eggs in one basket.>

B<Show your work:>

     1 + int((99 - 1)/10)

=head2 max( value ) 

Exactly what you think it does.

=head2 min( value ) 

The opposite of exactly what you think C<max> does.

=head2 Comparison operators

The comparison operators return a boolean value.  The method compares the object's C<value>
property to the argument passed.  The following methods are available:

  lt - less than 
  le - less than or equal to
  gt - greater than
  ge - greater than or equal to
  eq - equal to
  ne - not equal to

  <plugin:Number 3>

  <if $Number.lt(4)>
    This number [<var $Number.value>]is less than 4
  </if>

=head1 AUTHOR

Rob Lauer - rlauer@signatureinfo.com

=cut

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.12  2010/11/15 02:26:04  rlauer
# - make PUBLIC
# - add sign()
# - minor documentation tweaks
#
# Revision 1.11  2009/12/30 00:22:55  rlauer
# - update docs
# - add ability to send Number objects as arguments
# - make sure this is compatible with previous version by providing a getter for 'value'
#
# Revision 1.10  2009/12/29 12:21:04  rlauer
# implement as a tied scalar...need to put in backward compatibiity
#
# Revision 1.9  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.8  2008/12/03 14:01:18  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.7  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.6  2001/02/07 17:33:22  rlauer
# - example had Bedrock.number instead of Bedrock.new
#
# Revision 1.5  2000/12/18 14:12:00  rlauer
# - added max(), min()
# - a little more documentation
#
# Revision 1.4  2000/11/30 14:26:07  sridhar
# Added CVS headers
#
#
