#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Number;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use TagX::Log 1.01;
use SIS::Hash 1.01;

@ISA = qw(SIS::Hash);

#
# new(number)
#
sub TIEHASH
{
    my $class = shift;
    my $val = shift;

    my $self = bless {}, $class;
    $self->{'value'} = $val;

    $self;
}

sub FETCH 
{
    my $self = shift;

    my $what = shift;

    return $self->{$what};
}


sub add
{
    my $self = shift;

    my $val = $self->{'value'};
    
    my $addthis = shift;

    $val += $addthis;

    return $val;
}

sub minus
{
    my $self = shift;

    my $val = $self->{'value'};
    $val -= shift;

    return $val;
}

sub times
{
    my $self = shift;

    my $val = $self->{'value'};
    $val *= shift;

    return $val;
}

sub divide
{
    my $self = shift;

    my $val = $self->{'value'};
    $val /= shift;

    return $val;
}

sub printf
{
    my $self = shift;

    my $str = shift;
    
    $str = sprintf($str, $self->{'value'});

    return $str;
}

sub gt
{
    my $self = shift;
    my $value = shift;

    $self->{'value'} > $value ? 1 : 0;
}

sub lt
{
    my $self = shift;
    my $value = shift;

    $self->{'value'} < $value ? 1 : 0;
}

sub eq
{
    my $self = shift;
    my $value = shift;

    $self->{'value'} == $value ? 1 : 0;
}

sub ge
{
    my $self = shift;
    my $value = shift;

    $self->{'value'} >= $value ? 1 : 0;
}

sub le
{
    my $self = shift;
    my $value = shift;

    $self->{'value'} <= $value ? 1 : 0;
}


sub nmod
{
    my $self = shift;

    my $n = shift;
    my $m = $self->{'value'};
    $m = ($m - 1)/$n;
    $m = int($m) + 1;
    
    return $m;
}

sub min 
{
    my $self = shift;
    my $arg = shift;

    return (($self->{'value'} < $arg ) ? $self->{'value'} : $arg);
}

sub max 
{
    my $self = shift;
    my $arg = shift;

    return (($self->{'value'} > $arg ) ? $self->{'value'} : $arg);
}

=head1 NAME

C<BLM::Number> - Methods to manipulate numerics in Bedrock

=head1 DESCRIPTION

If you need to add, subtract, multipy, divide or compare some numbers use this.

=head1 OVERVIEW

C<BLM::Number> provides the Bedrock scripter with an I<interim> ;-) mechanism for manipluating numbers.
Since the I<parsing police> have not yet graduated to FBI and/or secret police type tactics, they also 
know nothing about arithmetic expressions. Hence the continued need for this B<junk> BLM.

A number object supports basic arithmetic operations (+, -, *, /) in addition to comparison operations
(<, <=, > >=, and ==).  These operations are encapsulated in methods described below.

The methods B<do not> alter the object's value.  Repeat..the methods B<do not> alter the object value.
You must use the C<set> method to alter the object's value.

=head1 SYNOPSIS

   <null --define-var = "nine" $Bedrock.new("BLM::Number")>
   <null $number.set('value', 9)>

   <null --define-var = "eight" $Bedrock.new("BLM::Number", 8)>

   <var $number.set('value', $number.add($eight.value))>

   <var $number.set('value', $number.times(15))>

   <var $number.set('value', $number.divide(2))>

   <if $number.gt(15)>
     <null $number.set('value', 15)>
   </if>

=head1 CONSTRUCTOR

  <null --define-var = "number" $Bedrock.new("BLM::Number", [value])>

If C<value> is not provided, the C<value> property will be set to 0.

=head1 METHODS

Once again fans, B<NONE> of the methods alter the object's value, except C<set>.

=head2 add( value )

Returns the sum of the object's C<value> property and C<value>.

=head2 .minus( value )

Returns the difference between the object's C<value> property and C<value>.

=head2 .times( value )

Returns the product of the object's C<value> property and C<value>.

=head2 .divide( value )

Returns the ratio of the object's C<value> property and C<value>.

=head2 .nmod( n )

Returns the result of the following formula:

     1 + int((v - 1)/n)

Where C<v> is the object's value and n is the argument passed to C<nmod>.  In a nutshell, this 
function is useful in conjunction with C<BLM::Series> in order to create an array of 
numbers to be used to segment a set.  Huh?

B<Example:> I have 99 eggs.  I can cram 10 eggs in each basket.  How many baskets do I need?

B<Answer:> 10 baskets (but I still have room for one more...)

B<Morale:> I<Don't put all your eggs in one basket.>

B<Show your work:>

     1 + int((99 - 1)/10)

=head2 .max( value ) 

Exactly what you think it does.

=head2 .min( value ) 

The opposite of exactly what you think C<max> does.

=head2 Comparison operators

The comparison operators return a boolean value.  The method compares the object's C<value>
property to the argument passed.  The following methods are available:

  lt - less than 
  le - less than or equal to
  gt - greater than
  ge - greater than or equal to
  eq - equal to
  ne - not equal to

=head1 CHANGELOG

  $Log$
  Revision 1.7  2001/02/14 15:35:43  sridhar
  Added copyright and GPL notice

  Revision 1.6  2001/02/07 17:33:22  rlauer
  - example had Bedrock.number instead of Bedrock.new

  Revision 1.5  2000/12/18 14:12:00  rlauer
  - added max(), min()
  - a little more documentation


=head1 AUTHOR

Rob Lauer - rlauer@cji.com

=head1 CREDITS

No one else is responsible for this hack of a BLM...

=cut

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.7  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.6  2001/02/07 17:33:22  rlauer
# - example had Bedrock.number instead of Bedrock.new
#
# Revision 1.5  2000/12/18 14:12:00  rlauer
# - added max(), min()
# - a little more documentation
#
# Revision 1.4  2000/11/30 14:26:07  sridhar
# Added CVS headers
#
#
