#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package BLM::List;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use TagX::Log 1.01;
use SIS::Hash 1.01;

@ISA = qw(SIS::Hash);

sub TIEHASH
{
    my $class = shift;
    my $self = bless {}, $class;
    $self->{'vars'} = [];

    for (my $i = 0 ; $i < @_ ; $i++ ) {
	my $key = $_[$i++];
	if ( ref( $key ) ) {
	    die "Key (item $i) must be a scalar.\n";
	} else {
	    push @{$self->{'vars'}}, $key, $_[$i];
	}
    }

    $self;
}

sub FETCH
{
    my ($self, $key) = @_;
    my %vars = @{$self->{'vars'}};
    $vars{$key};
}

sub STORE
{
    my $self = shift;
    my ($key, $value) = @_;
    my @vars = @{$self->{'vars'}};
    for (my $i = 0; $i < @vars ; $i++ ) {
	next unless $vars[$i++] eq $key;
	$self->{'vars'}->[$i] = $value;
	return;
    }
    push @{$self->{'vars'}}, $key, $value;
}

sub FIRSTKEY
{
    my $self = shift;
    my $index = $self->{'index'} = 0;
    wantarray ?	@{$self->{'vars'}}[$index,$index+1] : $self->{'vars'}->[$index];
}

sub NEXTKEY
{
    my $self = shift;
    $self->{'index'} += 2;
    my $index = $self->{'index'};
    wantarray ? @{$self->{'vars'}}[$index,$index+1] : $self->{'vars'}->[$index];
}

sub EXISTS
{
    my ($self, $key) = @_;
    my %vars = %{$self->{'vars'}};
    exists $vars{$key};
}

sub CLEAR
{
    @{shift->{'vars'}} = ();
}

sub DELETE
{
    my ($self, $key) = @_;
    my @vars = @{$self->{'vars'}};
    my (@new, @del);
    for (my $i = 0; $i < @vars ; $i++ ) {
	if ( $vars[$i] eq $key ) {
	    $i++;
	    push @del, $vars[$i];
	    next;
	}

	push @new, $vars[$i++], $vars[$i];
    }
    $self->{'vars'} = \@new;
    SIS::Array->new(@del);
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/12/01 15:10:04  sridhar
# List -- BLM implementing the concept of an object with ordered
# properties. Stores properties in the order they were set.
#
#
