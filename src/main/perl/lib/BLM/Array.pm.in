#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Array;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw(Exporter);
}

use TagX::Log 1.01;
use SIS::Array 1.01;

#################################################################################
#
# Class Name: BLM::Array
#
# Purpose: BLM which provides general array manipulation features
#
# Notes:
#    This class BLM::Array is implemented in a special way. It is the
#    implementation of a tied array, but the underlying object is a hash.
#    This means the public sees the constructed object as an array, but
#    the private implementation sees the same object as a hash. And that
#    is not the end of the confusion. Some methods are private, meaning
#    they should never be called explicitly, and some are public, sporting
#    a public interface. Disaster awaits one who calls the private functions,
#    do not say you were not warned. These private functions are intended
#    *only* to be called by perl's tie array mechanism. Hence these functions
#    access the internals of the object in a different way than the public
#    functions. The public methods all access the object as an array.
#
#    All private functions are in UPPERCASE. This indicates they are never to
#    be called directly.
#
#################################################################################
sub TIEARRAY
{
    my $class = shift;
    die "Usage: $class->new( <ItemAlias>, ( <Array> | <Object> | <Scalar> )+ )\n"
	unless @_ >= 2;

    my $alias = shift;
    my @array;
    for my $item (@_) {
	if ( &UNIVERSAL::isa( $item, 'ARRAY' ) ) {
	    push @array, @{$item};
	} else {
	    push @array, $item;
	}
    }

    my $self = bless {}, $class;
    my $private = {'array' => \@array,
		   'alias' => $alias};
    $self->{'__private'} = \$private;
    $self;
}

sub FETCH
{
    my $self = shift;
    my $index = shift;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    return {$private->{'alias'} => $private->{'array'}->[$index]};
}

sub FETCHSIZE
{
    my $self = shift;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    return scalar(@{$private->{'array'}});
}

sub STORE
{
    my $self = shift;
    my ($index, $value) = @_;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    $private->{'array'}->[$index] = $value;
    $value;
}

sub PUSH
{
    my $self = shift;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    push @{$private->{'array'}}, @_;
}

sub POP
{
    my $self = shift;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    pop @{$private->{'array'}};
}

sub SHIFT
{
    my $self = shift;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    shift @{$private->{'array'}};
}

sub UNSHIFT
{
    my $self = shift;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    unshift @{$private->{'array'}}, @_;
}

sub SPLICE
{
    my $self = shift;
    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    splice @{$private->{'array'}}, @_;
}

#################################################################################
#
# These are the public methods which access the object as an array
#
#################################################################################

sub get		{(values(%{$_[0]->[$_[1]]}))[0]}
sub length	{return scalar(@{$_[0]})}
sub push	{my $self = shift; push @{$self}, @_}
sub pop		{pop @{$_[0]}}
sub shift	{shift @{$_[0]}}
sub unshift	{my $self = shift; unshift @{$self}, @_}
sub splice	{my $self = shift; splice @{$self}, @_}
sub join	{join( $_[1], map { (values(%{$_}))[0] } @{$_[0]})}

sub set
{
    my $self = shift;
    my ($index, $value) = @_;
    my $old = $self->[$index];
    $self->[$index] = $value;
    (values(%{$old}))[0];
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.2  2001/02/14 15:35:43  sridhar
# Added copyright and GPL notice
#
# Revision 1.1  2000/09/18 18:30:12  sridhar
# Moving some general purpose BLMs from Perl/BLM to Perl/Bedrock/BLM
#
# Revision 1.5  2000/08/17 19:02:33  sridhar
# Added join(($separator).
#
# Revision 1.4  2000/08/15 14:09:30  sridhar
# Added a get() method for getting item values in the array.
#
# Revision 1.3  2000/08/14 19:50:08  sridhar
# 1. Major rewrite -- no longer a subclass of SIS::Array since the class
# implements a tied array using a hash.
# 2. Added common array operations like push(), pop(), shift(),
# unshift() and splice().
#
# Revision 1.2  2000/08/11 13:32:53  sridhar
# Oops! there was a syntax error.
#
# Revision 1.1  2000/08/11 13:29:11  sridhar
# BLM for creating an array from a set of objects, scalars, or arrays.
#
#
#
