#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::XML;

use XML::Simple;
use XML::Parser;

use strict;

BEGIN
{
    use Exporter ();
    use Bedrock::Plugin;
    use vars	qw ($VERSION @ISA);

    $VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    @ISA	= qw (Bedrock::Plugin);
}

use UNIVERSAL qw(isa);

sub new {
  my $class = shift;
  $class = ref($class) || $class;
  my $self ={};
  bless $self, $class;

  $self->{XML} = XML::Simple->new(@_);

  $self;
}

sub XMLin {
  my $self = shift;

  return $self->{XML}->XMLin(@_);
}

sub XMLout{
  my $self = shift;

  return $self->{XML}->XMLout(@_);
}


=pod

=head1 PUBLIC

 C<BLM::XML>

=head1 SYNOPSIS

 <plugin:XML KeepRoot 1 RootName object>

 <null:tagx $XML.XMLin(($env.CONFIG_PATH+"/tagx.xml")>

 <pre>
 <trace --output $tagx>
 </pre>

=head1 DESCRIPTION

Bedrock interface to C<XML::Simple>.  

=head1 METHODS

See C<perldoc XML::Simple>

=head2 XMLin( string | path | handle, [options])

=over 5

=item string

=item string

=item handle


Either a string, or the path  to an XML file, or a file handle that contains
XML formatted data that will be converted into a Bedrock data
structure.

=item options

You probably need to experiment with the options and/or B<actually
read> the documentation for the perl module C<XML::Simple> to
understand how the XML document or string will be converted into a
Bedrock object.

See perldoc C<XML::Simple> for a complete description.

=back

=head2 XMLout( object, [options] )

=over 5

=item object

A reference to a data structure (hash or array) that will be encoded as an XML string.

=item options

See perldoc C<XML::Simple> for a complete description.

=back

=head1 NOTES

See perldoc C<XML::Simple>.

=head1 SEE OTHER

C<E<lt>varE<gt>

=cut

1;

# $Log$
# Revision 1.9  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.8  2011/07/15 19:21:19  eutl420
#  Bedrock::Plugin
#
# Revision 1.7  2011/07/15 19:16:20  eutl420
# BLM::XML is Bedrock::Plugin now
#
# Revision 1.6  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.5  2010/12/12 17:17:08  eutl420
# - remove use of Data::Dumper
#
# Revision 1.4  2010/11/29 15:57:51  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.3  2010/11/20 18:47:32  rlauer
# - cleanup pod
#
# Revision 1.2  2010/11/15 02:27:56  rlauer
# - make PUBLIC, minor documentation tweaks
#
# Revision 1.1  2010/01/03 19:23:07  rlauer
# module to output XML or parse XML
#
