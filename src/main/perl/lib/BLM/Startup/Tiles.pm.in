#!/usr/bin/perl

# $Id$

package BLM::Startup::Tiles;

use vars qw(@ISA);

use strict;

use Bedrock::Array;
use Bedrock::Hash;
use Bedrock::Log;
use BLM::SiteFactory qw(_save_tagx_apps _read_tagx_apps);

use BLM::IndexedTableHandler::Common qw( create_html_element
                                         create_label_name
                                         create_xhtml_element
					 create_xhtml_element_header
                                         create_radio_buttons
                                         create_select_list
					 create_checkbox
                                      );

@ISA = qw(Bedrock::Hash);


sub log_error
{
    my $self = shift;
    unshift @_, MSG_ERROR;
    goto &LOG_MESSAGE;
}

sub warn
{
    my $self = shift;
    unshift @_, MSG_WARNING;
    goto &LOG_MESSAGE;
}


=pod

=head1 NAME

BLM::Startup::Tiles

=head1 SYNOPSIS

  <var $tiles.form_header()>
  <var $tiles.text("lname", $input.lname, "maxlength", 20, "size", 16)>
  <var $tiles.action_button("search", "Search")>
  <var $tiles.form_footer()>

=head1 DESCRIPTION

Provides a set of methods that are (typically) used in conjunction
with the Bedrock Framework to create HTML elements.

Yes, this is yet another set of shackles & chains that some
self-proclaimed clever programmer thinks will make web development
easier.

The proof is in the pudding, which according to Bartlett's
Familiar Quotations, refers to a quote in Don Quixote - "The proof of
the pudding is the eating." The proof in whether this makes sense is
in the developing...

The idea (which of course is not new and borrows heavily from other
web development models) is to satisfy two functions when
developing Bedrock framework web applications:

=over 5

=item flow control

Since this is not a tutorial on Bedrock framework, suffice it to say
that the HTML constructed by C<BLM::Startup::Tiles> supports the flow
control model of the Bedrock framework.

A form constructed thusly:

  <var $tiles.form_header()>
  <var $tiles.text("lname", $input.lname, "maxlength", 20, "size", 16)>
  <var $tiles.action_button("search", "Search")>
  <var $tiles.form_footer()>

...along with elements of the Bedrock framework configuration are all
that is required to configure your web applications flow control.

=item HTML element construction

...by providing a complete (or nearly complete) library of easily
invoked methods for creating HTML elements that can take their class
designations from the Bedrock framework configuration.

=back

The encapsulation of "some" of the HTML constuction within a C<BLM>
object should help you start to create standardized web applications
based on Bedrock framework and give you the extensibility needed to
create customized enhancements.

=head1 METHODS

=cut

sub TIEHASH
{
    my ($class, $ctx, $config) = @_;

    my $self = bless {}, $class;
    $self->{ctx} = $ctx;
    $self->{config} = $config;

    my $framework = $ctx->{CONFIG}->{framework};
    $self->{framework} = $framework;

    unless ($framework) {
      $self->log_error("Could not find a controller object. You probably have not configured tagx_apps.xml for Bedrock frameworks or have done it improperly.");
    }

# returns the default page (either the CGI var "page" or the default home page 
#  for the application as defined in the 'tagx_apps.xml' file.
    my $page = $self->{ctx}->getInputValue("page") || $framework && $self->framework->{pages}->{default};
    $page = $self->framework->{pages}->{default} if $framework && $page eq "default";
    $self->{page} =  $page;
    
# provides a default set of class names for form elements
    if ($framework) {
      my $tiles = $framework->{tiles};

      $tiles = $framework->{pages}->{$page}->{tiles} || $tiles;
      $self->{tiles} = $tiles;
    }

    $self;
}


=pod

=head2 framework

Returns the Bedrock framework configuration object.

=cut

sub framework {
  return $_[0]->{framework};
}

# retrieves default attributes for a form element
sub get_attributes {
  my $self = shift;
  my $elem = shift;

  my %attributes;

  if (@_ > 1) {
    %attributes = @_;
  }
  else {
    %attributes = %{$_[0]} if $_[0];
  }

  unless ($attributes{$elem}) {
    $attributes{class} = $self->{tiles}->{classes}->{$elem} if exists $self->{tiles}->{classes}->{$elem};
  }

  return %attributes;
}


=pod

=head2 xhtml_element

  xhtml_element(attributes)
  xhtml_element(key, value, ...)

Creates an xhtml element.  Probably not particularly useful.

=over 5

=item attributes

See L<attributes|checkbox/attributes>

=item key
=item value

See L<key, value pairs|action_button/key>

=back

=cut

sub xhtml_element {
  my $self = shift;

  return create_xhtml_element(@_);
}

=pod

=head2 html_element

Creates an html element the hard way.  Better to use the specif methods for the element you need.

=head3 Example

  <var $tiles.html_element(

=cut




sub html_element {
  my $self = shift;

  return create_html_element(@_);
}

=pod

=head2 form

  form(form)

=cut

sub form {
    my $self = shift;
    my $form = shift;

    return sprintf("%s\n%s\n%s\n",
		   $self->form_header($self->{page}, @_),
		   $form,
		   $self->form_footer($self->{page}));
}


=pod

=head2 form_header

  form_header(attributes)
  form_header(key, value, ...)

=cut

sub form_header {
  my $self = shift;

  return create_xhtml_element_header("form", (name  => $self->{page}, "action" => "", "method" => "post"), @_);
}

=pod

=head2 form_footer


=cut

sub form_footer {
  my $self = shift;

  my $form .= create_xhtml_element("input", undef, (type => "hidden", name => "action", value => ""));
  $form .= create_xhtml_element("input", undef, (type => "hidden", name=> "page", value => $self->{page}));

  return $form."</form>";
}


=pod

=head2 radio_button

=cut

sub radio_button {
  my $self = shift;

  return create_radio_buttons(@_);

}

=pod

=head2 checkbox

  checkbox(name, value, attributes, label, value, ... )
  checkbox(name, value, attributes, array)

Creates one or more check box form elements.

=over 5

=item name

Name of the form element.

=item value

Value of the form element.  Scalar or array.

=item attributes

Hash (object) that contains a reference to the attributes for the HTML
element indexed by the keys "label" or "checkbox". For example if I
wanted to set a style for the label of the checkbox element I might do
something like:

  <null --create-object="label" "style" "font-family:monospace;font-size:9px;color:green;">
  <null --create-object="attributes" "label" $label>
  <var $tiles.checkbox("cb", $input.cb, $attributes, "Add Premium Service", 1)>

=item label

=item value

The checkbox label and value pairs. Example:

  <var $tiles.checkbox("singleton", $input.singleton, "", "On", 1)>
  <var $tiles.checkbox("pairs", $input.pairs, "", "Oragnes", 1, "Apples", 2)>

=item array

Alternately, you can send an array containing hashes where the
key/value pairs represent the label and value of the checkbox.  The
key should be C<id> and the value is C<item>.

While the example below is contrived and certainly not the best way to
create the arguments for the checkbox, it illustrates the data structure
required and the calling sequences.

=back

B<Example:>

  <null --define-array="foo">

  <foreach --define-index="idx" --start-index="1" "this" "that" "other">
    <null --create-object="tmp" "id" $idx "item" $_>
    <null $foo.push($tmp)>
  </foreach>

  <var $tiles.checkbox("foo", $input.foo, "", $foo)>

=cut

sub checkbox {
  my $self = shift;

  return create_checkbox(@_);
}



=pod

=head2 input

  input(attributes)

Generic DIY (do it yourself) input element constructor. You should probably use the other 
convenience methods that have a standard calling sequence and provide a more
compact calling sequence.

=over 5

=item attributes

See L<attributes|checkbox/attributes>

=back

=head3 Example

  <var $tiles.input("text", "value", $input.lname, "name", "lname", "maxlength", 32, "size", 16)>

=cut

sub input {
  my $self = shift;

  return create_html_element("input",
			     $self->get_attributes("input", @_));
}

=pod

=head2 select_list

  select_list(name, value, attributes, ref)
  select_list(name, value, attributes, option, value, ...)

Create an HTML select list.

=over 5

=item name

name of the form

=item value

=back

B<Example:>

  <var $tiles.form_header()>
  <var $tiles.select_list("cars", $input.cars, "", "Toyota", 1, "Chevy", 2, "Ford", 3, "Nissan", 4)>
  <var $tiles.form_footer()>

=cut

sub select_list {
  my $self = shift;
  my $name = shift;
  my $value = shift;
  my $attributes_ref = shift;

# merge any select or option attributes
  my %attributes_select;
  my %attributes_option;

  if ($attributes_ref) {
    %attributes_select = %{$attributes_ref->{select}};
    %attributes_option = %{$attributes_ref->{option}};
  }
  else {
    $attributes_ref = {};
  }

  %attributes_select = $self->get_attributes("select", %attributes_select);
  %attributes_option = $self->get_attributes("option", %attributes_option);
  $attributes_ref->{select} = \%attributes_select;
  $attributes_ref->{option} = \%attributes_option;

  return create_select_list($name, $value, $attributes_ref, @_);
}

=pod

=head2 text

  text(name, value, attributes)
  text(name, vale, key, value, ...)

=over 5

=item name

Name of the HTML element.

=item value

Default value for the text box

=item attributes

See L<attributes|checkbox/attributes>

=back

B<Example:>

  <var $tiles.text("last_name", $input.last_name)>

=cut

sub text {
  my $self = shift;
  my $name = shift;
  my $value = shift;

  return create_xhtml_element("input", undef, "type", "text",
			      "name", $name, "value", $value,
			      $self->get_attributes("text", @_)
			     );
}

=pod

=head2 button

  button(button text, attributes)
  button(button text, key, value, ... )

Create an HTML button.

  <var $tiles.button("Cancel", "onClick", "javascript:Cancel();")>

=over 5

=item button text

=item attributes

See L<attributes|checkbox/attributes>

=item key

=item value

See L<key, value pairs|action_button/key>

=back

=cut

sub button {
  my $self = shift;

  if (ref($_[1])) {
    my $value = shift;
    $_[0]->{value} = $value;
  }
  else {
    unshift @_, "value";
  }

  return create_xhtml_element("input", undef, 
			      "type", "button", 
			      $self->get_attributes("button", @_)
			      );
}


=pod

=head2 action_button

  action_button(action, button text, attributes
  action_button(action, button text, key, value, ...)

Creates an button that submits a form in a Bedrock framework application.

=over 5

=item action

A value associated with some action that is configured in your framework configuration file.

=item button text

The text to be rendered inside the button.

=item attributes

See L<attributes|checkbox/attributes>

=item key

=item value 

Key/value pairs that describe additional attributes for the HTML input
element that will render the button.  For any key, if you use the
special value of "undef" the it will be assumed that the key is a
boolean flag for the HTML element. For example:

  <var $tiles.action_button("save", "Save", "disabled", "undef")>

would disable the action button by rendering the input element as follows:

  <input type="button" disabled value="Save" onClick="javascript:document.main.action.value = 'save'; document.main.submit();"/>

=back

B<Example:>

  <var $tiles.action_button("save", "Save")>

B<Example:>

  <var $tiles.action_button("save", "Save", "onClick", "javascript:foo();")>

I<Note: In the example above the attribute "onClick" will override the default "onClick" handler supplied by the action button method.>

B<Example:>

  <null --create-object="attributes" "class" "foo" "onClick" "javascript:foo();">
  <var $tiles.action_button("save", "Save", $attributes)>

=cut

sub action_button {
  my $self = shift;
  my $action = shift;
  my $value = shift || "Submit";

  my $page = $self->{page};
  my %attributes = $self->get_attributes("button", @_);

  unless ($attributes{onClick}) {
    $attributes{onClick} = "javascript:document.$page.action.value = \'$action\'; document.$page.submit();",
  }

  return create_xhtml_element("input", undef,
			      "type", "button",
			      "onClick", $attributes{onClick},
			      "value", $value,
			      %attributes
			     );
}


=pod

=head1 NOTES

=head1 SEE ALSO

=head1 AUTHOR

Rob Lauer - rlauer@signatureinfo.com

=cut


# $Log$
# Revision 1.2  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.1  2008/11/25 14:32:30  rlauer
# added as part of Bedrock 2.0.0 reorg
#

1;
