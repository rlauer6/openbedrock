#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Config;

use strict;
use warnings;

use Bedrock qw(:booleans);
use Bedrock::BedrockConfig;
use Bedrock::Constants qw(:chars :booleans);
use English qw(-no_match_vars);

use Scalar::Util qw(reftype);

use parent -norequire => qw(Bedrock::Config);

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config ) = @_;

  my $self = bless {}, $class;

  for my $name ( $ctx->getConfigValue ) {
    $self->{$name} = $ctx->getConfigValue($name);
  }

  return $self;
}

########################################################################
sub require {  ## no critic (ProhibitBuiltinHomonyms)
########################################################################
  my ( $self, @var_list ) = @_;

  my @missing_vars;

  for my $var_name (@var_list) {
    next if defined $self->{$var_name};

    push @missing_vars, $var_name;
  }

  die sprintf "ERROR: The following variables MUST be defined in config:\n%s",
    join "\n", @missing_vars
    if @missing_vars;

  return scalar @missing_vars;
}

########################################################################
sub plugin_config {
########################################################################
  my ( $self, $name, $plugin_config ) = @_;

  my $config_path;

  if ( is_hash($plugin_config) ) {
    die "no binding\n"
      if !exists $plugin_config->{binding};

    die "no config\n"
      if !exists $plugin_config->{config};

    die "no module\n"
      if !exists $plugin_config->{module};
  }

  foreach (qw/startup plugin/) {
    $config_path = sprintf '%s.d/startup/%s.xml',
      $self->{BEDROCK_CONFIG_PATH}, $name;

    last if -e $config_path;
  }

  die "could not find $config_path\n"
    if !-e $config_path;

  if ($plugin_config) {
    return Bedrock::XML::writeXML( $plugin_config, $config_path );
  }
  else {
    return Bedrock::XML->new($config_path);
  }
}

########################################################################
sub tagx_config {
########################################################################
  my ( $self, $tagx ) = @_;

  my $config_path = sprintf '%s/tagx.xml', $self->{BEDROCK_CONFIG_PATH};

  if ( is_hash($tagx) ) {
    rename $config_path, sprintf '%s/tagx.xml~', $self->{BEDROCK_CONFIG_PATH};

    return Bedrock::XML::writeXML( $tagx, $config_path );
  }
  else {
    return Bedrock::XML->new($config_path);
  }
}

1;

__END__

=pod

=head1 PUBLIC

BLM::Startup::Config - object access to the Bedrock configuration

=head1 SYNOPSIS

 <null $config.merge("my-custom-config.xml")>

 <null $config.require("data-source")>

=head1 DESCRIPTION

Exposes Bedrock's F<tagx.xml> (and other configuration files) via the C<$config> object.

=head1 METHODS AND SUBROUTINES

=head2 plugin_config

  plugin_config( config-name, [ config ] )

Read or write a plugin configuration file.

=over 10

=item config-name

Name (only) of the configuration file.  Example: 'session'

The file must exist in the either the:

 BEDROCK_CONFIG_PATH.d/startup 
 BEDROCK_CONFIG_PATH.d/plugin

=item config

Configuration object to write. This should conform to the basic form
of plugin configuration shown below. Throws an exception if the minimum
form of plugin config is not present.

 <object>
  <scalar name="module"></scalar>
  <scalar name="binding"></scalar>
  <object name="config">
  </object>
 </object>

=back

=head2 merge

 merge(file)

Merges the given file which is assumed to be a Bedrock XML file, into
the C<$config> object possibly overwriting some values.

Bedrock will use the following algorithm find the config file
specified:

=over 5

=item 1. If the file name looks like an absolute path (i.e. it has a
'/' in the name) then look there and throw an exception if the file is not found.

=item 2. Look for the file in the current working directory. If not there, proceed to 3. else merge the file.

=item 3. Look for the file in C<$config.BEDROCK_CONFIG_PATH> or C<$config.CONFIG_PATH> whichever value is set.  If the file is not found, throw an exception, otherwise load the file.

=back

=head2 require

 require(var-list)

Throws an exception if the given configuation variables are not defined in the
configuration file.

=head2 tagx_config

 tagx_config( [tagx-config] ) 

Reads or writes the F<tagx.xml> file.  Be careful, no checking is done!

=head1 PROPERTIES

The Bedrock environment is configured using the F<tagx.xml> file.
This file is required for Bedrock to work properly.  You specify the
path where the F<tagx.xml> file will be found by setting the
C<CONFIG_PATH> or C<BEDROCK_CONFIG_PATH> environment in your Apache
configuration file or in your shell.

 SetEnv CONFIG_PATH /var/www/config
 SetEnv BEDROCK_CONFIG_PATH /var/www/config

Bedrock uses both paths to look for configuration files that are
merged to create Bedrock's operating configuration (accessible via the
C<$config> variable). I<By convention> store your configuration
somewhere apart from Bedrock's and use C<CONFIG_PATH> to indicate
your application's configuration.

Some of the properties that Bedrock uses include the configuration
variables found below.

=over 5

=item * PEBBLE_DIR

The default directory for pebbles when no path information is given in
the C<pebble tag>.

=item * SESSION_DIR

The default directory where session information can be written.
Bedrock does not actually use this directory but you may find in
useful.

=item * INCLUDE_DIR

The default directory for include files when no path information is given in the C<include> tag.

=item * BEDROCK_CONFIG_PATH

The fullly qualified path to F<tagx.xml>.

=item * APP_CONFIG

The name of the Bedrock XML application configuration file (typically
F<tagx_app.xml>).  Bedrock has a unique feature that allows you to
specify "directory" level configuration information that will
automatically be merged into the main C<$config> object.

The minimum Bedrock configuration file possible should look like this:

 <object>
 </object>

To specify directory level configuration information create sub-object
where the name of the object is the directory name.

For example:

 <object>
   <object name="/foo">
     <scalar name="bar">foobar</scalar>
   </object>
 </object>

The F<tagx_apps.xml> file above defines a configuration object for the
directory F</foo> which has 1 config variable named C<bar>.

Possible uses of this feature include:

=over 10

=item APIs

URIs representing API paths might require their own configuration
values. Use directory level configuration to isolate changes specific
to that API path.

=item User Directories

In an enviroment where URI paths might represent a user's own web directory, you can use this feature to provide them with their own unique configurations.

=item Applications

If you use URI paths to create different application, use this feature
to configure each application.

=back

=item * BEDROCK_IMAGE_DIR

This specifies the directory where Bedrock will find some graphics
that should have been installed when Bedrock was installed.

=item * BEDROCK_PEBBLE_DIR

This specifies the directory where Bedrock will find some of the
pebbles that were installed as part of Bedrock.

=item * BEDROCK_ERROR_LOCATION

This specifies the directory where Bedrock will find the
default error page it uses for reporting errors.

=item * POD_CSS_PATH

This specifies the CSS file Bedrock should use when display its
documentation.

=item * IMAGE_URL

The default image directory for Bedrock images.  Typically this is an
alias that is set in the Apache configuration file to the Bedrock's
installation directory.

  Alias /bedrock/img /usr/local/lib/bedrock/share/img

=item * ALLOW_BEDROCK_INFO

Determines whether Bedrock should expose documentation vi the
F</bedrock> URL.  Valid options are "yes" and "no".  By default, you
probably want this off in a production environment and on in a
development environment.

=item * ALLOW_SNIPPET_TAG

The C<snippet> tag is used in include a short perl snippet in the
current Bedrock page.  This practice of embedding code in the Bedrock
page is highly discouraged as Bedrock "Best Practices" dictate that
pages are assembled, not created by programs.

This is a I<guideline>, by the way, not I<dogma>.

In general you are encouraged to set this value to "yes" in a
development environment and "no" in a production environment.  Again,
good judgment and pragmatism should rule the day.

=item * MODULES

The modules entry is an array of configuration objects that specify
the system startup Plugins.  You are encouraged to leave this alone
for the most part.

=back

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut
