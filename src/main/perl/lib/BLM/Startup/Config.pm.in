#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Config;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
}

use TagX::Log;
use Bedrock::BedrockConfig;

@ISA = qw(Bedrock::Config);

sub TIEHASH {
  my $class = shift;
  my $cgi   = shift;

  my $self = bless {}, $class;
  for my $name ( $cgi->getConfigValue ) {
    $self->{$name} = $cgi->getConfigValue($name);
  }
  $self;
}

sub merge {
  my $self = shift;
  my $file = shift;

  my $newcfg = Bedrock::Config->new($file);
  for my $key ( keys %{$newcfg} ) {
    $self->{$key} = $newcfg->{$key};
  }
}

sub require {
  my $self = shift;
  my $mesg = '';

  for my $name (@_) {
    $mesg .= "    $name,\n" unless defined( $self->{$name} );
  }
  die "Sorry! The following variables MUST be defined in config: (\n" 
  . $mesg . ")\n"
  if length($mesg) > 0;
}

1;

=pod

=head1 PUBLIC

C<BLM::Startup::Config> - object access to the Bedrock configuration

=head1 SYNOPSIS

 <null $config.merge("my-custom-config.xml")>

 <null $config.require("data-source")>

=head1 DESCRIPTION

Exposes Bedrock's F<tagx.xml> via the C<$config> object.

=head1 METHODS

=head2 merge( file )

Merges the given file which is assumed to be a Bedrock XML file, into
the C<$config> object possibly overwriting some values.

Bedrock will use the following progression of rules to find the config
file specified:

=over 5

=item 1. If the file name looks like an absolute path (i.e. it has a
'/' in the name) then look there and throw an exception if the file is not found.

=item 2. Look for the file in the current working directory. If not there, proceed to 3. else merge the file.

=item 3. Look for the file in C<$config.BEDROCK_CONFIG_PATH> or C<$config.CONFIG_PATH> whichever value is set.  If the file is not found, throw an exception, otherwise load the file.

=back

=head2 require( name )

Throws an exception if the given property is not found in the
configuration file or is null.

=head1 PROPERTIES

The Bedrock environment is configured using the F<tagx.xml> file.
This file is required for Bedrock to work properly.  You specify the
path where the F<tagx.xml> file will be found by setting the
C<CONFIG_PATH> or C<BEDROCK_CONFIG_PATH> environment in your Apache
configuration file.

 SetEnv CONFIG_PATH /var/www/vhosts/sis-devl/config
 SetEnv BEDROCK_CONFIG_PATH /var/www/vhosts/sis-devl/config

Some of the properties that Bedrock uses include the configuration
variables found below.

=over 5

=item * HTML_LOGMAXSIZE

Maximum size of the Bedrock page logs.  They will be truncated once
this size is reached.

=item * LOGFILE

The name of the Bedrock log file.  This files is used to log messages
before Bedrock begins logging to the page log.

=item * LOGLEVEL

Logging level.

=over 4

=item * MSG_DEBUG

Lot's of info.

=item * MSG_WARN

Only warnings.

=item * MSG_INFO

Bare minimum.

=back

=item * HTML_LOGDIR

The directory where Bedrock will write page logs.

=item * LOGDIR

The directory where Bedrock will create its log.

=item * PEBBLE_DIR

The default directory for pebbles when no path information is given in the C<pebble tag>.

=item * SESSION_DIR

The default directory where session information can be written.
Bedrock does not actually use this directory but you may find in
useful.

=item * INCLUDE_DIR

The default directory for include files when no path information is given in the C<include> tag.

=item * BEDROCK_CONFIG_PATH

The fullly qualified path to F<tagx.xml>.

=item * APP_CONFIG

The name of the Bedrock XML application configuration file.  Bedrock has a unique
feature that allows you to specify "directory" level configuration
information that will automatically be merged into the main C<$config>
object.

The minimum Bedrock configuration file possible should look like this:

 <object>
 </object>

To specify directory level configuration information create sub-object where the name of the object is the directory name.

For example:

 <object>
   <object name="/foo">
     <scalar name="bar">foobar</scalar>
   </object>
 </object>

The F<tagx_apps.xml> file above defines a configuration object for the
directory F</foo> which has 1 config variable named C<bar>.

=item * BEDROCK_IMAGE_DIR

This specifies the directory where Bedrock will find some graphics
that should have been installed when Bedrock was installed.

=item * BEDROCK_PEBBLE_DIR

This specifies the directory where Bedrock will find some of the
pebbles that were installed as part of Bedrock.

=item * BEDROCK_ERROR_LOCATION

This specifies the directory where Bedrock will find the
default error page it uses for reporting errors.

=item * POD_CSS_PATH

This specifies the CSS file Bedrock should use when display its
documentation.

=item * IMAGE_URL

The default image directory for Bedrock images.  Typically this is an
alias that is set in the Apache configuration file to the Bedrock's
installation directory.

  Alias /bedrock/img /usr/local/lib/bedrock/share/img

=item * ALLOW_BEDROCK_INFO

Determines whether Bedrock should expose documentation vi the
F</bedrock> URL.  Valid options are "yes" and "no".  By default, you
probably want this off in a production environment and on in a
development environment.

=item * ALLOW_SNIPPET_TAG

The C<snippet> tag is used in include a short perl snippet in the
current Bedrock page.  This practice of embedding code in the Bedrock
page is highly discouraged as Bedrock "Best Practices" dictate that
pages are assembled, not created by programs.

This is a I<guideline>, by the way, not I<dogma>.

In general you are encouraged to set this value to "yes" in a
development environment and "no" in a production environment.  Again,
good judgment and pragmatism should rule the day.

=item * MODULES

The modules entry is an array of configuration objects that specify
the system startup Plugins.  You are encouraged to leave this alone
for the most part.

=back

=cut

#
# Name of Release: $Name$
# $Log$
# Revision 1.15  2012/04/13 21:22:11  eutl420
# - pod typo
#
# Revision 1.14  2011/09/15 16:05:31  eutl420
# - perl tidy
#
# Revision 1.13  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.12  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.11  2010/11/29 15:57:51  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.10  2010/11/26 16:32:33  rlauer
# - tweak documentation
#
# Revision 1.9  2010/11/23 15:00:52  rlauer
# - remove the file size check since Bedrock::Config will check for file
#   and throw exception anyway.
#
# Revision 1.8  2010/11/20 18:37:00  rlauer
# - document tagx.xml, tagx_apps.xml
# - merge error message
#
# Revision 1.7  2010/06/24 21:36:25  rlauer
# rename the Bedrock/Config.pm file to Bedrock/BedrockConfig.pm to avoid Config.pm conflict
#
# Revision 1.6  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.5  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.4  2001/02/14 15:35:46  sridhar
# Added copyright and GPL notice
#
# Revision 1.3  2000/09/18 14:43:38  sridhar
# Fix needed to successfully compile under Perl/ after moving Perl/Text to
# Perl/Bedrock/Text and some modules from Perl/SIS to Perl/Bedrock/SIS
#
# Revision 1.2  2000/07/19 13:42:48  sridhar
# Added `require' method to be able to throw exception if MUST-HAVE
# variables are not defined.
#
# Revision 1.1  2000/06/06 20:42:08  sridhar
# Bedrock loadable modules for startup
#
#
