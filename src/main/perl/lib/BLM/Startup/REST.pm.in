package BLM::Startup::REST;

use strict;
use warnings;

use Bedrock::Constants qw(:booleans :http_errors);
use Bedrock qw(:booleans slurp_json);
use Bedrock::RegExp;

use English qw(-no_match_vars);
use Carp;
use Data::Dumper;
use JSON;
use Log::Log4perl::Level;
use Scalar::Util qw(blessed);
use List::Util qw(mesh pairs);

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw(Bedrock::Hash Class::Accessor::Fast);

our $VERSION = '@PACKAGE_VERSION@';  ## no critic

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw(
    config
    context
    default_routes
    env_ok
    error
    global_config
    header
    input
    method
    path_info
    result
    routes
    status
    tagx
  )
);

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config, $tagx ) = @_;

  my $self = bless {}, $class;

  $self->set_context($ctx);

  $self->set_tagx( $tagx // {} );

  $self->set_config($config);

  # keep in mind this object may not exist because it is not pre-bound
  $self->set_input( $self->get_context->{'INPUT'} );

  $self->set_method( $ENV{REQUEST_METHOD} );

  $self->set_path_info( $ENV{PATH_INFO} || $ENV{BEDROCK_PATH_INFO} );

  $self->set_env_ok( $config->{env} && $config->{env} =~ /^y/xsmi ? $TRUE : $FALSE );

  if ( $config->{loglevel} && $config->{loglevel} eq 'debug' ) {
    $self->get_logger->level($DEBUG);
  }

  $self->set_default_routes(
    { GET => {
        '/version' => \&version,
        '/env'     => sub { return $self->get_env_ok ? \%ENV : {}; },
      }
    }
  );

  return $self;
}

########################################################################
sub find_route {
########################################################################
  my ($self) = @_;

  my $routes = $self->get_routes // {};

  my $method = $self->get_method;

  my $route_list = $routes->{$method};

  my $r = $self->_find_route($route_list);

  return $r
    if $r;

  my $default_routes = $self->get_default_routes->{$method};

  $r = $default_routes->{ $self->get_path_info };

  return $r
    if !$r || reftype($r) ne 'CODE';

  return $r->($self);
}

########################################################################
sub _find_route {
########################################################################
  my ( $self, $routes ) = @_;

  return
    if !$routes;

  my $path = $self->get_path_info();

  foreach my $r ( keys %{$routes} ) {

    my $re = regexp_compile( $routes->{$r} );

    next if $self->get_path_info !~ $re;

    my $capture_groups = regexp_capture_group();

    $self->export( %{$capture_groups} );

    return $r;
  }

  return;
}

########################################################################
sub fetch_routes {
########################################################################
  my ( $self, $routes ) = @_;

  $self->set_routes( slurp_json($routes) );

  return $self->get_routes;
}

########################################################################
sub export {
########################################################################
  my ( $self, %params ) = @_;

  # export matches
  my $tagx = $self->get_tagx;

  return
    if !$tagx || ref($tagx) !~ /tagx/xsmi;

  $tagx->param(%params);

  return;
}

########################################################################
sub routes {
########################################################################
  my ($self) = @_;

  my %route_map;

  my $routes = $self->get_routes;

  for my $r ( @{$routes} ) {
    my ( $method, $route, undef, $notes ) = @{$r};
    $method = uc $method;

    if ( !is_array( $route_map{$method} ) ) {
      $route_map{$method} = [];
    }

    push @{ $route_map{$method} }, "$route:$notes";
  }

  return \%route_map;
}

########################################################################
sub version {
########################################################################
  return { version => $VERSION };
}

########################################################################
# [ ['GET', 'foo/bar/(\d)', sub {}] ... ]
########################################################################
sub run {
########################################################################
  my ($self) = @_;

  my $routes = $self->get_routes;

  $self->get_logger->debug(
    sub {
      return sprintf "PATH_INFO: %s REQUEST_METHOD: %s routes: \n%s",
        $ENV{PATH_INFO}, $ENV{REQUEST_METHOD}, Dumper($routes);
    }
  );

  die "routes must be an array\n"
    if !is_array($routes);

  die "no routes\n"
    if !@{$routes};

  my $result;
  my $status;

  my $route;

  foreach my $r ( @{$routes} ) {

    my ( $method, $path, $sub ) = @{$r};
    $method = uc $method;

    $self->get_logger->debug("checking route ($path, $method)):  $ENV{PATH_INFO}, $ENV{REQUEST_METHOD}");

    next
      if $method ne $ENV{REQUEST_METHOD};

    my $re = regexp_compile($path);

    next if $ENV{PATH_INFO} !~ $re;

    $route = $path;

    $self->get_logger->debug("route: [$path] matches");

    my $capture_group = regexp_capture_group();

    ( $result, $status ) = $sub->($capture_group);

    last;
  }

  die "invalid route\n"
    if !$route;

  return { result => $result, status => $status };
}

########################################################################
sub raise {
########################################################################
  my ( $self, %args ) = @_;

  my $status = $args{status} // $self->get_status;

  $self->set_status($status);

  my %result = (
    status_text => $HTTP_ERRORS{$status} // 'UNKNOWN',
    status      => 'error',
    code        => $status,
    $self->get_env_ok ? ( env => \%ENV ) : (),
  );

  my $errstr = $args{error} || $self->get_error;

  $self->get_logger->error($errstr);

  my @error = split /\s*[|]\s*/xsm, $errstr;

  $result{msg} = $error[1] // $error[0];

  $self->set_result( Bedrock::Hash->new(%result) );

  if ( $self->header && ref( $self->header ) =~ /BLM::Startup::Header/xsm ) {
    $self->header->set( 'Status', $status );
  }

  return $self->get_result;
}

########################################################################
sub print_result {
########################################################################
  my ( $self, $pretty ) = @_;

  my $result = $self->get_result // {};

  $result = blessed($result) ? $result->devolve : $result;

  return JSON->new->utf8->pretty($pretty)->encode($result);
}

########################################################################
sub header {
########################################################################
  my ($self) = @_;

  return $self->get_context->{'HEADER'};
} ## end sub header

1;

__END__

## no critic (RequirePodSections)

=pod

=head1 PUBLIC

BLM::Startup::REST - Plugin to support creating or prototyping REST APIs

=head1 SYNOPSIS

  <try>
      
    <if $REST.get_method() --eq 'GET'>
    
      <!-- /(\d+) : /123 -->
      <if $REST.get_path_info() --re '^/(?<id\>\\d+)\/?'>
    
        <if $id --eq 123>
          <hash:contact name rob address '211 Southgate' >
          <null $contact.set('id', $id)>
          <null $REST.set_result($contact)>
        <else>
          <raise ('404|' + $REST.get_path_info())>
        </if>
    
      <!-- /first-letter/([:letter:]) : /api/v1/first-letter/r -->
      <elsif $REST.get_path_info() --re '^/?first-letter/(?<letter\>[[:lower:]])\/?'>
          <hash:contact name rob address '211 Southgate' >
          <null $REST.set_result($contact)>
      <else>
         <raise 'bad letter'>
      </if>
    
    <elsif $REST.get_method() --eq 'POST'>
      <null $REST.set_result($input.POSTDATA)>
    <else>
      <rais 'bad request'>
    </if>
    
    <catch 'bad (letter|request)'>
      <null:result $REST.raise(status, 400, error, $@)>
    
    <catch 'invalid session'>
      <null:result $REST.raise(status, 401, error, $@)>
    
    <catch "^(?<status\>40[0-4])(\\|?(?<message\>[^\\|]*))$">
      <null:result $REST.raise(status, $status, error, $@)>
    
    <catch>
      <null $REST.raise(status, 500, error, $@)>
  </try>
  
  <var --flush $REST.print_result(1)>
  

=head1 DESCRIPTION

Plugin designed to help create Bedrock REST APIs. You can also use
this module in a Perl script as well.

The L<SYNOPSIS> lays out one pattern for creating REST APIs in
Bedrock.  Essentially you create a cascading if/then/elsif block that
tests the method and the URI to determine the block of Bedrock code to
process.  Admittedly this is not how one I<should> create a REST API,
however it is a quick and easy way to prototype something prior to
writing a more robust script.

=head1 METHODS AND SUBROUTINES

=head2 get_method

Essentially returns C<$ENV{HTTP_METHOD}>. You can also use the request
object from the C<$bedrock> object to get the method and other
attributes of the request. See L<BLM::Startup::Bedrock>.

 <null:r $bedrock.request()>
 <null:method $r.method()>

=head2 get_path_info

Essentially returns C<$ENV{PATH_INFO}>.  You can also use the request
object from the C<$bedrock> object to get the path and other
attributes of the request. See L<BLM::Startup::Bedrock>.

 <null:r $bedrock.request()>
 <null:path_info $r.path_info()>

=head2 print_result

 print_result(pretty)

Prints the JSON representation of your result object. Set C<pretty> to
1 for pretty-printing the JSON string.

=head2 set_result

Sets the result object that will be returned in the payload. Set the
result prior to invoking C<print_result()>,

=head2 find_route

Using the pattern:

 <if $REST.get_method() --eq 'GET'>
   <if $REST.get_path_info() --re '^\/?first-letter/(?<letter\>[[:lower:]])\/?'>
   ...
   <elsif>
   ...
   </if>
 <elsif>
   ...
 </if>

...works fine, but as you can see using named capture groups can get
hairy trying to figure out how to escape things to prevent tripping up
Bedrock's parser.

To help make it easier to create routes with regular expression you
can set the C<routes> variable using the C<set_routes> method to a
hash of routes with regular expressions. Then use this method which
will return a key from that hash if any of the routes defined there
match the current path that was requested.  The pattern then becomes:

 <null:route_id $REST.find_route()>
 <if $route_id --eq 'first-letter'>
 ...
 <elsif $route_id --eq 'blah' >
 ...
 </if>

The route definition object should be a hash where the keys are the
HTTP methods your API supports and the values are hash of route ids
and regular expressions to match the routes. The regular expressions
can contain named or numbered capture groups which are exported into
into your namespace by this method. Named captured groups are exported
as that name, numbered capture groups are exported as C<$_N>.

You can define these routes in your Bedrock REST dispatcher or store
them in a configuration file.

=head3 In Your Bedrock Dispatcher

You can define the routes in the same file with your dispatching
logic. The advantage of this approach is that your routes and logic
are defined in one place making it easier to understand everything
your API does. Define the routes in what ever way works using Bedrock
tags like C<E<lt>sinkE<gt>>. Then call C<set_routes>.


 <sink:routes --json>
  {
   "GET" : {
           "id" : "^/?(?<id>[[:digit:]]+)/?$",
           "first-letter" : "^/?first-letter/(?<letter>[[:lower:]])/?"
           }
  }
 </sink>
 <null $REST.set_routes($routes)>

=head3 In A JSON file

If you would prefer to store your routes in a separate file, store
them as F<.json> files in Bedrock's configuration path. Call the
C<fetch_routes> method with the name of the file.

 <null $REST.fetch_routes('customer')>

=head2 export

Exports any named capture groups or numbered groups that are have been
found when C<find_route()> is called.

=head2 raise

 raise(args)

Populates the return payload with error information and sets the HTTP
C<Status> header. The return payload will populated as show below.

 {
    "msg" : error message
    "status" : "error",
    "status_text" : HTTP status text
    "code" : HTTP status code
 }

C<args> is a hash of arguments described below:

=over 5

=item status

HTTP status code.

=item error

Error string that will be used for the C<msg> element. If the error
string is pipe delimited was a result of your page throwing an
exception of the form "HTTP-STATUS|message" then the error string will
be C<msg> element of the returned hash will be the message portion of
the string.

    <raise ("403|invalid login")>
  ....
  <catch "^(?<status\>40[0-4])(\\|?(?<message\>[^\\|]*))$">
    <null:result $REST.raise(status, $status, error, $@)>

=back

=head1 CONFIGURATION

=head2 Plugin Configuration

Add this to your site's configuration directory.

 <object> 
   <scalar name="binding">REST</scalar> 
   <scalar name="module">BLM::Startup::REST</scalar> 
     <object name="config">
       <scalar name="env">no</scalar>
       <scalar name="loglevel">debug</scalar>
     </object>
 </object> 

Set the C<env> value in the config object to C<yes> if you want errors
to return the environment.  The default is C<no>.

Set the C<loglevel> value to debug for verbose output in the error log.

=head2 Apache Configuration

Add something like this to Apache's configuration file.

 <VirtualHost *:80>
   RewriteEngine On
   RewriteRule ^/?api/v1/(.*)$ /api.jroc/$1 [QSA,L]

   RewriteCond %{REQUEST_URI} ^/api[.]jroc
   RewriteRule ^ - [F]
 </VirtualHost>

=head1 INPUT

Input to your API is done via the C<$input> object. For query string
or application/x-www-form-urlencoded data variables will be exposed as
attributes of the C<$input> object.

 <var $input.action>

For stream data like application/json, use the POSTDATA attribute of
the input object.

 <var $input.POSTDATA>

To convert some JSON input:

 <null:data --json $input.POSTDATA>

=head1 SUBCLASSING

This method is suitable for sub-classing to create more robust REST
APIs.

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=head1 SEE ALSO

L<Bedrock::Application::Plugin>

=cut
