#!@PERL@ -w

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Session::GDBM;

use strict;

use POSIX;

use GDBM_File;
use parent qw/BLM::Startup::Session/;

# Example configuration
#     <object>
#      <scalar name="binding">session</scalar>
#      <scalar name="module">BLM::Startup::Session::GDBM</scalar>
#      <object name="config">
#       <scalar name="verbose">1</scalar>
#       <scalar name="param">session</scalar>
#       <scalar name="db_path">/mp/apache/sisdevl6/sessions/bedrock_session</scalar>
#      </object>
#     </object>

# Method which looks up session id from GDBM file and returns a hash
# ref to the session data.
# Invoked with: $config, $id
# Return: Hash ref
sub readData {
  my ( $self, $config, $id ) = @_;

  # Get the path to the DB file
  my $db = $config->{'db_path'};
  die ref($self), "->readData(): `db_path' not set in config\n" unless $db;

  # Load the DB and store it in the object
  $self->{'db'} = {};
  tie %{ $self->{'db'} }, 'GDBM_File', $db, GDBM_WRCREAT, 0644;

  # Get the data from the DBM file and return it.
  $self->{'db'}->{$id};
}

# Method which writes the data back to the GDBM file. The data is passed as a string
# and is stored with the key `id'
sub writeData {
  my $self = shift;
  my $data = shift;
  my $db   = $self->{'db'};
  my $id   = $self->{'id'};

  if $self->{'verbose'};
  $db->{$id} = $data;
  return $data;
}

sub purgeData {
  my $self = shift;
  delete $self->{'db'}->{ $self->{'id'} };
}

sub VERSION {
  $BLM::Startup::Session::GDBM::VERSION;
}

1;
