#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Session::GDBM;

use strict;

BEGIN
{
    use Exporter ();
    $BLM::Startup::Session::GDBM::VERSION = 1.03;
}

use POSIX;
use TagX::Log;
use GDBM_File;
use BLM::Startup::Session;
@BLM::Startup::Session::GDBM::ISA = qw( BLM::Startup::Session );

# Example configuration
#     <object>
#      <scalar name="binding">session</scalar>
#      <scalar name="module">BLM::Startup::Session::GDBM</scalar>
#      <object name="config">
#       <scalar name="verbose">1</scalar>
#       <scalar name="param">session</scalar>
#       <scalar name="db_path">/mp/apache/sisdevl6/sessions/bedrock_session</scalar>
#      </object>
#     </object>

# Method which looks up session id from GDBM file and returns a hash
# ref to the session data.
# Invoked with: $config, $id
# Return: Hash ref
sub readData
{
    my ($self, $config, $id) = @_;

    # Get the path to the DB file
    my $db = $config->{'db_path'};
    die ref($self), "->readData(): `db_path' not set in config\n" unless $db;

    # Load the DB and store it in the object
    $self->{'db'} = {};
    tie %{$self->{'db'}}, 'GDBM_File', $db, GDBM_WRCREAT, 0644;

    # Get the data from the DBM file and return it.
    $self->{'db'}->{$id};
}

# Method which writes the data back to the GDBM file. The data is passed as a string
# and is stored with the key `id'
sub writeData
{
    my $self = shift;
    my $data = shift;
    my $db = $self->{'db'};
    my $id = $self->{'id'};
    &log_message( undef, "Writing XML to GDB file [$db] for id = [$id]" )
	if $self->{'verbose'};
    $db->{$id} = $data;
    return $data;
}

sub purgeData
{
    my $self = shift;
    delete $self->{'db'}->{$self->{'id'}};
}

sub VERSION
{
    $BLM::Startup::Session::GDBM::VERSION;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.3  2001/02/14 15:35:47  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/11/13 14:44:47  sridhar
# 1. More log messages
# 2. Added method purgeData().
#
# Revision 1.1  2000/11/07 14:07:51  sridhar
# An implementation of Bedrock sessions which uses GDBM for
# storage. Advantage over SDBM implementation is that there is no limit
# on the amount of session data which can be stored with this module.
#
#
