package BLM::Startup::MySQLSession;

use strict;

use BLM::Startup::SQLSession;

use vars qw (@ISA );

@ISA = qw( BLM::Startup::SQLSession );

%BLM::Startup::SQLSession::SQL = (
  FETCH_LOGIN_SESSION => {
    sql => q{ select username, firstname, lastname, email, prefs 
                                                           from %s 
                                                           where login_cookie = ? 
                                                       },
    args => ['login_id']
                         },
  FETCH_SESSION => {
    sql => q{ select username, firstname, lastname, email, prefs 
                                                           from %s 
                                                           where session = ? and expires > now() 
                                                       },
    args => ['session']
                   },
  KILL_SESSION => {
    sql => q{ delete
                                                           from %s 
                                                         where session = ?
                                                       },
    args => ['session']
                  },
  LOGIN => {
    sql => q{ select username, firstname, lastname, email, prefs, session
                                                           from %s 
                                                         where username = ? and 
                                                               (password = encrypt(?, substring(password, 1, 2)) or
                                                                password = password(?)
                                                               )
                                                       },
    args => [qw{username password password}]
           },
  LOGOUT_ANON => {
    sql => q{ update %s set session = null, expires = now()
                                                           where session = ?
                                                       },
    args => ['session']
                 },
  LOGOUT_USER => {
    sql => q{ update %s set session = null, expires = now()
                                                           where username = ?
                                                       },
    args => ['username']
                 },
  LOOKUP_USER => {
    sql => q{ select username
                                                           from %s
                                                           where username = ?
                                                       },
    args => ['username']
                 },
  REGISTER => {
    sql =>
    q{ insert into %s (username, password, firstname, lastname, email, added)
                                                           values (?, encrypt(?, substring(?,1,2)), ?, ?, ?, now())
                                                       },
    args => [qw{username password password firstname lastname email}]
              },
  REMOVE_USER => {
    sql => q{ delete from %s 
                                                           where username = ? and password = encrypt(?, substring(password, 1, 2))
                                                       },
    args => [qw{username password}]
                 },

  LOGIN_SESSION_CLEANUP => {
    sql => q{ update %s set session = null, expires = now() 
                                                           where expires < now() and 
                                                                 username <> '' and username is not null
                                                       },
    args => []
                     },
  LOGIN_SESSION_SANITIZE => {
    sql => q{ update %s set prefs = null, session = null, expires = now() 
                                                           where expires < now() and 
                                                                 username <> '' and username is not null
                                                       },
    args => []
                     },
  SESSION_CLEANUP => {
    sql => q{ delete from %s 
                                                           where expires < now() and 
                                                                 (username = '' or username is null)
                                                       },
    args => []
                     },
  FETCH_EXPIRED_SESSIONS => {
    sql => q{ select session from %s 
                                                           where expires < now()
                                                       },
    args => []
                            },
  STORE_LOGIN_SESSION_BY_USERNAME => {
    sql => q{ update %s set session = ?, prefs = ?,
                                                                   expires = now() + interval ? second
                                                           where username = ?
                                                       },
    args => [qw{session prefs expires username}]
                                     },
  ,
  STORE_LOGIN_SESSION_BY_LOGIN_ID => {
    sql => q{ update %s set session = ?, expires = now() + interval ?  second
                                                           where login_cookie = ?
                                                       },
    args => [qw{session expires login_id}]
                                     },
  STORE_SESSION_INSERT => {
    sql => q{ insert into %s (added, session, prefs) values (now(), ?, ?)
                                                       },
    args => [qw{session prefs}]
                          },
  STORE_SESSION_UPDATE => {
    sql => q{ update %s set updated = null, expires = now() + interval ? second,
                                                           prefs = ?
                                                           where session = ?
                                                       },
    args => [qw{expires prefs session}]
                          },
  UPDATE_LOGIN_PASSWORD => {
    sql =>
    q{ update %s set password = encrypt(?, substring(?, 1, 2)), updated = null
                                                           where username = ?  and session = ?
                                                       },
    args => [qw{password password username session}]
                           },
  UPDATE_SESSION => {
    sql => q{ update %s set updated = null, expires = now() + interval ? second
                                                           where session = ?
                                                       },
    args => [qw{expires session}]
                    },
  UPDATE_LOGIN_SESSION => {
    sql => q{ update %s set login_cookie = ?
                                                           where username = ?
                                                       },
    args => [qw{login_id username}]
                          }
);

1;
