package BLM::Startup::Input;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock qw(:booleans);
use Bedrock::Constants qw(:chars);
use Data::Dumper;
use Scalar::Util qw(reftype);

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw(Bedrock::Hash);

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config ) = @_;

  my $self = bless {}, $class;

  $self->{config}  = $config;
  $self->{verbose} = $config->{verbose};
  $self->{vars}    = {};
  $self->{_ctx}    = $ctx;

  if ( $config->{scrubber} ) {
    eval {
      require HTML::Scrubber;

      my $cfg = $config->{scrubber};

      $self->{_html_scrubber} = HTML::Scrubber->new;

      if ( exists $cfg->{allow} ) {
        $self->scrubber->allow( split $SPACE, $cfg->{allow} );
      }

      if ( exists $cfg->{deny} ) {
        $self->scrubber->deny( split $SPACE, $cfg->{deny} );
      }
    };
  }

  my @params = $ctx->getInputValue;

  for my $key (@params) {
    my $value = $ctx->getInputValue($key);

    if ( $key ne 'POSTDATA' || $config->{scrub_all} ) {
      if ( is_array($value) ) {
        $value = [ map { $self->scrub($_) } @{$value} ];
      }
      else {
        $value = $self->scrub($value);
      }
    }

    $self->{vars}->{$key} = $value;
  }

  return $self;
}

########################################################################
sub scrub {
########################################################################
  my ( $self, $value ) = @_;

  return $self->scrubber ? $self->scrubber->scrub($value) : $value;
}

########################################################################
sub scrubber {
########################################################################
  my ($self) = @_;

  return $self->{'_html_scrubber'};
}

########################################################################
sub upload_file {
########################################################################
  my ( $self, $form_var, @args ) = @_;

  my $result = $self->{'_ctx'}->upload_file( $form_var, @args );

  my $file = $self->{$form_var};

  $self->{$form_var} = "$file";

  return $result;
}

########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;
  my $ref = $self->{'vars'}->{$key};

  return $self->{_ctx} if $key eq '_ctx';

  #-- returned arrays should always be Bedrock::Array(s)
  if ( ref($ref) && reftype($ref) eq 'ARRAY' ) {
    $ref = Bedrock::Array::Reference->new($ref);
    $self->{'vars'}->{$key} = $ref;
  }

  return $self->{'vars'}->{$key};
}

########################################################################
sub STORE {
########################################################################
  my ( $self, $key, $value ) = @_;

  return $self->{'vars'}->{$key} = $value;
}

########################################################################
sub FIRSTKEY {
########################################################################
  my ($self) = @_;

  my $a = scalar keys %{ $self->{'vars'} };

  return each %{ $self->{'vars'} };
}

########################################################################
sub NEXTKEY {
########################################################################
  my ($self) = @_;

  return each %{ $self->{'vars'} };
}

########################################################################
sub EXISTS {
########################################################################
  my ( $self, $key ) = @_;

  return exists $self->{'vars'}->{$key};
}

########################################################################
sub CLEAR {
########################################################################
  my ($self) = @_;

  return %{ $self->{'vars'} } = ();
}

########################################################################
sub DELETE {
########################################################################
  my ( $self, $key ) = @_;

  return delete $self->{'vars'}->{$key};
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::Startup::Input - provides access to HTML form variables and more!

=head1 SYNOPSIS

Access an HTML form variable named 'foo':

 <var $input.foo>

Display all of the HTML form variables:

 <foreach $input.keys()>
   FORM variable <var $_> = <var $input.get($_)><br>
 </foreach>

 <foreach $input>
   FORM variable <var $_.key> = <var $_.value><br>
 </foreach>

 <var $input.map("%s = %s").join("<br\>")>

Upload a file from the clientE<039>s computer. (C<upfile> is a form variable
of type C<FILE>):

  <if $input.upfile>
  <try>
   <null:file_info $input.upload_file('upfile')>
   Successfully uploaded file <var $file_info.file>, size: <var $file_info.size>
  <catch>
   Error uploading file <var $input.upfile>
  </try>
  </if>

  <form method="post" enctype="multipart/form-data">
  file to upload: <input type="file" name="upfile"><br>
  <input type="submit" value="submit">
  </form>


=head1 DESCRIPTION

The C<$input> object exposes HTML form variables to Bedrock pages.
The C<$input> object is implemented as a Bedrock hash, thus all of the
HTML form variables are accessible via the usual hash access methods.

For multiple HTML form variables that have the same name, for example
checkboxes, Bedrock will expose the values as an array.

Example:

  <if $input.foo_box>
  <pre>
  <trace --output $input.foo_box>
  </pre>
  </if>

  <form name="foo" method="post">
  [1] <input type="checkbox" name="foo_box" value="1"><br>
  [2] <input type="checkbox" name="foo_box" value="2"><br>
  [3] <input type="checkbox" name="foo_box" value="3"><br>
  <input type="submit" value="Submit">
  </form>

=head1 METHODS

C<$input> is a Bedrock hash, thus in addition to the methods described
below, you can use methods associated with a Bedrock hash.

=head2 upload_file( form-var-name, options ... )

Upload a file from the browser to the web server.  Returns a hash of
file information similar to the information returned by the perl
C<stat> function. (see perldoc C<stat> or C<BLM::Stat>).

  <null:file_info $input.upload_file('upfile')>

=over 5

=item * Return Values

=over 5

=item dev ino mode nlink uid gid rdev size atime mtime ctime blksize blocks

The return value of the method is a hash that will contain the same
output as the Perl function C<stat>, along with some additional meta
data associated with the file described below.

=item 'form-var-name'

Name of the file as it existed on the clientE<039>s system.

I<NOTE: The HTML form variable that contains the name of the file to
be uploaded is of type C<file>:>

  <input type="file" name="upfile">

I<Do not use the value of this variable ( for example:
C<$input.upfile> ) in pages that process the form.  Instead, the
return value of the C<upload_file()> method call will include a member
of the same name that will contain the name of the file uploaded by
the browser.>

Example:

 <null:file_info $input.upload_file('upfile')>

B<Use> C<$file_info.upfile>, B<not> C<$input.upfile> in the Bedrock page
that processes your form.  C<$file_info.upfile> will contain the name of
the file (on the client) that was uploaded by the browser.

=item content-type

The mime type of the file, as reported by the browser.

=item file

Name of the file that as it now resides on the web server.

=item cipher

Name of the cipher used to encrypt the file if C<passkey> was
given in the option list.

=back

=back

=over 5

=item * Arguments

=over 5 

=item 'form-var-name'

The name of the form variable of type C<FILE> that contains the file name to be uploaded.

=item options

Either a hash that contains the options or a list of options as described below:

=over 5

=item filename

Name you would like to give the file if not the default name as uploaded.

=item path 

The path to the upload directory where the file should be stored.
Make sure the web server is able to write to this directory by setting
the proper permissions.  

Defaults to either:

C<$config.UPLOAD_PATH> (as defined in F<tagx.xml>) or F< E<sol>tmp >

If the path does not exist, Bedrock will attempt to create the
directory.

=item content-type

Either the I<mime type> or an array reference to a list of mime types
that are acceptable.  This allows you to restrict the type of files
that are accetable to upload. If the mime type is not one of the types
in your list the method will raise an exception.

  <null:file_info $input.upload_file('upfile', content-type, 'application/pdf')>

=item cipher

The name of a cipher to use in order to encrypt the file.  If this
value is not given then the default cipher (DES) will be used if the
file is being encrypted.  Keep in mind the cipher must be installed on
your web server!

=item passkey

A C<password> to use when encrypting a file.  If this value is
present, then the file will be encrypted using PerlE<039>s C<Crypt::CBC>
module.  You can specify the cipher to use by setting the C<cipher>
option.  Keep in mind the cipher must be installed on your web server!

=back

=back

=back

=head1 SANITIZING INPUT

Form input can contain unwanted and potentially harmful input.
Consider sanitizing your input before injecting it back into a page or
using it in things like query strings.

You can do this yourself in any one of a number of ways, however,
Bedrock will strip potentially harmful HTML elements from the C<$input>
object transparently.

By default the C<$input> object filters form input through
C<HTML::Scrubber> if it is installed on your server.  The
C<BLM::Startup::Input> configuration contains a section configuring
C<HTML::Scrubber>. The C<scrubber> object can contain a C<deny> or an
C<allow> scalar that defines the HTML tags that are either denied or
those that are allowed.

Example:

  <scalar name='allow'>b i p</scalar>

...would only allow the specified HTML tags.

  <scalar name="deny">script style</scalar>

...would allow everything except the C<E<lt>scriptE<gt>> and
C<E<lt>styleE<gt>> tags.

See the C<HTML::Scrubber> documentation for more detail.

I<NOTE: Data that is streamed to your application, i.e. data that you
might access via the C<POSTDATA> element of the C<$input> object is not
scrubbed by default. If you want that data scrubbed, include a
parameter in the configuration section named C<scrub_all> and set it
to any true value.>

=head1 ENCRYPTING UPLOADED FILES

There may be times when you want to upload a file to the file server
but want to immediately encrypt the file.  Bedrock supports the
ability to encrypt the file as it is being written to disk by
specifying encyrption options to the C<upload_file()> method.

Files written in this fashion are never written to the server
I<unencrytped>.  They are I<encrypted> as the data is read from the
clientE<039>s browser and written to disk immediately in that form.
Encrypted files will include the extension C<.enc> when they are
stored on the web server.

Encryption is accomplished using the Perl module C<Crypt::CBC> which
utilizes other Perl modules (ciphers) to actually encrypt the data
using a variety of algorithms.  By default, Bedrock will use the
C<Crypt::DES> cipher.

To encrypt a file during the upload process, you specify a C<passkey> and
optionally a C<cipher> which implements the encryption algortithm.

 <null $input.upload_file('upfile', 'passkey', $session.secret_key)>

 <null $input.upload_file('upfile', 'passkey', $session.secret_key, 'cipher', 'Blowfish')>

The C<passkey> can be a B<phrase>, a B<password> or some other B<token>
that you will eventually pass to another program that decrypts the file.

Encrypted files are compatible with the encryption format used by the
I<OpenSSL> package.

Decrypt a file using C<openssl>:

  $ openssl enc -d -des-cbc -pass pass:flintstone -in myfile.pdf.enc -out myfile.pdf

Typically a C<passkey> is a combination of a password known to the
user and some other token or set of tokens known only to the server,
that are converted into a secret key.  The secret key is then used to
encrypt and decrypt the file.  

Using this technique, the client supplies a password and the server
provides its own token or password.  Together these values are used to
form the secret key that can be used to unlock the encrypted file.
Using both a client password and a server password, in addition to an
algorithm that generates the secret key can provide somewhat better
security than using a password alone.  While this is not necessarily
the most secure way of encrypting a file, it can offer a good way to
keep casual eyes off of files and allow access to files to only those
that are actually authorized.

 <plugin:SHA>

 <null:secret_key $SHA.hmac_256_base64($input.passkey, $session.passkey)>
 <null:file_info $input.upload_file('upfile', 'passkey', $secret_key)>

=head1 NOTES

The C<upload_file> method will throw exceptions if an error occurs or
if the mime type of the file is not one of the types you specify.

=head1 AUTHOR

J. Sridhar

Rob Lauer - rlauer6@comcast.net

=head1 SEE ALSO

L<CGI>

=cut
