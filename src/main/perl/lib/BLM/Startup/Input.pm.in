#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Input;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.06;
}

use TagX::Log 1.01;
use SIS::Hash 1.01;
@ISA = qw(SIS::Hash);

sub TIEHASH
{
    my ($class, $ctx, $config) = @_;
    my $self = bless {}, $class;
    $self->{'config'} = $config;
    $self->{'verbose'} = $config->{'verbose'};
    $self->{'vars'} = {};
    $self->{'ctx'} = $ctx;

    for my $key ($ctx->getInputValue) {
	$self->{'vars'}->{$key} = $ctx->getInputValue($key);
    }
    $self;
}

sub upload_file {
  my $self = shift;

  $self->{ctx}->upload_file(@_);
}

sub FETCH
{
    my ($self, $key) = @_;
    &log_message( undef, "Value for [$key]: [$self->{'vars'}->{$key}]" ) if $self->{'verbose'};
   my $ref = $self->{'vars'}->{$key};

#-- returned arrays should really be SIS::Array
    if (&UNIVERSAL::isa( $ref, 'ARRAY' )) {
        $ref = SIS::Array->new(@{$ref});
        $self->{'vars'}->{$key} = $ref;
    }

   $self->{'vars'}->{$key};
}

sub STORE
{
    $_[0]->{'vars'}->{$_[1]} = $_[2];
}

sub FIRSTKEY
{
    my $self = shift;
    my $a = scalar keys %{$self->{'vars'}};
    each %{$self->{'vars'}};
}

sub NEXTKEY
{
    each %{shift->{'vars'}};
}

sub EXISTS
{
    exists $_[0]->{'vars'}->{$_[1]};
}

sub CLEAR
{
    %{shift->{'vars'}} = ();
}

sub DELETE
{
    delete $_[0]->{'vars'}->{$_[1]};
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.8  2009/12/23 00:45:12  rlauer
# save context object
#
# Revision 1.7  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.6  2002/02/13 18:00:20  rlauer
# Force an array CGI var to be a SIS::Array
#
# Revision 1.5  2001/02/14 15:35:46  sridhar
# Added copyright and GPL notice
#
# Revision 1.4  2000/11/16 16:24:46  sridhar
# Overriding all Tie::Hash methods to do things right.
#
# Revision 1.3  2000/11/14 14:20:35  sridhar
# 1. Kicked out "*ctx*". Overrode FIRSTKEY and NEXTKEY to achieve this.
# 2. Config gets passed as the last arg to constructor. We pick up
# `verbose' from the config.
# 3. More log messages
#
# Revision 1.2  2000/10/16 13:55:56  sridhar
# Streamlining to accomodate Bedrock shell:
# 1. Module doesn't do anything about input until asked for.
# 2. Stores the context object as a private value for later unpacking of
# the CGI vars
#
# Revision 1.1  2000/06/06 20:42:08  sridhar
# Bedrock loadable modules for startup
#
#
