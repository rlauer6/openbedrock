#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package BLM::Startup::Input;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use TagX::Log 1.01;
use SIS::Hash 1.01;
@ISA = qw(SIS::Hash);

sub TIEHASH
{
    my ($class, $ctx, $config) = @_;
    my $self = bless {}, $class;
    $self->{'context'} = $ctx;
    $self->{'config'} = $config;
    $self->{'verbose'} = $config->{'verbose'};
    $self->{'vars'} = {};
    $self;
}

sub FETCH
{
    my ($self, $key) = @_;
    $self->{'vars'}->{$key} = $self->{'context'}->getInputValue($key)
	unless exists $self->{'vars'}->{$key};
    &log_message( undef, "Found value for [$key]: [$self->{'vars'}->{$key}]" )
	if $self->{'verbose'};
    $self->{'vars'}->{$key};
}

sub FIRSTKEY
{
    my $self = shift;
    unless ( exists $self->{'alldone'} ) {
	$self->{'alldone'} = 1;
	for my $key ($self->{'context'}->getInputValue) {
	    next if exists $self->{'vars'}->{$key};
	    $self->{'vars'}->{$key} = $self->{'context'}->getInputValue($key);
	}
    }
    my $a = scalar keys %{$self->{'vars'}};
    each %{$self->{'vars'}};
}

sub NEXTKEY
{
    each %{shift->{'vars'}};
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.3  2000/11/14 14:20:35  sridhar
# 1. Kicked out "*ctx*". Overrode FIRSTKEY and NEXTKEY to achieve this.
# 2. Config gets passed as the last arg to constructor. We pick up
# `verbose' from the config.
# 3. More log messages
#
# Revision 1.2  2000/10/16 13:55:56  sridhar
# Streamlining to accomodate Bedrock shell:
# 1. Module doesn't do anything about input until asked for.
# 2. Stores the context object as a private value for later unpacking of
# the CGI vars
#
# Revision 1.1  2000/06/06 20:42:08  sridhar
# Bedrock loadable modules for startup
#
#
