#!@PERL@ -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Output;

use strict;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision$ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
}

use Bedrock;
use Bedrock::Hash;

use Text::URLEncode;
use TagX::Log;

@ISA = qw(Bedrock::Hash);

sub TIEHASH {
  my ( $class, $ctx, $config ) = @_;
  my $self = bless {}, $class;
  $self->{'context'} = $ctx;
  $self->{'verbose'} = $config->{'verbose'};
  $self->{'frames'}  = [];
  $self->{'frames'}->[0] = $self->{'curframe'} = {};
  $self;
}

sub FETCH {
  my ( $self, $key ) = @_;

  my @values;
  for my $curframe ( reverse @{ $self->{'frames'} } ) {
    push @values, $curframe->{$key} if exists $curframe->{$key};
  }

  return @values > 1 ? Bedrock::Array->new(@values) : $values[0];
}

sub STORE {
  my $self = shift;
  $self->{'curframe'}->{ $_[0] } = $_[1];
}

sub FIRSTKEY {
  my $self = shift;
  my $a    = scalar keys %{ $self->{'vars'} };
  each %{ $self->{'vars'} };
}

sub NEXTKEY {
  each %{ shift->{'vars'} };
}

sub EXISTS {
  exists $_[0]->{'vars'}->{ $_[1] };
}

sub CLEAR {
  %{ shift->{'vars'} } = ();
}

sub DELETE {
  delete $_[0]->{'vars'}->{ $_[1] };
}

sub new_frame {
  my $obj      = shift;
  my $self     = tied( %{$obj} );
  my $newframe = {};
  push @{ $self->{'frames'} }, $newframe;
  $self->{'curframe'} = $newframe;
}

sub end_frame {
  my $obj  = shift;
  my $self = tied( %{$obj} );
  return unless @{ $self->{'frames'} } > 1;
  pop @{ $self->{'frames'} };
}

sub pairs {
  my $obj     = shift;
  my $self    = tied( %{$obj} );
  my $keyname = shift || 'NAME';
  my $valname = shift || 'VALUE';
  my $aref    = Bedrock::Array->new;
  for my $curframe ( @{ $self->{'frames'} } ) {
    for my $key ( keys %{$curframe} ) {
      my $href = { $keyname => $key,
                   $valname => $curframe->{$key}
                 };
      push @{$aref}, $href;
    }
  }
  $aref;
}

sub local_uri {
  my $obj  = shift;
  my $self = tied( %{$obj} );
  my $uri  = shift || $ENV{'BEDROCK_URI'};

  if ( length($uri) and $uri =~ /\?/ ) {
    $uri .= '&' unless $uri =~ /\?$/;
  }
  else {
    $uri .= '?';
  }

  for my $curframe ( @{ $self->{'frames'} } ) {
    for my $key ( keys %{$curframe} ) {
      $uri .= $key . '=' . &Text::URLEncode::Encode( $curframe->{$key} ) . '&';
    }
  }

  if (@_) {
    my %args = @_;
    for my $key ( keys %args ) {
      $uri .= $key . '=' . &Text::URLEncode::Encode( $args{$key} ) . '&';
    }
  }

  $uri =~ s/\&$//;

  $uri;
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.10  2013/05/10 15:53:27  rlauer
# - use Bedrock, use Text::URLEncode in order to avoid duplicate symbol warnings (encode, etc)
#
# Revision 1.9  2011/09/15 16:05:31  eutl420
# - perl tidy
#
# Revision 1.8  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.7  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.6  2010/12/12 16:31:40  eutl420
# - use Bedrock::Text::URLEncode
#
# Revision 1.5  2010/11/29 15:57:51  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.4  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.3  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.2  2001/02/14 15:35:46  sridhar
# Added copyright and GPL notice
#
# Revision 1.1  2000/12/15 15:48:26  sridhar
# Output startup module: currently has some alpha-level routines for
# making local URIs
#
#
