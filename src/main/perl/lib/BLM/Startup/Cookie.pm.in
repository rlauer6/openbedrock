#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Cookie;

use strict;
use warnings;

use parent qw(Bedrock::Hash);

use Bedrock::Constants qw(:chars);

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config ) = @_;

  my $self = bless {}, $class;

  for my $name ( $ctx->getCookieValue ) {
    $self->{$name} = $ctx->getCookieValue($name);
  }

  $self->{ctx} = $ctx;

  return $self;
}

########################################################################
sub send_cookie {
########################################################################
  my ( $self, $name, @args ) = @_;

  my $context = $self->{ctx};

  my %cookie_value;

  if ( ref $args[0] ) {
    %cookie_value = %{ shift @args };
  }
  else {
    %cookie_value = @args;
  }

  my @cookie;

  $cookie_value{path} //= $SLASH;

  push @cookie, sprintf '%s=%s;', $name, $cookie_value{value};
  push @cookie, sprintf 'path=%s;', $cookie_value{path};

  if ( $cookie_value{domain} && length $cookie_value{domain} ) {
    push @cookie, sprintf 'domain=%s;', $cookie_value{domain};
  }

  if ( exists $cookie_value{expires} ) {
    my $gmtime = gmtime time + $cookie_value{expires};

    my $expiry = POSIX::strftime( '%a, %d-%b-%Y %T GMT', $gmtime );

    push @cookie, sprintf 'expires=%s;', $expiry;
  }

  my $header = join $SPACE, @cookie;

  return $context->setCookieValue($header);
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::Startup::Cookie - Retrieve or send cookies

=head1 SYNOPSIS

  <null $cookie.send_cookie("pecan", "value", "1", "expires", 3600)>

  <var $cookie.pecan>

=head1 DESCRIPTION

Retrieve or set HTTP cookies.

=head1 METHODS AND SUBROUTINES

=head2 send_cookie(name, options)

Sets the cookie in the HTTP header.  B<name> is the name of the
cookie.  B<options> are key/value pairs.  Possible options include:

=over 5

=item * value

Value of the cookie.

=item * expires

Number of seconds after which the cookie will expire.

=item * domain

The domain name for which the cookie is valid.

=item * path 

The path for which the cookie is valid.

=back

=head1 AUTHOR

Jay Sridhar

=cut
