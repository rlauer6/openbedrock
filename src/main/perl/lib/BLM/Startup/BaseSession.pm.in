#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::BaseSession;

use parent qw(Bedrock::Hash);

use strict;
use warnings;

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

use Carp;
use Digest::MD5;
use POSIX qw(strftime);
use English qw(-no_match_vars);
use File::Path;
use File::Temp qw(tempfile);
use Data::Dumper;
use List::Util qw(pairs any);
use JSON::PP;

use Bedrock::XML;

# +---------------------------------------------------------------+
# | ->CONNECT( %options )                                         |
# |                                                               |
# | config      => config object from tagx.xml                    |
# |                                                               |
# | Purpose: perform any database connection ritual required.     |
# |          This method will be called when the session object   |
# |          is instantiated.                                     |
# | Returns: none                                                 |
# +---------------------------------------------------------------+
sub CONNECT {
  my ( $self, @args ) = @_;

  return;
}

# +---------------------------------------------------------------+
# | ->DISCONNECT( %options )                                      |
# |                                                               |
# | config => configuration object                                |
# |                                                               |
# | Purpose: perform any database disconnect ritual required.     |
# |          This function will be called from the DESTROY        |
# |          method of the session object.                        |
# | Returns: none                                                 |
# +---------------------------------------------------------------+
sub DISCONNECT {
  my ( $self, @args ) = @_;

  return;
}

# +---------------------------------------------------------------+
# | ->FETCH_SESSION( %options )                                   |
# |                                                               |
# | config   => configuration object                              |
# | session  => username                                          |
# |                                                               |
# | Purpose: This function retrieves the session data based on a  |
# |          session identifier.                                  |
# | Returns: reference to session data if successful              |
# +---------------------------------------------------------------+
sub FETCH_SESSION {
  my ( $self, @args ) = @_;

  return;
}

# +---------------------------------------------------------------+
# | ->STORE_SESSION( %options )                                   |
# |                                                               |
# | session => session-id                                         |
# | new     => 1 indicates that the session is new                |
# | expires => expiry-time                                        |
# | data    => ref(session-data)                                  |
# | config  => configuration object                               |
# | verbose => 0/1                                                |
# |                                                               |
# | Purpose: This function is called prior to destruction of the  |
# |          session object to give the implementation a chance   |
# |          to save the session data.                            |
# | Returns: none                                                 |
# +---------------------------------------------------------------+
sub STORE_SESSION {
  my ( $self, @args ) = @_;

  return;
}

# +---------------------------------------------------------------+
# | ->KILL_SESSION( %options )                                    |
# |                                                               |
# | session => session-id                                         |
# | config  => configuration object                               |
# |                                                               |
# | Purpose: delete a session from table                          |
# | Returns: 1 if delete is successful                            |
# +---------------------------------------------------------------+
sub KILL_SESSION {
  my ( $self, %options ) = @_;

  return;
}

########################################################################
sub clear {
########################################################################
  my ($obj) = @_;

  return %{$obj} = ();
}

########################################################################
sub kill_session {
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  my ( $verbose, $ctx, $config, $session )
    = @{$self}{qw(verbose ctx config session)};

  $self->{data} = {};

  if ( !$config->{cookieless_sessions} ) {

    # Delete the cookie
    $self->cookie(
      $self->{name},
      value   => 'killed',
      expires => -864_000,
    );

    $self->send_cookie;
  }

  return $self->KILL_SESSION(
    session => $session,
    config  => $config,
  );
}

########################################################################
sub create_session_dir {
########################################################################
  my ( $obj, $sub_dir ) = @_;

  $sub_dir //= q{};

  my $self = tied %{$obj};

  my $session_id = $self->{'session'};

  my ( $verbose, $ctx, $config ) = @{$self}{qw(verbose ctx config)};
  my $session_dir = $ctx->{'CONFIG'}->{'SESSION_DIR'};

  die "No SESSION_DIR defined.\n"
    if !$session_dir;

  $session_dir .= "/$session_id";

  if ( !-d "$session_dir/$sub_dir" ) {
    eval { mkpath("$session_dir/$sub_dir"); };

    die "Unable to create $session_dir/$sub_dir\n"
      if $EVAL_ERROR;
  }

  return "$session_dir/$sub_dir";
}

########################################################################
sub cleanup_session_dir {
########################################################################
  my ( $self, @args ) = @_;

  if ( @args > 0 ) {
    @args = ( 'cleanup_sesion_dir', $args[0] ? 'yes' : 'no' );
  }
  else {
    @args = 'cleanup_sesion_dir';
  }

  return $self->config(@args);
}

########################################################################
sub create_session_tempfile {
########################################################################
  my ( $obj, $template, %options ) = @_;

  my $self = tied %{$obj};

  my $session_id = $self->{'session'};

  my ( $verbose, $ctx, $config ) = @{$self}{qw(verbose ctx config)};

  my $session_dir = $ctx->{'CONFIG'}->{'SESSION_DIR'};

  die "No SESSION_DIR defined.\n"
    if !$session_dir;

  $session_dir .= "/$session_id";

  if ( !-d $session_dir ) {
    $obj->create_session_dir($session_dir);
  }

  my %local_options;

  if ( $options{DIR} ) {
    $session_dir .= $options{DIR};
  }

  $local_options{DIR} = $session_dir;

  if ( exists $options{SUFFIX} ) {
    $local_options{SUFFIX} = $options{SUFFIX};
  }

  my ( $fh, $filename ) = tempfile( $template, %local_options );

  return Bedrock::Array->new( $fh, $filename );
}

########################################################################
sub config {
########################################################################
  my ( $obj, @args ) = @_;

  my $self = tied %{$obj};

  my ( $verbose, $ctx, $config ) = @{$self}{qw(verbose ctx config)};

  if ( @args > 1 ) {
    return $config->{ $args[0] } = $args[1];
  }
  else {
    return $config->{ $args[0] };
  }
}

########################################################################
sub cookieless_session {
########################################################################
  my ( $obj, $id ) = @_;

  my $self = tied %{$obj};

  my ( $verbose, $ctx, $config ) = @{$self}{qw(verbose ctx config)};

  # don't allow someone to access a stale session
  $self->SESSION_CLEANUP( config => $self->{config} );

  if ($id) {
    $self->{'new_session'} = 0;
  }

  $self->{'session'} = $id || $self->{'session'};
  $self->readData($id);

  $config->{'cookieless_sessions'} = 1;

  # kill the cookie if cookies are enabled, since on instantiation,
  # UserSession ($session) will create a cookie
  $self->cookie(
    $self->{'name'},
    'value'   => 'killed',
    'expires' => -864_000
  );

  return $self->send_cookie;
}

########################################################################
sub cookie {
########################################################################
  my ( $self, $name, @args ) = @_;

  my %cookies = ref $args[0] ? %{ $args[0] } : @args;

  $self->{'cookies'} //= {};
  $self->{'cookies'}->{$name} //= {};

  my $cref = $self->{'cookies'}->{$name};

  foreach my $p ( pairs %cookies ) {
    my ( $key, $value ) = @{$p};
    $cref->{$key} = $value;
  }

  return;
}

########################################################################
sub digest {
########################################################################
  my $md5 = Digest::MD5->new;

  my @seed = ( time, $ENV{REMOTE_ADDR}, $PID, rand );

  $md5->add( sprintf '%012d:%20s:%08d:%.10f', @seed );

  return $md5->hexdigest;
}

sub expiry {
  my ($expires) = @_;

  return if !$expires;

  return POSIX::strftime( '%a, %d-%b-%Y %T GMT', gmtime time + $expires );
}

########################################################################
sub send_cookie {
########################################################################
  my ($self) = @_;

  return
    if !$self->{cookies};

  my $header;

  for my $name ( keys %{ $self->{cookies} } ) {
    my %cookie = %{ $self->{cookies}->{$name} };

    $cookie{expires} = expiry( $cookie{expires} );
    $cookie{path} //= q{/};
    $cookie{SameSite} = 'none';

    my @cookie = map { "$_=" . $cookie{$_} }
      grep { defined $cookie{$_} } qw(path domain expires SameSite);

    $header = join q{; }, "$name=$cookie{value}", @cookie, 'Secure;';

    $self->{ctx}->cgi_header_out( 'Set-Cookie' => $header );
  }

  return;
}

########################################################################
sub startSession {
########################################################################
  my ( $self, $config ) = @_;

  $self->{'config'} = $config;

  return $self->CONNECT( config => $config );
}

########################################################################
sub newSessionID {
########################################################################
  my ($self) = @_;

  my $config = $self->{'config'};
  my $ctx    = $self->{'ctx'};
  my $id     = $self->{'session'} = digest();

  my $secs = $config->{'cookie'}->{'expiry_secs'} || 86_400;
  $self->{'expires'} = $secs;

  if ( !$config->{'cookieless_sessions'} ) {

    # Set the cookie header
    $self->cookie(
      $self->{'name'},
      'value'   => $id,
      'expires' => $secs
    );

    $self->send_cookie;
  }

  return $id;
}

########################################################################
sub newSession {
########################################################################
  my ($self) = @_;

  $self->newSessionID;

  $self->{'new_session'} = 1;
  $self->{'data'}        = { 'prefs' => {} };

  return $self->{'session'};
}

########################################################################
sub init_session {
########################################################################
  my ( $self, $aref ) = @_;

  return $self->newSession
    if !$aref;

  my ( $username, $firstname, $lastname, $email, $prefs ) = @{$aref};

  my $data = {
    username  => $username,
    firstname => $firstname,
    lastname  => $lastname,
    email     => $email,
  };

  $data->{prefs} = $self->deserialize_session($prefs);

  return $self->{data} = $data;
}

########################################################################
sub serialize_session {
########################################################################
  my ( $self, $data ) = @_;

  # this is one way to serialize data...
  return Bedrock::XML::writeXMLString($data);

  # here's another
  return JSON::PP->new->encode($data);
}

########################################################################
sub deserialize_session {
########################################################################
  my ( $self, $raw_session ) = @_;

  return
    if !$raw_session;

  my $data = eval { return Bedrock::XML->newFromString($raw_session); };

  return
    if $data;

  my $errstr = $EVAL_ERROR;

  # maybe this is a JSON string?
  $data = eval { return JSON::PP->new->decode($raw_session); };

  $errstr .= "\n$EVAL_ERROR";

  die "session data is neither Bedrock XML nor JSON\n$errstr"
    if !$data;

  return $data;
}

#
# `session' is stored under $self
# `username', `password', `firstname', `lastname', `email' if stored under $self->{'data'}
# `new_session' is set to 1 if no previous session info found for user
# Other than these are stored under $self->{'data'}->{'prefs'}
#
########################################################################
sub readData {
########################################################################
  my ( $self, $id ) = @_;

  my ( $config, $verbose ) = @{$self}{qw(config verbose)};

  my $aref = $self->FETCH_SESSION(
    config  => $config,
    session => $id
  );

  return
    if !$aref;

  my $secs = $config->{cookie}->{expiry_secs} || 86_400;

  if ( !$config->{cookieless_sessions} ) {
    $self->cookie(
      $self->{name},
      value   => $id,
      expires => $secs
    );

    $self->send_cookie;
  }

  $self->{expires} = $secs;

  $self->{session} = $id;

  $self->init_session($aref);

  return $self->{session};
}

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config ) = @_;

  # What is the name of the session variable being used?
  my ( $name, $verbose ) = @{$config}{qw(param verbose)};

  die "$class->TIEHASH(): `param' not set in config\n"
    if !$name;

  # Create session object
  my $self = bless {}, $class;

  @{$self}{qw(ctx name config verbose)} = ( $ctx, $name, $config, $verbose );

  # Initialize session
  $self->startSession($config);

  # Check for an existing session
  my $id
    = $config->{cookieless_sessions}
    ? $ctx->getInputValue($name)
    : $ctx->getCookieValue($name);

  # Get the session data only if a session exists
  if ( defined $id ) {
    my $session = $self->readData($id);

    return $self
      if $session;
  }

  # everything failed -- need to create a new session
  my $session = $self->newSession;

  $self->{data}->{prefs}->{expiry_secs}
    = $self->{config}->{cookie}->{expiry_secs};

  # And return the session object
  return $self;
}

########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;

  if ( $key eq 'session' ) {
    return $self->{$key};
  }
  elsif ( any { $key eq $_ } qw( username firstname lastname email config) ) {
    return $self->{'data'}->{$key};
  }
  elsif ( exists $self->{'data'}->{'prefs'}->{$key} ) {
    return $self->{'data'}->{'prefs'}->{$key};
  }
  else {
    return $self->{'config'}->{'default_prefs'}->{$key};
  }
}

# Just store the value in the session and return the value
########################################################################
sub STORE {
########################################################################

  my ( $self, $key, $value ) = @_;

  if ( any { $key eq $_ } qw(session username) ) {
    die "Cannot set `$key': attribute is read-only.\n";
  }
  elsif ( $key eq 'password' ) {
    die "Cannot set `password': Use `change_password()' instead.\n";
  }
  elsif ( any { $key eq $_ } qw(firstname lastname email) ) {
    die "Cannot set `$key' -- no username: use `login()' or `register()' first.\n"
      if !$self->{'data'}->{'username'};

    die "Cannot store empty string in `$key'.\n"
      if ( any { $key eq $_ } qw(firstname lastname) ) && !length $value;

    return $self->{'data'}->{$key} = $value;
  }
  else {
    return $self->{'data'}->{'prefs'}->{$key} = $value;
  }
}

# Invoked to loop over the properties of the session
########################################################################
sub FIRSTKEY {
########################################################################
  my ($self) = @_;

  delete $self->{'keys'};

  my $k = {
    session   => $self->{session},
    username  => $self->{data}->{username},
    firstname => $self->{data}->{firstname},
    lastname  => $self->{data}->{lastname},
    email     => $self->{data}->{email}
  };

  my %keys;

  @keys{ keys %{ $self->{data}->{prefs} }, keys %{ $self->{config}->{default_prefs} } } = ();

  for my $key ( keys %keys ) {
    if ( exists $self->{data}->{prefs}->{$key} ) {
      $k->{$key} = $self->{data}->{prefs}->{$key};
    }
    else {
      $k->{$key} = $self->{config}->{default_prefs}->{$key};
    }
  }

  $self->{keys} = $k;

  return each %{ $self->{keys} };
}

########################################################################
sub NEXTKEY {
########################################################################
  return each %{ shift->{keys} };
}

########################################################################
sub EXISTS {
########################################################################
  my ( $self, $key ) = @_;

  if ( $key eq 'session' ) {
    return 1;
  }
  elsif ( any { $key eq $_ } qw(username password firstname lastname email) ) {
    return exists $self->{data}->{$key};
  }
  elsif ( exists $self->{data}->{prefs}->{$key} ) {
    return 1;
  }
  else {
    return exists $self->{config}->{default_prefs}->{$key};
  }
}

########################################################################
sub DELETE {
########################################################################
  my ( $self, $key ) = @_;

  if ( any { $key eq $_ } qw(session username firstname lastname email password) ) {
    die "Cannot delete `$key': illegal operation.\n";
  }
  else {
    return delete $self->{data}->{prefs}->{$key};
  }
}

########################################################################
sub CLEAR {
########################################################################
  my ($self) = @_;

  return %{ $self->{'data'}->{'prefs'} } = ();
}

########################################################################
sub closeBLM {
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};

  my $prefs = $self->{data}->{prefs};

  # this is a very implementation specific session rule that says, if
  # there is no session, then if there is a 'default_prefs' set in the
  # session configuration, then map that to the session data...

  if ( keys %{$prefs} == 0 ) {
    $prefs = $self->{config}->{default_prefs} // {};
  }

  # there are certain situations where Bedrock may call closeBLM() more than once
  # if that happens, we don't want to alter the object since the second call will fail
  # because the prefs object was already converted to XML...so we create a clone
  # object that is written to the database

  my $data = { prefs => $self->serialize_session($prefs) };

  for ( keys %{ $self->{data} } ) {
    next if $_ eq 'prefs';

    $data->{$_} = $self->{data}->{$_};
  }

  return $self->STORE_SESSION(
    verbose => $self->{verbose},
    session => $self->{session},
    data    => $data,
    expires => $self->{expires},
    new     => $self->{new_session},
    config  => $self->{config}
  );
}

1;
