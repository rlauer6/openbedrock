#!@PERL@ -w

# ident "@(#) $Header: /archive/cvsroot/bedrock/src/main/perl/lib/BLM/Startup/RedisSession.pm.in,v 1.4 2013/10/24 13:48:28 laytonax Exp $
# ident "@(#)        $Name:  $"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::RedisSession;
use parent qw(BLM::Startup::BaseSession);

use strict;

BEGIN {
  use Exporter ();
  use vars qw($VERSION @ISA);
  $VERSION = do { my @r = ( q$Revision: 1.4 $ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
}

use Carp;
use Data::Dumper;

eval "require Redis";

our $rHandle = undef;

# Provide a "namespace" for they keys that we will be storing into Redis
sub _format_session_key
{
  return sprintf('bedrock:session:%s', $_[0]);
}

# +---------------------------------------------------------------+
# | ->CONNECT( %options )                                         |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# |                                                               |
# +---------------------------------------------------------------+
sub CONNECT {
  my $self    = shift;
  my %options = @_;


  eval {
  $rHandle ||= Redis->new(
      server => $options{config}->{server},
      name   => 'bedrock_' . ($options{config}->{name} || 'session')
    );
  };

  die "[$@]:could not create handle to Redis for " . Dumper [ $options{config} ]
   if $@;

  $self->{'_manager_state'} = { handle => $rHandle };
}

# +---------------------------------------------------------------+
# | ->FETCH_SESSION( %options )                                   |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub FETCH_SESSION {
  my $self    = shift;
  my %options = @_;

  my $redis = $self->{'_manager_state'}->{handle};

  my $data = $redis->get(_format_session_key($options{session}));

  return [undef, undef, undef, undef, $data];
}

# +---------------------------------------------------------------+
# | ->STORE_SESSION( %options )                                   |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub STORE_SESSION {
  my $self    = shift;
  my %options = @_;

  my $redis = $self->{'_manager_state'}->{handle};

  $redis->set(_format_session_key($options{session}), $options{data}->{prefs});

  die "could not set ttl for " . _format_session_key($options{session}) . "\n"
    unless $redis->expire(_format_session_key($options{session}), $options{config}->{cookie}->{expiry_secs});
}


# +---------------------------------------------------------------+
# | ->KILL_SESSION( %options )                                    |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub KILL_SESSION {
  my $self    = shift;
  my %options = @_;

  my $redis = $self->{'_manager_state'}->{handle};

  $redis->del(_format_session_key($options{session}));
}

1;

# $Log: RedisSession.pm.in,v $
# Revision 1.4  2013/10/24 13:48:28  laytonax
# eval "require Redis" rather than use, to make the RedisSession module optional.
#
# Revision 1.3  2013/09/11 19:03:46  lauerrc
# - add bedrock namespace to session key
#
# Revision 1.2  2013/09/11 18:11:15  laytonax
# Refactor of BLM::Startup::RedisSession:
#
#   - Non-redis functionality bubbles up to a new base class: BaseSession,
#   - Redis-specifics are all that are left in RedisSession,
#   - We now use a package-scoped variable to maintain persistent connections in a mod_perl context
#   - Updates to Makefile.am to accomodate.
#
# Revision 1.1  2013/09/10 18:20:31  lauerrc
# - added RedisSession.pm.in to project
#
