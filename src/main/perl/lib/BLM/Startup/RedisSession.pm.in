package BLM::Startup::RedisSession;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use parent qw(BLM::Startup::BaseSession);

use strict;
use warnings;

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use Redis;

use Role::Tiny::With;
with 'Bedrock::RedisClient::Role';

# Provide a "namespace" for the keys that we will be storing into Redis

########################################################################
sub _format_session_key {
########################################################################
  my ($key) = @_;

  return sprintf 'bedrock:session:%s', $key;
}

# +---------------------------------------------------------------+
# | ->CONNECT( %options )                                         |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# |                                                               |
# +---------------------------------------------------------------+
sub CONNECT {
  my ( $self, %options ) = @_;

  my $handle = eval { redis_connect( redis_config() ); };

  die sprintf 'could not create handle to Redis for: %s', $EVAL_ERROR
    if !$handle || $EVAL_ERROR;

  return $self->{_manager_state} = { handle => $handle };
}

# +---------------------------------------------------------------+
# | ->FETCH_SESSION( %options )                                   |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub FETCH_SESSION {
  my ( $self, %options ) = @_;

  my $redis = $self->{_manager_state}->{handle};

  my $data = $redis->get( _format_session_key( $options{session} ) );

  return [ undef, undef, undef, undef, $data ];
}

# +---------------------------------------------------------------+
# | ->STORE_SESSION( %options )                                   |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub STORE_SESSION {
  my ( $self, %options ) = @_;

  my $redis = $self->{_manager_state}->{handle};

  my $session_key = _format_session_key( $options{session} );

  my $expiry = $options{config}->{cookie}->{expiry_secs};

  $redis->set( $session_key, $options{data}->{prefs} );

  die sprintf "could not set ttl for %s\n", $session_key
    if !$redis->expire( $session_key, $expiry );

  return;
}

# +---------------------------------------------------------------+
# | ->KILL_SESSION( %options )                                    |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub KILL_SESSION {
  my ( $self, %options ) = @_;

  my $redis = $self->{'_manager_state'}->{handle};

  return $redis->del( _format_session_key( $options{session} ) );
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::Startup::RedisSession - Redis based sessions

=head1 SYNOPSIS

 <pre>
   <trace --output $session>
 </pre>

=head1 DESCRIPTION

Provides a pesistent session store for anonymous or login session.
See L<BLM::Startup::UserSession> for more details on sessions.

=over 5

Using a memory cache like Redis for session management offers several
advantages over using a traditional database:

=item Performance

Memory caches like Redis are designed to store data
in-memory, which provides significantly faster read and write speeds
compared to disk-based databases. This results in lower latency for
session management operations, leading to improved overall system
performance and responsiveness.

=item Scalability

Redis is highly scalable and can handle a large number of
concurrent requests with ease. It supports clustering and replication,
allowing you to distribute data across multiple nodes to handle
increasing loads. This scalability makes it well-suited for
applications with growing user bases or high traffic volumes.

=item Simplicity and Efficiency

Redis is optimized for storing and
retrieving small, frequently accessed data structures such as session
information. Its simple key-value data model and support for data
structures like sets, lists, and hashes make it efficient for storing
session-related data.

=item Persistence Options

While Redis primarily stores data in-memory for
performance reasons, it also offers options for persistence. You can
configure Redis to periodically dump data to disk or use features like
Redis Cluster and Redis Sentinel to ensure data durability and high
availability.

=item Built-in Features

Redis provides several built-in features that are
useful for session management, such as automatic expiration of keys,
which allows you to set a TTL (time-to-live) for session data. This
simplifies session cleanup and helps prevent memory leaks by
automatically removing expired sessions.

=item Atomic Operations

Redis supports atomic operations on data
structures, which ensures that session management operations like
creating, updating, or deleting sessions are performed
atomically. This helps maintain data consistency and prevents race
conditions that can occur in distributed systems.

=item * Ease of Integration

Redis has client libraries available for a wide
range of programming languages, making it easy to integrate into
various types of applications. Many web frameworks and platforms have
built-in support for Redis, simplifying the process of incorporating
it into your application architecture.

Overall, Redis offers a powerful and efficient solution for session
management, particularly in applications where performance,
scalability, and simplicity are critical requirements.

I<Source: ChatGPT 3.5>

=back

=head1 CONFIGURATION

Create a Bedrock XML file named F<redis-session.xml> and place that in
one of Bedrock's configuration paths.

I<Note that you can only have one session class bound to the C<$session> object.>

 <!-- Bedrock RedisSessions -->
 <object>
   <scalar name="binding">session</scalar>
   <scalar name="session">yes</scalar>
   <scalar name="module">BLM::Startup::RedisSession</scalar>
 
   <object name="config">
     <scalar name="verbose">2</scalar>
     <scalar name="param">session</scalar>
 
     <!-- Redis connect information -->
     <scalar name="server">localhost</scalar>
     <scalar name="port">6379</scalar>
 
     <object name="cookie">
       <scalar name="path">/</scalar>
       <scalar name="expiry_secs">3600</scalar>
       <scalar name="domain"></scalar>
     </object>
   </object>
 </object>

=head1 METHODS AND SUBROUTINES

Implements the bare minimium methods for session management using a
Redis server. See L<BLM::Startup:SessionManager> for more details on
how sessions work and what methods are available. This class uses the
L<Bedrock::RedisClient> role.

=head2 FETCH_SESSION

Uses the Redis C<get> method to retrieve data from the Redis server.

=head2 KILL_SESSSION

Uses the Redis C<del> method to retrieve data from the Redis server.

=head2 STORE_SESSION

Uses the Redis C<set> method to store data from the Redis server. Use
the C<expires> method to set the ttl on keys based on the current
cookie expiration time.

=head1 AUTHOR

Andy Layton

Rob Lauer - rlauer6@comcast.net

=head1 SEE OTHER

L<Bedrock::RedisClient>, L<BLM::Startup::BaseSession>, L<BLM::Startup::SessionManager>
L<Bedrock::Apache::RedisSessionHandler>

=cut
