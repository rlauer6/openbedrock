#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::RedisSession;

use parent qw(BLM::Startup::BaseSession);

use strict;
use warnings;

our $VERSION = '@PACKAGE_VERSION@'; ## no critic (RequireInterpolationOfMetachars)

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use Redis;

use Role::Tiny::With;
with 'Bedrock::RedisClient';

# Provide a "namespace" for they keys that we will be storing into Redis
sub _format_session_key {
  my ($key) = @_;

  return sprintf 'bedrock:session:%s', $key;
}

# +---------------------------------------------------------------+
# | ->CONNECT( %options )                                         |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# |                                                               |
# +---------------------------------------------------------------+
sub CONNECT {
  my ( $self, %options ) = @_;

  my $handle = redis_handle();

  die sprintf '[%s]:could not create handle to Redis for: %s',
    $EVAL_ERROR, Dumper( [ redis_config() ] )
    if !$handle;

  return $self->{'_manager_state'} = { handle => $handle };
}

# +---------------------------------------------------------------+
# | ->FETCH_SESSION( %options )                                   |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub FETCH_SESSION {
  my ( $self, %options ) = @_;

  my $redis = $self->{'_manager_state'}->{handle};

  my $data = $redis->get( _format_session_key( $options{session} ) );

  return [ undef, undef, undef, undef, $data ];
}

# +---------------------------------------------------------------+
# | ->STORE_SESSION( %options )                                   |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub STORE_SESSION {
  my ( $self, %options ) = @_;

  my $redis = $self->{'_manager_state'}->{handle};

  my $session_key = _format_session_key( $options{session} );
  my $expiry      = $options{config}->{cookie}->{expiry_secs};

  $redis->set( $session_key, $options{data}->{prefs} );

  die sprintf "could not set ttl for %s\n", $session_key
    if !$redis->expire( $session_key, $expiry );

  return;
}

# +---------------------------------------------------------------+
# | ->KILL_SESSION( %options )                                    |
# |                                                               |
# | see: BLM::Startup::BaseSession                                |
# +---------------------------------------------------------------+
sub KILL_SESSION {
  my ( $self, %options ) = @_;

  my $redis = $self->{'_manager_state'}->{handle};

  return $redis->del( _format_session_key( $options{session} ) );
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

BLM::Startup::RedisSession - Redis based sessions

=head1 SYNOPSIS

 <!-- Bedrock RedisSessions -->
 <object>
   <scalar name="binding">session</scalar>
   <scalar name="session">yes</scalar>
   <scalar name="module">BLM::Startup::RedisSession</scalar>
 
   <object name="config">
     <scalar name="verbose">2</scalar>
     <scalar name="param">session</scalar>
 
     <!-- MySQL connect information -->
     <scalar name="server">localhost</scalar>
     <scalar name="port">6379</scalar>
 
     <object name="cookie">
       <scalar name="path">/</scalar>
       <scalar name="expiry_secs">3600</scalar>
       <scalar name="domain"></scalar>
     </object>
   </object>
 </object>

=head1 DESCRIPTION

=head1 METHODS AND SUBROUTINES

=head1 AUTHOR

Andy Layton

Rob Lauer - rclauer@gmail.com

=head1 SEE OTHER

L<BLM::Startup::BaseSession>

=cut
