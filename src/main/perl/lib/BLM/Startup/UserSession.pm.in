package BLM::Startup::UserSession;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use parent qw( BLM::Startup::MySQLSession );

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::Startup::UserSession - Implements a persistent store for
anonymous or login sessions.

=head1 SYNOPSIS

 <var $session.set('foo', 'bar')>

=head1 DESCRIPTION

Implements stateful sessions which might be stored in a SQL database
or other location that provides persistent storage capabilities.  The
session is accessed via a Bedrock object (typically named C<$session>
or whatever binding name you might configure for the startup module).
This implementation provides both I<anonymous> sessions and sessions
based on the concept of users that must be authenticated. User account
information is typically stored in a I<session> table allowing your
application to provide an authentication/authorization layer.

An HTTP client is associated with a particular session based on a
session identifier stored as a B<cookie> on the userE<039>s browser or by
using a CGI variable usually named C<session>...which is the default.

The L<BLM::Startup::UserSession> provided with Bedrock is a MySQL
based session manager. You can implement your own session
implementation based on whatever persistent storage mechanism you
might choose.  Implmentations based on B<MySQL>, B<PostgreSQL>,
B<SQLite>, and B<Redis>  are included as part of Bedrock. See
L<BLM::Startup::SesssionManager> for more details.

=head1 CONFIGURING Bedrock For User Session

The L<BLM::Startup::UserSession> is typically the mechanism Bedrock
web applications use to maintain persitence. The modules uses a SQL
table to store the userE<039>s session information.  A database and
table need to be created before you can use the C<$session> object.

Create a MySQL database and an appropriately
defined table.  If youE<039>re implementing your own session object then
your table might look different than the one shown below.

  $ mysqladmin create bedrock -u root -p
  $ cat > create_session.sql
 drop table if exists session;

 create table session
  (
   id           int(11)      not null auto_increment primary key,
   session      varchar(50)  not null default '' unique,
   login_cookie varchar(50)  not null default '',
   username     varchar(50)  not null default '',
   password     varchar(30)  default null,
   firstname    varchar(30)  default null,
   lastname     varchar(50)  default null,
   email        varchar(100) default null,
   prefs        text,
   updated      timestamp    not null default current_timestamp on update current_timestamp,
   added        datetime     default null,
   expires      datetime     default null
 );
 
 grant all privileges on bedrock.* to fred@localhost identified by 'flintstone';
 ^D
 $ cat create_session.sql | mysql -u root -p bedrock

At this point you should have a database named B<bedrock> and a table
named B<session>.

Now  configure the L<BLM::Startup::UserSession> module in F<tagx.xml>.

In the C<MODULES> array add the L<BLM::Startup::UserSession> module:

   <array name="MODULES">

    <object>

     <scalar name="binding">session</scalar>
     <scalar name="module">BLM::Startup::UserSession</scalar>

     <object name="config">
      <scalar name="verbose">2</scalar>
      <scalar name="param">session</scalar>
      <scalar name="login_cookie_name">usession_login</scalar>
      <scalar name="login_cookie_expiry_days">365</scalar>
      <scalar name="data_source">dbi:mysql:bedrock</scalar>
      <scalar name="username">bedrock</scalar>
      <scalar name="password">fred</scalar>
      <scalar name="table_name">session</scalar>
      <scalar name="purge_user_after">30</scalar>
      <scalar name="cookieless_sessions"></scalar>

      <object name="cookie">
 	<scalar name="path">/</scalar>
 	<scalar name="expiry_secs">3600</scalar>
 	<scalar name="domain"></scalar>
      </object>

     </object>
    </object>
   </array>

You now can use the C<$session> object in your Bedrock applications.
I<Note that, by default users must have cookies enabled on their web
browser in order to support cookie based sessions.> See L<COOKIELESS
SESSIONS> for information on how to implement cookieless sessions.

=head1 COOKIELESS SESSIONS

By default, BedrockE<039>s standard session manager implementation requires
that cookies are enabled on the userE<039>s web browser.  This is because
the C<$session> object will use the value of a cookie (C<session>) to
identify the userE<039>s session.  If you need to run in an environment
where cookies cannot be enabled, then you can use cookieless
sessions. The L<BLM::Startup::UserSession> will use a
CGI variable by the same name to hold the session value. I<It is the
responsibility of the application to carry around the session
identifier from page to page.>

To enable I<cookieless> sessions, first set the configuration value
C<cookieless_sessions> to 1 in F<tagx.xml> in the
L<BLM::Startup::UserSession> configuration section.

In your application...

 <if $input.session>
   <null $session.cookieless_session($input.session)>
 <else>
   <null $input.set('session', $session.session)>
 </if>

This either starts a new session or tells L<BLM::Startup::UserSession>
to use an existing session.  YouE<039>ll then want to carry around that
session identifier in your web pages either as part of a form or in a
URL.

 <input type="hidden" name="session" value="<var $input.session>">

 <a href="/index.roc?session=<var $input.session>">link to another page in application...</a>

=head1 LOGGING

Bedrock's L<BLM::Startup::SessionManager>, which is the base class from
which session managers are typically implemented, can provide verbose logs for
debugging or understanding precisely what the session manager is doing.

Logging is done using L<Log::Log4perl> via the logger that is
initialized by Bedrock during startup. See L<Bedrock::Logger> for more
details on how Bedrock uses L<Log::Log4perl>.

I<The session manager inspects the C<verbose> setting in the module's
configuration section to determine the level of logging.>

=over 5

=item * If the value is set to 0 then the log level will set to INFO.

=item * If the value is set to 1 then the log level will be set to DEBUG.

=item * If the value is greater than 1 then the log level will be set to TRACE.

=item * If the C<verbose> option is defined but has no value, the log level will be set to ERROR.

=item * If the C<verbose> option is not defined the log level will dictated by the root logger's level.

=back

Log output will either be sent to the root logger defined in
F<log4perl.conf> or will be sent to the appender you define in
F<log4perl.conf> with a category of C<BLM.Startup.UserSession>. For
example:

 log4perl.appender.Session=Log::Log4perl::Appender::File
 log4perl.appender.Session.filename=/tmp/session.log
 log4perl.appender.Session.mode=append
 log4perl.appender.Session.layout=PatternLayout
 log4perl.appender.Session.layout.ConversionPatter=%d (%r,%R) (%p/%c) [%P] [%M:%L] - %m%n

 log4perl.category.BLM.Startup.UserSession=INFO, Session
 log4perl.additivity.BLM.Startup.UserSession=0

I<Note in the absence of a defined category for session logging, the
root logger will be used, however as described above the level at
which the logging will occur is determined by the setting of
C<verbose> in the module's configuration section..>

=head1 METHODS AND SUBROUTINES

=head2 change_passwd(oldpassword, newpassword)

Change a userE<039>s password in the session table.

=head2 clear

Clear the session object.

=head2 config

 config( key, [value] )

Set or retrieve the value of one of the session objectE<039>s configurtion
values.

Example:

 <null $session.config('session_dir_cleanup', 'yes')>

Note that this does not change the value in the configuration file,
only the current value available to the session manager.  Since some
values in the configuration object are used at the time the session
object is instantiated, setting some configuration values of Appliction
Plugins may not have the intended effect.

=head2 cookie

 cookie( cookie-name, parm, value ... )

 cookie( cookie-name, hash )

Convenience routine for setting a cookie.

  <var $session.cookie('sandie', 'value', 'abcde', 'path', '/', 'expires', 86400)>

Parameters are typically:

=over 5

=item value 

Value for the cookie

=item expires

Time for cookie expiration in seconds

=item domain

Value for domain

=item path

Value for path

=back

=head2 cookieless_session

 cookieless_session( session-id, [do-not-kill-cookie-flag] )

Allows you to pass a session identifier to presumably use a
pre-defined session. Injecting your own session id, rather than using
the one defined for you, allows you to either implement cookieless
sessions or perhaps provide the user a way to retrieve an active
session.  This might be done in order to login a user and provide them
a session identifier as a token that they can use to access the
session.

=over 5

=item session-id

Session identifer value.

=item do-not-kill-cookie-flag

If true, this will prevent the session manager from killing the
session cookie.  Normally, if you want to implement cookieless
sessions, you want to kill the cookie, so the browser does not send
Bedrock a session cookie.  If you set this to a true value, the new
session cookie value will be the session identifier I<you> pass.  This
will essentially allow the session to persist without having to carry
around the session identifier.

 <null $cookieless_session( $input.session, 'do-not-kill-session')>

=back

=head2 copy2session

 copy2session(file)

Copies a file to BedrockE<039>s session directory. If the file
contains a leading '/' it is considered an absolute path to the file,
otherwise it is assumed that the file is relative to ApacheE<039>s
C<DOCUMENT_ROOT>.

This is typically used with BedrockE<039>s session handler
(C<Apache::BedrockSessioFiles>) to serve content that should be
specific to one user or one session.  Thus a URL like:

 http://www.mysite.com/session/some-file.pdf

...would only be available to the user whose session is currently
active.  If the person were to share that link, the file would not
exist in that other userE<039>s session.

=head2 create_temp_login_session

 create_temp_login_session( username, timeout )

 <null:token $session.create_temp_login_session( $username, 15) >

Simulates a login for a user by creating a temporary session that
lives for C<timeout> seconds.  

Returns a session identifier token.  This token is used in a
subsequent call to C<cookieless_session()> (See below).

The default timeout is 900 seconds (15 minutes).  This is typically
used when implementing functionality that allows a user to retrieve
his account when they have forgotten their password or possibly to
activate an account for the first time. 

I<Take care using this function! You do not want to expose the token
returned to anyone but the intended user.>

=over 5

=item username

=item timeout

The time in minutes a session should remain active. If you provide an
integer it is considered the time in minutes, however you can
specify the timeout value as a string.

  create_temp_login('jsmith', '60m')
  create_temp_login('jsmith', 60 * 60 . 's');
  create_temp_login(60)

=back

=head3 Use Cases

The assumption is that you are using the session capability of Bedrock
to support "login sessions" and that you are using the session table
to store user accounts where each username is (perhaps) the
userE<039>s email address.

Suppose a user loses or forgets their password?  How should we
"unlock" their account or change their password?  Use the steps below:

=over 4

=item 1.

Create a temporary login session using C<create_temp_login_session()>

 <null:token $session.create_temp_login_session($input.username, 15)>

=item 2.

Send the user an email that contains a URL and session token you
received in the method call above, Something similar to:

I<Please visit C<http://www.mysite.com/account_unlock/?session=E<lt>var $tokenE<gt>>>

I<This URL will be valid for 15 minutes and will allow you to change
your password.>

=item 3.

Implement a Bedrock page that allows the user to enter a new
password. The page should do something like this:

 <try>
 <if $input.password --and $input.session>
   <if $input.password --ne $input.cpassword>
     <raise "passwords do not match">
   <else>
     <null $session.cookieless_session($input.session)>
     <unless $session.username>
       <raise "invalid session or session timed out">
     </unless>
     <null $session.change_passwd('', $input.password)>
     <null $session.logout()>
     Password successfully changed.
   </if>
 <elseif $input.session>
   <form method="post">
    Enter new password:  <input type="password" value="" size="8" name="password"><br>
    Confirm new pasword: <input type="password" value="" size="8" name="cpassword"><br>
    <input type="submit">
   <input type="hidden" name="session" value="<var $input.session>">
   </form>
 <else>
   <raise "invalid access to page">
 </if>
 <catch "do not match">
 Passwords do not match. Click <a href="?session=<var $input.session>">here</a> to try again.
 <catch>
 There was an error changing your password.
 <pre>
 <var $@>
 </pre>
 </try>

=back

Notes:

=over 4

=item *

The user is immediately logged out of the temporary session after the
password is changed.

=item *

After you use the session token to initialize the session, you should
check to make sure the C<username> is valid in the session - indicating
the user is logged in and has a valid session as we did above.

 <unless $session.username>
   <raise "invalid session or session timed out">
 </unless>

You might even consider asking the user to put in
the username as well and validating that against the session data.

=item *

Remember that the premise here is:

...if the user received this token in their email B<and> they have
visited your password reset page using the token, then they probably
I<are who they say they are> and should have access to this session.

Of course thereE<039>s no guarantee that someone has not hacked their
email or that they really are who they say they are.

=back

=head2 cleanup_session_dir

See L<BLM::Startup::SessionManager/cleanup_session_dir>.

 cleanup_session_dir( cleanup-flag )

Sets a flag that causes the session manager to remove session
directories when the session is going to be delete from the session
table.

 <null $session.cleanup_session_dir(1)>

=head2 copy2session

 copy2session(path)

See L<BLM::Startup::SessionManager/copy2path>.

=head2 create_session_dir 

See L<BLM::Startup::SessionManager/create_session_dir>.

 create_session_dir( [dir-name] )

Create a "session" directory or sub-directory.  The directory is
located in C<SESSION_DIR> as specified in the C<$config> object.  The
session id of the current session is used to name the directory.

 <null $session.create_session_dir()>
 <null $session.create_session_dir("foo/bar/baz")>

=head2 create_session_file

 create_session_file( filename, content )

See L<BLM::Startup::SessionManager/create_session_file>.

=head2 create_session_tempfile

See L<BLM::Startup::SessionManager/create_session_tempfile>.

 create_session_tempfile( template, SUFFIX, ext )
 create_session_tempfile( template, DIR, dir-name )

Create a temporary file in the session directory.  Returns a
two-element array that contains the file handle of an open temp file
and the filename.  You can optionally pass the SUFFIX and/or DIR
values, similar to the perl function C<tempfile()>.

 <null --define-var="temp" $session.create_session_tempfile("FOOxxxx", SUFFIX, ".dat")>
 <null --define-var="temp" $session.create_session_tempfile('', DIR, "foo")>

=head2 encrypt

 encrypt( password, salt )

See L<BLM::Startup::SessionManager/encrypt>.

=head2 kill_session

See L<BLM::Startup::SessionManager/kill_session>.

 kill_session()

Clears the current session.  Removes the session from the database. If
you are using login sessions you probably do not want to call this
method since it will delete the row entirely from the database meaning
that the user will no longer be able to login.

If what you want to do is clear the session data, simply delete the members of the session object
that you no longer want to store.

 <foreach foo bar baz><null $session.delete($_)></foreach>

=head2 login

See L<BLM::Startup::SessionManager/login>.

 login( username, password )

C<username> is looked up in the session table and given a new session
identifier. If the password is incorrect an exception is thrown.

 <try>
  <null $session.login($input.username, $input.password)>
 <catch>
  Bad login
 </try>

=head2 logout

See L<BLM::Startup::SessionManager/logout>.

 logout()

Logout and clear session.

 <null $session.logout()>

=head2 lookup_user

See L<BLM::Startup::SessionManager/lookup_user>.

 lookup_user( username )

Returns the username if the user is registered in the session table as
a login user.

 <if $session.lookup_user($input.username) --eq $input.username) >
   User already exists!
 </if>

=head2 remember_user

 remember_user( on-off )

Provides the ability to essentially keep a user logged on to their
session by sending a cookie on the userE<039>s browser that identifies the
user.  The login cookie will still time out after whatever period you
define for the login cookie in the configuration section.

 <scalar name="login_cookie_name">session_login</scalar>
 <scalar name="login_cookie_expiry_days">365</scalar>

=head2 rename_session_file

See L<BLM::Startup::SessionManager/rename_session_file>.

=head2 register(username, password, firstname, lastname, email)

See L<BLM::Startup::SessionManager/register_user>.

Register a new user in the session table (login sessions).  The new
userE<039>s information is written to the session table.

=head2 remove_user(username, password)

See L<BLM::Startup::SessionManager/remove_user>.

Remove a user from the user registry.  If the user is logged in, he is
logged out first.

=head1 AUTHOR

Jay Sridhar

Rob Lauer - <bigfoot@cpan.org>

=head1 SEE ALSO

L<BLM::Startup::SessionManager>, L<BLM::Startup::SQLSession>, L<BLM::Startup::MySQLSession>

=cut
