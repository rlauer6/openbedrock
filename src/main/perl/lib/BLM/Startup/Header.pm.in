#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Header;

use strict;
use warnings;

use Bedrock qw{:booleans};
use Bedrock::Constants qw{:chars};
use Bedrock::Dump;
use Data::Dumper;
use List::Util qw/pairs/;
use MIME::Base64;
use Scalar::Util qw/reftype/;
use Text::URLEncode qw/Encode/;

use Role::Tiny::With;
with 'Bedrock::Logger';

use parent qw(Bedrock::Hash);

########################################################################
sub TIEHASH {
########################################################################
  my ( $class, $ctx, $config ) = @_;

  my $self = bless Bedrock::Hash->new, $class;

  # Get the headers and store them
  my %headers = $ctx->cgi_header_in;

  $self->{input} = \%headers;

  $self->{config} = $config;

  $self->{verbose} = $config->{'verbose'};

  $self->request( $ctx->request );

  # Special processing of some headers
  if ( exists $headers{'Authorization'} ) {
    my ( $realm, $ident ) = split /\s+/xsm, $headers{'Authorization'};

    $self->{'realm'} = $realm;

    @{$self}{qw(auth_user auth_passwd)} = split /:/xsm, decode_base64($ident);
  }

  return $self;
}

########################################################################
sub FETCH {
########################################################################
  my ( $self, $key ) = @_;

  return $self->{'input'}->{$key}
    if exists $self->{'input'}->{$key};

  my $lckey = lc $key;

  return $self->{'input'}->{$lckey}
    if exists $self->{'input'}->{$lckey};

  return;
}

########################################################################
sub FIRSTKEY {
########################################################################
  my ($self) = @_;

  my $a = scalar keys %{ $self->{'input'} };

  return each %{ $self->{'input'} };
}

########################################################################
sub NEXTKEY {
########################################################################
  return each %{ shift->{'input'} };
}

########################################################################
sub STORE {
########################################################################
  my ( $self, @args ) = @_;

  if ( !exists $self->{'output'} ) {
    $self->{'output'} = {};
  }

  my $output = $self->{'output'};

  foreach my $p ( pairs @args ) {

    my ( $header, $value ) = @{$p};
    $header = ucfirst $header;

    if ( exists $output->{$header} && $header !~ m/location/ixsm ) {
      if ( !ref $output->{$header} ) {
        $output->{$header} = [ $output->{$header} ];
      }

      push @{ $output->{$header} }, $value;
    }
    else {
      $output->{$header} = $value;
    }
  }

  return;
}

########################################################################
sub set {  ## no critic (ProhibitAmbiguousNames)
########################################################################
  my ( $self, @args ) = @_;

  my $key;
  my $val;

  # unfortunately, this can cause issues with Apache 2 if someone inadvertantly
  # set Content-Type instead of Content-type.  Using content_type() method is better.
  foreach my $p ( pairs @args ) {
    my ( $key, $val ) = @{$p};

    if ( $key eq 'Content-Type' ) {
      $key = 'Content-type';
    }

    $self->SUPER::set( $key, $val );
  }

  return;
}

########################################################################
sub DELETE {
########################################################################
  my ( $self, $key ) = @_;

  return
    if !exists $self->{'output'};

  return delete $self->{'output'}->{ ucfirst $key };
}

########################################################################
sub EXISTS {
########################################################################
  my ( $self, $key ) = @_;

  return exists $self->{'input'}->{$key};
}

########################################################################
sub CLEAR {
########################################################################
  my ($self) = @_;

  return
    if !exists $self->{output};

  return %{ $self->{output} } = ();
}

########################################################################
sub no_cache {
########################################################################
  my ($obj) = @_;

  # Set in two separate calls since args are assigned to a hash thus
  # clobbering one of the cache-control directives.
  $obj->set( 'Pragma', 'no-cache', 'Cache-control', 'no-cache' );
  $obj->set( 'Cache-control', 'no-store' );

  return;
}

########################################################################
sub content_type {
########################################################################
  my ( $self, $mime_type ) = @_;

  return $self->set( 'Content-type', $mime_type );
}

########################################################################
sub see_other {
########################################################################
  my ( $obj, $url ) = @_;

  return $obj->set( 'Status', '303 See Other', 'Location', $url );
}

########################################################################
sub location {
########################################################################
  my ( $obj, $url ) = @_;

  return $obj->set( 'Status', '302 Found', 'Location', $url );
}

########################################################################
sub build_get_url {
########################################################################
  my ( $self, $pathname, @params ) = @_;

  if ( @params == 1 ) {
    @params = is_hash( $params[0] ) ? %{ $params[0] } : @{ $params[0] };
  }

  die "Odd number of elements in parameter list\n"
    if @params % 2;

  my @query_string;
  foreach my $p ( pairs @params ) {
    my ( $key, $val ) = @{$p};

    $val = Encode($val);

    push @query_string, "$key=$val";
  }

  return sprintf '%s?%s', $pathname, join $AMPERSAND, @query_string;
}

########################################################################
sub request {
########################################################################
  my ( $self, @args ) = @_;

  if (@args) {
    $self->{_request} = $args[0];
  }

  return $self->{_request};
}

########################################################################
sub print_header {
########################################################################
  my ( $obj, $fd ) = @_;

  my $self = tied %{$obj};

  my $output = delete $self->{'output'} || {};

  # The mime-type should really be taken from the request handler since
  # the Apache configuration uses the AddType directive to tell Apache
  # the mime/type for given files with certain extensions. If the
  # content-type has been set by the user then
  # $output->{'Content-type'} will be set and we should use this
  # override instead.
  #
  # If we are running under mod_perl and the mime-type has been
  # overridden we need to inform the request object...
  #

  if ( !$output->{'Content-type'} ) {

    #    my $mime_type = $self->request->content_type;
    #
    #    if ( !$mime_type ) {
    #      $mime_type = $self->{config}->{'default_mime_type'} || 'text/html';
    #    }
    #    else {
    #       $output->{'Content-type'} = $mime_type;
    #    }
  }

  if ( $output->{'Content-type'} && $ENV{MOD_PERL} ) {
    $self->request->content_type( $output->{'Content-type'} );
  }

  my ( $key, $value, $str );

  foreach my $p ( pairs %{$output} ) {
    ( $key, $value ) = @{$p};

    if ( is_array($value) ) {
      foreach my $item ( @{$value} ) {
        $str .= "$key: $item\r\n";
        $fd->cgi_header_out( $key => $item );
      }
    }
    else {
      $str .= "$key: $value\r\n";
      $fd->cgi_header_out( $key => $value );
    }
  }

  $str .= "\r\n";

  return $fd->send_http_header;
}

########################################################################
sub auth_passwd {
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};
  return $self->{auth_passwd};
}

########################################################################
sub auth_user {
########################################################################
  my ($obj) = @_;

  my $self = tied %{$obj};
  return $self->{auth_user};
}

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

C<BLM::Startup::Header> - HTTP header support.

=head1 SYNOPSIS

 <null $header.see_other("/foo")>

 <null $header.location("/index.roc?error=4")>

 <null $header.content_type("application/xml")>

=head1 DESCRIPTION

This module provides HTTP header support for Bedrock.  It also
contains some methods that can be used by the Bedrock developer.

=head1 METHODS

=head2 auth_user

Returns the user decoded from the Authorization header if present.

=head2 auth_passwd

Returns the password decoded from the Authorization header if present.

=head2 content_type(mime-type)

Sets the 'Content-type' header to the mime-type given.  Typically you
shouldn't muck with this, but you can serve up XML documents or even
PDFs using Bedrock.

=head2 build_get_url(pathname, parameters ) 

Builds a URL of the form:

  pathname?key=value&..

=over 5

=item pathname

Pathname 

=item parameters

hash, list or array of key value pairs that represent the query string parameters

=back

Example:

  <null:parms foo bar baz buz>
  <null:url $header.build_get_url("index.rock", $parms)>

This would produce:

  /index.rock?foo=bar&baz=buz

Note that the values are URL encoded.

=head2 location(url)

Sets the 'Location' header to the specified URL.

=head2 no_cache

Sets the header values of 'Pragma' and 'Cache-control' to 'no-cache'.

=head2 see_other

Set the 'Status' to '302 See Other'.  The RFC states that browsers
should correctly interpret either a status code 303 or 302.  Some
browsers only interpretted 302.

=head1 AUTHOR

J. Sridhar

Rob Lauer - rlauer@signatureinfo.com

=cut
