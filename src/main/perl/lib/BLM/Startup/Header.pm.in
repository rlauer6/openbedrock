#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package BLM::Startup::Header;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= do { my @r = (q$Revision$ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
}

use UNIVERSAL qw (isa);

use TagX::Log 1.01;
use SIS::Hash 1.02;
@ISA = qw(SIS::Hash);

sub TIEHASH
{
    my $class = shift;

    my $self = bless SIS::Hash->new, $class;
    my $private = {};
    $self->{'__private'} = \$private;
    $self;
}

sub print_header
{
    my $self = shift;
    my $fd = shift;

    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    $private->{'Content-type'} = 'text/html' unless exists $private->{'Content-type'};
    my ($key, $value, $str);
    while (($key, $value) = each %{$private}) {
	if ( &isa( $value, 'ARRAY' ) ) {
	    for my $item (@{$value}) {
		$str .= "$key: $item\r\n";
	    }
	} else {
	    $str .= "$key: $value\r\n";
	}
    }
    $str .= "\r\n";
    &log_message( undef, "$self: headers are\n[$str]" );
    $fd->print( $str );
    delete $self->{'__private'};
}

sub set
{
    my $self = shift;
    die "Error: Cannot set header(s) in content generation phase.\n"
	unless exists $self->{'__private'};

    my $private_ref = $self->{'__private'};
    my $private = $$private_ref;
    while ( @_ ) {
	my $header = ucfirst(shift);
	my $value = shift;
	if ( exists $private->{$header} ) {
	    $private->{$header} = [$private->{$header}] unless ref( $private->{$header} );
	    push @{$private->{$header}}, $value;
	} else {
	    $private->{$header} = $value;
	}
    }
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.1  2000/07/05 17:55:31  sridhar
# HTTP Header management is now a BLM.
#
#
