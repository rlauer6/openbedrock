package BLM::Startup::Bedrock;

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Copyright (C) 2024, TBC Development Group, LLC.
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use strict;
use warnings;

use Bedrock qw(:booleans);
use Bedrock::Array;
use Bedrock::Constants qw(:booleans :chars);
use Bedrock::Hash;
use Data::Dumper;
use English qw(-no_match_vars);
use POSIX ();

our $VERSION = '@PACKAGE_VERSION@';  ## no critic (RequireInterpolationOfMetachars)

use parent qw(Bedrock::Application::Plugin);

########################################################################
sub init_plugin {
########################################################################
  my ($self) = @_;

  return $self->SUPER::init_plugin();
}

########################################################################
{
  ## no critic
  sub time   { return CORE::time; }
  sub gmtime { return CORE::gmtime; }
  sub rand   { return CORE::rand @_; }
}

########################################################################
sub iso_8601 {
########################################################################
  my ( $self, @time ) = @_;

  return $self->strftime( '%Y-%m-%dT%TZ', @time );
}

########################################################################
sub install_path {
########################################################################
  my ($self) = @_;

  my $path = $INC{'Bedrock.pm'};

  $path =~ s{/lib/perl5/Bedrock[.]pm}{}xsm;

  return $path;
}

########################################################################
sub perl_config {
########################################################################
  my ( $self, @args ) = @_;

  return Bedrock::perl_config(@args);
}

########################################################################
sub strftime {
########################################################################
  my ( $self, $fmt, @time ) = @_;

  if ( !@time ) {
    @time = localtime;
  }
  elsif ( @time == 1 ) {
    @time = localtime $time[0];
  }

  return POSIX::strftime( $fmt, @time );
}

########################################################################
sub localtime {  ## no critic
########################################################################
  my ( $self, $time ) = @_;

  $time //= CORE::time;

  return Bedrock::Array->new( CORE::localtime $time );
}

########################################################################
sub method          { return shift->request->method(); }
sub uri             { return shift->request->uri(); }
sub log             { return shift->request->log(); }             ## no critic
sub content_type    { return shift->request->content_type(); }
sub file_name       { return shift->request->file_name(); }
sub headers_out     { return shift->request->headers_out(); }
sub err_headers_out { return shift->request->err_headers_out(); }
sub request         { return shift->context->{_request}; }
########################################################################

########################################################################
sub version { return $VERSION; }
########################################################################

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 PUBLIC

BLM::Startup::Bedrock - Plugin that provides access to the request handler and other potentially useful methods

=head1 SYNOPSIS

Time functions:

 <var $bedrock.strftime('%Y-%m-%d')>

 <null:localtime $bedrock.localtime()>
 <var $localtime.join(',')>

 <var $bedrock.time()>

 <var $bedrock.gmtime()>

The request object:

 <null:r $bedrock.request()>

Miscellaneous functions:

 <var $bedrock.version()>

=head1 DESCRIPTION

Plugin that provides access to Bedrock's request handler as well as a
few other useful methods.

=head1 CONFIGURATION

Add this to your F<tagx.xml> file or create a standalone
F<bedrock.xml> file and drop it Bedrock's configuration directory.

 <object> 
   <scalar name="binding">bedrock</scalar> 
   <scalar name="module">BLM::Startup::Bedrock</scalar> 
 </object>

=head1 METHODS AND SUBROUTINES

=head2 content_type

Convenience routine that returns the Content-type header of the
request.  Equivalent to:

  <null:r $bedrock.request()>
  <null:content_type $r.content_type()>

=head2 file_name

Convenience routine that returns the file name of the request.
Equivalent to:

  <null:r $bedrock.request()>
  <null:filename $r.filename()>

=head2 iso_8601

Return the time using the ISO 8601 format (%Y-%m-%dT%TZ)

=head2 localtime

Returns Perl's C<localtime> value.

=head2 log

Returns the handler's C<log> object. You can execute the C<info()>,
C<error()>, C<warn()>, and C<debug()> methods to log to the server's
log file.

Equivalent to:

  <null:r $bedrock.request()>
  <null:log $r.log()>
  <null $log.error('this is an error')>

=head2 method

Convience method that returns the request HTTP method.

Equivalent to:

  <null:r $bedrock.request()>
  <null:method $r.method()>

=head2 request

Returns the request handler object.

=head2 strftime

The POSIX C<strfime()> method.  See C<man strftime>.

=head2 uri

Conviennce method that returns the the request URI.

  <null:r $bedrock.request()>
  <null:uri $r.uri()>

=head2 version

Returns Bedrock's version number.

=head1 SEE ALSO

L<Bedrock::Application::Plugin>

=head1 AUTHOR

Rob Lauer - <bigfoot@cpan.org>

=cut
