#!@PERL@ -w


#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Bedrock;

use strict;
use Symbol;
use File::Basename;

BEGIN {
  use Exporter ();
  use vars qw ($VERSION @ISA);
}

use VERSION;
use TagX::Log;
use Bedrock::Hash;

@ISA = qw(Bedrock::Hash);

my @keys =
qw (version script_fullpath script_file script_dir script_relative_uri script_absolute_uri);

sub TIEHASH {
  my ( $class, $ctx, $config ) = @_;
  my $self = bless {}, $class;
  $self->{'config'}     = $config;
  $self->{'ctx'}        = $ctx;
  $self->{'version'}    = $Bedrock::VERSION::ID;
  $self->{'build_date'} = $Bedrock::VERSION::BUILD_DATE;

  if ( exists $ENV{'HTTP_HOST'} ) {
    if ( $ENV{'MOD_PERL'} ) {
      $self->{'script_fullpath'} = $ENV{'SCRIPT_FILENAME'};
    }
    else {
      $self->{'script_fullpath'} = $ENV{'PATH_TRANSLATED'};
    }
    $self->{'script_file'} = basename( $self->{'script_fullpath'} );
    $self->{'script_dir'}  = dirname( $self->{'script_fullpath'} );
    $self->{'script_relative_uri'} =
       $ENV{'SCRIPT_NAME'}
    || $ENV{'REQUEST_URI'}
    || $ENV{'SCRIPT_URL'};
    my $proto = $ENV{'HTTPS'} eq 'on' ? 'https' : 'http';
    $self->{'script_absolute_uri'} =
    $proto . '://' . $ENV{'HTTP_HOST'} . $self->{'script_relative_uri'};
  }

  $self;
}

sub FIRSTKEY {
  my $self = shift;
  $self->{'keys'} = [@keys];
  my $key = shift @{ $self->{'keys'} };
  wantarray ? ( $key, $self->{$key} ) : $key;
}

sub NEXTKEY {
  my $self = shift;
  my $key  = shift @{ $self->{'keys'} };
  wantarray ? ( $key, $self->{$key} ) : $key;
}

sub require_version {
  my $self    = shift;
  my $version = shift;
  my @v       = ( $version =~ /\d+/g );
  my @V       = ( $Bedrock::VERSION::ID =~ /\d+/g );
  my $v =
  ( @v == 2 ? $version : sprintf( "%d.%d" . "%02d" x ( $#v - 1 ), @v ) );
  my $V = (   @V == 2
            ? $Bedrock::VERSION::ID
            : sprintf( "%d.%d" . "%02d" x ( $#V - 1 ), @V )
          );
  die "Require version $version. This version is only $Bedrock::VERSION::ID\n"
  unless $V >= $v;
  $Bedrock::VERSION::ID;
}

sub makeHash {
  goto &new;
}

sub makeArray {
  goto &newArray;
}

sub module_symbol {
  my $class   = shift;
  my $symbol  = shift;
  my $symtype = shift;
  no strict;
  local *stab = *{ $class . '::' };
  return $stab{$symbol} if defined($symtype);
  return *{ $stab{$symbol} }{$symtype};
  use strict;
}

sub new {
  my $self  = shift;
  my $class = shift;
  $class = 'BLM::' . $class unless $class =~ /^BLM::/;
  my $verbose = $self->{'config'}->{'verbose'};
  $self->loadModule($class);

  if ( &UNIVERSAL::can( $class, 'TIEHASH' ) ) {
    &log_message( undef, "$self: creating an object of class $class" )
    if $verbose;
    my $href = {};
    tie %{$href}, $class, @_;
    return bless $href, $class;
  }
  elsif ( &UNIVERSAL::can( $class, 'TIEARRAY' ) ) {
    &log_message( undef, "$self: creating an array of class $class" )
    if $verbose;
    my $aref = [];
    tie @{$aref}, $class, @_;
    return bless $aref, $class;
  }
  elsif ( &UNIVERSAL::can( $class, 'TIEHANDLE' ) ) {
    &log_message( undef, "$self: creating a handle of class $class" )
    if $verbose;
    my $fd = gensym;
    tie *{$fd}, $class, @_;
    return bless $fd, $class;
  }
  elsif ( &UNIVERSAL::can( $class, 'TIESCALAR' ) ) {
    &log_message( undef, "$self: creating a scalar of class $class" )
    if $verbose;
    my $scalar;
    my $obj = tie $scalar, $class;

    # set the scalar after the tie, since Tie::StdArray turns '0' into undef.
    $$obj = $_[0];
    return $obj;
  }
  else {
    die "Attempt to load invalid module: $class.\n";
  }
}

sub newArray {
  my $self  = shift;
  my $class = shift;
  $self->loadModule($class);
  my $aref = [];
  tie @{$aref}, $class, @_;
  bless $aref, $class;
}

sub newHandle {
  my $self  = shift;
  my $class = shift;
  $self->loadModule($class);
  my $fd = gensym;
  tie *{$fd}, $class, @_;
  bless $fd, $class;
  $fd;
}

sub isObject {
  my $self = shift;
  my $arg  = shift;
  return undef unless defined($arg);
  if ( &UNIVERSAL::isa( $arg, 'Bedrock::Hash' ) ) {
    return 1;
  }
  else {
    die "@_" if @_;
    return 0;
  }
}

sub isArray {
  my $self = shift;
  my $arg  = shift;
  return undef unless defined($arg);
  if ( &UNIVERSAL::isa( $arg, 'Bedrock::Array' ) ) {
    return 1;
  }
  elsif ( &UNIVERSAL::isa( $arg, 'ARRAY' ) ) {
    return 1;
  }
  else {
    die "@_" if @_;
    return 0;
  }
}

sub isScalar {
  my $self = shift;
  my $arg  = shift;
  return undef unless defined($arg);
  if ( ref($arg) ) {
    die "@_" if @_;
    return 0;
  }
  else {
    return 1;
  }
}

sub isHandle {
  my $self = shift;
  my $arg  = shift;
  return undef unless defined($arg);
  if ( &UNIVERSAL::isa( $arg, 'Bedrock::Handle' ) ) {
    return 1;
  }
  else {
    die "@_" if @_;
    return 0;
  }
}

sub loadModule {
  my $self = shift;
  my @mods = @_;

  my $verbose = $self->{'config'}->{'verbose'};
  for my $class (@mods) {
    $class =~ s!::!/!g;
    $class =~ s!$!.pm! unless $class =~ /\.pm$/;
    next if $INC{$class};
    require $class;
    &log_message( undef, "$class loaded successfully" ) if $verbose;
  }
}

sub BLMDoc {
  my $self  = shift;
  my $class = shift;
  $self->loadModule($class);
  no strict;
  local *stab = *{ $class . '::' };
  my $handle = $stab{DATA};
  return "Sorry! Class $class has no documentation." unless $handle;
  my $ioref = *{$handle}{IO};
  use strict;
  my $doc;

  while (<$ioref>) {
    $doc .= $_;
  }
  $doc;
}

1;

#
# Revision 1.24  2011/09/15 16:05:31  eutl420
# - perl tidy
#
# Revision 1.23  2011/07/17 16:56:08  eutl420
# - build .pm from .pm.in, added @PERL@
#
# Revision 1.22  2011/07/12 19:10:35  eutl420
# set VERSION from cvs Revision keyword
#
# Revision 1.21  2011/03/15 13:32:48  eutl420
# - set the value of a tied scalar after the tie due to what
#   appears to be a bug in Tie::StdScalar
#
# Revision 1.20  2010/11/29 15:57:51  rlauer
# - change openbedrock.org to openbedrock.net
#
# Revision 1.19  2010/11/16 00:17:20  rlauer
# - add 'build_date' from BUILD_DATE
#
# Revision 1.18  2010/10/30 21:46:39  rlauer
# - support tied scalars for $Bedrock.new
#
# Revision 1.17  2009/12/28 20:32:33  rlauer
# move SIS:: up to Bedrock::
#
# Revision 1.16  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.15  2002/02/14 15:32:57  rlauer
# Return true when asked if a plain ARRAY isArray
#
# Revision 1.14  2001/02/14 15:35:46  sridhar
# Added copyright and GPL notice
#
# Revision 1.13  2000/12/15 16:19:28  sridhar
# Using Bedrock::VERSION for version instead of Text::TagX::VERSION
#
# Revision 1.12  2000/12/15 15:41:10  sridhar
# 1. Method `new()' can examine the specified class and create a new
# object, array or handle as required.
# 2. Prefix `BLM::' is optional.
#
# Revision 1.11  2000/12/11 15:07:07  sridhar
# 1. Defined FIRSTKEY() and NEXTKEY() methods.
# 2. Can specify `verbose' under `config' in config file
# 3. Added `BLMDoc()' method.
#
# Revision 1.10  2000/11/30 15:44:07  sridhar
# Fixed `require_version()' to handle previous single-period version
# numbering and present double-period version numbering.
#
# Revision 1.9  2000/11/29 21:04:35  sridhar
# 1. Added methods `isObject()', `isArray()', `isScalar()' and
# `isHandle()'.
# 2. Method `require_version()' returns the current version
#
# Revision 1.8  2000/10/16 13:57:04  sridhar
# Changes to accomodate Bedrock shell.
#
# Revision 1.7  2000/08/21 21:00:59  sridhar
# Recomputation of script_* properties of bedrock object.
#
# Revision 1.6  2000/08/18 19:27:36  sridhar
# Added properties 'script_(file|dir|(absolute|relative)_uri)' to
# bedrock object.
#
# Revision 1.5  2000/08/17 16:59:43  sridhar
# 1. Added method `newHandle()' for creating a new handle
# 2. Removed method `reloadModule()'
#
# Revision 1.4  2000/06/26 14:00:09  sridhar
# 1. Added methods loadModule() and reloadModule() for loading modules
# on the fly.
# 2. Replaced FETCH with TIEHASH which initialized needed variables
# during construction
#
# Revision 1.3  2000/06/14 13:59:45  sridhar
# Added new() and newArray() as synonyms for makeHash() and makeArray().
#
# Revision 1.2  2000/06/07 18:35:21  sridhar
# Removed a debug log message
#
# Revision 1.1  2000/06/06 20:42:08  sridhar
# Bedrock loadable modules for startup
#
#
