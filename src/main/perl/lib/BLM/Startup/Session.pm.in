#!/usr/local/bin/perl -w

# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::Startup::Session;

use strict;

BEGIN
{
    use Exporter ();
    use vars	qw ($VERSION @ISA);
    $VERSION	= 1.03;
}

use Carp;
use SIS::Hash;
use TagX::Log;
@ISA = qw(SIS::Hash);

# Method which should look up session id from somewhere and return a hash
# ref to the session data.
# Invoked with: $config, $id
# Return: Hash ref
sub readData
{
    my $self = shift;
    die "Session class ", ref($self), " must implement method `readData()'\n";
}

# Method to construct a new session identifier. Subclasses can override this method
# to generate a session ID however they want to.
sub newSessionID
{
    # For now let's use Apache's UNIQUE_ID as the session id
    $ENV{'UNIQUE_ID'};
}

#
# Generic constructor for Sessions. Does the following:
# 1. Use the value of `param' from configuration to look for a session
#    identifier in the cookie or input
# 2. Create the session object
# 3. Invoke the readData() method to read the session data from the store.
#    Subclasses need to override this method to implement specific session
#    data storage policies like using a file, SDBM, or a database. Subclasses
#    are expected to return a string containing the session data. Typically
#    this string was given to the subclass by us to store.
# Returns: The session object
# Properties: The session object has the following properties as a minimum.
# Subclasses could define additional properties.
#    id		=> The session identifier
#    data	=> The session data hash
sub TIEHASH
{
    my ($class, $ctx, $config) = @_;

    # What is the name of the session variable being used?
    my $name = $config->{'param'};
    die "$class->TIEHASH(): `param' not set in config\n" unless $name;

    # Create session object
    my $self = bless {}, $class;
    $self->{'ctx'} = $ctx;
    $self->{'name'} = $name;
    my $verbose = $self->{'verbose'} = $config->{'verbose'};

    # Check for an existing session
    my $id = $ctx->getCookieValue($name);

    # Get the session data only if a session exists
    if ( defined($id) ) {
	&log_message( undef, "Read user's cookie: [$id]" ) if $verbose;

	# Get session data as a string
	my $ses_string = $self->readData($config, $id);
	&log_message( undef, "User's session data contains\n[$ses_string]" ) if $verbose;

	# Make a hash from the string which should be in our XML format
	$self->{'data'} = Bedrock::XML->newFromString( $ses_string )
	    if length($ses_string);
    } else {
	$id = $self->newSessionID;
	&log_message( undef, "User does not have cookie .. using [$id]" ) if $verbose;

	# To enable subclass to perform proper initialization
	$self->readData( $config, $id );

	# Set the cookie header
	my $header = $name . '=' . $id . ';';
	$ctx->cgi_header_out('Set-Cookie', $header);
	&log_message( undef, "Set cookie header: [Set-Cookie => $header]" ) if $verbose;
    }

    # Initialize data if we don't have any
    $self->{'data'} = {} unless $self->{'data'};

    # Store the session id too in case someone asks for it
    $self->{'id'} = $id;

    # And return the session object
    $self;
}

# Invoked to fetch the value of a session var
sub FETCH
{
    my ($self, $key) = @_;
    $self->{'data'}->{$key};
}

# Just store the value in the session and return the value
sub STORE
{
    my ($self, $key, $value) = @_;
    $self->{'data'}->{$key} = $value;
    $self->{'data_changed'}++;
    &log_message( undef, "Stored [$key] = [$value] into session" ) if $self->{'verbose'};
    $value;
}

# Invoked to loop over the properties of the session
sub FIRSTKEY
{
    my $self = shift;
    my $a = scalar keys %{$self->{'data'}};
    each %{$self->{'data'}};
}

sub NEXTKEY
{
    each %{shift->{'data'}};
}

sub EXISTS
{
    exists $_[0]->{'data'}->{$_[1]};
}

sub DELETE
{
    my $self = shift;
    $self->{'data_changed'}++;
    delete $self->{'data'}->{$_[0]};
}

sub CLEAR
{
    my $self = shift;
    $self->{'data_changed'}++;
    %{$self->{'data'}} = ();
}

# This method is invoked at session close. Pack the session data into
# an XML string and hand it to the object's writeData() method to store
# whereever.
sub closeBLM
{
    my $obj = shift;
    my $self = tied(%{$obj});

    # Check if data has been purged
    return unless exists $self->{'id'};

    # Check if data has been changed at all
    return unless $self->{'data_changed'};

    my $xml = Bedrock::XML::writeXMLString($self->{'data'});
    &log_message( undef, "User's session data contains\n$xml" ) if $self->{'verbose'};
    $self->writeData($xml);
}

sub clear
{
    my $obj = shift;
    %{$obj} = ();
}

# Method to remove all traces of the session from everywhere
#   -- cookie is deleted from browser
#   -- Data is removed from store
#   -- No more data can be stored
sub kill
{
    my $obj = shift;
    my $self = tied(%{$obj});
    $self->purgeData;
    my $ctx = $self->{'ctx'};
    my $name = $self->{'name'};
    my $id = delete $self->{'id'};
    my $expiry = 'Thu 09-Nov-2000 20:46:54 GMT';
    my $header = $name . '=' . $id . '; expires=' . $expiry . ';';
    $ctx->cgi_header_out('Set-Cookie', $header);
}

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.4  2008/12/03 14:01:19  alans
# We now use a hard-coded value for module $VERSION rather than a munged
# version of the expansion of the CVS 'Revision' keyword; the module API
# version number is orthogonal to the identifyer in the source control
# system.
#
# This change makes it safe to import the Bedrock codebase into another
# source repository (even CVS!) without breaking the code. We hit this
# issue when we first released the libbedrock-perl .deb package, for which
# we imported the release tarball sources into the 'bedrock-deb' CVS project.
#
# Revision 1.3  2001/02/14 15:35:47  sridhar
# Added copyright and GPL notice
#
# Revision 1.2  2000/11/13 14:49:10  sridhar
# 1. Subclasses can override method newSessionID(). A default method is
# provided which uses Apache's UNIQUE_ID.
# 2. More log messages
# 3. Added methods `clear()' and `kill()'
#
# Revision 1.1  2000/11/07 14:04:37  sridhar
# The Bedrock session module implements a general framework for more
# specialized session modules. Specifically implements all that is
# needed for session support except `readData()' and `writeData()'
# methods which subclasses are expected to implement.
#
#
