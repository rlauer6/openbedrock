package BLM::PDF::Document::Document;

use strict;
use BLM::PDF::Document::Page;
use BLM::PDF::Document::Page::Properties;
use BLM::PDF::Text::Properties;

# Note that a document is not a page object.
# You do not draw on a document object. 
# It is a container class.
sub new
{
   my ($class, $this) = @_;

   $this = {} unless ref $this;

   $$this{'pages'} 		= [];
   $$this{'num_pages'}		= 0;
   $$this{'use_outlines'}	= 0;
   $$this{'page_properties'}    = new BLM::PDF::Document::Page::Properties;
   $$this{'text_properties'}    = new BLM::PDF::Text::Properties;
   $$this{'root_document'}	= $this;
   bless $this, $class;
} # sub new

sub newPage
{
   my $this = shift;
   my $args = shift;
   $args = {} unless defined($args) && ref($args) == 'HASH';
   my $page = BLM::PDF::Document::Page->new($this->{'root_document'});
   $page->setOutlineText($$args{'outline_header_text'});
   $page->setParent($this);
   $page->setTextProperties($this->getTextProperties());
   $page->setPageProperties($this->getPageProperties());
   my $pages = $$this{'pages'};
   push(@$pages, $page);
   return $page;
} # sub newPage

sub _incPages 		{ ${_[0]}->{'num_pages'}++; }
sub getNumberOfPages 	{ ${_[0]}->{'num_pages'}; }
sub getPages 		{ @{${_[0]}->{'pages'}}; }

sub setUseOutlines
{
   my $this = shift;
   my $value = shift;
   $$this{'use_outlines'} = defined($value) && $value ? 1 : 0;
} # sub useOutlines

sub getUseOutlines 	{ ${_[0]}->{'use_outlines'}; }

sub setTextProperties
{
   my $this = shift;
   my $properties = shift;
   $$this{'text_properties'} = $properties->copy() if ref $properties;
} # sub setTextProperties

sub getTextProperties	{ ${_[0]}->{'text_properties'}->copy(); }

sub setPageProperties
{
   my $this = shift;
   my $properties = shift;
   $$this{'page_properties'} = $properties->copy() if ref $properties;
} # sub setPageProperties

sub getPageProperties	{ ${_[0]}->{'page_properties'}->copy(); }

1;

__END__

=pod

=head1 Synopsis

   use BLM::PDF::Document::Document

   Create a document object that can then be used to create
   page objects that comprise the target document.

=over 4

=item *
Subroutine

B<Name:>           new

B<Synopsis:>       Constructor

B<Arguments:>      None.

B<Example:> 

   my $document = BLM::PDF::Document::Document->new();

=item *
Subroutine

B<Name:>           newPage

B<Synopsis:>       Creates a new subpage.

   Subpages inherit the page and text properties from its
   parent. Top level pages are children of the Document
   object that created them. Although Documents are not
   pages, and cannot be drawn on, they have text and page
   properties for the sake of inheritance.

B<Arguments:>      None.

B<Example:> 

   my $pageone = $document->newPage();

=item *
Subroutine

B<Name:>           getNumberOfPages

B<Synopsis:>       Return the current total of pages

   Returns the current total number of pages. This includes
   all descendants of toplevel pages created by calling
   B<newPage> in the document. For the sake of output on a page,
   the '%N' token should be embedded in favor of calling this
   method as the value it expands to is dependant upon the 
   number of pages at rendering time and not of the moment of 
   insertion.

B<Arguments:>      None.

B<Example:> 

   my $current_pages = $document->getNumberOfPages();

=item *
Subroutine

B<Name:>           setUseOutlines

B<Synopsis:>       Activate or Disable document outlines

   If this option is active, when the document is rendered,
   the PDF objects for outline navigation are included in
   the output, otherwise, they are not generated. 

B<Arguments:>      Boolean

B<Default:>        I<False>

B<Example:> 

   my $document->setUseOutlines(1);

=item *
Subroutine

B<Name:>           setPageProperties

B<Synopsis:>       Set the properties for descendant pages

   A copy will be made of the reference's instance data, 
   therefore subsequent state transitions in the passed 
   reference will have no effect on descendant pages unless 
   this subroutine is called again with the reference as the 
   argument. 

   See the perldoc documentation for 
   BLM::PDF::Document::Page::Properties
   for further information.

B<Arguments:>      BLM::PDF::Document::Page::Properties reference

B<Example:>

   my $page_properties = new BLM::PDF::Document::Page::Properties;
   # Set all margins to one inch
   map { $page_properties->${_}(1); } 
     ( 'setTopMargin', 'setBottomMargin', 
       'setLeftMargin', 'setRightMargin', );
   $document->setPageProperties($page_properties);

=back

=item *
Subroutine

B<Name:>           getPageProperties

B<Synopsis:>       Returns a reference to a COPY of the current
		   page properties.

B<Arguments:>      None

B<Example:>

   my $page_properties = $document->getPageProperties();

=item *
Subroutine

B<Name:>           setTextProperties

B<Synopsis:>       Set the text properties to be inherited by
	           descendant pages.

   A copy will be made of the reference's instance data, 
   therefore subsequent state transitions in the passed 
   reference will have no effect on descendants unless this 
   subroutine is called again with the reference as the argument. 

   See the perldoc documentation for BLM::PDF::Text::Properties
   for further information.

B<Arguments:>      BLM::PDF::Text::Properties reference

B<Example:>

   my $text_properties = new BLM::PDF::Text::Properties;
   $text_properties->setColor('#3333FF');
   $text_properties->setAlign('center');
   $document->setTextProperties($text_properties);

=back

=item *
Subroutine

B<Name:>           getTextProperties

B<Synopsis:>       Returns a reference to a COPY of the current
		   text properties.

B<Arguments:>      None

B<Example:>

   my $text_properties = $document->getTextProperties();

=cut
