package BLM::PDF::Document::Document;

use strict;
use BLM::PDF::Document::Page;
use BLM::PDF::Document::Page::Properties;
use BLM::PDF::Text::TextProperties;

# Note that a document is not a page object.
# You do not draw on a document object. 
# It is a container class.
sub new
{
   my ($class, $this) = @_;

   unless( ref $this )
   { $this = {}; }

   $$this{'pages'} 		= [];
   $$this{'num_pages'}		= 0;
   $$this{'use_outlines'}	= 0;
   $$this{'page_properties'}    = new BLM::PDF::Document::Page::Properties;
   $$this{'text_properties'}    = new BLM::PDF::Text::TextProperties;
   $$this{'root_document'}	= $this;
   bless $this, $class;
} # sub new

sub newPage
{
   my $this = shift;
   my $args = shift;
   $args = {} unless defined($args) && ref($args) == 'HASH';
   my $page = BLM::PDF::Document::Page->new($this->{'root_document'});
   $page->setOutlineText($$args{'outline_header_text'});
   $page->setParent($this);
   $page->setTextProperties($this->getTextProperties());
   $page->setPageProperties($this->getPageProperties());
   my $pages = $$this{'pages'};
   push(@$pages, $page);
   return $page;
} # sub newPage

sub _incPages 		{ ${_[0]}->{'num_pages'}++; }
sub getNumberOfPages 	{ ${_[0]}->{'num_pages'}; }
sub getPages 		{ @{${_[0]}->{'pages'}}; }

sub setUseOutlines
{
   my $this = shift;
   my $value = shift;
   $$this{'use_outlines'} = defined($value) && $value ? 1 : 0;
} # sub useOutlines

sub getUseOutlines 	{ ${_[0]}->{'use_outlines'}; }

sub setTextProperties
{
   my $this = shift;
   my $properties = shift;
   $$this{'text_properties'} = $properties->copy() if ref $properties;
} # sub setTextProperties

sub getTextProperties	{ ${_[0]}->{'text_properties'}->copy(); }

sub setPageProperties
{
   my $this = shift;
   my $properties = shift;
   $$this{'page_properties'} = $properties->copy() if ref $properties;
} # sub setPageProperties

sub getPageProperties	{ ${_[0]}->{'page_properties'}->copy(); }

1;
