package BLM::PDF::Document::Page;


BEGIN
{
   use Exporter ();
   use vars    qw ($VERSION @ISA);
}

use lib '/export/home/aviert/modules';
use BLM::PDF::Defaults;
use BLM::PDF::Document::Document;
use BLM::PDF::Render::Newline;
use BLM::PDF::Text::Text;
use BLM::PDF::Text::TextProperties;

@ISA = qw(BLM::PDF::Document::Document PDF::Log);
use strict;

sub new
{
   my $class = shift;
   my $this = {};

   $$this{'outline_header_text'}= '';
   $$this{'parent'} 		= undef;
   $$this{'text_properties'}	= new BLM::PDF::Text::TextProperties;
   $$this{'components'}		= [];
   $$this{'flow_control'}	= [];
   $$this{'biggest_font'}       = $this->{'text_properties'}->getFontSize();
   $$this{'drop'}		= new BLM::PDF::Render::Newline;
   $$this{'width'}		= $BLM::PDF::Defaults::Defaults{'page_width'}*72;
   $$this{'height'}		= $BLM::PDF::Defaults::Defaults{'page_height'}*72;

   new BLM::PDF::Document::Document->new($this) ;
   bless($this, $class);
   $this->addComponent($this->{'drop'});

   #unshift @{$this->{'flow_control'}}, $$this{'text_properties'};
   push @{$this->{'flow_control'}}, $this;
   return $this;
} # sub new

sub setOutlineHeaderText
{
   my $this = shift;
   my $text = shift;

   $$this{'outline_header_text'} = $text if defined($text) && length($text);
} # sub setOutlineHeaderText

sub getHeight	
{ 
   my $this = shift;
   $$this{'height'};
} # method getHeight

sub getWidth
{
   my $this = shift;
   $$this{'width'};
} # method getWidth

sub getOutlineHeaderText
{
   my $this = shift;
   my $text = shift;

   return $$this{'outline_header_text'};
} # sub getOutlineHeaderText

sub setParent
{
   my $this = shift;
   my $obj = shift;

   $$this{'parent'} = $obj if ref $obj;
} # sub setParent

sub addComponent
{
   my $this = shift;
   my $ob = shift;

   if( ref $ob )
   {
      push @{$this->{'components'}}, $ob;
      push @{$this->{'flow_control'}}, $ob;
   }
} # sub addComponent

sub setTextProperties
{
   my $this = shift;
   my $properties = shift;
   $$this{'text_properties'} = $properties if ref $properties;
} # sub setTextProperties

sub addText
{
   my $this = shift;
   my $text = shift;

   my $properties = $this->getTextProperties();
   $this->addComponent($properties);
   my $size = $properties->getFontSize();

   my @lines = split "\n", $text;
   my $newlines = ($text =~ tr/\n//);
   my $i = $newlines;

   if( $i == 0 ) # Contining the same line, recalculate drop
   {
      $$this{'biggest_font'} = $size if $size > $$this{'biggest_font'};
   }
   else
   {
      $this->{'drop'}->setDrop(-$$this{'biggest_font'});
      $this->{'drop'} = BLM::PDF::Render::Newline->new(-$size);
      $$this{'biggest_font'} = $size;
   }

   foreach my $line (@lines)
   {
      if( $i )
      {
         $this->addComponent($this->{'drop'});
      }
      $i--;
      $this->addComponent(BLM::PDF::Text::Text->new($properties, $line));
   }

   while( $i-- > 0 )
   {
      $this->addComponent($this->{'drop'});
   }
} # sub addText

sub getTextProperties
{
   my $this = shift;
   my $parent = $$this{'parent'};
   die "Page has no parent!" unless defined $parent;
   my $properties = $$this{'text_properties'};
   #return $properties->join($parent->getTextProperties())->copy();
   return $properties->copy();
} # sub getTextProperties

sub getFlowControlObjects
{
   my $this = shift;
   return $this->{'flow_control'};
} # sub getFlowControlObjects

sub close
{
   my $this = shift;
   $this->addText("\n");
} # sub close

1;
