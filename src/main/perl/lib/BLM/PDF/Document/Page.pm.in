package BLM::PDF::Document::Page;


BEGIN
{
   use Exporter ();
   use vars    qw ($VERSION @ISA);
}

use BLM::PDF::Defaults;
use BLM::PDF::Document::Document;
use BLM::PDF::Render::Newline;
use BLM::PDF::Render::Text::Metrics;
use BLM::PDF::Text::Text;
use BLM::PDF::Text::Properties;

@ISA = qw(BLM::PDF::Document::Document PDF::Log);
use strict;

sub new
{
   my ($class, $root_document)  = @_;
   my $this 			= {};
   $$this{'outline_header_text'}= '';
   $$this{'parent'} 		= undef;
   $$this{'text_properties'}	= undef; #new BLM::PDF::Text::TextProperties;
   $$this{'page_properties'}	= undef; #new BLM::PDF::Document::Page::Properties;
   $$this{'components'}		= [];
   $$this{'biggest_font'}       = 0; #$this->{'text_properties'}->getFontSize();
   $$this{'drop'}		= new BLM::PDF::Render::Newline;
   $$this{'width'}		= $BLM::PDF::Defaults::Defaults{'page_width'}*72;
   $$this{'height'}		= $BLM::PDF::Defaults::Defaults{'page_height'}*72;
   $$this{'height'}		= $BLM::PDF::Defaults::Defaults{'page_height'}*72;
   $$this{'peer'}		= undef;
   $$this{'x'}			= 0;

   BLM::PDF::Document::Document->new($this);
   $$this{'root_document'}	= $root_document;
   $root_document->_incPages();
   bless($this, $class);
   $this->addComponent($this->{'drop'});

   push @{$this->{'components'}}, $this;
   $this;
} # sub new

sub setOutlineText
{
   my $this = shift;
   my $text = shift;

   $$this{'outline_header_text'} = $text if defined($text) && length($text);
} # sub setOutlineText

sub getHeight 		  { ${_[0]}->{'height'}; }
sub getWidth 		  { ${_[0]}->{'width'}; }
sub getOutlineText	  { ${_[0]}->{'outline_header_text'}; }
sub getComponents	  { ${_[0]}->{'components'}; } 
sub getRootDocument	  { ${_[0]}->{'root_document'}; } 

sub setPeer
{
   my $this = shift;
   $$this{'peer'} = shift;
} # sub setPeer

sub getPeer 		{ ${_[0]}->{'peer'}; } 

sub setParent
{
   my $this = shift;
   my $obj = shift;

   $$this{'parent'} = $obj if ref $obj;
} # sub setParent

sub addComponent
{
   my $this = shift;
   my $ob = shift;

   if( ref $ob )
   {
      push @{$this->{'components'}}, $ob;
   }
} # sub addComponent

sub setTextProperties
{
   my $this = shift;
   my $properties = shift;
   $$this{'text_properties'} = $properties->copy() if ref $properties;
} # sub setTextProperties

sub setPageProperties
{
   my $this = shift;
   my $properties = shift;
   $$this{'page_properties'} = $properties->copy() if ref $properties;
} # sub setPageProperties

sub getPageProperties { ${_[0]}->{'page_properties'}->copy(); }

sub addText
{
   my $this = shift;
   my $text = shift;
   my $properties = $$this{'text_properties'};
   $text = $this->_collapseText($text, $properties);
   $this->addComponent($properties);
   my $size = $properties->getFontSize();

   my @lines = split "\n", $text;
   my $newlines = ($text =~ tr/\n//);
   my $i = $newlines;

   if( 0 == $i ) # Contining the same line, recalculate drop
   {
      $$this{'biggest_font'} = $size if $size > $$this{'biggest_font'};
   }
   else
   {
      $this->{'drop'}->setDrop(-($$this{'biggest_font'}+
				 $$this{'page_properties'}->getVerticalPad()));
      $this->{'drop'} = BLM::PDF::Render::Newline->new(-$size);
      $$this{'biggest_font'} = $size;
   }

   foreach my $line (@lines)
   {
      $this->addComponent(BLM::PDF::Text::Text->new($properties, $line));

      if( $i > 0 )
      {
         $this->addComponent($this->{'drop'});
      }
      $i--;
   }

   while( $i-- > 0 )
   {
      $this->addComponent($this->{'drop'});
   }

   $$this{'x'} = 0 if $newlines >= @lines;
} # sub addText


=begin comment

$+ returns whatever the last bracket match matched. 
$& returns the entire matched string. 
($0 used to return the same thing, but not any more.) 
$` returns everything before the matched string. 
$' returns everything after the matched string. Examples: 

=cut

sub _collapseText
{
   my ($this, $text, $text_properties) = @_;
   my $page_properties = $$this{'page_properties'};
   my $left_margin     = 72*$page_properties->getLeftMargin();
   my $right_margin    = $this->getWidth()-(72*$page_properties->getRightMargin());
   my $line_width      = $right_margin-$left_margin;	
   my $metrics = BLM::PDF::Render::Text::Metrics->new($text_properties, 
				           $text_properties->getFont());
   my $fontsize 	    = $text_properties->getFontSize();
   my $newlines             = ($text =~ tr/\n//);
   my @lines                = split "\n", $text;
   my @collapsed            = ();
   my $ignore_leading_space = $page_properties->getDiscardLeadingSpace();

   push @lines, map { '' } (1..($newlines-@lines+1));

   my $x = $$this{'x'};
   $x = $left_margin unless $x >= $left_margin;

   foreach my $line (@lines)
   {
      my @collected 	= ();
      my $width 	= $metrics->stringWidth($line, $fontsize);

      if( $x+$width <= $right_margin )
      {  
         push @collapsed, $line;
	 $x += $width;
      }
      else
      {
	 $_ = $line;

         while( length $_ )
	 {
	    my $is_spaces = 0;
	    /^\w+/ or  ($is_spaces = $_ =~ /^\s+/) or /^\W+/;

	    my $word_width = $metrics->stringWidth($&, $fontsize);

	    if( $x+$word_width <= $right_margin )
	    {
	       push @collected, $& unless $ignore_leading_space && 
			        $is_spaces && 0 == @collected;
	       $x += $word_width;
	    }
	    else
	    { 
	       push @collapsed, join '', @collected;
	       $x = $left_margin;
	       @collected = ();

	       if( $x+$word_width < $line_width )
	       { 
		  push @collected, $&; 
	          $x += $word_width;
	       }
               else  
	       {
	          my @split =
                       $this->_splitLongText($text, $metrics, $fontsize,
			                     $line_width, $right_margin-$x);

	          push @collapsed, @split;
	          $x += $metrics->stringWidth($split[-1],$fontsize);
	       }
	    }
	    $_ = $';
	 }
	 push @collapsed, join '', @collected;
      }
   }
   $$this{'x'} = $x;

   join "\n", @collapsed;
} # sub _collapseText

sub _splitLongText
{
   my ($this, $text, $metrics, $fontsize, $line_width, $first_remaining) = @_;
   my @broken = ();

   print STDERR "Long segment started at: $$this{'x'}\n";
   my $getFittedSubstring = sub
   {
      my ($string, $threshold) = @_;
      my ($fit, $remain);
      my $length = $metrics->stringWidth($string, $fontsize);
      print STDERR "Length: \"$string\"($fontsize) $length Threshold: $threshold\n";

      if( $metrics->stringWidth($string, $fontsize) <= $threshold )
      {
         ($fit, $remain) = ($string, '');
      }
      else
      {
         $_ = $string;
         my ($i, $length) = (1, 0);

         for( ;; $i++ )
         {
            /.{$i}?/;
            $length = $metrics->stringWidth($&, $fontsize);

            if( $length > $threshold )
	    {
               ($fit, $remain) = ($&, $');
               $remain .= chop $fit unless length $remain == 1;
	       last;
	    }
	    last unless length $';
         } 
      }
      ($fit, $remain);
   }; # sub getFittedSubstring
   
   my ($fit, $remain) = 
     $getFittedSubstring->($text, $first_remaining);

   push @broken, $fit;

   while( length $remain )
   {
      ($fit, $remain) = 
         $getFittedSubstring->($remain, $line_width);

      print STDERR "FIT: $fit REMAIN: $remain\n";
      push @broken, $fit;
   }

   @broken;
} # sub _splitLongText

sub getTextProperties
{
   my $this = shift;
   my $parent = $$this{'parent'};
   die "Page has no parent!" unless defined $parent;
   my $properties = $$this{'text_properties'};
   $properties->copy();
} # sub getTextProperties

sub close
{
   my $this = shift;
   # This ensures one-line non newline terminated pages are handled correctly
   $this->addText("\n");
   # Add headers and footers
   my $page_properties = $$this{'page_properties'};
   my @aligns = ('Left', 'Center', 'Right');
   my @funcs = ('', 'Font', 'Color', 'Size');
   # Font, Color, Size

   foreach my $type (map { (["${_}Header", $_, 'top',], 
                            ["${_}Footer", $_, 'bottom']); } @aligns)
   {
      my $text_properties = new BLM::PDF::Text::Properties;
      my $font = $text_properties->getFont();
      my $prefix = 'get'.$type->[0];
      my $text = $page_properties->${prefix}();

      if( defined $text )
      {
         $text_properties->setAlign($type->[1]);
         $text_properties->setVAlign($type->[2]);
         $text_properties->setColor($page_properties->${\"${prefix}Color"}());
         $text_properties->setFontSize($page_properties->${\"${prefix}FontSize"}());
         $font->setFontName($page_properties->${\"${prefix}FontName"}());
         $this->setTextProperties($text_properties);
	 $this->addText($text);
      }
   }
} # sub close

1;
