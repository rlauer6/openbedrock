package BLM::PDF::Render::PDFObject;

BEGIN
{
   use vars qw(@ISA $AUTOLOAD)
}

use BLM::PDF::Log;
use BLM::PDF::Document::Document;
use BLM::PDF::Render::Dictionary;
use BLM::PDF::Render::Stream;

use strict;

sub new
{
   my $class = shift;
   my ($registry, $peer) = @_;
   #print "CLASS: $class, REGISTRY: $registry\n";
   die "No registry in constructor" unless ref $registry;

   my $this = 
     {
        'object_number'  => $registry->nextObjectNumber(),
        'object' 	 => new BLM::PDF::Render::Dictionary,
        'peer'	         => $peer,
        'registry'	 => $registry,
     };

   bless $this, $class;
} # sub new

sub setObject
{
   my $this = shift;
   return unless ref $this;
   $$this{'object'} = shift;
} # sub setObject

sub getObjectNumber { ${_[0]}->{'object_number'}; }

sub getReference
{
   my $this = shift;
   return undef unless defined $$this{'object_number'};
   return "$$this{'object_number'} 0 R";
} # sub getReference

sub setRegistry
{
   my $this = shift;
   my $registry = shift;
   $$this{'registry'} = $registry if ref $registry;
} # sub setRegistry

sub getRegistry { ${_[0]}->{'registry'}; }
sub getPeer     { ${_[0]}->{'peer'}; }

sub render
{
   my $this = shift;

   return undef unless defined $$this{'object_number'};

   $$this{'_RENDERED'}++;

   return "$$this{'object_number'} 0 obj\n" . 
           $this->{'object'}->render() .
           "\nendobj";
} # sub render

sub getRendered { ${_[0]}->{'_RENDERED'}; }

sub AUTOLOAD
{ # Redirect missing functions to the PDF virtual object
   my $this = shift;
   return unless ref $this;
   my $func_name = pop @{[ split "::", $AUTOLOAD ]};
   #print STDERR "FUNC: $func_name\n";
   $this->{'object'}->$func_name(@_) if $this->{'object'}->can($func_name);
} # sub AUTOLOAD

1;
