package BLM::PDF::Render::PDFObject;

BEGIN
{
   use vars qw(@ISA $AUTOLOAD)
}

use lib '/export/home/aviert/modules';
use BLM::PDF::Log;
use BLM::PDF::Document::Document;
use BLM::PDF::Render::Dictionary;
use BLM::PDF::Render::Stream;

use strict;

sub new
{
   my $class = shift;
   my ($registry, $peer) = @_;
   #print "CLASS: $class, REGISTRY: $registry\n";
   die "No registry" unless ref $registry;
   #my $this = new BLM::PDF::Render::Dictionary;
   my $this = {};

   $$this{'object_number'} = BLM::PDF::Render::ObjectRegistry::nextObjectNumber();
   $$this{'object'}	   = new BLM::PDF::Render::Dictionary;
   $$this{'peer'}	   = $peer;
   $$this{'registry'}	   = $registry;

   bless $this, $class;
   return $this;
} # sub new

sub setObject
{
   my $this = shift;
   return unless ref $this;
   $$this{'object'} = shift;
} # sub setObject

sub getObjectNumber
{
   my $this = shift;
   return $$this{'object_number'};
} # sub getObjectNumber

sub getReference
{
   my $this = shift;
   return undef unless defined $$this{'object_number'};
   return "$$this{'object_number'} 0 R";
} # sub getReference

sub setRegistry
{
   my $this = shift;
   my $registry = shift;
   $$this{'registry'} = $registry if ref $registry;
} # sub setRegistry

sub getRegistry
{
   my $this = shift;
   return $$this{'registry'};
} # sub getRegistry

sub getPeer 
{
   my $this = shift;
   return $$this{'peer'};
} # sub getPeer

sub render
{
   my $this = shift;

   return undef unless defined $$this{'object_number'};

   return "$$this{'object_number'} 0 obj\n" . 
           $this->{'object'}->render() .
           "\nendobj\n";
} # sub render

sub AUTOLOAD
{
   my $this = shift;
   return unless ref $this;
   my $func_name = pop @{[ split "::", $AUTOLOAD ]};
   $this->{'object'}->$func_name(@_) if $this->{'object'}->can($func_name);
} # sub AUTOLOAD

1;
