# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::PDF::Render::Outline;

use BLM::PDF::Log;
use BLM::PDF::Document::Document;
use BLM::PDF::Render::Page;
use BLM::PDF::Render::PDFObject;

@ISA = qw(BLM::PDF::Render::PDFObject);

use strict;

sub new
{
   my ($class, $registry, $document) = @_;

   my $this = 
      {
         'registry'	=> $registry,
	 'document'	=> $document,
      };
 
   return bless $this, $class;
} # sub new

sub preorder
{
   my ($node, $registry, $visit, $children, $parent_output, $level) =  @_;
   my $output = [];
   map { preorder($_, $registry, $visit, $children, $output, $level+1); } 
      $children->($node);
   $visit->($node, $registry, $parent_output, $output, $level) if $level;
   return $output;
} # sub preorder

sub visit
{
   my ($page, $registry, $output, $children, $level) = @_;
   my $item = BLM::PDF::Render::PDFObject->new($registry);
   $registry->addObject($item);
   $item->insertString('Title',  $page->getOutlineText());
   my $array = new BLM::PDF::Render::Array;
   $array->insertIndirectObject($page->getPeer());
   $array->insertName('Fit');
   $item->insertArray('Dest',  $array);
   my $prev = $output->[-1];

   if( ref $prev )
   {
      $item->insertIndirectObject('Prev', $prev);
      $prev->insertIndirectObject('Next', $item);
   }

   if( scalar @$children)
   {
      $item->insertIndirectObject('First', $children->[0]);
      $item->insertIndirectObject('Last', $children->[-1]);
   }

   push @$output, $item;
} # sub visit

sub children { ${_[0]}->getPages(); }

sub render
{
   my $this 		= shift;
   my $document		= $$this{'document'};
   my $registry		= $$this{'registry'};
   my $outline_dict	= BLM::PDF::Render::PDFObject->new($registry);

   my $top_level = [];
   $top_level = preorder($document, $registry, \&visit, \&children, $top_level, 0);

   $outline_dict->insertName('Type', 'Outlines');
   $outline_dict->insertIndirectObject('First', $top_level->[0]);
   $outline_dict->insertIndirectObject('Last', $top_level->[-1]);

   $registry->addObject($outline_dict);
   my $catalog = $registry->getObject('document_catalog');
   $catalog->insertIndirectObject('Outlines', $outline_dict);
   $catalog->insertName('PageMode', 'UseOutlines');
} # sub render

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.5  2001/02/14 15:35:45  sridhar
# Added copyright and GPL notice
#
# Revision 1.4  2001/02/14 15:24:46  sridhar
# added CVS headers and trailers
#
#
