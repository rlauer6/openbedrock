package BLM::PDF::Render::Outline;

use BLM::PDF::Log;
use BLM::PDF::Document::Document;
use BLM::PDF::Render::Page;
use BLM::PDF::Render::PDFObject;

@ISA = qw(BLM::PDF::Render::PDFObject);

use strict;

sub new
{
   my ($class, $registry, $document) = @_;

   my $this = 
      {
         'registry'	=> $registry,
	 'document'	=> $document,
      };
 
   return bless $this, $class;
} # sub new

sub render
{
   my $this 		= shift;
   my $document		= $$this{'document'};
   my 

   for( my($i, $length) = (1, scalar(@$page_info)-1); $i < $length; $i++ )
   {
      my $current_info = $page_info->[$i];
      my $prev_info = $page_info->[$i-1];
      my $next_info = $page_info->[$i+1];

      my $first_item; 
      my $last_item;

      if( defined $current_info->{'subpages'} )
      { 
	    my $ar_ref = $current_info->{'subpages'};

	    if( scalar(@$ar_ref) > 0 )
         {
	      $first_item = $current_info->{'subpages'}->[0]->{'obref'}
	         if defined $current_info->{'subpages'}->[0]->{'obref'};

	      $last_item = $current_info->{'subpages'}->[-1]->{'obref'}
	         if defined $current_info->{'subpages'}->[-1]->{'obref'};
         }

         $this->_buildOutline($$current_info{'subpages'}, 
                              $$current_info{'obref'});  
      }
   
     # Add the next outline item that has both a previous and next

     my $args = 
     {
       "/Title" => "(" . $current_info->{'page'}->getOutlineHeaderText . ")",
   	  "/Parent" => "$parent 0 R",
   	  "/Prev" => "$prev_info->{'obref'} 0 R",
   	  "/Next" => "$next_info->{'obref'} 0 R",
     };

     $args->{'/First'} = "$first_item 0 R" if defined $first_item;
     $args->{'/Last'} = "$last_item 0 R" if defined $last_item;
     my($ref, $ob) = buildPDFObject($args, $current_info->{'obref'});
     $this->addPDFObject($ob);
  }
   
  # The first and last outline items are special cases
  if( scalar(@$page_info) == 1 )
  {
     my $current_info = $info->[0];

     if( defined $page_info->[0]->{'subpages'} )
     { $this->_buildOutline($info->[0]->{'subpages'}, 
                            $info->[0]->{'obref'}); 
     }
   
     my $ar_ref = $current_info->{'subpages'};

     my ($first_item, $last_item);

     if( scalar(@$ar_ref) > 0 )
     {
	   $first_item = $current_info->{'subpages'}->[0]->{'obref'}
	      if defined $current_info->{'subpages'}->[0]->{'obref'};

	   $last_item = $current_info->{'subpages'}->[-1]->{'obref'}
	      if defined $current_info->{'subpages'}->[-1]->{'obref'};
     }

     my $args =
       { "/Title" => "(" . $info->[0]->{'page'}->getOutlineHeaderText . ")",
   	    "/Parent" => "$parent 0 R",
   	  };

     $args->{'/First'} = "$first_item 0 R" if defined $first_item;
     $args->{'/Last'} = "$last_item 0 R" if defined $last_item;

     my ($ref, $ob) =buildPDFObject($args, $info->[0]->{'obref'});

     $this->addPDFObject($ob);
  }
  elsif( scalar(@$info) > 1 )
  {
     if( defined $info->[0] )
     { $this->_buildOutline($info->[0]->{'subpages'}, 
                            $info->[0]->{'obref'}); }
   
     if( defined $info->[-1] )
     { $this->_buildOutline($info->[-1]->{'subpages'}, 
                            $info->[-1]->{'obref'}); }
   
   
     my $current_info = $info->[0];
     my $ar_ref = $current_info->{'subpages'};
     my ($first_item, $last_item);

     if( scalar(@$ar_ref) > 0 )
     {
	   $first_item = $current_info->{'subpages'}->[0]->{'obref'}
	      if defined $current_info->{'subpages'}->[0]->{'obref'};

	   $last_item = $current_info->{'subpages'}->[-1]->{'obref'}
	      if defined $current_info->{'subpages'}->[-1]->{'obref'};
     }

     my $args =
     {
         "/Title" => "(" . $info->[0]->{'page'}->getOutlineHeaderText . ")",
   	    "/Parent" => "$parent 0 R",
   	    "/Next" => "$info->[1]->{'obref'} 0 R",
     };

     $args->{'/First'} = "$first_item 0 R" if defined $first_item;
     $args->{'/Last'} = "$last_item 0 R" if defined $last_item;
     my ($ref, $ob) = buildPDFObject($args,  $info->[0]->{'obref'});
     $this->addPDFObject($ob);
   
     my $current_info = $info->[-1];
     my $ar_ref = $current_info->{'subpages'};

     if( scalar(@$ar_ref) > 0 )
     {
	   $first_item = $current_info->{'subpages'}->[0]->{'obref'}
	      if defined $current_info->{'subpages'}->[0]->{'obref'};

	   $last_item = $current_info->{'subpages'}->[-1]->{'obref'}
	      if defined $current_info->{'subpages'}->[-1]->{'obref'};
     }

     $args =
     { "/Title" => "(" . 
          $info->[-1]->{'page'}->getOutlineHeaderText . ")",
   	  "/Parent" => "$$this{'pdf_obrefs'}{'outlines_dictionary'} 0 R",
   	  "/Prev" => "$info->[1]->{'obref'} 0 R",
       "/Title" => "(" . $info->[-1]->{'page'}->getOutlineHeaderText . ")",
   	  "/Parent" => "$parent 0 R",
   	  "/Prev" => "$info->[-2]->{'obref'} 0 R",
     };
   
     $args->{'/First'} = "$first_item 0 R" if defined $first_item;
     $args->{'/Last'} = "$last_item 0 R" if defined $last_item;
     ($ref, $ob) = buildPDFObject($args, $info->[-1]->{'obref'});
     $this->addPDFObject($ob);
   }
} # sub _buildOutline
