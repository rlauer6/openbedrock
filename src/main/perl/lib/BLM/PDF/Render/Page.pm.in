# ident "@(#) $Header$"
# ident "@(#)        $Name$"

package BLM::PDF::Render::Page;

@ISA = qw(BLM::PDF::Render::PDFObject);

use BLM::PDF::Log;
use BLM::PDF::Document::Document;
use BLM::PDF::Document::Page;
use BLM::PDF::Render::Array;
use BLM::PDF::Render::Cursor;
use BLM::PDF::Render::Dictionary;
use BLM::PDF::Render::Newline;
use BLM::PDF::Render::PDFObject;
use BLM::PDF::Render::Stream;
use BLM::PDF::Render::Text;
use BLM::PDF::Render::Text::Object;
use strict;

my %cached_fonts = ();

sub new
{
   my $class = shift;
   my ($pages, $registry, $peer, $page_node, $page_num) = @_;
   die "Peer not given in constructor" unless ref $peer;
   my $this = BLM::PDF::Render::PDFObject->new($registry, $peer);

   $$this{'pages'}		= $pages;
   $$this{'page_node'} 		= $page_node;
   $$this{'page_num'}		= $page_num;
   $$this{'page_contents'}	= [];
   $$this{'page_resources'}	= new BLM::PDF::Render::Dictionary;
   $$this{'fonts'}		= new BLM::PDF::Render::Dictionary;
   $$this{'active_font'}	= undef;
   $$this{'text_object'}	= undef;
   my ($height, $width) 	= ($peer->getHeight(), $peer->getWidth());
   $$this{'cursor'}		= BLM::PDF::Render::Cursor->new(0, $height);
   $$this{'components'}		= $peer->getComponents();

   bless $this, $class;
} # sub new

sub _paginate
{
   # The new page will inherit the state from the paginating
   # parent and allow it to handle the remaining components
   my ($parent, $remaining) = @_;
   my ($registry, $peer) = ($parent->getRegistry(), $parent->getPeer());
   my $this = BLM::PDF::Render::PDFObject->new($registry, $peer);

   foreach my $key ('pages', 'page_node', 'page_resources', 'fonts',
		    'active_font' )
   { $$this{$key} = $$parent{$key}; }

   $$this{'page_num'}    = $$parent{'page_num'}+1;
   $$this{'page_contents'} = [];
   $$this{'text_object'} = undef;
   $$this{'cursor'}      = BLM::PDF::Render::Cursor->new(0, $peer->getHeight());
   $$this{'components'}	 = $remaining;

   #print STDERR "PARENT: $parent PEER: $peer THIS: $this\n";
   #print STDERR "KIDS IN PAGINATE: ",$this->{'pages'}->getKids(),"\n";
   #while( my($key, $value) = each %$this )
   #{ print STDERR "$key => $value\n"; }

   bless $this, ref $parent;
   $parent->{'pages'}->addKid($this);
   $registry->addObject($this);

   $this->validate();
} # _paginate

sub getPageNumber() { ${_[0]}->{'page_num'}; }

sub validate
{
   my $this 	= shift;
   my $registry = $this->getRegistry();
   my $peer	= $this->getPeer();
   my $page_properties = $peer->getPageProperties();
   my $components = $$this{'components'};
   my $cursor 	= BLM::PDF::Render::Cursor->new(0, $this->{'cursor'}->y());
   my $text_properties = undef;
   
   $cursor->advance(0, -$page_properties->getTopMargin()*72);

   for( my ($i, $j) = (0, scalar @$components); $i < $j; $i++ )
   {
      my $obj = $components->[$i];
      $text_properties = $obj if 'BLM::PDF::Text::Properties' eq ref $obj;
      last if defined $text_properties;
   }

   my $bottom_margin = $page_properties->getBottomMargin()*72;

   for( my ($i, $j) = (0, scalar @$components); $i < $j; $i++ )
   {
      my $obj = $components->[$i];
      next unless 'BLM::PDF::Render::Newline' eq ref $obj;
      $cursor->advance(0, $obj->getDrop());

      if( $cursor->y() < $bottom_margin )
      {
         my $remaining = [splice @$components, $i];
         unshift @$remaining, $text_properties if defined $text_properties;
         $this->_paginate($remaining);
	 last;
      }
   }
} # sub validate

sub render
{
   my $this 	= shift;
   my $registry = $this->getRegistry();
   my $peer	= $this->getPeer();
   my $page_properties = $peer->getPageProperties();
   my $layout	= $$this{'components'};
   my $resources = $$this{'page_resources'};

   $this->insertName('Type', 'Page');

   $this->insertRectangle('MediaBox', 0, 0, $peer->getWidth(), 
			  $peer->getHeight());

   #$this->insertIndirectObject('Parent', $$this{'page_node'});
   $this->insertIndirectObject('Parent', $registry->getObject('page_tree'));

   $this->_startTextObject();

   # Move the origin to the upper left corner of the page
   # where we will begin drawing
   $this->{'text_object'}->addBytes("0 ". $peer->getHeight() . " Td\n");
   # Drop down to the margin head
   {
      my $nl = BLM::PDF::Render::Newline->new(-$page_properties->getTopMargin()*72);
      $this->_handleObject($nl);
   }

   while( my $component = shift @$layout )
   {
      #print STDERR "Object: $component\n";
      $this->_handleObject($component, $peer);
   }
   $this->_endTextObject();

   my $array = new BLM::PDF::Render::Array;

   foreach my $item (@{$this->{'page_contents'}})
   {
      #print STDERR "ITEM: $item\n";
      if( ref $item )
      { $array->insertIndirectObject($item); }
   }
   $this->insertArray('Contents', $array);
   $resources->insertDictionary('Font', $$this{'fonts'});
   $this->insertDictionary('Resources', $resources);

   return $this->SUPER::render();
} # sub render

sub _handleObject
{
   my $this		= shift;
   my ($ob, $peer)	= @_;
   my %handlers =
   (
      'BLM::PDF::Text::Text'	       => \&_handleText,
      'BLM::PDF::Render::Newline'      => \&_handleNewline,
      'BLM::PDF::Text::Properties'     => \&_handleTextProperties,
      'BLM::PDF::Document::Page'       => \&_nillHandler,
   );
   my $handler = $handlers{ref $ob};
   die "NO HANDLER for type '", ref $ob, "'" unless ref $handler eq 'CODE';
   $handler->($this, $ob, $peer);
} # sub _handleObject

sub _handleText
{
   my $this 		= shift;
   my ($ob, $peer) 	= @_;
   my $registry		= $this->getRegistry();
   my $obj 		= BLM::PDF::Render::PDFObject->new($registry);
   my $font		= $$this{'active_font'};
   my $properties 	= $$this{'active_properties'};
   my $text_object	= $$this{'text_object'};

   $properties = $ob->getProperties();
   #print STDERR "VALIGN: " . $properties->getVAlign() . " (".$ob->getText().")\n";
   my $text = BLM::PDF::Render::Text->new($this, $properties, $font, 
				     $$this{'cursor'});
   $text->drawString($ob->getText());
   $text_object->addBytes($text->render())
} # sub _handleText

sub _handleNewline
{
   my $this 		= shift;
   my ($ob, $peer) 	= @_;
   my $text_object	= $$this{'text_object'};
   my $cursor	    	= $$this{'cursor'};
   my $left_margin  	= 72 * $this->getPeer()->getPageProperties()->getLeftMargin();
   my $xtranslate	= -$cursor->x()+$left_margin;

   $text_object->addBytes(sprintf("%0.8f %d Td\n", $xtranslate, $ob->getDrop()));
   $this->{'cursor'}->advance($xtranslate, $ob->getDrop());

   $this->_paginate if $cursor->y() <= 
	$this->getPeer()->getPageProperties()->getBottomMargin();
} # sub _handleNewline

sub _handleTextProperties
{
   my $this 			= shift;
   my ($properties, $peer) 	= @_;
   my $fontpeer = $properties->getFont();
   #print STDERR "properties for handle: " . $fontpeer->getFontHandle() . "\n";
   my $font = $this->_buildFont($properties, $fontpeer);
   $$this{'active_font'} = $font;
   $$this{'active_properties'} = $properties;
} # sub _handleTextProperties

sub _buildFont
{
   my $this = shift;
   my ($properties) = @_;
   my $fontpeer = $properties->getFont();
   my $fontname = $fontpeer->getFontName();
   my $registry = $this->getRegistry();
   my $font = $cached_fonts{$fontname};

   if( defined $font )
   {
      $fontpeer = $font->getPeer();
      my $handle = $fontpeer->getFontHandle();

      $this->{'fonts'}->insertIndirectObject($handle, $font)
         unless $this->{'fonts'}->exists($handle);
   }
   else
   {
      $font = BLM::PDF::Render::PDFObject->new($registry, $fontpeer);
      $this->{'fonts'}->insertIndirectObject($fontpeer->getFontHandle(), $font);
      $font->insertName('Type', 'Font');
      $font->insertName('Subtype', 'Type1');
      $font->insertName('BaseFont', $fontpeer->getFontName());
      $cached_fonts{$fontname} = $font;
      my $registry = $this->getRegistry();
      $registry->addObject($font);
   }
   return $font;
} # sub _buildFont

sub _startTextObject
{
   my $this = shift;
   $$this{'text_object'}	= new BLM::PDF::Render::Text::Object;
} # _startTextObject

sub _endTextObject
{
   my $this = shift;
   my $text_object 	= $$this{'text_object'};
   my $registry		= $this->getRegistry();
   my $obj = BLM::PDF::Render::PDFObject->new($registry);
   $obj->setObject(new BLM::PDF::Render::Stream);
   #my $text_ob = BLM::PDF::Render::Text->new($properties, $font);
   $obj->setBytes("\nBT\n" . $text_object->render() . "ET\n");
   $registry->addObject($obj);
   push @{$this->{'page_contents'}}, $obj;
} # sub _endTextObject

sub _nillHandler {}

1;
# Page.pm

#
# Name of Release: $Name$
# $Log$
# Revision 1.6  2001/02/14 15:24:46  sridhar
# added CVS headers and trailers
#
#
