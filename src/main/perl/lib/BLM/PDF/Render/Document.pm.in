package BLM::PDF::Render::Document;

BEGIN
{
   use vars qw(@ISA);
}

use BLM::PDF::Log;
use BLM::PDF::Defaults;
use BLM::PDF::Document::Document;
use BLM::PDF::Render::ObjectRegistry;
use BLM::PDF::Render::Page;
use BLM::PDF::Render::Pages;
use BLM::PDF::Render::PDFObject;

@ISA = qw(BLM::PDF::Render::PDFObject);

use strict;

my $PDFEOF = '%%EOF';

sub new
{
   my ($class, $registry, $peer) = @_;

   my $this =  
      { 'registry'	=> $registry,
	'peer'		=> $peer,
	'pages'		=> [],
	'pdf_file'	=> '',
      };

   my $newOb = 
      sub { BLM::PDF::Render::PDFObject::new('PDF::Render::PDFObject', $registry); };
  
   my $catalog = $newOb->();
   $catalog->insertName('Type', 'Catalog');
   $registry->setObject('document_catalog', $catalog);

   return bless $this, $class;
} # sub new

sub render
{
   my $this = shift;
   my $registry = $this->getRegistry();
   my $peer = $this->getPeer();

   if( $peer->getUseOutlines() )
   {
      #my $outline = new BLM::PDF::Render::Outline, $registry, $$this{'pages'};
      #$outline->render();
   }

   my $pages = BLM::PDF::Render::Pages::new('PDF::Render::Pages', $registry, 
				       [$peer->getPages()]);
   $pages->render();
   my @xref_table = ();
 
   $$this{'pdf_file'} = "\%PDF-$BLM::PDF::Defaults::Defaults{'version'}\n";
   my $offset = length $$this{'pdf_file'};
 
   # Sort the object by object number. This is
   # necessary so that the cross reference table
   # is correct as it is generated in ascending order
   my @objects = @{$registry->getObject('objects')};
 
   # During a pass of the objects, calling render may create
   # more objects. We must make as many passes as it takes to
   # render all objects
   my $pass = 1;
   my $untouched_objects = 1;
   my %touched_objects = ();
   my $size = scalar @objects;
   while( $untouched_objects )
   {
      @objects = 
	sort { $a->getObjectNumber() <=> $b->getObjectNumber } @objects;

      print STDERR "PASS $pass\n";
      foreach my $obj (@objects)
      {
	  next if exists $touched_objects{$obj};
	  $touched_objects{$obj} = 1;
          #print STDERR "RENDERING: $obj $$obj{'object'}\n";
          my $text = $obj->render() . "\n";

          push(@xref_table, sprintf("%-10.10d %-5.5d n\n",
    		             length($$this{'pdf_file'}), 0));

          $offset += length $text;
   
          $$this{'pdf_file'} .= $text;
      }

      @objects = @{$registry->getObject('objects')};
      $untouched_objects = @objects - $size;
      print STDERR "ADDITIONAL ", @objects-$size, " objects added\n";
      $size = scalar @objects;
      $pass++;
      die if $pass > 3;
   } 

   # Add the file trailer
   my $trailer = new BLM::PDF::Render::Dictionary;
   my $catalog = $registry->getObject('document_catalog');
   $trailer->insertNumber('Size', $registry->getNextObjectNumber());
   $trailer->insertIndirectObject('Root', $catalog);
 
   # Now add the cross reference table
   my $xref_offset = length($$this{'pdf_file'});
 
   $$this{'pdf_file'} .= "xref\n" .
                         "0 ".(scalar(@xref_table)+1)."\n".
                         "0000000000 65535 f\n".
    	                 join("", @xref_table);
 
   $$this{'pdf_file'} .= "\ntrailer\n". $trailer->render();
   # Add the startxref and the eof
   return $$this{'pdf_file'} .= qq(\nstartxref\n$xref_offset\n$PDFEOF);
} # render

1;
