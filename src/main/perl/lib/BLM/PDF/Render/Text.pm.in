package BLM::PDF::Render::Text;

use BLM::PDF::Log;
use BLM::PDF::Render::Cursor;
use BLM::PDF::Render::Text::Metrics;
use strict;

# This hash maps font names to metrics objects
my %cached_metrics = ();

sub new
{
   my $class = shift;

   my $this = 
     {
	'page'		=> shift,
        'properties'	=> shift,
        'font'		=> shift,
        'cursor'	=> shift,
	'text'		=> '',
     };

   return bless $this, $class;
} # sub new

sub drawString
{
   my $this = shift;
   my $text = shift;
   $this->{'text'} .=  $text;
} # sub drawString

sub render
{ 
   my $this 		= shift;
   my $pagepeer		= $$this{'page'}->getPeer();
   my $rendered 	= '';
   my $properties 	= $$this{'properties'};
   my $align		= $properties->getAlign();
   my $valign		= $properties->getVAlign();
   my $font		= $$this{'font'};
   my $fontpeer		= $font->getPeer();
   my $fontsize		= $properties->getFontSize();
   my $color		= $properties->getColor();
   my $cursor		= $$this{'cursor'};
   my ($r, $g, $b)	= (substr($color, 1, 2), substr($color, 3, 2),
			   substr($color, 5, 3));

   $rendered .= '/' . $fontpeer->getFontHandle() . " $fontsize Tf\n".
	        $properties->getRenderMode() . " Tr\n".
	        hex($r)/255 . ' ' . hex($g)/255 . ' ' . hex($b)/255 . " rg\n";

   my @lines = split "\n", $this->{'text'};
   if( scalar @lines > 1 ) { die ref($this) . " no multiple lines, please"; }
   my $line = @lines;

   my $textwidth;
   my $textheight = $fontsize;

   my $cx = $cursor->x();
   my $cy = $cursor->y();

   my %getXAlign = 
      ( "left"   => sub {-$cx; },
        "center" => sub {-$cx+(($pagepeer->getWidth()-$textwidth)/2); },
        "right"  => sub {-$cx+($pagepeer->getWidth()-$textwidth); },
      );

   my %getYAlign = 
      ( "top"    => sub {$pagepeer->getHeight()-$cy-$textheight; },
        "center" => sub {-$cy+(($pagepeer->getHeight()-$textheight)/2); },
        "bottom" => sub {-$cy; }
      );

   my $text = $this->{'text'};
   #print "FONT NAME: " . $fontpeer->getFontName() . "\n";
   my $metrics = $cached_metrics{$fontpeer->getFontName()};

   unless( ref $metrics )
   {
      $metrics = BLM::PDF::Render::Text::Metrics->new($properties, $font);
      $cached_metrics{$fontpeer->getFontName()} = $metrics;
   }

   $textwidth = $metrics->stringWidth($text, $fontsize);
   return '' unless $textwidth > 0;

   my ($x, $y) = (0, 0);
   $y = $getYAlign{$valign}->() if defined $valign;
   $x = $getXAlign{$align}->() if defined $align;

   # Escape special characters ala pdf
   $text =~ s.\(.\\(.g;
   $text =~ s.\).\\).g;
   $text =~ s.\\.\\\\.g;

   # Escape special characters provided by this suite
   # What happens to '%%n' where we really mean just '%n'?
   $text =~ s.%n.$this->{'page'}->getPageNumber().eg;
   $text =~ s.%N.$pagepeer->getRootDocument()->getNumberOfPages().eg;
   $text =~ s.%t.localtime.eg;
 
   if( $x+$y != 0 )
   { 
      $rendered .= "$x $y Td\n" . "($text) Tj\n" .
                   -$x . " " . " " . -$y . " Td\n"; 
   }
   else { $rendered .= "($text) Tj\n"; }
   $rendered .= "$textwidth 0 Td\n";
   $cursor->advance($textwidth, 0);

   return  $rendered;
} # sub render

1;
# Text.pm
