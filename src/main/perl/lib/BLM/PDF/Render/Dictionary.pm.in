# ident "@(#) $Header$"
# ident "@(#)        $Name$"

#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.org
#    Copyright (C) 2001, Charles Jones, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

package BLM::PDF::Render::Dictionary;

use BLM::PDF::Log;
use strict;

sub new
{
   my $class = shift;
   my $this = { 'dictionary' => { },
		'dictionary_array' => [],
              };

   bless $this, $class;
} # sub new

sub exists 
{
   my $this = shift;
   my $value= shift;
   exists $this->{'dictionary'}->{"/$value"};
} # sub exists

sub insertName
{
   my $this = shift;
   my ($key, $value) = @_;
   $this->{'dictionary'}->{"/$key"} = "/$value";
} # sub insertName

sub insertString
{
   my $this = shift;
   my ($key, $value) = @_;
   $this->{'dictionary'}->{"/$key"} = "($value)";
} # sub insertString

sub insertNumber
{
   my $this = shift;
   my ($key, $value) = @_;
   die "Inserted non-number" unless $value =~ /^\d+$/ or $value =~ /^-\d+$/;
   $this->{'dictionary'}->{"/$key"} = "$value";
} # sub insertNumber

sub insertIndirectObject
{
   my $this = shift;
   my ($key, $value) = @_;
   #print STDERR "INDIRECT OB($key, $value)\n";
   $this->{'dictionary'}->{"/$key"} = $value->getReference();
} # sub insertIndirectObject

sub insertRectangle
{
   my $this = shift;
   my ($key, $lrx, $lry, $ulx, $uly) = @_;
   $this->{'dictionary'}->{"/$key"} = "[$lrx $lry $ulx $uly]";
} # sub insertRectangle

sub insertDictionary
{
   my $this = shift;
   my ($key, $dictionary) = @_;

   $this->{'dictionary'}->{"/$key"} = $dictionary->render();
} # sub insertDictionary

sub insertArray
{
   my $this = shift;
   my ($key, $array) = @_;

   $this->{'dictionary'}->{"/$key"} = $array->render();
} # sub insertArray

sub insertStream
{
   my $this = shift;
   my ($stream) = @_;
   push @{$this->{'dictionary_array'}}, $stream->render();
} # sub insertStream

sub render 
{
   my $this 	 = shift;
   my $to_string = "<<\n";

   while( my ($key, $value) = each(%{$this->{'dictionary'}}) )
   {
      $to_string .= "  $key $value\n";
   }

   foreach my $value (@{$this->{'dictionary_array'}})
   {
      $to_string .= "$value\n";
   }

   $to_string .= ">>";
} # sub render

1;

#
# Name of Release: $Name$
# $Log$
# Revision 1.6  2001/02/14 15:35:45  sridhar
# Added copyright and GPL notice
#
# Revision 1.5  2001/02/14 15:24:46  sridhar
# added CVS headers and trailers
#
#
