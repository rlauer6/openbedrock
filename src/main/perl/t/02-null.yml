---
name: <null> invalid type
error: /invalid type/
op: like
test: <null:foo:bar baz>
---
name: <null:varname>
comment:
result: 1
test: <null:foo 1><if $foo --eq "1">1<else>0</if>
---
name: <null:object:varname>
comment:
result: foobarbaz
test: <null:hash:foo foo 1 bar 2 baz 3><var $foo.keys()>
---
name: <null:array:varname />
comment:
result: foobarbaz
test: <null:array:foo foo bar baz /><var $foo>
---
name: null --json
comment:
result: "bar"
test: |-
  <null:foo --json '{ "foo" : "bar" }'><var $foo.foo>
---
name: null assignment
result: foo
test: <null:foo foo><var $foo>
---
name: missing end of tag
comment: |
  check to see if Bedrock throws exception on missing '>'
error: /illegal here/
test: <null:foo foo<var $foo>
op: like
---
name: null:array assignment
test: <null:array:foo 1 2 3 4><if --array $foo>1</if>
result: 1
---
name: null array assignment
test: <null:foo 1 2 3 4><if --array $foo>1</if>
result: 1
---
name: null --define-var assignment
test: <null --define-var="foo" foo><var $foo>
result: foo
---
name: null hash assignment
test: <null:hash:foo foo bar><var $foo.foo>
result: bar
---
name: base64 encode
comment: |
  encode base64 - (echo -E "foo" | base64)
test: |-
  <null:foo foo><null:foo $foo.base64()><null:foo --base64 $foo><var $foo>
result: foo
---
name: base64 decode
comment: |
  decode base64 to string - (echo -E "foo" | base64)
test: <null:foo --base64 'Zm9v' ><var $foo>
result: foo
---
name: q{}
comment:
test: <null:foo q{this isn\'t a test that should break}><var $foo>
result: "this isn't a test that should break"
---
name: qw{}
comment:
test: <null:foo qw{this isn\'t a test that should break}><if --array $foo><var $foo.length()><else>not an array</if>
result: 7
---
name: '*v'
comment: dereference a variable
test: |
  <null:bar test>
  <null:foo bar>
  <var *foo>, <var $foo>, <var $bar>
result: /\s*test, bar, test\s*/
op: like
---
name: range 1:10
comment: <null --range>
test: |-
   <null:foo --range="1:10">
   <trace --output $foo>
chomp: 2
result: |-
  [
    [0] .. (1)
    [1] .. (2)
    [2] .. (3)
    [3] .. (4)
    [4] .. (5)
    [5] .. (6)
    [6] .. (7)
    [7] .. (8)
    [8] .. (9)
    [9] .. (10)
    ]
---
name: range 1..10
comment: <null --range>
test: |-
   <null:foo --range="1..10">
   <trace --output $foo>
chomp: 2
result: |-
  [
    [0] .. (1)
    [1] .. (2)
    [2] .. (3)
    [3] .. (4)
    [4] .. (5)
    [5] .. (6)
    [6] .. (7)
    [7] .. (8)
    [8] .. (9)
    [9] .. (10)
    ]
---
name: range "1, 10"
comment: <null --range>
test: |-
   <null:foo --range="1, 10">
   <trace --output $foo>
chomp: 2
result: |-
  [
    [0] .. (1)
    [1] .. (2)
    [2] .. (3)
    [3] .. (4)
    [4] .. (5)
    [5] .. (6)
    [6] .. (7)
    [7] .. (8)
    [8] .. (9)
    [9] .. (10)
    ]
---
name: range error
comment: <null --range>
test: |-
   <null:foo --range="1, 0">
   <trace --output $foo>
error: '/invalid range/'
---
comment: <null --lc>
name: lc
test: |-
   <null:foo --lc ABC><var $foo>
result: abc
---
comment: <null --uc>
name: uc
test: |-
   <null:foo --uc abc><var $foo>
result: ABC
---
comment: <null --filter-hash>
name: filter-hash
test: |-
  <null:foo --json '[ {"foo" : "bar", "buz" : "biz"} , {"foo" : 1, "buz" : "xxx"}]'>
  <null:foo --filter-hash='{ "foo" : "bar" }' $foo><var --flush $foo.length()>
result: 1
chomp:
