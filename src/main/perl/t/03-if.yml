--- 
name: --eq
comment:
param: 
  foo: bar
result: 1
test: <if $foo --eq "bar">1<else>0</if>
--- 
name: "expr: --eq"
param: 
  foo: bar
result: 1
test: <if ($foo --eq "bar")>1<else>0</if>
--- 
name: --ne
comment:
param: 
  foo: bar
result: 0
test: <if $foo --ne "bar">1<else>0</if>
--- 
name: "expr: --ne"
comment:
param: 
  foo: bar
result: 0
test: <if ($foo --ne "bar")>1<else>0</if>
--- 
name: --or
comment:
param: 
  foo: 1
result: 1
test: <if $foo --or "0">1<else>0</if>
--- 
name: --and
comment:
param: 
  foo: 1
result: 1
test: <if $foo --and  "1">1<else>0</if>
---
name: --defined
comment:
param: 
  foo: bar
result: defined
test: <if --defined $foo>defined<else>not defined</if>
---
name: "expr: --defined"
comment:
param: 
  foo: bar
result: defined
test: <if ( --defined $foo) >defined<else>not defined</if>
--- 
name: not --defined
comment:
param: 
  foo: bar
result: defined
test: <if --not (--defined $foo)>not defined<else>defined</if>
--- 
name: "expr: not --defined"
comment:
param: 
  foo: bar
result: defined
test: <if (--not (--defined $foo))>not defined<else>defined</if>
--- 
name: --exists
comment:
param: 
  foo: bar
result: exists
test: <if --exists $foo>exists<else>does not exist</if>
---
name: "expr: --exists"
comment:
param: 
  foo: bar
result: exists
test: <if ( --exists $foo)>exists<else>does not exist</if>
---
name: not --exists
comment:
param: 
  foo: bar
result: does not exist
test: <if --exists $baz>exists<else>does not exist</if>
---
name: "expr: not --exists"
comment:
param: 
  foo: bar
result: does not exist
test: <if (--exists $baz)>exists<else>does not exist</if>
---
name: --scalar
comment:
param: 
  foo: bar
result: 1
test: <if --scalar $foo>1<else>0</if>
---
name: --array
comment:
result: 1
test: <array:foo 1 2 3><if --verbose --verbose --array $foo>1<else>0</if>
---
name: array.length()
comment:
result: 3
test: <array:foo 1 2 3><var $foo.length()>
---
name: --hash
comment:
param:
  foo:
      baz: buz
result: buz
test: <if ( (--hash $foo) --and ( $foo.baz --eq 'buz'))><var $foo.baz><else>0</if>
---
name: array.split()
comment:
result: 1
test: <null:foo "this,that,another"><null:bar $foo.split(",")><if ((--array $bar) --and ($bar.length() --eq 3))>1<else>0</if> 
---
name: trap an invalid method
comment:
result: "1\n"
test: |
  <try>
    <array:foo>
    <null $foo.foo()>
    did not catch the error
  <catch>
    <flush>1</try>
---
name: --reftype 'ARRAY'
comment: ARRAY
result: "1\n"
test: |
    <array:foo><if $foo --reftype 'ARRAY'>1</if>
---
name: --reftype 'HASH'
comment: HASH
result: "1\n"
test: |
    <hash:foo><if $foo --reftype 'HASH'>1</if>
---
name: --reftype 'SCALAR'
comment: SCALAR
result: "1\n"
test: |
    <null:foo boo><if $foo --reftype 'SCALAR'>1</if>
---
name: --ref 'Bedrock::Array'
comment: Bedrock::Array
result: "1\n"
test: |
    <null:foo 1 2 3><if $foo --ref 'Bedrock::Array'>1</if>
---
name: --ref 'qr/^Bedrock::/'
comment: qr/Bedrock::/
result: "1\n"
test: |
    <null:foo 1 2 3><if $foo --ref 'qr/^Bedrock::/'>1</if>
---
name: --ref '/^Bedrock::/'
comment: /Bedrock::/
result: "1\n"
test: |
    <null:foo 1 2 3><if $foo --ref '/^Bedrock::/'>1<else>0</if>
---
name: --ref '/^BLM::/' (negative case)
comment: /BLM::/
result: "0\n"
test: |
    <null:foo 1 2 3><if $foo --ref '/^BLM::/'>1<else>0</if>
---
name: --ref '/^B/edrock::/' (bad regexp)
comment: /B/edrock::/
result: "/doesn't look like/"
op: like
test: |
    <try>
      <null:foo 1 2 3><if $foo --ref '/^B[]ledrock::/'>1</if>
    <catch>
      <var $@>
    </try>
---
name: --re 'qr/^Bedrock::/'
comment: qr/Bedrock::/
result: "1\n"
test: |
    <null:foo 1 2 3><if 'Bedrock::' --re 'qr/^Bedrock::/'>1<else>nope</if>
---
name: --re '/^Bedrock::/'
comment: /Bedrock::/
result: "1\n"
test: |
    <null:foo 1 2 3><if 'Bedrock::' --re '/^Bedrock::/'>1<else>nope</if>
---
name: --re '/^Bedrock::(?<foo\>.*)$/'
comment: /Bedrock::Array/
result: "/Array/"
op: like
test: |
    <if 'Bedrock::Array' --re '/^Bedrock::(?<foo\>.*)$/'>
      <var $foo>
    <else>
      nope
    </if>
---
name: --re "/^Bedrock::(?'foo'.*)$/"
comment: /Bedrock::Array/
result: "/Array/"
op: like
test: |
    <if 'Bedrock::Array' --re "/^Bedrock::(?'foo'.*)$/">
      <var $foo>
    <else>
      nope
    </if>
---
name: --re '/^Bedrock::(.*)$/'
comment: /Bedrock::Array/
result: "/Array/"
op: like
test: |
    <if 'Bedrock::Array' --re '/^Bedrock::(.*)$/'>
      <var $_1>
    <else>
      nope
    </if>
--- 
name: --re "/disabled/ (positive case)
comment: --re postive case
result: "1\n"
test: |
    <null:foo disabled><if --verbose $foo --re 'qr/disabled/'>1<else>0</if>
---
name: --re "/disabled/" (negative case)
comment: --re negative case
result: "0\n"
test: |
    <null:foo enabled><if --verbose $foo --re 'qr/disabled/'>1<else>0</if>
