########################################################################
# Appenders
########################################################################

# bedrock.log       => Bedrock
# bedrock-page.log  => TagX, BLM
# bedrock-test.log  => Bedrock::Test
# bedrock-{PID}.log => handler log (startup)

## rootLogger
log4perl.rootLogger=DEBUG, Bedrock

## Bedrock
log4perl.appender.Bedrock=Log::Log4perl::Appender::File
log4perl.appender.Bedrock.filename=bedrock.log
log4perl.appender.Bedrock.mode=append
log4perl.appender.Bedrock.autoflush=1
log4perl.appender.Bedrock.layout=PatternLayout
log4perl.appender.Bedrock.layout.ConversionPattern=%d (%r) (%p) [%P] [%l] %c - %m%n

## Test
log4perl.appender.Test=Log::Log4perl::Appender::File
log4perl.appender.Test.filename=bedrock-test.log
log4perl.appender.Test.mode=append
log4perl.appender.Test.autoflush=1
log4perl.appender.Test.layout=PatternLayout
log4perl.appender.Test.layout.ConversionPattern=%d (%r) (%p) [%P] [%l] %c - %m%n

### Trace
log4perl.appender.Trace=Log::Log4perl::Appender::File
log4perl.appender.Trace.filename=bedrock-page.log
log4perl.appender.Trace.mode=append
log4perl.appender.Trace.autoflush=1
log4perl.appender.Trace.layout=PatternLayout
log4perl.appender.Trace.layout.ConversionPattern=%d (%r) (%p) [%P] [%l] %c - %n%m%n

#########################################################################
## Categories
#########################################################################

### Bedrock::*
log4perl.category.Bedrock=DEBUG, Bedrock
log4perl.additivity.Bedrock=0

## Bedrock::Test::**
log4perl.category.Bedrock.Test=DEBUG, Test
log4perl.additivity.Bedrock.Test=0

# Note 1:
# -------
# The TagX.TAG category uses the "page logger" (Trace).  Whenever <trace> is
# used the loglevel is automatically set to DEBUG by Bedrock.
#
# Note 2:
# -------
# --verbose options will automatically set the loglevel to DEBUG
# enabling page logging.
#
# Note 3:
# -------
# Setting the loglevel here to DEBUG or TRACE will enable verbose
# "internal" Bedrock logging.
#
# Some known side effects of this will include modules like
# "BLM::Benchmark" which relies on FETCH to trigger an action. The
# module uses TIEHASH and defines a FETCH method that performs some
# magic when a key is accessed. In DEBUG mode, when these objects may
# be dumped as Bedrock interprets the tag, FETCH may be called
# triggering that magic. In the case of "BLM::Benchmark", because it
# uses the FETCH to start a timer, the timer essentially gets
# restarted when the object is accessed, causing unanticiapted
# results.
#
# Any other module that uses such a mechanism to trigger an action may
# fail in a similar fashion. In other words, the act of observing the
# object which is the mechanism for this module to trigger an action,
# triggered the action in an opaque fashion.

### Page logging!
log4perl.category.TagX.TAG=INFO, Trace 
log4perl.additivity.TagX.TAG=0

log4perl.additivity.BLM=0
log4perl.category.BLM=DEBUG, Trace 
