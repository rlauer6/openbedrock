---
name: 'pebbledef (define)'
comment: define a pebble
test: |
  <pebbledef:foo>
     <var  $ARGV.join(",")>
  </pebbledef><trace --output --pebble-cache>
result: /foo\s=>\s.*<var\s+\$ARGV\.join\(","\)>/xsm
op: like
---
name: '<pebble:foo> (execute)'
comment: execute a pebble
test: |
  <pebbledef:foo>
     <var  $ARGV.join(",")>
  </pebbledef><pebble:foo 1 2 3>
result: /1,2,3/
op: like
---
name: 'derefence variable (<var *v>)'
comment: dereference a variable
test: |
  <pebbledef:foo>
    <null:v $ARGV.shift()>
    <var *v>
  </pebbledef>
  <null:a woohoo>
  <pebble:foo a b c>
result: /woohoo/
op: like
---
tempfile:
  name: foo.peb
  cleanup: 1
  content: |
    <var $ARGV.join(",")>
name: '<pebble:foo> (file)'
comment: access pebble in current working directory
test: |
  <pebble:foo a b c>
result: /a,b,c/
op: like
---
tempfile:
  name: foo.peb
  cleanup: 1
  content: |
    <var $ARGV.join(",")>
name: '<pebble:foo> (file)'
comment: access pebble in current working directory
test: |
  <pebble:foo a b c>
result: /a,b,c/
op: like
---
tempfile:
  name: foo.peb
  cleanup: 1
  content: |
    <var $ARGV.join(",")>
name: '<pebble --pebble=foo 1 2 3>'
comment: read from file
test: |
  <pebble --pebble=foo.peb  1 2 3>
result: /1,2,3/
op: like
---
tempfile:
  name: foo.peb
  cleanup: 1
  content: |
    <var $ARGV.join(",")>
name: '<pebble:foo --expand-args>'
comment: expand argument
test: |
  <null:a 1 2 3>
  <pebble:foo --expand-args $a>
result: /1,2,3/
op: like
---
name: <pebble --define-var>
comment: capture output in variable
chomp: 1
test: |
  <sink><pebbledef:foo><var  $ARGV.join(",")></pebbledef>
  </sink><pebble:foo --define-var=foo  a b c><var $foo>
result: a,b,c
---
name: <pebble --return-var>
comment: return a value in a variable
chomp: 1
test: |
  <sink><pebbledef:foo><null:boo  $ARGV.join(",")></pebbledef>
  </sink><pebble:foo --return-var=boo  a b c><var $boo>
result: a,b,c
---
name: <pebble --return-var=boo:biz>
comment: return a value in a variable as new variable name
chomp: 1
test: |
  <sink><pebbledef:foo><null:boo  $ARGV.join(",")></pebbledef>
  </sink><pebble:foo --return-var=boo:biz  a b c><var $biz>
result: a,b,c
---
name: <pebble --object=object>
comment: define a pebble in an object
chomp: 2
test: |
  <if 1><sink:macro --noexec><var $ARGV.join(",")></sink>
  <pebble --object=$macro 1 2 3>
  </if>
result: 1,2,3
---
tempfile:
  name: foo.peb
  dir: t
  cleanup: 1
  content: |
    <var $ARGV.join(",")>
name: '<pebble --pebble=t/foo>'
chomp: 1
trim: 1
comment: relative path
test: |
  <null:a 1 2 3><pebble --pebble=t/foo 1 2 3>
result: 1,2,3
---
tempfile:
  name: foo.peb
  dir: t
  cleanup: 1
  content: |
    <var $ARGV.join(",")>
name: '<pebble --pebble=~foo>'
chomp: 1
trim: 1
env:
  DOCUMENT_ROOT: t
comment: DOCUMENT_ROOT
test: |
  <null:a 1 2 3><pebble --pebble=~foo 1 2 3>
result: 1,2,3
