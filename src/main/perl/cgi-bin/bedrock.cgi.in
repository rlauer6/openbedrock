#!/usr/bin/env perl
# -*- mode: perl; -*-
#
#    This file is a part of Bedrock, a server-side web scripting tool.
#    Check out http://www.openbedrock.net
#    Copyright (C) 2001, Charles Jones, LLC.
#    Copyright (C) 2024, TBC Development Group, LLC.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# @configure_input@

use strict;
use warnings;

# TODO: determine if this section still has any value now that we have
# builds that produce CPAN distributions.

# Fixup @INC so that all Perl mods needed by the prog can be found
# ___REPLACE_ME__BEGIN_BLOCK__CONFIGURED_PERL_INC___

BEGIN {
  use English qw(-no_match_vars);
  use Bedrock::Constants qw(:chars $DEFAULT_BEDROCK_CONFIG_PATH $DEFAULT_BEDROCK_PERL5LIBDIR);

  if ( !$COMPILING ) {

    if ( open my $fh, '<', 'perl.INC' ) {
      while ( my $path = <$fh> ) {
        chomp $path;
        next if !-d $path;

        unshift @INC, <$fh>;
      }
      close $fh;
    }

    if ( -d "$DEFAULT_BEDROCK_PERL5LIBDIR/Bedrock" ) {
      push @INC, "$DEFAULT_BEDROCK_PERL5LIBDIR/Bedrock";
      $ENV{BEDROCK_CONFIG_PATH} //= $DEFAULT_BEDROCK_CONFIG_PATH;
    }
  }
}

# 8<------------------- start of fix ---------------------------------
# Fix for POSTs so big that some servers will terminate the connection
# if the server does not respond quickly enough, mistakenly believing
# it may be a DoS attack. This seems to only happen running under
# mod_cgi.  Enable this block if you find that this is happening in
# your environment.
#
# use CGI qw(:param);
# param;
#
# It has been suggested that setting mod_reqtimeout's value of
# RequestReadTimeout may solve this issue as well.
#
# https://stackoverflow.com/questions/56299633/apache-resetting-connection-on-large-file-uploads
#
#  RequestReadTimeout header=0 body=0

# 8<------------------- end of fix -----------------------------------

# use Bedrock;  # placing this first, also "fixes" @INC

use Apache::Request::CGI;
use Bedrock::Apache::Constants qw(:http);
use Carp;

our %ERROR_HANDLERS = (
  $REDIRECT => sub {
    shift->send_http_header;
    return $REDIRECT;
  },
  $NOT_FOUND => sub {
    return http_error( $NOT_FOUND, 'Not Found',
      "The requested URL $ENV{PATH_INFO} was not found on this <b>Bedrock Enabled</b> server." );
  },
  $FORBIDDEN => sub {
    return http_error( $FORBIDDEN, 'Forbidden',
      q{You don\'t have permission to access the requested object. It is either read-protected or not readable by the server.}
    );
  },
  $SERVER_ERROR => sub {
    my ( $r, $code ) = @_;
    return http_error( $code, 'Internal Server Error', "Unknown Bedrock error: [$code]" );
  },
);

########################################################################
sub get_handler {
########################################################################
  my ($name) = @_;

  $name //= $PROGRAM_NAME;

  my $class = $EMPTY;

  ## no critic (ProhibitUnusedCapture)
  if ( $name =~ /(bedrock)\-?(?<suffix>.*?)?[.]cgi$/xsm ) {
    $class = join q{}, map {ucfirst} split /\-/xsm, $LAST_PAREN_MATCH{suffix};
  }

  return 'Apache::Bedrock' . $class;
}

########################################################################
sub http_error {
########################################################################
  my ( $status, $status_name, $message ) = @_;

  $message //= 'NO MESSAGE';

  my $html = <<"END_OF_HTML";
Content-type: text/html
Status: $status

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
  <head>
    <title>$status $status_name</title>
  </head>
  <body>
    <h1>$status_name</h1>
    <p>$message</p>
    <hr>
    <address>$ENV{SERVER_SIGNATURE}</address>
  </body>
</html>
END_OF_HTML

  print $html;

  return $status;
}

########################################################################
sub main {
########################################################################

  local $SIG{TERM} = \&confess;

  my $log_level = $ENV{BedrockLogLevel} // $ENV{LogLevel};

  my $r = Apache::Request::CGI->new( log_level => $log_level );

  my $class = get_handler $PROGRAM_NAME;

  $r->log->info( sprintf 'Bedrock CGI started with handler: [%s]', $class );

  my $code = eval {
    my $file = $class;
    $file =~ s/::/\//gxsm;

    require "$file.pm";

    my $handler = "${class}::handler";

    no strict 'refs';  ## no critic (ProhibitNoStrict)

    return &{$handler}($r);
  };

  if ($EVAL_ERROR) {
    $r->log->error($EVAL_ERROR);
    return http_error( $SERVER_ERROR, "could not invoke handler\n" . $EVAL_ERROR );
  }

  return $code
    if $r->content_type =~ /json/xsm;

  $r->log->debug( sprintf 'return code from handler: %s', $code );

  return 0
    if !$code;

  my $error_handler = $ERROR_HANDLERS{$code} // $ERROR_HANDLERS{$SERVER_ERROR};

  return $error_handler->( $r, $code );
}

exit main();

1;

__END__

=pod

=head1 NAME

bedrock.cgi - Apache Bedrock CGI handler

=head1 SYNOPSIS

 AddType	text/html .roc .rock
 AddType application/json .jroc .jrock

 # CGI handlers
 Action        bedrock-cgi  /cgi-bin/bedrock.cgi virtual

 AddHandler    bedrock-cgi .rock .jrock

=head1 DESCRIPTION

C<bedrock.cgi> implements the initialization and execution of a
Bedrock web application by invoking an Apache handler designed to run
in a CGI environment.

Its primary job is to serve up Bedrock pages by passing the request
through the C<Apache::Bedrock> handler. It does this by instantiating
a request handler (C<Apache::Request::CGI), however this script is also
used to instantiate other requests handlers like
C<Apache:>BedrockDocs> or C<Apache::BedrockSessionFiles>.

When C<bedrock.cgi> is invoked, it determines which handler to use by
examing the script name. While the content of each named script is
exactly the same, the script just uses the suffix portion of the
script name to determine which request handler to invoke.

Thus, this script can invoke any request handler whose name conforms
to a certain pattern. The name of the request handler to invoke is
derived from the suffix (portion after "bedrock-") of the script's name
without the extension.

 bedrock /(bedrock)\-?(?<suffix>.*?)?[.]cgi$/

You can therefore use this harness to invoke any of the handlers included in
this project:

=over 5

=item C<Apache::Bedrock>

If the script name is C<bedrock.cgi>, then the script invokes the
C<Apache::Bedrock> handler.

=item C<Apache::BedrockDocs>

If the script name is C<bedrock-docs.cgi>, then the script invokes the
C<Apache::BedrockDocs> handler.

=item C<Apache::BedrockSessionFiles>

If the script name is C<bedrock-session-files.cgi>, then the script invokes the
C<Apache::BedrockSessionFiles> handler.

=item C<Apache::BedrockAutocomplete>

If the script name is C<bedrock-autocomplete.cgi>, then the script invokes the
C<Apache::BedrockAutocomplete> handler.


=item Custom Handlers

You can invoke your own handler by copying C<bedrock.cgi> and renaming
the file using the template shown below:

 bedrock-CLASSNAME.cgi

Dashes in your CLASSNAME are removed and the first letter of each word
is assumed to be upper cased. Using the model above you can see that
the session file handler is named C<Apache::BedrockSessionFiles> and
the CGI is named C<bedrock-session-files>.

If the name of your Bedrock CGI script is C<bedrock-foo-bar>, then the
class should be named C<Apache::BedrockFooBar> and should be installed
either alongside the other handlers (@libdir@/perl5/Bedrock) or
somewhere along C<perl>'s C<@INC> paths.

=back

=head2 ERROR HANDLING

The script attempts to do something intelligent with handler return
codes, although the return code from a script which is run under
C<mod_cgi> itself is pretty irrelevant.  C<mod_cgi> more or less
ignores the return code, however this script expects to use the return
code from the handler as a way to figure out what we should present to
the user. Your handlers should be capable of running under either
C<mod_cgi> or C<mod_perl> and should return an error code in the same
way that C<mod_perl> handlers return error codes.

You handler can detect whether they it is running under C<mod_perl> or
C<mod_cgi> by examining the environment variable C<MOD_PERL>.

=head1 LOGGING

As of Bedrock 3.2.x, logging is done using L<Log::Log4perl> via the
L<Bedrock::Logger> role. When the C<get_logger()> method of the
request object (L<Apache::Bedrock::Request::CGI> is called the first
time to log a message, the C<Bedrock::Logger> will provision the
default appender that writes to STDERR. 

I<Note that that all log messages prior to your handler being called
being called will be written to the log file defined in Apache's
configuration file at the level defined by the environment variable
C<LogLevel> or C<BedrockLogLevel> (See L</LOG LEVELS>).>

Once your handler method is invoked, the L<Bedrock::Context>
constructor will attempt to find a F<log4perl.conf> file somewhere in
Bedrocks's configuration paths (C<BEDROCK_CONFIG_PATH>,
C<CONFIG_PATH>). If a configuration file is found it will passed to
L<Log::Log4perl> for processing.

=head1 LOG LEVELS

When running the CGI version of Bedrock, BedrockE<039>s initial log
level is controlled by the environment variable I<BedrockLogLevel>.
You can set that in your Apache configuration file as shown below.

 SetEnv BedrockLogLevel warn

Note that the log levels set here should be one of a subset of the log
level values used by Apache.

 error
 warn
 info
 debug

The default level is I<info>.

We recommend that you simply clone the value of ApacheE<039>s
I<LogLevel> using the environment variable I<BedrockLoglevel>.

 LogLevel warn
 SetEnv BedrockLogLevel warn

Messages logged in the Bedrock handler itself using the Apache request
object are logged to whatever has been configured in the virtual host
configuration or the main Apache configuration file if no virtual
hosts have been defined.

 $r->debug("this is a debug message");

=head2 Determining Apache's Log Level

In order to determine Bedrock's log level, we look in the
environment for `BedrockLogLevel`.  The default level is C<info>
We do this so that we are logging at the correct level upon entry to
this script.  Reading the log level from the Bedrock configuration
is too late if we want to log information regarding the process of
interpretting the configuration file (and we do).  Ideally we would
use Apache's log level, however that is not directly exposed to us
in a CGI Perl script.

Apache's F<httpd.conf> configuration file can define (and does) define
a log level.

 LogLevel warn

It's possible to use L<Apache::ConfigFile> to parse Apache's
configuration file, however we would have to know where the virtual
host and server configuration files reside in order to munge for
C<LogLevel>.

=head2 Finer Grained Control of Logging

As noted above, after the request handler invokes your C<handler()>
method, logging is done by L<Log::Log4perl> and configured using the
F<log4perl.conf> file found by the L<Bedrock::Context> class during
initialization. Within the context of Bedrock processing, modules use
the C<Bedrock::Logger> role and the C<get_logger()> method to retrieve
the L<Log::Log4perl> logger. To debug any of your modules (including
Bedrock itself) you can set the debug level of categories in the
F<log4perl.conf> file.

When processing tags Bedrock will set the debug level to C<$DEBUG> or
C<$TRACE> when the one or more C<--verbose> options are defined in the
tag.

Log at the C<$DEBUG> level...

 <var --verbose $foo.bar()>    

Log at the C<$TRACE> level...

 <var --verbose --verbose $foo.bar()>

=head1 CONFIGURING APACHE

C<bedrock.cgi> is invoked by Apache as the handler for Bedrock
content. This Apache handler is configured in the normal manner in
which Apache handlers are configured.

  Action bedrock-cgi /cgi-bin/bedrock.cgi virtual

  AddHandler bedrock-cgi .roc .rock .jroc .jrock

  SetHandler bedrock-cgi

Enabling the C<mod_perl> handlers for Bedrock is done by specifying
the handler classes use the B<PerlHandler> directive.

  <IfModule mod_perl.c>
    PerlRequire   @configdir@/startup.pl
    AddHandler    perl-script .roc .jroc
    PerlHandler   Apache::Bedrock
  </IfModule>

You can use the C<<IfModule>> directive to detect that C<mod_perl> is
available and either use the CGI version of Bedrock or the C<mod_perl>
handler.

  <IfModule mod_perl.c>
    SetHandler perl-script
    PerlHandler Apache::Bedrock 
  </IfModule>

  <IfModule !mod_perl.c>
    SetHandler bedrock-cgi
  </IfModule>

This method works with any of the handlers described above.

=head1 BUGS

Report bugs here https://github.com/rlauer6/openbedrock/issues

=head2 File Uploads

Large POSTs may cause a disconnect when running under mod_cgi perhaps
because the delay in responding may be mistakenly be interpretted as a
DDoS.  Empirically it has been found that the belo incantation will
"fix" the issue.

 use CGI qw(:param);
 param;

An effort is being made to remove CGI from Bedrock so unless this is a
problem, this has been removed starting with version 3.2.1.

It has also been suggested that setting mod_reqtimeout's value
(RequestReadTimeout) may solve this issue as well.

L<https://stackoverflow.com/questions/56299633/apache-resetting-connection-on-large-file-uploads>

 RequestReadTimeout header=0 body=0

=head1 ORIGINAL AUTHOR

Jay Sridhar

=head2 Current Maintainer

Rob Lauer <bigfoot@cpan.org>

=head2 Contributors

Alan D. Salewski

=cut
