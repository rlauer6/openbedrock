#!/usr/bin/env perl
# -*- perl -*-
# @configure_input@

use strict;
use warnings;

# Fixup @INC so that all Perl mods needed by the prog can be found
# ___REPLACE_ME__BEGIN_BLOCK__CONFIGURED_PERL_INC___

BEGIN {
  if ( open my $fh, '<', 'perl.INC' ) {
    unshift @INC, <$fh>;
    close $fh;
    chomp @INC;
  }

  use Config;
  use File::ShareDir qw(dist_dir);

  my ($sitelib) = Config::config_re('installsitelib');

  if ( $sitelib =~ /\'([^']+)\'/xsm ) {
    push @INC, "$1/Bedrock";
  }

  if ( !$ENV{BEDROCK_CONFIG_PATH} ) {
    $ENV{BEDROCK_CONFIG_PATH} = sprintf '%s/config', dist_dir('Bedrock');
  }
}

use CGI qw(:cgi);

# 8<------------------- start of fix ---------------------------------
#  fix for POSTs that are somewhat big, some servers will terminate
#  the connection if the server does not respond quickly enough,
#  mistakely believing it may be a DoS attack.
param;
# 8<------------------- end of fix -----------------------------------

# use Bedrock;  # placing this first, also "fixes" @INC

use Apache::Request_cgi;
use Bedrock::Apache::Constants qw(:http);
use Bedrock::Constants qw(:chars);
use Carp;
use English qw(-no_match_vars);

########################################################################
sub get_handler {
########################################################################
  my ($name) = @_;

  $name //= $PROGRAM_NAME;

  my $class = $EMPTY;

  ## no critic (ProhibitUnusedCapture)
  if ( $name =~ /(bedrock)\-?(?<suffix>.*?)?[.]cgi$/xsm ) {
    $class = join q{}, map {ucfirst} split /\-/xsm, $LAST_PAREN_MATCH{suffix};
  }

  return 'Apache::Bedrock' . $class;
}

########################################################################
sub http_error {
########################################################################
  my ( $status, $status_name, $message ) = @_;

  my $html = <<"END_OF_HTML";
Content-type: text/html
Status: $status

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
  <head>
    <title>$status $status_name</title>
  </head>
  <body>
    <h1>$status_name</h1>
    <p>$message</p>
    <hr>
    <address>$ENV{SERVER_SIGNATURE}</address>
  </body>
</html>
END_OF_HTML

  exit 1;
}

# +------------------------+
# | MAIN SCRIPT START HERE |
# +------------------------+

local $SIG{TERM} = \&confess;

my $log_level = $ENV{BedrockLogLevel} // $ENV{LogLevel};

my $r = Apache::Request_cgi->new( log_level => $log_level );

my $class = get_handler $PROGRAM_NAME;

$r->info("Bedrock CGI started with handler: [$class]");

my $code = eval {
  my $file = $class;
  $file =~ s/::/\//gxsm;

  require "$file.pm";

  my $handler = "${class}::handler";

  no strict 'refs';  ## no critic (ProhibitNoStrict)

  return &{$handler}($r);
};

if ($EVAL_ERROR) {
  http_error( 500, "could not invoke handler\n" . $EVAL_ERROR );
}

if ( $r->content_type =~ /json/xsm ) {
  exit $code;
}

$r->log->debug( "return code from handler: " . $code );

my %error_handlers = (
  $REDIRECT => sub {
    $r->send_http_header;
    return $REDIRECT;
  },
  $NOT_FOUND => sub {
    http_error( $NOT_FOUND, 'Not Found',
      "The requested URL $ENV{PATH_INFO} was not found on this <b>Bedrock Enabled</b> server." );
    return $NOT_FOUND;
  },
  $FORBIDDEN => sub {
    http_error( $FORBIDDEN, 'Forbidden',
      q{You don\'t have permission to access the requested object. It is either read-protected or not readable by the server.}
    );

    return $FORBIDDEN;
  },
);

if ( $error_handlers{$code} ) {
  exit $error_handlers{$code}->();
}
else {
  http_error( $code, 'Internal Server Error', "Unknown Bedrock error: [$code]" );

  exit $code;
}

exit 0;

1;

__END__
## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

bedrock.cgi - Apache Bedrock CGI handler

=head1 SYNOPSIS

  /cgi-bin/bedrock.cgi

=head1 DESCRIPTION

C<bedrock.cgi> is part of the Bedrock project. It invokes various
Apache handlers to implement portions of the Bedrock web application
framework.  Its primary job is to serve up Bedrock pages by passing
the request through the C<Apache::Bedrock> handler, but this Perl
script can also be used to serve up Bedrock documentation
(C<Apache::BedrockDocs>) as well as files located in a userE<039>s
session directory (C<Apache::BedrockSessionFiles>).

When C<bedrock.cgi> is invoked, it determines which handler to use by
examing the script name.

This CGI can invoke any request handler whose name conforms to a
certain pattern. The name of the request handler to invoke is
derived from the suffix (portion after "bedrock-") of CGI's name
without the extension.

 bedrock /(bedrock)\-?(?<suffix>.*?)?[.]cgi$/

Thus you can use this harness to invoke the handlers included in this project:

=over 5

=item C<Apache::Bedrock>

If the script name is C<bedrock.cgi>, then the script invokes the
C<Apache::Bedrock> handler.

=item C<Apache::BedrockDocs>

If the script name is C<bedrock-docs.cgi>, then the script invokes the
C<Apache::BedrockDocs> handler.

=item C<Apache::BedrockSessionFiles>

If the script name is C<bedrock-session-files.cgi>, then the script invokes the
C<Apache::BedrockSessionFiles> handler.

=item Custom Handlers

You can invoke your own handler by copying C<bedrock.cgi> and renaming
the file using the template shown below:

 bedrock-CLASSNAME.cgi

Dashes in your CLASSNAME are removed and the first letter of each word
is assumed to be upper cased. Using the model above you can see that
the session file handler is named C<Apache::BedrockSessionFiles> and
the CGI is named C<bedrock-session-files>.

If the name of your Bedrock CGI script is C<bedrock-foo-bar>, then the
class should be named C<Apache::BedrockFooBar> and should be installed
either alongside the other handlers (@libdir@/perl5/Bedrock) or
somewhere along C<perl>'s C<@INC> paths.

=back

=head2 ERROR HANDLING

This CGI tries to do something intelligent with handler return codes
understanding that the return code from this script which is run under
C<mod_cgi> itself is pretty irrelevant.  C<mod_cgi> more or less
ignores the return code, however this script expects to use the return
code from the handler as a way to figure out what we should present to
the user. Your handlers should be capable of running under either
C<mod_cgi> or C<mod_perl> and should return an error code in the same
way that C<mod_perl> handlers return error codes.

You handler can detect whether they it is running under C<mod_perl> or
C<mod_cgi> by examining the environment variable C<MOD_PERL>.

=head1 LOGGING

As of Bedrock 3.2.x, logging is done using L<Log::Log4perl> via the
C<Bedrock::Logger> role. When the C<get_logger()> method of the
request object (L<Apache::Bedrock::Request_cgi> is called the first
time to log a message, the C<Bedrock::Logger> will provision the
default appender that writes to STDERR. 

I<Note that that all log messages prior to your handler being called being called will be
written to the log file defined in Apache's configuration file at the level defined by the environment variable C<LogLevel> or C<BedrockLogLevel> (See L</LOG LEVELS>).>

Once your handler method is invoked, the L<Bedrock::Context>
constructor will attempt to find a F<log4perl.conf> file somewhere in
Bedrocks's configuration paths (C<BEDROCK_CONFIG_PATH>,
C<CONFIG_PATH>). If a configuration file is found it will passed to
L<Log::Log4perl> for processing.

=head1 LOG LEVELS

When running the CGI version of Bedrock, BedrockE<039>s initial log
level is controlled by the environment variable I<BedrockLogLevel>.
You can set that in your Apache configuration file as shown below.

 SetEnv BedrockLogLevel warn

Note that the log levels set here should be one of a subset of the log
level values used by Apache.

 error
 warn
 info
 debug

The default level is I<info>.

We recommend that you simply clone the value of ApacheE<039>s
I<LogLevel> using the environment variable I<BedrockLoglevel>.

 LogLevel warn
 SetEnv BedrockLogLevel warn

Messages logged in the Bedrock handler itself using the Apache request
object are logged to whatever has been configured in the virtual host
configuration or the main Apache configuration file if no virtual
hosts have been defined.

 $r->debug("this is a debug message");

=head2 Determining Apache's Log Level

In order to determine Bedrock's log level, we look in the
environment for `BedrockLogLevel`.  The default level is `info`.
We do this so that we are logging at the correct level upon entry to
this script.  Reading the log level from the Bedrock configuration
is too late if we want to log information regarding the process of
interpretting the configuration file (and we do).  Ideally we would
use Apache's log level, however that is not directly exposed to us
in a CGI Perl script.

Apache's F<httpd.conf> configuration file can define (and does) define
a log level.

 LogLevel warn

It's possible to use L<Apache::ConfigFile> to parse Apache's
configuration file, however we would have to know where the virtual
host and server configuration files reside in order to munge for
C<LogLevel>.

=head2 Finer Grained Control of Logging

As noted above, after the request handler invokes your C<handler()>
method, logging is done by L<Log::Log4perl> and configured using the
F<log4perl.conf> file found by the L<Bedrock::Context> class during
initialization. Within the context of Bedrock processing, modules use
the C<Bedrock::Logger> role and the C<get_logger()> method to retrieve
the L<Log::Log4perl> logger. To debug any of your modules (including
Bedrock itself) you can set the debug level of categories in the
F<log4perl.conf> file.

When processing tags Bedrock will set the debug level to C<$DEBUG> or
C<$TRACE> when the one or more C<--verbose> options are defined in the
tag.

Log at the C<$DEBUG> level...

 <var --versbose $foo.bar()>    

Log at the C<$TRACE> level...

 <var --verbose --verbose $foo.bar()>

=head1 CONFIGURING APACHE

C<bedrock.cgi> is invoked by Apache as the parser for Bedrock
content. This Apache handler is configured in the normal manner in
which Apache handlers are configured.

  Action bedrock-cgi /cgi-bin/bedrock.cgi virtual

  AddHandler bedrock-cgi .roc .rock .jroc .jrock

  SetHandler bedrock-cgi

Enabling the C<mod_perl> handlers for Bedrock is done by specifying
the handler classes use the B<PerlHandler> directive.

  <IfModule mod_perl.c>
    PerlRequire   @configdir@/startup.pl
    AddHandler    perl-script .roc .jroc
    PerlHandler   Apache::Bedrock
  </IfModule>

You can use the C<<IfModule>> directive to detect that C<mod_perl> is
available and either use the CGI version of Bedrock or the C<mod_perl>
handler.

  <IfModule mod_perl.c>
    SetHandler perl-script
    PerlHandler Apache::Bedrock 
  </IfModule>

  <IfModule !mod_perl.c>
    SetHandler bedrock-cgi
  </IfModule>

This method works with any of the handlers described above.

=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error.

=head1 ORIGINAL AUTHOR

Jay Sridhar

=head2 Contributors

=over 4

=item Rob Lauer <rlauer6@comcast.net>

=item Alan D. Salewski

=back

=cut
