#! @PERL@
# -*- perl -*-
# @configure_input@


use strict;
use warnings;

# Fixup @INC so that all Perl mods needed by the prog can be found
# ___REPLACE_ME__BEGIN_BLOCK__CONFIGURED_PERL_INC___

BEGIN
{
  if ( open( FILE, 'perl.INC' ) ) {
    unshift @INC, <FILE>;
    close FILE;
    chomp @INC;
  }
}

use CGI qw/:cgi/;

# 8<------------------- start of fix ---------------------------------
#  fix for POSTs that are somewhat big, some servers will terminate
#  the connection if the server does not respond quickly enough,
#  mistakely belieiving it may be a DoS attack.
param;
# 8<------------------- end of fix -----------------------------------

use Carp;

use Bedrock;

use Apache::Bedrock;
use Apache::BedrockDocs;
use Apache::BedrockSessionFiles;

use Apache::Request_cgi;

sub error {
    my $status = shift;
    my $status_name = shift;
    my $message = shift;
    
    print <<end_of_html;
Content-type: text/html
Status: $status

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<title>$status $status_name</title>
</head>
<body>
<h1>$status_name</h1>
<p>$message</p>
<hr>
<address>$ENV{SERVER_SIGNATURE}</address>
</body>
</html>
end_of_html

exit -1;
}

$SIG{TERM} = \&confess;

# what's our LogLevel...we would prefer to get the current
# logging level from the environment because Bedrock's ability to read
# the configuration file is part of what we want to examine at the
# DEBUG log level!
# 
# One of the differences between running bedrock.cgi and mod_perl is
# how logging is handled.  Apache's httpd.conf configuration file can
# define (and does) define a log level.
#
#   LogLevel warn
# 
# Within the mod_perl handler you'll often see this construction:
#
# $r && $r->log->debug(...)
#
# The Apache request object ($r) under mod_perl uses the value define
# in httpd.conf while Bedrock's request object implemented for
# bedrock.cgi uses $ENV{BedrockLogLevel}
#
# It's possible to use Apache::ConfigFile to parse Apache's
# configuration file, however we would have to know where the virtual
# host and server configuration files reside in order to munge for
# BedrockLogLevel which allows the site administrator to mirror
# reconsidered in future versions of Bedrock.

my $log_level = $ENV{BedrockLogLevel} || 'info'; # default log level

my $r = new Apache::Request_cgi;

my $code;

for ( "$0" ) {
  /bedrock\.cgi/ && do {
      $code = &Apache::Bedrock::handler( $r );
      last;
  };

  /bedrock\-docs\.cgi/ && do {
      $code = &Apache::BedrockDocs::handler( $r );
      last;
  };

  /bedrock\-session\-files\.cgi/ && do {
      $code = &Apache::BedrockSessionFiles::handler( $r );
      last;
  };
}

if ($code == 404) {
    error( 404, 
	   "Not Found", 
	   "The requested URL $ENV{PATH_INFO} was not found on this <b>Bedrock Enabled</b> server."
	);
}
elsif ($code == 403) {
    error( 403,
	   "Forbidden",
	   "You don\'t have permission to access the requested object. It is either read-protected or not readable by the server."
	);
}
elsif ( $r->content_type =~/json/ ) {
}
elsif ( $code ) {
    error( $code, "Internal Server Error", "Unknown Bedrock error: [$code]");
}

exit 0;

__END__


#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball, DEB, or RPM, for
# instance), you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='Bedrock' \
#               --release='bedrock.cgi-1.6.6' \
#               --section='1' \
#               > /outputdir/bedrock.cgi.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#     'man -l -'
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  bedrock.cgi - Apache Bedrock CGI handler

=head1 SYNOPSIS

  /cgi-bin/bedrock.cgi

=head1 DESCRIPTION

C<bedrock.cgi> is part of the Bedrock project.  It invokes various
Apache handlers to implement portions of the Bedrock web application
framework.  Its primary job is to server up Bedrock pages, but can
also be used to serve up Bedrock documentation and files located in a
user's session directory.

=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error.

=head1 BUGS

None known. If you find any, please report them to the 

=head1 ORIGINAL AUTHOR

Jay Sridhar

=head2 Contributors

=over 4

=item Rob Lauer <rlauer6@comcast.net>

=item Alan D. Salewski

=back

=head1 COPYRIGHT

Copyright 1999, 2000, 2001 Charles Jones, LLC
Copyright 2008 Signature Information Solutions, LLC

This is free software. You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

=cut

# Revision 1.10  2013/05/10 14:51:17  rlauer
# - add support for using the bedrock.cgi harness to invoke the Apache::Bedrock, Apache::BerockDocs,
#   and the Apache::BedrockSessionFiles handlers.  The idea is to create a symbolic link to bedrock.cgi
#   with various names that help the harness decide what to do.
# - replaced Bedrock::Log with writes to STDERR so that logging is done in the main Apache error_log.
#   We now use the environment variable BedrockLogLevel to determine the logging level.  The value should
#   mimic Apache's LogLevel values.
#
