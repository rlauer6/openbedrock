#! @PERL@
# -*- perl -*-
# @configure_input@

use strict;
use warnings;

# Fixup @INC so that all Perl mods needed by the prog can be found
# ___REPLACE_ME__BEGIN_BLOCK__CONFIGURED_PERL_INC___

BEGIN {
  if ( open my $fh, '<', 'perl.INC' ) {
    unshift @INC, <$fh>;
    close $fh;
    chomp @INC;
  }
}

use CGI qw/:cgi/;

# 8<------------------- start of fix ---------------------------------
#  fix for POSTs that are somewhat big, some servers will terminate
#  the connection if the server does not respond quickly enough,
#  mistakely belieiving it may be a DoS attack.
param;
# 8<------------------- end of fix -----------------------------------

use Bedrock;
use Apache::Bedrock;
use Apache::BedrockDocs;
use Apache::BedrockSessionFiles;
use Apache::Request_cgi;
use Carp;
use English qw{-no_match_vars};

use Readonly;

Readonly our $NOT_FOUND    => 404;
Readonly our $FORBIDDEN    => 403;
Readonly our $SERVER_ERROR => 500;

########################################################################
sub error {
########################################################################
  my ( $status, $status_name, $message ) = @_;

  my $html = <<"END_OF_HTML";
Content-type: text/html
Status: $status

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
  <head>
    <title>$status $status_name</title>
  </head>
  <body>
    <h1>$status_name</h1>
    <p>$message</p>
    <hr>
    <address>$ENV{SERVER_SIGNATURE}</address>
  </body>
</html>
END_OF_HTML

  exit 1;
}

$SIG{TERM} = \&confess;

# In order to determine Bedrock's log level, we look in the
# environment for `BedrockLogLevel`.  The default level is `info`.

my $log_level = $ENV{BedrockLogLevel} || 'info';  # default log level

# We do this so that we are logging at the correct level upon entry to
# this script.  Reading the log level from the Bedrock configuration
# is too late if we want to log information regarding the process of
# interpretting the configuration file (and we do).  Ideally we would
# use Apache's log level, however that is not directly exposed to us
# in a CGI Perl script.
#
# Apache's httpd.conf configuration file can define (and does) define
# a log level.
#
#   LogLevel warn
#
# We recommend that you simply clone the value of LogLevel using the
# environment variable `BedrockLoglevel`.
#
#   LogLevel warn
#   SetEnv BedrockLogLevel warn
#
# It's possible to use Apache::ConfigFile to parse Apache's
# configuration file, however we would have to know where the virtual
# host and server configuration files reside in order to munge for
# `LogLevel`.

my $r = Apache::Request_cgi->new;

my $code;

$r && $r->info("---- Bedrock CGI script [$PROGRAM_NAME] started ----");

for ("$PROGRAM_NAME") {
  /bedrock[.]cgi/xsm && do {
    $code = Apache::Bedrock::handler($r);
    last;
  };

  /bedrock\-docs[.]cgi/xsm && do {
    $code = Apache::BedrockDocs::handler($r);
    last;
  };

  /bedrock\-session\-files[.]cgi/xsm && do {
    $code = Apache::BedrockSessionFiles::handler($r);
    last;
  };

  # custom bedrock handler
  /bedrock\-(.*?)[.]cgi$/xsm && do {
    my $cgi_suffix = $1;
    my $class;

    map { $class .= ucfirst $_; } split /\-/xsm, $cgi_suffix;

    $class = 'Apache::Bedrock' . $class;

    $r && $r->debug("Custom handler detected: [$class]");

    eval "require $class";  ## no critic (ProhibitStringyEval)

    if ( !$EVAL_ERROR ) {
      eval q{$code = &} . $class . q{::handler( $r );};  ## no critic (ProhibitStringyEval)

      if ($EVAL_ERROR) {
        error( 500, "could not invoke handler\n" . $EVAL_ERROR );
      }
    }
    else {
      error( 500, "could not load $class " . $EVAL_ERROR );
    }

    last;
  };
}

# This CGI tries to do something intelligent with handler return codes
# understanding that the return code from this script itself is pretty
# irrelevant.  Apache more or less ignores that, so we try to use the
# return code from the handler as a way to figure out what we should
# present to the user, however a better approach may be to simply do
# nothing.
#
# Custom handlers can always detect whether they are running as
# mod_perl or through this CGI version of Bedrock ($ENV{MOD_PERL}) and
# handle any HTTP status returns by itself. That is what the default
# Bedrock handler sort of does and always return an OK status code
# (0).
#
# If you are using this harness to run your own customized mod_perl
# handler, take note of the information above.

( $code == $NOT_FOUND ) && do {
  error(
    $NOT_FOUND,
    'Not Found',
    "The requested URL $ENV{PATH_INFO} was not found on this <b>Bedrock Enabled</b> server."
  );

  exit $NOT_FOUND;
};

( $code == $FORBIDDEN ) && do {
  error( $FORBIDDEN, 'Forbidden',
    q{You don\'t have permission to access the requested object. It is either read-protected or not readable by the server.}
  );

  exit $FORBIDDEN;
};

# no code missing, just a stub in the event we decide that we need to
# do something special
( $r->content_type =~ /json/xsm ) && do {
  exit $code;
  }

  ($code) && do {
  error( $code, 'Internal Server Error', "Unknown Bedrock error: [$code]" );
  exit $code;
  };

exit 0;

1;

## no critic (RequirePodSections)

__END__

=pod

=head1 NAME

bedrock.cgi - Apache Bedrock CGI handler

=head1 SYNOPSIS

  /cgi-bin/bedrock.cgi

=head1 DESCRIPTION

C<bedrock.cgi> is part of the Bedrock project. It invokes various
Apache handlers to implement portions of the Bedrock web application
framework.  Its primary job is to serve up Bedrock pages by passing
the request through the C<Apache::Bedrock> handler, but this Perl
script can also be used to serve up Bedrock documentation
(C<Apache::BedrockDocs>) as well as files located in a userE<039>s
session directory (C<Apache::BedrockSessionFiles>).

When C<bedrock.cgi> is invoked, it determines which handler to use by
examing the script name.

=over 5

=item C<Apache::Bedrock>

If the script name is C<bedrock.cgi>, then the script invokes the
C<Apache::Bedrock> handler.

=item C<Apache::BedrockDocs>

If the script name is C<bedrock-docs.cgi>, then the script invokes the
C<Apache::BedrockDocs> handler.

=item C<Apache::BedrockSessionFiles>

If the script name is C<bedrock-session-files.cgi>, then the script invokes the
C<Apache::BedrockSessionFiles> handler.

=item Custom Handlers

You can invoke your own handler by copying C<bedrock.cgi> and renaming
the file using the template shown below:

 bedrock-CLASSNAME.cgi

Dashes in your CLASSNAME are removed and the first letter of each word
is upper cased. Using the model above you can see that the session
file handler is named C<Apache::BedrockSessionFiles> and the CGI is
named C<bedrock-session-files>.

If the name of your Bedrock CGI script is C<bedrock-foo-bar>, then the
class should be named C<Apache::BedrockFooBar>.

=back

=head1 LOGGING

As of Bedrock 3.2.x, logging is done using L<Log::Log4perl> via the
C<Bedrock::Logger> role. When the C<get_logger()> method of the
request object (L<Apache::Bedrock::Request_cgi> is called the first
time to log a message, the C<Bedrock::Logger> will provision the
default appender that writes to STDERR. This implies that all log
messages prior to C<Apache::Bedrock::handler()> being called will be
written to the log file defined in Apache's configuration file.

Once C<Apache::Bedrock::handler()> is invoked, the Bedrock::Context
constructor will attempt to find a F<log4perl.conf> file somewhere in
Bedrocks's configuration paths (C<BEDROCK_CONFIG_PATH,
CONFIG_PATH>). If a configuration file is found it will passed to
L<Log::Log4perl> for processing.

=head1 LOG LEVELS

When running the CGI version of Bedrock, BedrockE<039>s initial log
level is controlled by the environment variable I<BedrockLogLevel>.
You can set that in your Apache configuration file as shown below.

 SetEnv BedrockLogLevel warn

Note that the log levels set here are a subset of the log level values
used by Apache.

 error
 warn
 info
 debug

The default level is I<info>.

We recommend that you simply clone the value of ApacheE<039>s
I<LogLevel> using the environment variable I<BedrockLoglevel>.

 LogLevel warn
 SetEnv BedrockLogLevel warn

Messages logged in the Bedrock handler itself using the Apache request
object are logged to the virtual host or main Apache error log.

 $r && $r->debug("this is a debug message");

=head1 CONFIGURING APACHE

C<bedrock.cgi> is invoked by Apache as the parser for Bedrock
content. The handler is configured in the normal manner in which
Apache handlers are configured.

  Action bedrock-cgi /cgi-bin/bedrock.cgi virtual

  AddHandler bedrock-cgi .roc .rock .jroc .jrock

  SetHandler bedrock-cgi

Enabling the C<mod_perl> handlers for Bedrock is done by specifying
the handler classes use the B<PerlHandler> directive.

  <IfModule mod_perl.c>
    PerlRequire   /usr/lib/bedrock/config/startup.pl
    AddHandler    perl-script .roc .jroc
    PerlHandler   Apache::Bedrock
  </IfModule>

You can use the C<<IfModule>> directive to detect that C<mod_perl> is
available and either use the CGI version of Bedrock or the C<mod_perl>
handler.

  <IfModule mod_perl.c>
    SetHandler perl-script
    PerlHandler Apache::Bedrock 
  </IfModule>

  <IfModule !mod_perl.c>
    SetHandler bedrock-cgi
  </IfModule>

This method works with any of the handlers describe above.

=head1 DIAGNOSTICS

Exits with zero on success, non-zero on error.

=head1 ORIGINAL AUTHOR

Jay Sridhar

=head2 Contributors

=over 4

=item Rob Lauer <rlauer6@comcast.net>

=item Alan D. Salewski

=back

=cut
