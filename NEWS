This is the `NEWS` file for the `bedrock` project. This file contains
information on changes since the last release of the package, as well
as a running list of changes from previous versions.  If critical bugs
are found in any of the software, notice of such bugs and the versions
in which they were fixed will be noted here, as well.

-----------------------------------------------------------------------
bedrock 3.0.1

    Enhancements:

    - BLM::IndexedTableHandler

      * reset(1)

        reset() method now accepts optional flag that indicates the
        method should delete the columns from the object instead of
        set them to undef.

      * insert()

        new method that will insert only the columns that are
        explicitly set in the same manner that update only updates
        fields that are set.

      * as_ref() - synonym for asref()

      * select() - without any arguments returns entire table as a
        BLM::IndexedRecordHandler::Recordset

      * html_form_body_with_class() - adds class, id attributes based
        on class name

      * max_id() - return the highest value id
 
    - new unit tests - nn-indexedtablehander.t

    - Bedrock::Model
      Bedrock::Model::Migration
      Bedrock::Model::Field
      Bedrock::Model::Role
      Bedrock::Model::Serializer::MySQL
      bedrock-model.pl
      
      Attempt at creating a way to encapsulate the database model in
      the classes that implement MySQL table handlers...this is WIP.
      
    Fixes:

-----------------------------------------------------------------------
bedrock 3.0.0

    Enhancements:

    - Experimental log spooling using Redis: Bedrock traditionally
      created a log for each page it parsed.  As of 2.4.2.01, Bedrock
      can log all messages to a single log file.  It may be desirable
      to off-load the dispatching of messages from Bedrock and
      additionally provide a mechanism for more detailed event
      information.

      Using the Redis PUB/SUB feature, TagX::Log can now optionally
      publish messages to a Redis channel.  Instead (or in addition
      to) writing to a single or multiple log files on the file
      system, Bedrock will publish the messages that are logged during
      page parsing to a Redis channel.  Subscribers (if any) can do
      what they will with these messages.  A typical subscriber might
      look like this:

          #!/usr/bin/perl
          
          use Redis;
          use JSON;
          use Data::Dumper;
          use Date::Format;
          
          my $redis = new Redis(server => 'localhost:6379');
          
          $redis->psubscribe('bedrock/log/*', sub {
                               my ($message, $topic) = @_;
          
                               my $message_ref = from_json($message);
                               my $env = from_json($message_ref->{env});
                               printf("%s [%s] %s %s", (time2str "%c", $message_ref->{time}), @{$message_ref}{qw/page message/}, Dumper [ $env]);
                             });
          
          #  ... until some condition
          my $keep_going = 1; ## other code will set to false to quit
          $redis->wait_for_messages(10) while $keep_going;

      Note that messages are JSON strings and include the time of the
      message and the environment (you may or may not want to expose
      those environment variables!).

      To enable log spooling of this nature, set the HTML_LOGSPOOLER
      value in your `tagx.xml` as shown below:
      
        <object name="HTML_LOGSPOOLER">
	   <scalar name="server">localhost</scalar>
	   <scalar name="port">6379</scalar>
	   <scalar name="publish_env">1</scalar>
	</object>

      ...and then

    - unit tests for TagX::Log, Bedrock::Log::Spooler
      
    Fixes:
    
    - binding error in modules that do not have abort_if_error set
      would silently fail, we now write a message to web server error
      log

    - TagX::Log uninitialized error if log file does not exist (stat)

    - (bedrock shell): -l option to specify log file was not being interpretted properly

    - <null> - returning a hash or an array reference from a method
      did not convert the reference to a Bedrock object

-----------------------------------------------------------------------
bedrock 2.4.2

    Enhancements:

  release: 0.01 (2018-04-02)
  
    - Bedrock can now consolidate page logs.  In previous versions,
      Bedrock created a separate page log for each page parsed,
      typically in `/var/www/vhost/site/logs/html`. For an
      application with many Bedrock pages and a desire to perform log
      shipping, this could be problematic.  To use one log file for all
      page requests, set the name of the page log using the new
      `HTML_LOGFILE` option in your `tagx.xml` file.
      
      <scalar name="HTML_LOGFILE">page-log-name</scalar>

    - report minor release number in version

      $ bedrock --version

    Fixes:

    - Setting HTML_LOGMAXSIZE to -1 should have indicated that page
      logs should never be truncated. Interpretation of
      HTML_LOGMAXSIZE is now consistent with LOG_MAXSIZE (used by
      Bedrock::Log):

      0    => truncate logs each time a page is processed
      > 0  => truncate logs when HTML_LOGMAXSIZE reached
      < 0  => never truncate logs

    - Reduced noise in page logs for uninitialized $lhs in <if>,
      missing counter index in <foreach>, and $ls of expressions.

    - Reduced noise in page logs by checking to see if die or warn
      signals are a result of an eval {}.

    - Test::Bedrock ignores excludes loading module
      BLM::Startup::UserSession and has piping to exclude other
      modules if necessary in the future.

    - <plugin> was not calling init_plugin(), regression caused by
      UNIVERSAL purge
      
-----------------------------------------------------------------------
bedrock 2.4.1 (2018-03-19)

    Enhancements:

  release: 18.27

    - split out handful of useful Bedrock classes into separate RPM
      (bedrock-objects) so that entire Bedrock packages and
      dependencies are not required for reading a Bedrock XML file

  release: 18.26

    - added brxml2json.pl utility for converting Bedrock XML to JSON

    - changes to the build system (buildspec.yml)

    - changes to configure.ac (--enable-rpmbuild, --with-perl5libdir)

  release: 18.25

    - $config.tagx_config() - New!
 
    - $config.plugin_config() - New!

    - dereference variables with * (ex: <null:foo bar><var *foo> ~ <var $bar>

    - new operator --reftype

    - created new RPMs to separate dependencies on typically
      unneeded or mutually exclusive Perl modules
      
      + bedrock-cloud
      + bedrock-utils
      + bedrock-mysql-session
      + bedrock-postgres-session
      + bedrock-utils
      
    - <catch> allows quoted regular expressions like --re

    - new cloud session file handler (Apache::BedrockCloudSessionFiles)

    - Redis base session manager

    - ALLOW_BEDROCK_CONFIG_INFO - configuration value that determines
      if environment data can be shown on Bedrock documentation page -
      default: no

    - ALLOW_BEDROCK_ENVINFO - configuration value that determines if
      environment data can be shown on Bedrock documentation page -
      default: no

    - Bedrock::Config - removed code that supported an old
      configuration file format this is no longer used.  The
      constructor, now only takes a file name as argument.

    - --yaml option for <sink>, <null> , <var>.  Created a new
      extendable serialization mechanism using --serializer option.

    - added a new testing framework (Test::Bedrock) that marries
      templating & Test::More.  Also using this for testing tags.

    - <null:foo --unescape 'foo\\n'> - Finally!

    - new scalar methods:
      + hex()
      + oct()

    - experimental BLM::Startup::OAuth2 added

    - <var $foo.base64("=")> - alternate eol indicator.  If not
      present, defautl "\n" used.

    - new Bedrock test bed started for testing Bedrock internals

    - Bedrock::Application::Plugin

      New methods:

      + header()
      + get_logger()
      + global_config()
      + Initialize a Log::Log4perl object if configuration exists in the
        config file.
      + Set DBI options if found in configuratin file

    - <flush> tag

    - Bedrock::Apache::BedrockAutocomplete

      A new handler that will facilitate the serving of autocomplete
      files from the session directory.

    - Bedrock::Apache::SessionFiles

      A potential bug in the way the session cookie is parsed from the
      environment variable HTTP_COOKIE was fixed.  A regular
      expression was used to parse the session, but inadequately
      addressed certain cookie strings.  Now the module uses the
      CGI::Cookie module to parse cookies.

    - BLM::IndexedTableHandler needed a pod refresh and some
      enhancements
      
      is_null()  - check if column value is null
      null()     - set a column value to null
      is_field() - see if the key is a column
      
    - BLM::IndexedTableHandler fixes to eliminate warning messages
      regarding uninitialized data      

    - BLM::Startup::SessionManager::cookieless_session
      now accepts an optional flag that indicates that the session cookie
      should not be killed.  This allows you to inject a session value
      but then subsequently spark up a persitient cookie based
      session.

        <null $cookieless_session($input.session, 1)>

    - new flag to BLM::Startup::SessionManager::create_temp_login() to
      allow you to recycle active sessions rather than creating a new
      session id if there is an active session for the user

    - added bedrock-rest-framework.jroc and
      bedrock-rest-framework.conf to project which provides a Bedrock
      based REST API framework

    - added new --optional option to <include> tag.  If --optional is
      included, then an exception will not be thrown if the file does
      not exist

    - capture groups in regular expressions are now added to Bedrock's
      local context.  Consider:

       <if $foo --re '(?<prefix\>.*)/\\d+'> 

      ...would create a Bedrock scalar named $prefix.  Note that the
      closing '>' in the capture group name must be escaped.

     This feature is only available in Perl version 5.10
  
    - pretty print JSON object <var --pretty --json $foo>

    - Bedrock::Hash::json( $pretty )

    Fixes: 

    - Apache::BedrockSessionFiles died if no session yet defined (no
      cookie)

    - BLM::IndexedTableHandler::html_form_body() incorrectly retrieved
      attributes for tr, th, td

    - BLM::SMTP::DESTROY method need to recognize object being
      destroyed

    - <if> and expression parsing did not fully implement --defined,
      --exists, --hash

    - Bedrock shell command line options were being overwritten

    - --exists was a problematic operator and was in fact badly
      broken.  We would like to support two use cases.  First, we want
      to know if a key exists in a hash.  Presumably we can get that
      if the hash is a Bedrock::Hash:

        $hash.exists('key')

      ...or at least we can do that now since that method did not
      exist until now.

      For the faint of heart we might want to do this:

        <if $hash --exists 'key'>

      ...and we can, now.

      But what about our old monadic --exists?  Turns out that never
      really worked properly and only told us whether something was
      undefined, not necessarily that it does not exist...until now.

        <if --exists $UFO>UFO does not exist</if>

        <null:UFO>

        <if --exists $UFO>UFO exists!</if>

    - BLM::Startup::SessionManager::create_temp_login() - default time
      should be in minutes

    - BLM::IndexedTableHandler::set_phone_field() was not being called properly

    - <if (-e --file ($config.INCLUDE_DIR + '/foo.inc'))> was not
      being parsed properly. Bedrock parser was not recognizing file
      test case for expressions.

    - <foreach --define-var="k,v,i"> -> index (i) was not being set

    - additional pod for <foreach> to explain lexically scoped scalars
      when iterating over arrays of hashes

    - page log name not set properly when extra path info and using
      rewrite rules.

        Example /contacts/14

      ..would result in a page log name of 14.log instead of the
      actual target of the rewrite rule.

    - <null> tag --default= value was not being set if there were no
      arguments to the tag.

        Example <null:foo --default=$bar>

      Bedrock will now set $foo to $bar, although this is sort of a
      non-sensical construction.

    - BEDROCK_PATH_INFO leading '/'

    - BLM::IndexedTableHandler::RecordSet - action = REQUEST_URI, not
      PATH_INFO

    - TagX::Func::eval -> @args should have been @funcargs which prevented AUTOLOAD
      methods from working correctly.
 
    - <plugin> classes may be parsed incorrectly
      fixed in src/main/perl/lib/Bedrock/Text/TagX/TAG.pm.in: parse_tag_name()
      incorrectly parsed Amazon::SNS::VerifySignature for example

-----------------------------------------------------------------------
bedrock 2.4.0 (2014-08-17)

    Enhancements:

    - bedrock.cgi supports custom handlers based on the name of the
      script. These allow one to create handlers that work in both the
      CGI and mod_perl environments.  Examples of Bedrock handlers are
      `bedrock-session-files' and `bedrock-docs'.

    - <array> now has the --list option that tells Bedrock to create a
      Bedrock::List, instead of a Bedrock::Array.  Bedrock::List
      objects are used to pass arrays as lists to method calls.

      <array:foo 1 2 3 "Hello World!">

      <plugin:Text::CSV:XS>
      <null $TextCSV_XS.combine($foo)>
      <var $TextCVS_XS.string()>

    - Bedrock::Array objects now support a list() method that will
      return a Bedrock::List (see above).

    - <foreach> now supports the ability to define the key/value pair
      names when iterating over hashes.  Use the --define-var options
      to provide a comma delimited key, value pair name.

        <hash:fruits apple 1 pear 2 banaan 3>

        <select name="fruits">
        <foreach --define-var="item,id" $fruits>
          <option value="<var $id>"><var $item></option></foreach>
        </select>

    - New method to Bedrock::Array objects `list()`.  Internally,
      Bedrock will now allow a method call invoked on an object from a Bedrock
      page to return a list.  Previously any method call invoked on an
      object in a Bedrock page would coerce the list into a
      Bedrock::Array.  While that behavior is generally useful and
      desired, there are times when a list is desired, i.e. when you
      are calling a method that requires a list, but the original
      object you trying to pass is a Bedrock::Array.  In other words,
      there is no way to directly derefence an array object as a list
      in Bedrock.

        <!-- this does not work...since combine() wants a list -->
        <plugin:Text::CSV_XS>
        <array:foo 1 2 3 'hello world'>
        <null $TextCSV_XS.combine($foo)>
        <var $TextCSV_XS.string()>

        <!-- this works -->
        <plugin:Text::CSV_XS>
        <array:foo 1 2 3 'hello world'>
        <null $TextCSV_XS.combine($foo.list())>
        <var $TextCSV_XS.string()>

    - added new date_format() method for a BLM::IndexedTableHandler
      object.  See the Bedrock documentation /bedrock/plugins/IndexedTableHandler

    - documentation updates/enhancments/fixes

    Fixes:
    
    - BLM::Date::localtime() provide a default argument of `time`

-----------------------------------------------------------------------
bedrock 2.4.0 (2013-12-09)

    Enhancements:

    - This release is essentially a clone of 2.3.4 done for the
      benefit of moving the source repository to GitHub

    - Certain files have been altered cosmetically to:

      + add the GPL license where it was found to be missing

      + remove CVS keywords where practical. Expanded log messages
        (Revision xxx:) have been preserved.

      + $VERSION of modules will now reflect the Bedrock version which
        may be a saner way of controlling Bedrock internal module
        versioning since it is unlikely modules will be used outside
        of the Bedrock environment.

    Fixes:

    (None)

-----------------------------------------------------------------------
bedrock 2.3.4 (2013-12-09)

    Enhancements:

    - Several tweaks and corrections of pod for tags.
      + clarify use of --default with <null> tag

    - Bedrock::BedrockCGI sets the SESSION object in an init_session()
      method called by new(). Scripts may need to call init_session() to
      initialize the session after a fork, e.g.

    - The Apache handler in Bedrock::Apache::Bedrock now calls the
      init_plugin() method of pre-bound object if the object has such
      a method.  This allows programmers to extend the header and
      session objects for example.

    - new bedrock-cache.pl utility for managing the Bedrock
      configuration cache

    - Bedrock 2.3.4 separates documentation generation from the main
      Bedrock Apache handler.  The architecture has changes slightly
      requiring that the Bedrock documentation handler be explicitly
      installed as a mod_perl handler (if you are running under
      mod_perl).  The new configuration has been included by default
      in the `perl_bedrock.conf' file.

    - A new method - copy2session() - has been added to the
      BLM::Startup::SessionManager that supports copying files from
      the file system to the user's session directory.  They can be
      served up by the handler described below.

    - A new handler has been added to Bedrock that allows for serving
      of documents directly from a user's session directory.  This
      feature allows your web application to serve files accessible
      only by the current session user.  This is helpful for example
      in situations where you would like to:

       + make a file temporarily available to a single user
         (whitepaper, for example) after some event by copying the
         file to the user's session directory.

       + serve up a file that is created as part of some process
         initiated by a user (a report, a PDF, a graphic, etc).

      After creating a file in the user's session directory, the
      application need only point to (or redirect the user to) the
      file as shown below:

        /session/somefile.pdf

      Since user sessions are cleaned up periodically as they are
      timed out, the files in that directory are also removed.  This
      feature is available under both mod_perl and when Bedrock is run
      as a CGI.  See `perl_bedrock.conf' for and example of how the
      handler is specified in the Apache configuration file.

      SEE perldoc Apache::Bedrock::BedrockSessionFiles

    Fixes:

    - BLM::Filter::csv - some methods were busted, now fixed

    - Bedrock::Apache::Request_cgi now makes sure that STDERR is
      unbuffered.  This caused some confusion interpretting logs.

-----------------------------------------------------------------------
bedrock 2.3.3 (2013-05-07)

    Enhancements:

    - --file is now an valid binary operator of the <if> tag and
      implements file test operators (similar to perl).  The left
      hand argument is the file test operator and the right hand
      argument is a file.

        + if the file begins with ~ it is assumed to be relative to the
          current working directory.

        + if the file begins with '/' it is assumed to be an absolute
          pathname.
 
        + if the file begins with neither a '~' or a '/' it is
          assumed to be relative to the DOCUMENT_ROOT.

    - .jroc support - if you are serving up JSON content
      (application/json) using the .jroc extension, Bedrock will now
      expose any page errors by return a status 500 and a hash:

      { error: "$@" }

      This makes is possible to use the error: callback when making
      jQuery AJAX calls using $.ajax or $.getJSON.

    - New tag <iif> - inline if - ternary operartor

       <iif expr value value>

      Examples:
   
         <iif $foo checked>
         <iif ($foo --and $bar) this that>
         
      Especially useful for checkboxes!

       <input type="checkbox" name="cb1" value="1" <iif $input.cb1 checked>>

    - JSON expression support:

      <null:foo [ json-array ]>
      <null:foo { json-hash }>

      ...and other places a Bedrock expression can be used, now
      support the idea of passing a JSON object.  Note that the
      contents of JSON hash or array are irrelvant.  They will parsed
      correctly assuming they are valid JSON strings.

    - BLM::SMTP - override can() method so that Bedrock is forced to 
      tie as a handle when used as a plugin.

    - <plugin> tag now accepts a --tie option which forces Bedrock to
      use tie in order to instantiate the class.  This is useful in
      cases where the perl class has a new() method which normally
      would have been invoked to instantiate the plugin.  Using the
      --tie option, you force Bedrock to tie the object rather than
      invoking new().  Presumably the class has some TIE* method that
      you would prefer over the new() method.

      If you find that Bedrock is invoking the new() method and you
      would prefer not to have to use the --tie option (let's say for
      compatibility reasons), override the can() method in your plugin
      as shown below:

        sub can {
          return undef if $_[1] eq 'new';
	  return $_[0]->SUPER::can( $_[1] );
        }

      A good example of this is the BLM::SMTP plugin that wants to be
      used as a tied handle.

    - <# comments > are completely stripped from page source now

    - BLM::IndexedTableHandler::delete() now takes column name
      BLM::IndexedTableHandler::reset() - clears column values from object
      BLM::IndexedTableHandler::encrypt() - encrypt a column 
      BLM::IndexedTableHandler::decrypt() - decrypt a column 

    - slice() method of hashes can now take a list which may contain
      array references as well as scalars.

    - BLM::IndexedTableHandler::asref() method same as slice, however
      with no argument returns a hash of values where the keys are the
      just the columns of the table.

    - $input.upload_file() now will create the path if it does not exist.
      The method will puke if the path is not writable.

    - Bedrock hashes now have a new method sort() that will return a
      sorted list of keys.  The keys() method can optionally take a
      sort direction and sort type indicator in the same manner as
      sort().

       sort( [sort-dir, [sort-type]])
       keys( [sort-dir, [sort-type]])

         sort-dir  asc  -> ascending order
                   desc -> descending order

         sort-type alpha     -> alphabetic
                   num[eric] -> numeric

      Return the keys in insertion (original) order:

       <null:keys $hash.keys()>

      If you do not pass any arguments to sort it is equivalent to
      sorting in ascending order alphabetically.

       <null:keys $hash.sort()>  <=> <null:keys $hash.sort('asc', 'alpha')>

    - Building Bedrock for RPMs now is easier using the
      `build-bedrock-rpm' script which bumps the release number for
      better handling (automatic recognition of updates by yum)
      of minor releases to the RPM.

      Putting out a new 'minor' snapshot release is now a process that
      looks something like this:

       1. make your changes

       2. bump the minor version number (not the package version)

         $ ./build-bedrock-rpm bump

       3. build the rpm

           $ ./build-bedrock-rpm

       When you're about to release a new sanctioned version (i.e one
       of the three digits in the version number is about to change)
       you'll want to clear the 'release' counter back to 0 AFTER
       you've committed, tagged and bagged the release.

       First edit your `configure.ac' file and bump the version number
       as necessary.

         + update the NEWS file with the release date
     
         + update the ChangeLog, noting the release and version

       Now do a trial build and proceed to release the package in the
       normal way:

         + Commit any files that it's necessary to commit

         + Tag the release

       Do a final build of all the committed files (since they now
       have the release's final versions of all committed files).

         $ ./build-bedrock-rpm release

       Update the build tree for the next development cycle:
 
         + update the NEWS file

         + update the ChangeLog

         + update the configure.ac with next -snapshot version

         + Reset the release counter to "0" for the next development
           cycle.

           $ ./build-bedrock-rpm reset

         + do a trial build

           $ ./build-bedrock-rpm

         + commit files for next dev cycle

    Fixes:

    - Plugin tag was calling set_options() method of Bedrock::Plugin,
      when it should have been options();

    - regexp when generating pod for tags should have been anchored
      from start - /bedrock/tag/if was generating pod for /bedrock/tag/iif
 
    - avoid duplicate calls to closeBLM()

    - startup/plugin directory configurations should be loaded in in a
      specific order - system configurations first, then site configs
      so the site can override specific configurations

    - allow hash keys to be an empty string when using <hash> tag

    - prevent POST upload timeouts by pre-fetching using param()

    - <foreach> did not work properly when the --counter-start option
      was used because the option definition did not specify an
      argument.  The argument was taken as the first element of the
      list to iterate over and was essentially pushed in front of the
      actually argument to be iterated over.

    - fix backward compatibility issue with access of 'config' object in BLMS

-----------------------------------------------------------------------
bedrock 2.3.2 (2012-09-06)

    Enhancements:

    - .jroc/.jrock files are now considered to be Bedrock pages that
      return JSON objects, so the content type is set to
      'application/json' by default.  In order to serve JSON content
      in the past you would have done:

      <null $header.content_type('application/json')><var --json $obj>

      Bedrock now recognizes the .jroc or .jrock extensions and sets
      the content type accordingly.

    - Bedrock arrays now provide a recordset() method that will return
      a 'recordset' object.  See below.

    - Bedrock now can create a new object called a `recordset' - which
      is nothing more than a fancy name for a class based on an array
      of hashes where each element of the array contains a hash
      reference with the same keys.  Arrays of hashes are typically
      returned by functions that read rows from a database for
      instance.  It is sometimes desirable to do things like:

      * sort the record set by a specific key (column)

        <null:sorted $recordset.sort('lastname')>

        You can specify the sort order and sort type and multiple
        sorts...by using triplets of specifiers

        <null:sorted $recordset('team', 'asc', 'alpha', 
                                 'wins', 'asc', 'numeric'
                                )>

      * find or filter the set based on the value of one of the
        columns using a regular expression

        <null:foo $recordset.grep('lname', 'qr/^l/i')>

      You can create recordsets in various ways:

      <recordset:rs $array>

      <null:rs --recordset $array>

      <array:rs --recordset $array>

      <sqlselect --define-var="rs" --recordset "select * from customer"></sqlselect>

      <sqlselect --define-recordset="rs" "select * from customer"></sqlselect>

      <null:rs $array.recordset()>
				
    - Bedrock::Application::Plugin has become friendlier with regard
      to quickly building startup BLMs by providing an `init_plugin()'
      method, along with the standard context(), config() and
      global_config(), and session() methods you end up having to
      write anyway.

        package BLM::Startup::MyPlugin;
  
        use Bedrock::Application::Plugin;
  
        use strict;
        use vars qw/@ISA/;
  
        @ISA = qw/Bedrock::Application::Plugin/;
  
        # Bedrock::Application::Plugin will call `init_plugin()'
        # when the plugin is initialized
        sub init_plugin {
	  my $self = shift;
	  
          return 1;
        }
  
        1;

      Added log_*() methods for logging at various levels to Bedrock's
      page log.  Respects the LOGLEVEL value in tagx.xml.
  
      The class will also automatically connect to a database if the
      config object in the plugin descriptor contains the DBI_*
      database connection variables.

    - BLM::IndexedTableHandler

      + now supports the notion of record locking when updating
        records.

        my $ith = new BLM::IndexedTableHandler($dbi, {id => $id, lock => 1});
      
        Note the new API signature which allows the second argument
        to be a hash reference to accomodate the lock flag.  Lock
        flag can be:

        0 => no locking (default)
        1 => FOR UDATE locking
        2 => LOCK IN SHARE MODE
    
        Row level locking in not supported in all engines.  See
        http://dev.mysql.com for details on MySQL locking modes

      + added methods commit() and rollback() which execute the
        analogous dbi methods if AutoCommit is not enabled.

    - BLM::IndexedTableHandler::RecordSet 

      ...now contains the asref() method which performs the same
      function as asref() does for BLM::IndexedTableHandler except
      over the entire array.

      The find() method of the BLM::IndexedTableHandler object returns
      an array of BLM::IndexedTableHandler objects as a
      BLM::IndexedTableHandler::RecordSet object.  This new method
      (asref()) allows you to create an array of just the column
      information, making it more suitable for dumping arrays of
      records as XML or JSON objects.

      <null:list $contact.find()>
      <null:list $list.asref()>
      <var $list --json>

      Incidentally, a BLM::IndexedTableHandler::RecordSet naturally
      ISA Bedrock::RecordSet.

    - Bedrock can now expose more documentation for useful Bedrock perl
      modules. The path:

      /bedrock/system

      ...now exposes modules like Bedrock::XML, Bedrock::BedrockCGI,
      Bedrock::Template etc that are useful for CGI developers.

    - new option for <null> tag: --encode.  Use --encode for
      converting objects into XML, Bedrock XML, or JSON scalars.  It
      is possible to use the <sink> tag for the same purpose.

      <null:xml_env --encode --bedrock-xml $env>

      ...as opposed to the default behavior or --bedrock-xml when used
      with the <null> tag:

      <null:env --bedrock-xml $xml> 

      ...which is assumed to be a decode operation.  That is, you have
      a Bedrock XML object you want to store as a Bedrock object...

      <sink:xml_env><var --bedrock-xml $env></sink>

      
    - /bedrock/pod path will expose user defined perl modules
      contained in the the paths defined by the array object POD_PATHS
      in the tagx.xml file.  Perl modules found in these paths will be
      displayed under the heading "User Documentation".
   
      <array name="POD_PATHS">
        <scalar>/usr/share/perl5/vendor_perl</scalar>
        <scalar>/var/www/vhosts/mysite/share/perl5</scalar>
      </array>

      Elements of the array can either be a scalar or an object. If
      the element is an object, then the object should contain two
      named scalars "dir" and "filter".  "dir" is the path name for
      finding additional perl modules to expose in the documentation.
      "filter" is a regular expression that can be used to filter the
      list.

      <array name="POD_PATHS">
        <object>
          <scalar name="dir">/opt/sis/share/perl</scalar>
          <scalar name="filter">^SIS</scalar>
        </object>
        <scalar>/var/www/vhosts/mysite/share/perl5</scalar>
      </array>
      
 
    - <array> added options found in <null> tag

      --file
      --handle
      
      Read a file into an array...

      <array:foo --file "fruits.txt">
      <array:foo --handle $fh>
     
    Fixes:

    - kill_session() method was not actually doing anything due to a
      typo in the SQLSession.pm module - KILLL_SESSION().  As a result
      the reference implementation was called which literally does
      nothing.  Documented the kill_session() method more precisely in
      the pod to indicate that this method deletes rows from the
      session table and you probably do not want to call this when
      using login sessions.

    - STORE_SESSION_UPDATES in all SQL implementations was updating 
      firstname, lastname, email address of session row.  This is
      probably not what we want to do and the calling method never
      setup those fields properly in the %options argument passed to
      the SQLSession STORE_SESSION() method. Removed those columns
      from the update queries in all SQL implementations.

    - <if> statements without parens did not properly evaluate numeric
      comparisons.

      <null:foo 250>
      <if $foo --gt "3">Yes</if>

      ...would have failed...now it "does the right thing" and
      determines if both the lhs and rhs of the operator "look like
      numbers".  If they do, we use the numeric comparison operators
      rather than string operators.  This naturally leads to the
      question:

      Q: How do you force Bedrock to compare things in an
         alpha-numeric context?

      A: Just like you would do it in perl?
 
        <null:lhs ($input.x + 'x')>
	
        <if $lhs --gt ($rhs + 'x')>...</if>

    - Apache::Bedrock.pm was not merging files in the
      BEDROCK_CONFIG_PATH.d/ directory (i.e. /usr/lib/bedrock/config.d)

    - <null> do not close file handle after slurping files

    - avoid tie of %BEDROCK_CONFIG_CACHE unless the environment
      variable is set, thus avoiding a error during the tie

    - BLM::DBHandler new constructor did not read $dbi from argument
      list properly

    - pod fixes, tweaks and beef ups

    - Apache::Request_cgi::error() missing

-----------------------------------------------------------------------
bedrock 2.3.1 (2012-04-11)

    Enhancements:

    - Bedrock can now use perl modules as generic plugins.  Woohoo!

       <plugin:Digest::SHA --define-plugin="sha">
       <var $sha.hmac_sha256_base64("this=", "that")>

    - A Session Manager - if it is defined in `tagx.xml' as a Startup
      Module, is now pre-bound in the same manner as the header object
      ($header). 

      Pre-binding the header object is done so that Bedrock pages can
      use the same object used by Bedrock internally - since there
      should be one and only object collecting and issuing HTTP
      headers.

      Likewise, although the Session Manager object is not typically
      used by Bedrock internally, it is desirable to share the
      same session object between the Bedrock page and perhaps
      Application Plugins (Startup BLMs).

      While it is possible to simply pass the Session Manager object
      into your Plugins as shown here:

         <null $foo.some_method($session)>

      ...a cleaner design is to expose the Session Manager to all
      Startup Modules via the context object, as we've done with the
      header object.

      The result is that Startup BLMs that are implemented as tied
      hashes (the typical implementation) can access the Session
      Manager object as shown here:

       sub TIEHASH {
          my ($class, $ctx, $config) = @_;
	  my $self = bless {}, $class;

	  my $session = $ctx->{SESSION};

          ....

      Subsequently, values set in the Bedrock page and values set in
      the Plugin are being collected by the same object and will be
      written to the persistent session storage mechanism correctly.

      Is there a downside to this behavior?  Not really since you may
      be hard pressed to find a web application that does not use
      sessions to maintain client state.  In the rare event you do not
      use the Session Manager in your application, the startup cost of
      the manager, which might involve connecting to a database, might
      concern you.  Or it might not...

      If you really want to turn this behavior off, remove this line
      from the default Session Manager:

        <scalar name="session">yes</scalar>

      That line indicates that this Plugin Module is the officially
      sanctioned Session Manager, just as 

        <scalar name="header">yes</scalar>

      ...sanctions 'BLM::Startup::Header' as the official "header"
      object.

      You're free to use a binding name other than "session" or
      "header", however you probably need a good reason to do that.

    - experimental configuration file cacheing using IPC::Shareable

    - new filter shipped with Bedrock - BLM::Filter::crypt

      <open:fh --mode="r" $file $session.passkey>

      You can read or write encrypted files using this filter.

    - The default session manager (MySQL) now supports the ability to
      purge the data from login sessions when the session times out.
      Add:

      <scalar name="cleanup_login_sessions">yes</scalar>
 
      to the config section of the UserSession plugin definition found
      in the MODULES array in `tagx.xml'.

    - Log file cleanup and enhancements:
    
      Bedrock logs have been historically chatty to say the least.
      Bedrock 2.3.0 reconciles some of this chattiness by at least
      having Bedrock respect the log levels specified in both mod_perl
      and bedrock.cgi.

      While this has done wonders to reduce the I/O, we need to go
      farther.  2.3.1 introduces the notion of "customizing" the
      Bedrock logs in addition to cleaning up the format and
      usefulness of the messages.  Some messages that were simply
      remnants of Bedrock 2.x development have been removed altogether,
      while others have been moved to 'debug' status or tweaked to
      provide more relevant and unambiguous information.

      You'll notice now that the first message you see in 'debug' mode
      will tell you if you running bedrock.cgi or mod_perl:

      bedrock.cgi:

      ... [Apache::Bedrock::handler]: request object: [Apache::Request_cgi]

      mod_perl:

      ... [Apache::Bedrock::handler]: request object: [Apache2::RequestRec]


      Keep in mind when we talk of logs we are talking about:

        * Apache's error log

	* bedrock.log

        * your page log


      Apache's Error Log
      ==================

      Apache's error log is primarily where you will find log messages
      that Bedrock writes prior to processing your page.  These
      messages are written during the Apache::Bedrock handler's
      startup sequence.  Here, Bedrock has to read configuration files
      and setup the Bedrock environment.  Once the environment is set
      up, Bedrock internals log to the "bedrock.log" file.  As soon as
      Bedrock begins processing your page, it also writes to the "page
      log".  The page log is specified using the HTML_LOGDIR
      configuration variable in your `tagx.xml' file.

      Why do messages written using:

        $r->log->debug

      appear to be at the "error" level in the Apache error log?
    
      [Wed Feb 22 17:11:19 2012] [error] [client 172.16.150.1] ....

      The Apache handler used to process Bedrock pages which runs as a
      Perl CGI (not as a mod_perl handler) does not have a mechanism
      to write to Apache's error logs directly.  Instead, it writes to
      STDERR which is connected to Apache's error log.  Messages
      written in this fashion are processed by Apache's logging
      mechanism and they are considered to be at the "error" level.


      To control the level of noise during the handler's startup
      phase, set Apache log level using the LogLevel directive
      (mod_perl) and/or set the LOGLEVEL configuration variable in
      `tagx.xml' (bedrock.cgi).  From least chatty, to most chatty:

        LogLevel error   <= log only errors
        LogLevel warn    <= log warning and errors
        LogLevel info    <= log info, warnings and errors
	LogLevel debug   <= log debug, info, warnings and errors


      In `tagx.xml':

        MSG_ERROR
	MSG_WARNING
	MSG_INFO
	MSG_DEBUG
        

      Page Logs
      =========

      Page logs do not utilize a log level.  You control the verbosity
      of the page logs by using one or more --verbose options with
      tags that provide that option.

      New in Bedrock 2.3.1 is the ability to turn page logging off
      altogether.  You may want to do this for performance reasons,
      since every page access triggers an open of the page log and an
      attempt to at least write the obligatory "started logger"
      message.  To turn page logging off:

        <scalar name="HTML_LOG">no</scalar>


      Custom Log Formats
      ==================

      To have Bedrock use a custom format for your page logs you can
      use the variables defined below and set a configuration variable
      in your `tagx.xml' named LOGFORMAT.

	%a => $ENV{REMOTE_ADDR},
	%A => $ENV{SERVER_ADDR},
	%f => $ENV{REQUEST_URI},
	%h => $ENV{REMOTE_HOST},
	%H => $ENV{SERVER_PROTOCOL}
	%L => Log level
	%m => $ENV{REQUEST_METHOD},
	%p => $ENV{SERVER_NAME},
	%P => Process ID
	%q => $ENV{QUERY_STRING},
	%t => Current time
	%u => $ENV{REMOTE_USER} || $ENV{REDIRECT_REMOTE_USER}

      The default format is:

       %t [%p] [%a]: %L

    - The upload_file() method of the $input object now supports
      encrypted uploads.  You may want to upload a file to your
      server, but have it encrypted immediately upon being written to
      the server.  Support for encrypting files is done via the perl
      module Crypt::CBC.

      In order to encrypt a file, you supply an optional `passkey'
      that is used to encrypt and decrypt the file.  Make sure you
      remember this value or have a way to regenerate it
      programmaticaly.  If you supply a `passkey', Bedrock will assume
      you want to encrypt the file.

        <null $input.upload_file('upload_file', 'passkey', $input.passkey)> 

      You can optionally pass the name of a cipher to use for
      encryption using the `cipher' option.  If the cipher option is
      not used the default cipher is employed (DES).  The cipher name
      is assumed to be the name of a valid perl module that is
      currently installed on your server.

        See perldoc Crypt::CBC for more details.

    - Bedrock::Log now longer announce where it is logging to which
      was simply an annoying log message.

    - Bedrock::Template - see perldoc Bedrock::Template

      Provides a convenient, familiar, programattic interface for
      Bedrock developers in the perl environment.

       my %params = (foo => "bar", baz => "buz" );

       my $text =<<eom;
       Every <var $foo> is actually a <var $baz>!
       eom

       my $bedrock_template = new Bedrock::Template( $text, %params);

       print $bedrock_template->parse;

    - The <var> tag now implements a new option (--handle) which
      allows you to direct the contents of a variable to a handle in a
      similar way that is done with the <sink> tag. Hmmm...why would
      you want to do this?  Seems redundant, but <var> tag options are
      processed before the information is written to the handle.
      Thus, things like:

        <var --handle=$fh --xml $foo>

      ...are a handy way to transform data before output.  You can
      override this behavior by using the --raw option which will
      prevent any processing before the data is written to the handle.

    - A new option to the <open> tag (--filter) allows you attach a
      Bedrock filter (perl module) that implements certain methods for
      reading and writing to handles.  Two reference implementations
      are (BLM::Filter::xls, BLM::Filter::csv) provided in release
      2.3.1.

      xls  => read a .xls file
      csv  => read/write a .csv file

      <open:fh --filter="xls" foo.xls>

      <while $fh>
        <var --delimter="," $_>
      </while>

      Filters are easily added as extensions to Bedrock by
      implementing a class based on `Tie::Handle' and installing the
      module to a BLM/Filter directory in perl's @INC path.  The
      filter name should be the same as the name of the module you
      install.

    - New scalar methods:

      base64()     => returns base64 encoded value of scalar

      tr           => transliterate, see perl 'tr'
                      example: $foo.tr('abc', '123')

      hmac_sha1    => returns HMAC-SHA-1/224/256/384/512 digest of the
      hmac_sha224     scalar value + a passed key as a binary string.
      hmac_sha256     (see perl Digest::SHA)
      hmac_sha384
      hmac_sha512
      
    - --base64 option for <null> and <var> tags allows you to decode
      or encode strings as base64.

    - New convenience tags <sqlcommit>, <sqlrollback>

      Although one could theoretically, do this:

      <sqlconnect --db="dbh" --dsn="name_prod">
      ...
      <null $dbh.commit()>

      Bedrock now provides the two tags for rolling back and
      committing transactions for databases that support such an
      action.

    - New convenience tag for preventing Bedrock from processing a
      block of text.  You may be debugging and want to exclude some
      block of Bedrock tags:

      <noexec>
      ...
      </noexec>

    Fixes:

    - BEDROCK_USER_PEBBLE_DIR changed to PEBBLE_DIR, but
      Apache::Bedrock was still setting BEDROCK_USER_PEBBLE_DIR

    - BLM::DBHandler did not set {rows} to 0 before executing a SQL 
      statement, hence if you relied on this value you might not have
      gotten the right answer.

    - BLM::IndexedTableHandler now sets date/time fields to under if
      the value of the field is "false" in the perl sense.  This
      prevents getting 0000-00-00 00:00:00 in a column when you really
      wanted NULL.

-----------------------------------------------------------------------
bedrock 2.3.0 (2012-01-23)

    Enhancements:

    - Bedrock running as a CGI is now oodles less chatty.  In a noble
      attempt by Bedrock 2 to use the Apache::Request handler's
      logging functions in Apache::Bedrock, the verbosity level of the
      server's log was inadvertanly ratcheted up due to the way the
      Apache::Request_cgi wrote to the log.

      Apache::Request_cgi used Bedrock::Log::LOG_MESSAGE which falls
      back to writing to STDERR if no log file is defined, which is
      precisely the time during which Apache::Bedrock::handler() is
      the most chatty.  STDERR is directed to Apache's error log, thus
      you get a host of Bedrock messages about how it is reading in
      configuration information, etc as it believes (mistakenly) that
      the log level is MSG_DEBUG.

      Now, we read the `tagx.xml' file in the CONFIG_PATH or
      BEDROCK_CONFIG_PATH and at least respect the LOGLEVEL set
      there.  Additionally, some of the unsightly warnings have been
      removed and we'll only "cluck" (which produces an even chattier
      stack backtrace) when MSG_DEBUG is set.

    - <sqltable>
 
      New experimental tag that implements much of the functionality
      of BLM::IndexedTableHandler.

        See /bedrock/tags/sqltable 
        See /bedrock/plugins/IndexedTableHandler

    - BLM::Startup::UserSession (via SessionManager) contains a new
      create_temp_login_session() method that is useful when user's
      lose or forget their password.  See the pod for more details.
      There is reason to believe that cleaninup temporary session
      directories is problematic - especially for login sessions - so
      beware, you may have to institute some housekeeping on your
      website if you use this feature extensively.

    - re-added BLM::IndexedTableHandler and BLM::DBHandler to project
      with more of a commitment to document these functions.  They are
      potentially very useful for LAMB applications.

    - The Context object now exposes the $header object via the
      `header()' method to ensure that application plugins have access
      to the header object in order to set headers.  This is necessary
      so that all headers are filtered through Bedrock's handler prior
      to ANY content being passed to the browser.

      Recall the Context object is passed to Application Plugins (nee:
      Startup BLM's) when the object is tied.

        sub TIEHASH {
          my ($class, $ctx, $config) = @_;
          my $self = bless {}, $class;
        
          ...

          $self;
        }

      Bedrock, just prior to outputting content by the TagX object,
      determines if the application has set a redirect header and will
      avoid sending any content other than the headers.

      8<--- TagX::Output::print --------------------
        sub print {
          my $self = shift;
          return unless @_;
        
          my $output;
        
          if ( $self->{'buffers'} ) {
            $self->{'buffers'}->[-1] .= "@_";
          }
          else {
            my $header = $self->{'__header'};
        
            if ($header) {
              my $obj = tied( %{$header} );
              $output = $obj->{'output'};
        
              $self->print_header;
            }
        
      |     # don't bother writing output if we're just redirecting!
      |     unless ( $output && $output->{location} || $output->{Location} ) {
      |       $self->{'Handle'}->print(@_);
      |     }
          }
        }
      8<--------------------------------------------

      Also, in Bedrock's handler, we need to set the proper status for
      Apache using mod_perl.

        # Apache 2 hack for redirection (mod_perl?)
        if ( $ENV{SERVER_SIGNATURE} =~ /apache/i ) {
          $r->status(Apache2::Const::REDIRECT)
          if $ENV{MOD_PERL} && exists ${ $r->err_headers_out }{Location}
            || exists ${ $r->err_headers_out }{location};
        }

      In any event, it's necessary for Bedrock to see that the
      `Location' header has been set.  Application plugins and Bedrock
      pages should *ALWAYS* use the $header object to set headers to
      ensure Bedrock is aware of the redirect.

      The header() method of the Context object will expose the header
      object to you so you can use its methods for redirection.

        $ctx->header->location(...);
        $ctx->header->see_other(...);

    - <if> tag now takes a quoted reqular expression as well as a
      simple regular expression.

      <if $foo --re "qr/foo/i">...</if>

    - matches() for scalars, returns an array of matches

      <null:foo "this is a test">
      <null:results $foo.matches("qr/([ia].)/")>

      The argument to matches() can be a pattern or quoted regexp.

      matches(patttern, [flags]) 

      flags = i | m | g 

      Using the g flag will return all matching parts.

    ** Compatibility Caution ** 

      - grep() for hashes and array objects returns an empty array
        instead of 'undef'

      - or() used to alter scalar value.  Now does not alter scalar
        value to be consistent with other scalar methods.

        <var $foo.or("this")>

    ** End of Compatability Caution **

    - length() method of hash objects to obviate isEmpty()

    - added the find() method for hashes.  Returns "A" key associated
      with the value.  If you have non-unique values, this is not
      useful (see grep()).

      <hash:foo red 1 blue 2 green 3>
      <var $foo.find(3)>

    - added the grep() method for hashes.  Returns an array consisting
      of the keys for those elements that match a given value.
      Similar to grep() for arrays.

      <hash:foo rob 1 ROBERT 2 bobbie 3>
      <null:results $foo.grep("ob")>
      <null:results $foo.grep("qr|^[rb]ob|i")>

    - During iteration of the <sqlselect> tag $_ is created from the
      hash reference that corresponds to the current row of data.
      Additionally, 'rownum' is available and corresponds to the row
      number being processed.  If you have a variable of the same name
      from the query it will take precedence.

      <sqlselect "select * from customer"><var $rownum> : <var $name></sqlselect>

    - <sql> tag now supports the concept of re-usable statement
      handles.  You can use the --define-handle option to define a
      variable to hold the statement handle.  You can then use the
      statement handle as the argument to the <sql> tag in lieu of the
      SQL statement.

       <sql --define-handle="sth"
            "update transaction_detail 
                set amount = ? 
                where acct = ? and 
                      julian = ? and 
                      req_seq = ? and
                      trunc(date_of_service)=? and
                      prod_type_id = ?">

       <sql $sth --bind=100
                 --bind=1
                 --bind=321
                 --bind=1001
                 --bind='03-JUN-11'
                 --bind='RN'>

    - <trace> tag now supports the --pebble-cache option will dump the
      pebble-cache.

    - <pebbledef></pebbledef> tag now allows dynamically created
      Bedrock macros.  Additionally, pebbles are now cached.  You can
      see what's in the cache by using the <trace> tag with a new
      option --pebble-cache.

      Ideally, you should place <pebbledef> on its own line.  Bedrock
      will remove the first blank line for you, however.

       <pebbledef:listing>
       <foreach --define-index="i" $ARGV.length()><var $i.format("[%3d] )><var $_>
       </foreach>
       </pebbledef>

    - Setting the stage for the ability to dyamically add Plugins to
      Bedrock without the need to perhaps place them in special
      locations, the PLUGIN_PATH configuration variable will now be
      detected during Bedrock startup and the path defined there (':'
      delimited) will be added to @INC before attempting to load
      Startup Plugins.  

      Likewise when the <plugin> tag is used, Bedrock will also use
      the path defined by PLUGIN_PATH.

      Theoretically, it should then be possible to add Plugins
      "on-the-fly".

      A Plugin repo is probably not far behind... ;-)

    - Plugin cleanup time...

      These Plugins will be distributed with Bedrock.  They provide
      some useful functionality that is not necessarily available
      using just Bedrock tags.

      Awk
      Benchmark
      Date
      FileIO
      FTP
      Mail
      Recycle
      SMTP
      Stat
      Timenow
      
      These Plugins have been deprecated.  Some of these have never
      been advertised, others are no longer useful because their
      functionality is available in a Bedrock tag.  They will probably
      be made available via a Bedrock Plugin archive of some sort.
      
      DBHandler
      File
      Filter
      Fortune
      HtmlHelper
      Include
      IndexedTableHandler
      Number
      OrderedObject
      Perldoc
      Series
      SiteFactory
      XML

    - <null $blm.method()> would "work" when there was no "method()"
      of $blm...i.e. Bedrock would not throw an exception...here's why

      Bedrock allowed for the possibility that a class might implement
      a method via AUTOLOAD.  Turns out some folks do that.  So that
      simply coding:

       die "invalid method"
         unless $obj->can($method);

      ...would die even if $obj implements $method via
      AUTOLOAD...think get()/set().

      so Bedrock lazily, just said ok...I'll just let you get away
      with that...caveat emptor

      However Bedrock could have recognized that $obj->can($func) is
      undefined, and taken the alterate route of eval'ing an
      expression and trapping the error if the object REALLY didn't
      implement the method.

        if ( $funcref ) {
          @ref_v= $funcref->($obj, @args);
        } else {
          &log_message( undef, "$self: eval function in case implemented via AUTOLOAD\n\@ref_v = $obj->$func(\@args);");
        
          eval '@ref_v = $obj->' . $func . '(@args);';
          die "$@"
            if $@;
        }

      Bedrock 2.3.0 therefore breaks compatibility in that it doesn't
      let you make typos on method calls any more.  Should help
      developers debugging efforts immensely.

    - --bedrock-xml option for <null>, <var> tag
 
      Used with <var> tag, will create the Bedrock XML representation
      for array and hash objects.  Meaningless for scalars.

       <sink:xml><var --bedrock-xml $session></sink>
      
      Used with <null> tag can take an argument which is either a
      string representing a Bedrock XML object or a file handle of an
      opened Bedrock XML file.
 
       <null:foo --bedrock-xml $xml>

       <plugin:FileIO ($env.BEDROCK_CONFIG_PATH + "/tagx.xml")>
       <null:xml --bedrock-xml $FileIO.handle>

    - Likewise, Bedrock::Hash and Bedrock::Array objects have
      serializing methods bedrock_xml().

       <array:foo a b c d>
       <null:xml $foo.bedrock_xml()>

       <hash:foo a 1 b 2 c 3 d 4>
       <null:xml $foo.bedrock_xml()>

    - If <while> supports file handles, then naturally <null> should
      as well...and while we're at it, why not just allow a file to be
      slurped as a variable without the hassle of having to create a
      filehandle anyway?

      Accordingly, two new options to <null> tag, that qualify the
      argument.

       --handle => inidicates that the argument is a handle and the
                   file should be slurped into the given variable or
                   $_

       --file =>   indicates that the argument is a filename and the
                   file should be slurped into the given variable or
                   $_ - which leads to some  interesting idioms:

                   # Slurp a file
                   <null --file foo.dat>
		   <var $_>
		   
                   # deserialize a Bedrock XML file
                   <null --bedrock-xml --file foo.dat>
		   <trace --output $_>

      TIMTOWTDI

       <plugin:FileIO ($env.BEDROCK_CONFIG_PATH + "/tagx.xml")>
       <null:xml --handle $FileIO.handle>
       <trace --output $xml>

       <open ($env.BEDROCK_CONFIG_PATH + "/tagx.xml")>
       <null:xml --handle $_>
       <trace --output $xml>

       <null:xml --file ($env.BEDROCK_CONFIG_PATH + "/tagx.xml")>
       <trace --output $xml>

      Bedrock shell just got a lot more attractive.


      ** Compatability Caution **

        In order to support the notion of making assignments in
        general to the default variable ($_) for the <null> tag, we've
        unilaterally defaulted the target of a <null> tag to $_ when
        no --define-var, --define-array, --define|create-object or
        :name are found as options to the tag. This means that
        construction like:

         <foreach red blue green>
           <null $foo.method($_)>
           <var $_>
         </foreach>
   
         ...would more than likely, give different results in versions
         of Bedrock prior to 2.3.0.  It could be mitigated (by you) in a
         number of ways.

         # 1. provide a default value for the <null> tag

         <foreach red blue green>
           <null:dummy $foo.method($_)>
           <var $_>
         </foreach>


         # 2. don't use the default variable in the loop, but rather
         #    specify a name
         
         <foreach --define-var="color" red blue green>
           <null $foo.method($color)>
           <var $color>
         </foreach>
         
         You have been warned - after all this, version represents
         feature upgrades, not just bug fixes.  You should be naturally
         skeptical and on the lookout for minor compatibility issues.
         
         You will also be be warned in the Bedrock page log thusly:
         
           Warning! You are about to overwrite the default variable $_ = (...)!

    ** End of Compatability Caution ** 

    - <while> tag now supports either an expression or a handle.

      <plugin:FileIO "foo.txt" "r">
      <while $FileIO.handle><var $_></while>

    - $session will support new method calls:

      Create a temporary file in the session directory

      .create_session_tempfile([template], [SUFFIX, suffix], [DIR, dirname])
 
      Returns: two-element array: file handle, file name   
    
      Create a session directory

      .create_session_dir([dirname])

      Throws exception if directory cannot be created.

      Throws exception if SESSION_DIR is not defined.

      Indicate that the $session object should attemp to cleanup
      directories under the SESSIO_DIR that have the same name as the
      session ids that have expired.

      .cleanup_session_dir(undef | 0 | 1)

      Returns: value of `session_cleanup_dir' in $session's
      config object if no argument, else new value.


      .lookup_user(username)

      Returns the 'username' if the username exists as a registered
      user in the session table.

      <if $session.lookup_user($input.username) --eq $input.username)>
      ...

    - Session cleanup will now include removing any directories under
      the SESSION_DIR that have the same name as session identifiers
      about to be removed from the session databse.  To enable this
      feature add a configuration variable to the UserSession modules
      `config' object:

        <object name="config">
          ...
          <scalar name="session_dir_cleanup">yes</scalar>
        </object>

    - Clarifying use of --expand-args:

      <null --expand-args --define-var="foo" ... >
      
      We'll keep existing behavior which is to expand the argument
      only if it is the "first" argument in the list

      Add the option to --expand-all.

      <null --expand-args --define-array="foo" ...> 

      Expand all arguments, as you told me you want an array and you
      want me to expand arguments.

      <array --expand-args ...>

      Same behavior as <null --expand-args --define-array="foo" ...>

      I think this behavior will lead to the least number of
      "surprises" while providing for the "most" functionality.

    - Bedrock 2 now supports the use of simple scalars in indexing
      operations.

      <null:foo a b c>
      <null:i 2>

      <var $foo.[$i]>

    - unsupported/unrecognized options to a tag now will generate an
      error. Bedrock 1 did not do this, and I suspect it may be
      because it would break somone creating an array element that
      started with '--' ala...

      <null:foo bar baz buz --foobar>

      However, use of barewords is always at the risk of breaking
      something, so this works fine.

      <null:foo bar baz buz "--foobar">

    - comparison operators (--lt, --gt, etc) will now be done in a
      numeric context if both operands look like numbers.

      amidst other things, this enables one to actually use the
      <while> tag effectively.

      <while "($i --lt 10)"> 
      ...
      </while>

      ...can actually work.

    - subtle change to <null> - I will be interested to see if anyone
      has ever relied on this behavior.

      Bedrock 1

         <null --define-var="foo">

       ...may have resulted in a Bedrock::Hash object being defined.

      Bedrock 2

         <null ---define-var="foo">

      ...results in an scalar that is "undef".  This is more aligned
      with what one would expect.

    - <while "(--exists $foo)"> returned true always - this must have
      been a long standing Bedrock bug. Fixed.

    - new unary operator --defined
    
    - BLM::FileIO

      * getlines(), getline() method now accept an argument 'chomp-mode'
        (0/1) indicating whether or not to remove trailing new line
        characters.

      * if there is no filename provided, then STDIN is opened

      * If no file mode is provided, file is opened "r" (read-only).

    - Bedrock::Hash now has `slice()' method which returns a
      Bedrock::Hash from a list of keys.

      <null:foo $input.slice('fname', 'lname')>

    - Bedrock now uses the configuration variable BEDROCK_ADMIN_DIR
      to allow you to change the bedrock administration directory.
      This might be used when, for example, you don't have access to
      changing the Apache configuration file and want to explore or
      install Bedrock without root privileges.

    - <sqlconnect> now accepts a --dsn argument which specifies a
      "named" connection that is loaded from a `dbnames.xml' file that
      you can place in $ENV{BEDROCK_CONFIG_PATH} or $ENV{CONFIG_PATH}.

    - Bedrock finally has simple arithmetic.  You still need parens
      around expressions, but simple arithmetic expressions are
      evaluated correctly.

      <var (5 + 6)>
      <var (5 - 6)>
      <var (5 * 6)>
      <var (30 / 5)>
     
      Note the spaces around the operators.

      Some string operations are overloaded:

      <var ("foo" + 6)>        => foo6
      <var ("foobar" - "bar")> => foo
      <var ("foo" * 2)>        => foofoo
      <var ("foo" / "o")>      => f

    - <var $hash> and <var $array> now output the hash and arrays as a
      delimited list.  The default delimiter is ''.  A new option
      --delimiter has been added.

      <var --delimiter='<br>' $hash>

    - The $input object now has the ability to sanitize form input.
      If you think you might be using form input in possibly unsafe
      ways, consider enabling HTML::Scrubber.  This is done by adding
      a 'config' object named 'scrubber' in the specification for the
      Application Plugin $input (BLM::Startup::Input).  Add a `config'
      object that can contain the scalars `deny' or `allow' which specify
      a set of tags that are "allowed" or "denied".

      See HTML::Scrubber for more details.

      <!-- Form input access -->
      <object>
        <scalar name="binding">input</scalar>
        <scalar name="module">BLM::Startup::Input</scalar>
        <object name="config">
          <object name="scrubber">
            <scalar name="allow">b p i code pre</scalar>
          </object>
        </object>
      </object>

      If no 'scrubber' object exists, then the HTML::Scrubber module
      is not loaded, thus technically it's a dependency only if you
      plan on using this feature.

    Fixes:

    - negative indexing of arrays was busted (gave 'Syntax error'),
      works now in the perlish way

    - <var --default> was not working as advertised

    - Cookie.pm now uses the Context object's `header()' method to set
      the cookie instead of using cgi_header_out().  This is done to
      make sure that Bedrock see's all header directives.

    - BLM/Startup/Header.pm

      + added set() method that overrides the super class method and
        checks to see if you are setting Content-Type and resets to
        Content-type since that is what Bedrock expects to send to the
        browser.  In generaal, you should not set headers that way,
        use the content_type() method of the $header object.

      + see_other() now sends "Status: 303 See Other"

      + location() now sends "Status: 302 Found" - previously browsers
        may have ignored headers after Location when Status = 200.
        This manifested itself in redirect problems.

    - change_passwd() did not work properly for MySQLSession
      implementation of login sessions

    - it appears there was never a clean up implemented for login
      sessions that had expired.  My guess is that, if the cookie
      expires then the session may be all but inaccessible unless one
      happened to know the session id.  This becomes a problem with
      cookieless sessions as the id could be used without
      expiration. Login sessions are now cleaned up if they have
      expired.

    - Bedrock shell error message indicated on wrong line when error
      is on first line

    - BLM/Startup/Header attempted to prevent duplicate location
      headers from being issued, however it appears the regexp included
      a ':' in the string that caused the match of 'location' to fail.

-----------------------------------------------------------------------
bedrock 2.2.1 (2011-08-18)

    Enhancements:

    - <hash> tag can merge hashes

      <hash:h1 a 1 b 2>
      <hash:h2 c 3 d 4>
      <hash:h2 $h1 $h2>

    - Bedrock will now look in $(BEDROCK_CONFIG_PATH)/config.d/startup for
      startup modules as well as $(CONFIG_PATH)/config.d.startup

    - Bedrock::CGI - added the ->exec() method which will allow you to
      invoke Text::TagX (parser) which adds a crude templating tool to
      Bedrock::CGI

        $bedrock = new Bedrock::CGI;

        my $foo = "Hello World!";

        my $snippet = '<var $foo>';

        $bedrock->print( 
                        $bedrock->exec( $snippet, foo => $foo )
      
                        );

    - Bedrock::CGI can be explicitly told to do cookieless sessions
 
        $bedrock = Bedrock::CGI->new( COOKIELESS => 1 );
            
    Fixes:

    - better cleansing of temporary session directories and cleaning
      up of sessions in the sesssion table.  Login sessions apparently
      were not being cleaned up properly, although cookie expiration
      may have masked the problem or prevented it from actually being
      a problem.

    - if a .xml config file overrides APP_CONFIG, Bedrock was ignoring
      that fact because APP_CONFIG was grabbed before those configs
      were merged.  APP_CONFIG inspection is now delayed until we
      process those extra config files.

    - Bedrock::Config did not look in CONFIG_PATH, just
      BEDROCK_CONFIG_PATH, when looking for files with relative
      pathing.

    - minor pod tweaks, exposed pod for BLM::Startup::SessionManager
      since the docs are helpful for anyone trying to write their own
      session manager. 

-----------------------------------------------------------------------
bedrock 2.2.0 (2011-08-08)

    Enhancements:

    - JSON hash objects will now revert to being "unordered" as JSON
      hash objects are not expected to be ordered.  Although I
      personally think this is stupid, the JSON implementation prior
      to 2.50 had a perl implementation that made it relatively easy
      to implement ordered hashes.

      The JSON maintainers have been mucking with these modules and
      the perl implementation is going to be deprecated.  In
      preparation for that they buried the PP.pm (pure perl)
      implementation from whence Bedrock had gotten ordered hashes
      into a module called backportPP.pm.  This causes real headaches
      for producing an RPM that just works.  Either you have to go
      hack some modules and rename things or you have to find yourself
      a 2.21 RPM of JSON - all for the sake of ordered hashes - a
      feature of Bedrock that is not widely used at this point.

      Hence, the best solution to this compatibility mess and to avoid
      "surprises", even if they are pleasant ones, will be to revert
      to the native JSON behavior.  This should satisfy those
      expecting the truly JSON behavior of JSON string decoding rather
      than Bedrock's attempt at ordering and unfortunately disappoint
      those who think there's no good reason to have randomly ordered
      hashes.

    - added `create-session.sql' to distribution.  Use this file to
      create a MySQL session table for Bedrock.

    - README and README.Apache have been carefully reviewed and some
      updates have been made to clarify and correct some installation
      steps

    Fixes:

    (None)

-----------------------------------------------------------------------
bedrock 2.1.3 (2011-07-17)

    Enhancements:

    - new bedrock-plugin tool for creating Plugin plumbing

      $ bedrock-plugin --help

    - perl module version numbers are now "baked" into the module
      during build time to avoid an unnecessary regexp execution in
      the BEGIN block.

    - attempting to make Bedrock a little less verbose in the logs by
      finding any stray log messages that do not respect the LOGLEVEL

    Fixes:

    (None)

-----------------------------------------------------------------------
bedrock 2.1.2 (2011-07-15)

    Enhancements:

    - Bedrock now gives a little bit more information when config
      files are being processed and an exception occurs. It will dump
      a list of files successfully processed so perhaps you can deduce
      which one it screwed up on.

    - BLM/PLUGIN is now Bedrock::Plugin
      BLM/AppPLUGIN is now Bedrock::Application::Plugin

    - Bedrock now looks for Application Plugins descriptors in

      $ENV{CONFIG_PATH}.d/plugin 

      ...in addition to:

      $ENV{CONFIG_PATH}.d/startup

    - <case> now optionally can sink output to a variable.

      <case:foo:bar this that>

      <case:*foo this that>

    Fixes:

    - Bedrock shell was overriding default values for options when
      there existed a .bedrock_rc but the file did not contain values
      for the overridden options (i.e. logfile).

    - Avoid sending duplicate Location headers

    - Parse cookies correctly when Multi-line Cookies are sent that
      get catenated with ", "

-----------------------------------------------------------------------
bedrock 2.1.1 (2011-07-12)

    Enhancements:

    - included bedrock.spec for creating RPM file

    - return object for $input.upload_file now includes the mime-type
      (content-type) of the object uploaded.

    - tagx_apps.xml directory level configurations cascade.

      <object>
        <object name="/foo">
          <scalar name="foo">foo</scalar>
        </object>
      </object>

      ...would mean `foo' is available to directories at /foo and
      under /foo

      Likewise for tagx_apps style config files in the
      ~CONFIG/framework directory.  Files in this directory should be
      named for the root directory for which they apply.

    - if there is a system .d directory (/usr/lib/bedrock/config.d),
      files from that directory are loaded as well.

    - throw an exception if an option is specified for one of the
      database connect options in <sqlconnect> but no value is
      provided.  This prevents inadvertant connects from succeeding
      because a DBI_DSN, DBI_USER or DBI_PASS is defined but you made
      a typo setting an option.  Example:

      <sqlconnect --data-source=$config.my_data_source
                  --username=$config.my_username
                  --password=$config.my_password>

      ...and any of the $config.my_data_source, $config.my_username,
      $config.my_password are missing or invalid.

    - RPM post installation does not restart apache anymore

    - You can now drop files in ${BEDROCK_CONFIG_PATH}.d to be read by
      Bedrock on startup and merged into the config object

    - Bedrock shell is more compatible with Bedrock with regard to how
      it reads configuration files.  It will use the enviroment
      variable $CONFIG_PATH to find the config directory, however this
      can be overriden on the command line with --config or place in
      the .bedrock_rc file.

    - Bedrock shell assumes that the DOCUMENT_ROOT is the current
      working directory if input is coming from STDIN (or no file specified
      on command line, ala piping).  Likewise it will assume that the
      DOCUMENT_ROOT is the current working directory if the filename
      does not start with '/'. 

    - BLM/Startup/SQLiteSession.pm has been added to Bedrock.  This Plugin
      contributed by Andy Layton, implements sessions based on the
      `sqlite' database.

    - UPDATE_LOGIN_PASSWORD method implementation for
      BLM/Startup/MySQLSession incorrectly implemented SQL statement.

    - magically you can now access the entire, hairy ball of Bedrock
      configuration information from a CGI like this:

        BEGIN {
         use lib '/usr/lib/bedrock/perl5';
        }

        use Bedrock;
        use Apache::Bedrock;

        my $config = Apache::Bedrock::config;
        my $module_config = $config->get_module_config( 'UserSession' );

    - To facilitate the writing of CGI programs that are compatible
      with the Bedrock environment, a new perl class has been created
      that provides a robust environment for accessing the Bedrock
      configuration and session information.

         #!/usr/bin/perl
                 
         BEGIN {
           use lib '/usr/lib/bedrock/perl5';
         }
         
         use Bedrock::BedrockCGI;
         use Data::Dumper;
         
         my $cgi = new Bedrock::CGI;

	 # log some info
	 $cgi->log("Hi from a Bedrock::CGI app!\n");
         
         # create some HTML
         $cgi->print("<pre>");
         $cgi->print( Dumper( [$cgi->config, $cgi->session] ) );
         $cgi->print("</pre>");
         
         # set some session data...
         $cgi->session('foo', "foo bar");
         
    Fixes:

    - Bedrock/XML.pm claims support for single quotes in XML options
      however prior to 2.1.1 this did not work:

      <scalar name='foo'>foo</scalar>

    - `bedrock.conf' was renamed to `perl_bedrock.conf' because apache
      has an idiosyncratic way of reading config files from the
      `conf.d' directory (i.e. alphabetically).  Some distributions
      (RedHat) load mod_perl from a `perl.conf' configure file.  Since
      bedrock.conf includes some directives that test for mod_perl,
      mod_perl must be loaded first.  Since 'b' comes before 'p',
      mod_perl is not loaded and the directives in bedrock.conf that
      test for mod_perl determine it is not loaded when in fact it may
      be loaded during the apache startup process from perl.conf.

      `perl.conf' loads before `perl_bedrock.conf', thus the new name.
 

-----------------------------------------------------------------------
bedrock 2.1.0 (2011-04-27)
    
    2.0.12 has been promoted to 2.1.0 for this release, establishing a
    baseline version of Bedrock 2 that works on Red Hat and Ubuntu
    servers.

    Enhancements:

    - Bedrock Shell is now part of the Bedrock 2 project

      Bedrock Shell installed as /bin/bedrock

      Bedrock Shell enhancements:

      + can accept a Bedrock template input from STDIN
      
      + reads a .bedrock_rc and sets various configuration parameters

        - config file path

        - logging

        - default & named database connnections

    - chomp() method for scalars

      <var $foo.chomp()>

    - <var --table --columns[=columns] >

      columns can now be any one of:

      * a JSON string
      * an array object
      * a comma delimited list of column names

    - <var --checkbox> or <var --radio> automatically generate a label with 
      the value that is the value of the form element.

      <var --checkbox Foo>

      would produce...

      <label for="checkbox_1">Foo</label><input type="checkbox" value="Foo" name="checkbox_1" id="checkbox_1" style="vertical-align:middle;">

      You can use the --no-label option to prevent the label from
      being generated.  You can also use the --no-style option to
      prevent alignment.

    - new widgets

      text, file, code, img, pre, p, anchor, submit, button, blockquote, address

    - standardized HTML widget inteface:

      radio, checkbox, select, select-group
      <var --widget[=attributes] value default-value name label>

      text, textarea, file
      <var --widget[=attributes] default-value name label>

      button, submit
      <var --widget[=attributes] default-value>

      img

      <var --img[=attributes] relative-image-path>

      anchor

      <var --anchor[=attributes] text link>

      address, div, blockquote, code, ol, p, pre, span, table, ul
      
      <var --widget[=attributes] value>

    - documented some of the HTML widget capabilities
       
    - Bedrock.pm (handler) now detects if your LOGDIR variable points
      to a directory that either is non-existent or is not writeable.
      If that's the case we use /tmp and note that in the config
      variable.  Previously, Bedrock would use the /tmp directory but
      not let you know about it in the configuration object since the
      decision to use /tmp was being made by Bedrock::Log, not in the
      initialization stage of the handler.

    - startup.pl will now append the perl include directories
      specified by the --with-perl-includes option to configure to
      perl's search path via 'use lib ...'.  This is necessary for
      mod_perl to find the Bedrock handler and friends.  If you want
      to install Bedrock plugins somewhere else, you'll need to let
      Bedrock now where they are too by specifying those paths in the
      startup.pl script if you are using mod_perl or in the `perl.INC'
      file if you are using bedrock-cgi.

      Note: bedrock.cgi is aware of the paths that are configured at
      build and configure time, thus a perl.INC is not strictly
      required unless you are specifying additional perl search
      directories.

    - ALLOW_BEDROCK_INFO now can be set to 'yes' or 'docs'.  If 'yes'
      all info is available, if 'docs' then just documentation is
      available.

    - Bedrock now includes a Application Plugin stub, similar to
      BLM::PLUGIN that can be sub-classed to provide a very consumable
      starting point for App Plugin creation.

        package BLM::Startup::Foo;

        use BLM::AppPLUGIN;

        @ISA = qw(BLM::AppPLUGIN);

        1;

    - Bedrock handler will set CONFIG_PATH in the config object from
      $ENV{CONFIG_PATH} since the value in tagx.xml, if there is one
      is too late for Bedrock to use.

    - The BLM::PLUGIN class now has a verbose() method that exposes the
      --verbose option if it was specified.  This allows PLUGIN
      writers to detect this option and perhaps be verbose in logging.

    - The BLM::PLUGIN class has some new methods that are just
      convenience routines for Plugin writers that expect their plugin
      to behave somewhat like a Bedrock::Hash (but not too much).

    - added a method called `build_get_url' to the $header object
      which will aid in constructing encode GET URLs of the form:

      /index.rock?parm=val&...

    Fixes:

    - remove '::' from plugin names to support things like <plugin:MIME::Lite>

    - the Bedrock option parser has been 'fixed' so that options that
      would normally take arguments and have been corrupted to be
      "optional" (as in the HTML widget options) are now parsed
      correctly.  Previously, order was important and would break the
      parser.

      <var --table --columns=$foo $array>

      ...would have been misinterpretted since --table can take
      arguments.

      A side effect of this is that lazy programmers that relied on
      this "bug" in Bedrock 1 will find that this does not give the
      desired results:

      <null --create-object "foo" red 1 blue 2 green 3>

      ...nor should it have been tolerated...instead:

      <null --create-object="foo" red 1 blue 2 green 3>

    - <var --radio ...> if no argument threw exception, but even worse
      if the expression argument was undefined the finalize method
      returned without creating the widget.  Similarly for --checkbox widget

    - bugzilla #4531 - plugin Number

    - bugzilla #4533 - session login - use password or encrypt

    - bugzilla #4499 - upload_file()

    - startup.pl was using the libdir variable, whereas the perl
      modules themselves were being installed in DATADIR/perl5 which
      is really set using --with-perl-libdir=.  That value is exposed
      as @PERL_LIBDIR@ and should be used appropriately but wasn't.
      The default value is \$pkglibdir/perl5.

      For a Debian install our rules will set --with-perl-libdir to
      /usr/share/perl5.

    - modules under config.d/startup were not being loaded properly

    - <plugin> --define-plugin was not defined properly in options list

    - <sink> - was only writing first line

    - <include> - Bugzilla #4471

-----------------------------------------------------------------------
bedrock 2.0.11 (2010-12-17)
    
    Enhancements:

    - Bedrock configuration is more finely defined:

      1. The default Bedrock installation includes a `tagx.xml' file
         that should work "out of the box" for a stock Apache server
         installation.

         + The environment variable BEDROCK_CONFIG_PATH defines the
           path to the installed default configuration.
  
      2. Site administrators that wish to use a local version of
         `tagx.xml' for their virtual host can chose to merge or
         override that configuration by settting the environment
         variable:

	 CONFIG_PATH

      3. *.xml files dropped in the configuration directory will be
        merged with Bedrock's configuration.

      4. Localized application plugins (nee: Startup BLMs) can be
         defined by including an application plugin configuration object
         in an Bedrock XML file located in:

         $ENV{CONFIG_PATH} . ".d/startup"

         The file should look similar to:

         <!-- 'foo' plugin -->
         <object>
           <scalar name="binding">foo</scalar>
           <scalar name="module">BLM::Startup::Foo</scalar>
           <object name="config">
              <scalar name="bar">baz</scalar>
           </object>
         </object>

         Only the "binding" and "module" members of the object are
         necessary, however you can provide whatever other object your
         plugin requires.

    - /bedrock status page is new and improved, more prettier than
      ever.

    - <trace --htmlencode>

     + if a dumped variable had tag-like syntax, unexpected results may
       have occurred.

    - <sqlconnect> now will use the values of DBI_DSN, DBI_USER and
      DBI_PASS from Bedrock's configuration object.  Previously,
      <sqlconnect> could be used in a "naked" fashion only if those
      variables were exported to the environment.  That turns out to
      be fairly useless, since nobody should be exporting environment
      variables that include usernames and passwords to databases.

    - In an effort to more clearly abstract the peristence layer of
      Bedrock for use with various databases, we've created a base
      class that can be used for creating a Bedrock session...namely
      BLM::Startup::SQLSession.  This class should be used as a base
      class for specific database implementations of Bedrock
      sessions.  The thought being, to create reference
      implementations for MySQL, Oracle, and PostgreSQL.  This should
      be a transparent change to Bedrock's default implementation
      using MySQL.

    - <sqlselect>, <sql> will now automatically try to connect to the
      default database as defined by DBI_DSN in the config or
      environment. This makes <sqlconnect> optional if you have
      defined those variables in the config file.

    - UserSession.pm is now sub classes MySQLSession.pm by
      default, which is itself a sub class of SQLSession.pm and
      SessionManager.pm  This has been done to make it easier to
      create database specific session managers.  Bedrock now comes
      with both MySQL and PostgreSQL session manager support.  In
      addition, new methods have been added to the session object:

      <null $session.remove_user($username, $password)>

      <null $session.kill_session() >

    - <snippet> tag now requires that --define-snippet= be used to
      define the snippet's name.  Prior to this release, it was
      acceptable to do:

      <snippet:snippet-name:var-name>

      That syntax is wonky and ambiguous, so we'll stick with the
      convention that you can name the output value of the snippet in
      the tag name, but you must define the snippet name if you want
      to name it for future use.  If you don't define the snippet name
      the default name will be $snippet.

        <snippet:foo>
        return "Hello World";

        sub bar {
	  my $self = shift;
	  return uc(shift);
        }      
        </snippet>

	<var $snippet.bar("hello world")>

        <snippet:foo --define-snippet="HelloWorld">
      
        sub bar {
	  my $self = shift;
	  return uc(shift);
        }
        </snippet>

        <var $HelloWorld.bar("hello world")>

    Fixes:
   
    - Setting the content_type under mod_perl never worked, this is
      because mod_perl will ignore any manual setting of the content
      headers.  You must use the ->content_type method of the Apache
      request object to set content type headers under mod_perl.
      Header.pm was therefore fixed to recognize when it is running
      under mod_perl and to use the APACHE_HANDLER for setting the
      content_type.

    - replace openbedrock.org with openbedrock.net
 
    - A dooozy! Bedrock::Array::get did not retrieve indexed item

      $a.get(n) did not work at all

    - remove BLM:: prefix for plugins on /bedrock/plugins page

-----------------------------------------------------------------------
bedrock 2.0.10 (2010-11-26)
    
    Enhancements:

    - In addition to wonderful notes described below, some files have
      been moved around a bit to support a better approach to
      installing Bedrock via Debian apt-get tools.  Specifically,
      since we don't want to pollute the user's environment too much
      we now reference and symlink files in their installation
      directories where ever possible and/or practical.

    - added a README.Apache that describes a simple process for
      Bedrock enabling an existing Apache server configuration.

      + added files to core Bedrock as reference implementation of
        configuration files for this purpose.
    
        * tagx.xml.in
        * tagx_apps.xml.in
        * startup.pl.in
        * bedrock.conf.in

    - <include --source> 

      The include tag now includes an option that tells Bedrock not to
      parse this file, but rather include this a "source code" with
      line numbering and (possibly) syntax highlighting.  The source
      code is displayed with line numbers and is written with class
      identifiers based on the type of tag or element that is being
      output. 

      If used with the standard Bedrock `source.css' included with
      Bedrock version 2.0.10 then you get syntax highlighting.  See
      below:

      <html>
      <head>
      <link rel="stylesheet" type="text/css" href="/bedrock/css/source.css">
      </head>
     
      <body>
      <include --source="index.rock">
      </body>

      </html>

      Potentially useful for a variety of situations, especially for
      creating Bedrock tutorials!

      As part of this change set for supporting source code
      generation, several new environment variables are expected in
      `tagx.xml'.

      BEDROCK_IMAGE_URL       => /bedrock/img
      BEDROCK_POD_CSS_URL     => /bedrock/css/pod.css
      POD_CSS_URL             => deprecated
      BEDROCK_SOURCE_CSS_URL  => /bedrock/css/source.css
      BEDROCK_LOGO            => bedrock.jpg
      BEDROCK_ERROR_LOGO      => bedbug.jpg

      These have been added to a set of reference implementations for
      `tagx.xml', `tagx_apps.xml' and `bedrock.conf' files which are
      now included in the project as a resource available at:

      ${datadir}/bedrock/config

      tagx_xml      => reference implementation for a tagx.xml file

      tagx_apps.xml => reference implementation for a tagx_apps.xml file

      bedrock.conf => reference implementation for an Apache virtual
                      host configuration file that enables Bedrock

      Having reference implementations available should make site
      configuration much easier for the majority of sites that do not
      want to be bothered with an elaborate site build project as
      implemented in the yet-to-be-re-released `bedrock-site-template'.

    - $input.upload_file()

      metadata data now includes the parameter that was the file sent
      from the client.

      <input type='file' name='upfile'>

      'upfile' is now part of the hash returned by
      $input.upload_file().  This was necessitated by the fact that
      the $input.upfile member is a filehandle and a scalar.  Use of
      the value is confusing and does not work under some
      circumstances.  For example:

      <null $input.upfile.replace("\.pdf$", "\.xml")>

    - Plugin documentation standardized and cleaned up

    - BLM::Date - documented AM/PM which was there all the time!
  
    - BLM::Timenow - added AM/PM.  How did we forget that?

    - --expand-args added to <array> tag

      <array:foo 1 2 3>

      <!-- bar: 3 element array -->
      <array:bar --expand-args $foo>

      <!-- baz: 1 element array (an array object) -->
      <array:baz $foo>

    - Iteration on hashes has been tweaked based on comments.  Each
      loop instance exposes a 3 element hash that has a 'key', 'value'
      and an 'index' member.

      <foreach $hash>
       [<var $_.index] <var $_.key> : <var $_.value><br>
      </foreach>

      Interestingly, if you don't like that, try this:

      <foreach $hash>
        <array:foo $_.key $_.value><var $foo.join(':')>
      </foreach>

      or try this

      <foreach $hash>
        <hash:foo $_.key $_.value><var $foo.map("%s:%s")>
      </foreach>

      or the old fashioned way

      <foreach $hash.keys()>
        <var $_> : <var $hash.get($_)>
      </foreach>

      TIMTOWTDI

    - <sqlselect> finally creates a Bedrock Array instead of that
      bastard array thingy

    - --expand-args option now available for <null> tag

      <null --define-array="foo" --expand-args $array>

      <null:array:foo --expand-args $array>

      <null:foo --expand-args $array>    

    - For <hash> and <null> tags, allow first, last elements of a odd
      numbered list to be a hash reference when defining
      objects...makes for nice stuff like:

     <null:object:foo $input another-key "some value"> 

     <null --define-object foo 1 bar 2 $input>

    - Internal documentation for BLMs is now NOT automatic.  In order
      to expose documentation for a BLM (a/k/a Plugin), one needs to
      add use PUBLIC as a level 1 header.

      =pod

      =head1 PUBLIC

      C<BLM::Foo> - A plugin that is foobar.

      The absence of a PUBLIC heading prevents the BLM from showing up
      on Bedrock's list of PUBLIC BLMs.  Best practice is to use:

      =head1 NAME

      when you are developing and then convert to PUBLIC when you want
      to publish the BLM.

    - added variable $Bedrock::VERSION::BUILD_DATE to help better
      track -snapshot versions on development site

    - Plugin definition changed so that --define-plugin should be used
      to name the plugin object and --define-var should be used to
      capture the value of the plugin initialization routine.

      Plugins should override 'init_plugin' if they want to return a
      value ala:

        <plugin:Foo --define-var="x" "argument to init_plugin">

        <var $x>

      which is equivalent to:

        <var $Foo.init_plugin("argument to init_plugin")>

    - <sql> now returns number of rows affected by statement in $_ or 
      --define-var

      <sql:nrows "update custmr set name='FOO' where name='TEST'>

    - <sql> and <sqlselect> can accept a Bedrock array as either --arg
      or --bind arguments

    Fixes:
   
    - BLM::FTP 

      + quit() method did not close data connection properly, example
        didn't even work.

      + put() two argument form did not work, missing second argument

    - <sink> tag was missing documentation on --htmlencode, --htmldecode

    - <var --htmlencode> needed to defer processing this option until
      after other options have been processed, and make sure that 
      arrays are processed, making possible:

      <null:foo --json '{ red: 1, blue : 2, green : 3}'>
      
      <pre>
      <var --htmlencode $foo.map('\<option value="%s"\>%s\</option\>', 'value', 'key')>
      </pre>

    - <trace --compact> didn't do anything since the default is
      'compact' output.  In a sense this changes Bedrock, since you
      need to use --compact to get the 'old' broken behavior.

    - <trace> without compact output keys in sorted order.  Now that
      we have ordered hashes it is preferable to have them output in
      the order in which they were defined.
     
-----------------------------------------------------------------------
bedrock 2.0.9 (2010-11-11)
    
    Enhancements:

    * more experimental HTML widgets
      
      <var --radio=json-string scalar>

        <var --radio='{name : "fruits", value : "bananas"}' $input.fruits>
        <var --radio='{name : "fruits", value : "apples"}' $input.fruits>

      <var --checkbox=json-string scalar|array>

        <null:seats 1 3 4>
        <var --checkbox='{name : "seats", value : 1}' $seats>
        <var --checkbox='{name : "seats", value : 2}' $seats>
        <var --checkbox='{name : "seats", value : 3}' $seats>
        <var --checkbox='{name : "seats", value : 4}' $seats>
        <var --checkbox='{name : "seats", value : 5}' $seats>

    * ALLOW_SNIPPET_TAGS in tagx.xml

      <snippet:foo --define-var="bar" "some arg">

      my $foo = shift;

      $foo =~s/[aeiou]//g;

      return $foo

      sub bar {
        my $self = shift;
        my @args = @_;
        ...

        return;
      }
      </snippet>

    * support --define-object, deprecate --create-object (Bugzilla #4405)

    * sprintf method that makes some sense - finally! Consider the
      scalar a sprintf format string

      <null:format "/%s?foo=%s">
      <var $format.sprintf("index.rock", "bar")>

      as opposed to 'format' method of scalars that is quite lame

      <null:foo "bar">
      <var $foo.format("this is %s")>

    * Bedrock::Array::Reference now available that produces
      a Bedrock::Array object from a reference.  The idea being
      that this is faster, better, cheaper than dereferencing large objects.

    * Added BLM::OrderedObject back to project for compatibility

    * BEDROCK_ERROR_LOCATION should now be used in place of 
      ERROR_LOCATION (relative to DOCUMENT_ROOT)

      - if file pointed to by these config options not present, 
        Bedrock will still puke up a decent error page

    Fixes:

    * SQLConnect.pm type (log_mesasg)

    * Bugzilla # 4410 - 302 redirect issue when page > 8K

    * Bugzilla # 4382 - BLM::Startup::Bedrock did not consider tied
      scalars.

    * minor tweaks to tag documentation, found some places where option
      were  not completely documented.  Added a Bedrock graphic to tag
      and plugin documentation pages.

-----------------------------------------------------------------------
bedrock 2.0.8 (2010-06-25)

    Enhancements:

    * In a perhaps misguided attempt to remove the SIS from Bedrock,
      SIS::Config module was renamed Bedrock::Config.  As the law of
      unintended consequences rears it's ugly head we find that
      Bedrock relies on the perl path being set at various times to:

      PREFIX/lib/bedrock/perl5
      PREFIX/lib/bedrock/perl5/Bedrock

      Which causes some degree of havoc when a module named
      'Config.pm' happens to reside in the
      PREFIX/lib/bedrock/perl5/Bedrock path, conflicting with perl's
      site Config.pm.

      Soooo...I've renamed the module Bedrock/BedrockConfig, while,
      confusingly enough, keeping the package name Bedrock::Config so
      that no actual code changes needed to be made.  It did require
      that:

        use Bedrock::Config;

      be changed to:

        use Bedorck::BedrockConfig; 

      in various files.

    * Cleaned up some code in UserSession.pm to prevent warnings

       my ($verbose, $ctx, $config) = @{$self}{qw(verbose ctx config)};
       my $config = $self->{config}  <- removed these lines, redundant
       my $ctx = $self->{ctx};

    * added --default to <null> tag

      This is an annoying issue:

      <null --define-var="foo" $input.this --or "20">

      results in an array called $foo consisting of $input.this, --or, 20

      <null --define-var="foo" ($input.this --or $that)> 
    
      results in a scalar $foo where $foo = ($input.this ? $input.this : 20)

      a better approach(?):

      <null:foo --default=20 $input.this>
      
      NOTE: --default value is used ONLY if $input.this is UNDEFINED,
      not if it is blank or 0.

    * added --xml options to <var> and <sink> tags
      
      - uses XML::Simple to parse XML and output XML documents
     
      - options to XMLout/XMLin are contained in the XML->in/out
        objects of the tagx.xml

        <object name="XML">
          <object name="out">
            <scalar name="NoAttr">1</scalar>
            <scalar name="KeepRoot">0</scalar>
            <scalar name="RootName">response</scalar>
            <scalar name="NoSort">1</scalar>
            <array name="KeyAttr"></array>
            <scalar name="XMLDecl">1</scalar>
            <scalar name="NoEscape">1</scalar>
          </object>
          <object name="in">
            <scalar name="NoAttr">0</scalar>
            <scalar name="KeepRoot">1</scalar>
            <array name="KeyAttr"></array>
          </object>

      - added a convenience method to the BLM::Startup::Config package
        to allow for setting the XML options in an easy manner.  For example:

        <null $config.XML('in', 'KeepRoot', 0)>
        <null $config.XML('out', 'KeepRoot', 1)>

    * added a 'content-type' method to the BLM::Startup::Header since
      no one should have to remember whether they need to write:

       <null $header.set('Content-type', ...)> or 
       <null $header.set('Content-Type', ...)>

      ...for the record it's 'Content-type'!

    * added method 'map' to Bedrock::Hash, Bedrock::Array

      hash.map(format-string, ['key'|'value'], ['key'|'value'])
      array.map(format-string, ['value'|'index'], ['value'|'index'])

    * added method 'grep' to Bedrock::Array

      array.grep(pattern)

      <null:foo $foo.grep("qr/^i/")>

    * BLM::Number has been implemented as a tied scalar.  Behaves in a
      backward compatible way with previous implementation, however it
      can now accept other BLM::Number plugin objects as arguments.

      <plugin:Number:total 0>
      <plugin:Number:sales 100>

      <var $total.add($sales)>

    * Project pruning and maintenance:

      - SIS:: is no more...moved all things SIS:: up one level to
        Bedrock

        + SIS::Array, SIS::Hash, now Bedrock::Array, Bedrock::Hash,
          naturally

      - Remove PDF modules from project

      - Removed many unnecessary BLMs as most of them duplicate
        functionality you get for free in core Bedrock II

      - Trying hard to vanquish BLM from public lexicon in favor of
        'plugins'.  /bedrock documentation directory now refers to
        Plugins!

        + can overwrite instantiation of a plugin, but it will generate
          a warning in the log file.

          For example:

          <plugin:Date>   <- common current time instantiation
 
	  <plugin:Stat $some_file>

          <plugin:Date $Date.localtime($Stat.mtime)>  <- instantiate with file's mod time

	  See the Date and Stat plugin docs for more details...
        
    * use CGI.pm for parsing input and providing support for file
      uploads

    * $input object now has method `upload_file'
      
      <null $input.upload_file('name', options...)>

      where `name'     => name of form var of type 'FILE'
            `options`' => list of options key/values or hash
 
                          filename     => name of file
                          path         => upload directory
                          content-type => mime-type or [] of
                                          mime-types

      Looks for UPLOAD_FILE config var in tagx.xml, else stores to
      path specified or /tmp.

      Returns undef or Bedrock hash containing file info (see perldoc
      stat or BLM::Stat).

         <null:file_info $input.upload_file('upfile')>

	 $file_info will contain same output as BLM::Stat + a key
        "file" that contains the path name to the uploaded file.

      Throws exception:

         -  on upload error => "upload_file upload error: ...."
         -  content-type does not match list of acceptable content-types => "upload_file content-type error: ..."

      Example...only allow PDFs to be uploaded...:
        <if $input.upfile>  
           <null:file_info $input.upload_file('upfile', 'filename', 'foo.pdf', 'content-type', 'application/pdf')
        </if>

    * JSON support in Bedrock...see specifics below
      - <null>, <sink>, <var>

      - Bedrock objects - SIS::Hash, SIS::Array objects support json() method for
        dumping a Bedrock object as a JSON string

        <var $obj.json()>

        Good use of this would be to return a JSON string to an AJAX call
       
      - JSON quoting...

        JSON support is relaxed in Bedrock, meaning:

        + quotes are optional for keys
        
	  '{ foo : 1, bar : 2}' <=> '{ "foo" : 1, "bar" : 2}'
 
        + single quotes are acceptable for values 

          q{ foo : 'fun', bar : 'evil' }
 
        + you can use Bedrock q{} to quote the entire string

          q{{ foo: 1 , bar: 2}} 
   
    * <null> tag syntax enhancements:

      - new options:

           --json        => consider scalar to be JSON string and create
                            a Bedrock hash or array

      - <null[:type]:name> where 'type' = array|hash

         Example: 

         <null:hash:foo a 1 b 2 c 3>  => creates a hash
         <null:hash:foo json-string>  => create a hash from a JSON string
         <null:foo 1 2 3 4 5>         => creates an array
         <null:foo --json "...">      => creates an array or hash
         <null:foo "Hello World">     => creates a scalar
         <null:foo $foo.blah()>       => ?


    * <sink> tag syntax enhancement

      - <sink:name>  <=> <sink --define-var="name">

      - new option:
 
          --json         => consider contents of block to be a JSON
                            string and create a Bedrock object

          Example:
            <sink --define-var='json_object' --json>
            [ {option: "foo", value: "4"},
              {option: "bar", value: "5"} 
            ]
            </sink>

    * Deprecated use of $Bedock.new in favor of 'plugin' syntax.
      
      - <plugin:plugin-name[:var-name] ...> 

        + if var-name not give, defaults to plugin name

        + <var --define-var="bar" $Bedock.new("BLM::foo", ...)> 

           <=> 
    
         <plugin:foo:bar ... >

      - use BLM::PLUGIN as a base class for building your own
        plugins.  

        Plugins should be well-defined APIs that provide
        specific generic functionality, rather than application
        specific functionality.   Use Startup BLMs to provide
        application functionality that needs access to context
        information (configuration, environment, etc).

        See perldoc BLM::PLUGIN for details

   * <foreach> enhancements
     
     - looping over HASHes, loops over the key

     - looping over HASHes exposes _key, and _value as local variables

       <null:hash:foo '{this:1, that:2'}>

       <foreach $foo>
       <var $_key> : <var $_value><br>
       </foreach>

   * <trace> enhancement

     - does not sort keys of a hash when dumping anymore since all
       hashes ar now ordered hashes

   * <var> tag syntax and feature enhancements

     - --json    => dump a Bedrock object as a JSON string

     - --decode option

       Similar to Oracle DECODE function allows you
       to create a list of values and a default for easy translation
       of a scalar's value.  Use a JSON string to create object.
    
       <var $foo --decode='{bar:"baz", bah:"buz", default:"none of the above"}'>

     - --toggle

       Quick way to toggle a scalar's output between two values

       <var $foo --toggle="bar,baz">

       This is the same as:

       <if $foo --eq "bar">baz<elsif $foo --eq "baz">bar</if>

       ...as this is the <var> tag, the new content is included in
       your output.  The value of the scalar is NOT changed.  To ONLY
       toggle a scalar's value and not display the content, you can
       use the <null> tag and use the scalar method toggle()

     - Experimental HTML widget tags

       Some of the more interesting ones...

       --table

       Create a table from an array

       --ul

       Create an unordered list

       --select

       Create a select element from an array, object or a well
       structructured object (typically created via a JSON string)
       
       --select-group

       Similar to a select element but with item grouping
       
       Documentation on all the widgets to follow...as this
       experiments develops
 
   * Scalars also support these new methods:

     decode() - similar to Oracle DECODE (see above --decode)
     toggle() - toggle between two vars
     sign()   - return of 0,1,-1 if value of scalar is equal to,
                greater than or less than the argument to sign().
     or()     - similar to --default, returns scalar or vale of
                argument if scalar evaluates to false (is undef, is
                blank, is 0)

     <var $foo.decode("foo", "bar", "baz", "bah", "none of the above")>
     <var $foo.toggle("foo", "bar")>
    
-----------------------------------------------------------------------

bedrock 2.0.7 (2009-xx-xx)
bedrock 2.0.6 (2009-xx-xx)

The lost months...FIX ME!

-----------------------------------------------------------------------

bedrock 2.0.5 (2009-01-14)

    Enhancements:

    (None)


    Fixes:

    * Tweaks to a handful of modules for Apache 2 compatibility

-----------------------------------------------------------------------

bedrock 2.0.4 (2008-12-23)

    Enhancements:

      * Minor changes to modules:

            SIS::Array ( added sort() )
            SIS::Config ( added get_module_config() )

-----------------------------------------------------------------------

bedrock 2.0.3 (2008-12-11)

    Enhancements:

      * Minor changes to modules:

            Bedrock::Text::TagX::Expr 
            Bedrock::Text::TagX::Parser

        Added support for new unary operators and ref

-----------------------------------------------------------------------

bedrock 2.0.2 (2008-12-03)

    Enhancements:

      * The Perl 5 modules in the project formerly used the expansion of the
        CVS 'Revsion' keyword when setting the module's $VERSION; such a
        scheme assumes only a single branch of development (ever!) in a single
        repository (which must be CVS or a work-alike), and changes in the
        resulting $VERSION number do not necessarily reflect changes in the
        API (unless one changes that with every commit).

        This practice has been changed to use hard-coded values for
        $VERSION. These have all been set based on the current expansion of
        'Revision', so none of module version numbers have been changed. Going
        forward, module $VERSION will only be changed to reflect API changes
        or other significant changes (as is the common practice in the Perl
        community).


    Bug Fixes:

      * Added check for 'IO::Scalar' perl module to configure-time checks.
        The IO::Scalar module comes from the 'IO-scalar' package, available
        here:

            http://www.cpan.org/modules/by-module/IO/

-----------------------------------------------------------------------

bedrock 2.0.1 (2008-11-26)

    Enhancements:

	* Apache::Bedrock will return 403 if ALLOW_BEDROCK_INFO is not
	* "yes" in tagx.xml and an attempt is made to access /bedrock

	* bedrock.cgi serves a page for a 403 error instead of
	Internal Server Error

	* Experimental use Generic.pm was removed from TagX.pm 

-----------------------------------------------------------------------

bedrock 2.0.0 (2008-11-25)

    Enhancements:

	* munged heavily the Apache::Bedrock module which now implements
    	all that is Bedrock 2.0.  Specifically, but not exhaustively this
	means:

	  - added support for Apache 2.x
	
	  - added support for the concept of a "controller" similar to
	    that of Struts whereby the handler knows how to navigate and
	    serve pages based on some configuration (stored in
	    tagx_apps.xml) and standards with regard to CGI variables that
	    are used to control application behavior. Extensive
	    documentation current is being written in a wiki...

	  - Apache::Bedrock is now able to barf up documentation in the
	    form of HTML pages (pod) regarding itself and it's installed
	    BLMs.  Various tags have been documented, but more needs to be
	    done!

	  - added various mechanisms for reading configuration files that
	    support the separation of applications on a virtual host.
	    Specifically:

	    + ~/config.d/startup - contains specification for startup BLMs
  	      typically contained in tagx.xml under the MODULES section

	    + ~/config.d/*.xml - contains tagx.xml like configuration files
	      that are merged with the site tagx.xml
	
	    + ~/config.d/framework/*.xml - contains configuration files that
	      contain Bedrock framework specific directives

	  - added more logging messages to Apache::Bedrock
  
	* fixed BLM::Startup::UserSession bugs (kill) and added support
	for cookieless sessions

	* new/updated tags and new tag syntax (:)

	  - <pebble>   => better than <exec --pebble=""> ????
	  - <include>  => colon syntactic candy <include:this>
	  - <open>     => could be a useless tag
	  - <blm>      => deprecated use of $Bedrock object
	  - <if>       => added --array, --object --scalar boolean operators
	  - <if>       => added --ref diadic operator that compare ref(lhs) to
	                  rhs
	  - <for>      => added options for counters, that can be arbitrarily
	                  incremented 

	* Added a few new BLMs including a startup BLM
	(BLM::Startup::Tiles) that compliments the Bedrock framework for
	building applications.

	  - BLM::Startup::Tiles - HTML component builder for Bedrock
	    framework
	  - BLM::IndexedTableHandler (and friends) - for supporting
	    applications that use MySQL tables
	  - BLM::SiteFactory - a super class used for building startup
	    BLMs
	  - BLM::DBHandler - yet another class for doing MySQL operations

	* BLM::Startup::Cookie is marginally more useful

	* bedrock running as a CGI script more intelligently handles
	situtations that should not necessarily cause an Internal Server
	Error, but rather a 404 File Not Found error

	* SIS::Log

	  - appends STDERR to the logfile, rather than letting STDERR
	    end-up in either Apache's log, or the virtual host's log file.

	  - looks to LOGDIR, cwd(), or /tmp when trying to create a log
  	    file.

	* There may in fact be some additional changes I forgot, but none
  	  that should be radical or break Bedrock applications


-----------------------------------------------------------------------

bedrock 1.6.6 (2008-??-??)

    Enhancements:

        * Bedrock has been modified to work with Apache 2.x (previous
          versions only worked with Apache 1.3.x). The required
          modifications were minor. It is not yet known whether or not
          the code still works with Apache 1.3.x

        * bedrock-create-site: This is a new program that can be used to
          automate the steps necessary for setting up a Bedrock web site. The
          tool creates the necessary directory structure and config files
          based on values passed via command line params.

          By default the program does not overwrite any existing files. There
          is support for fine-grained tuning of which files should be
          overwritten.

          The program is fully documented in the man bedrock-create-site(1)
          man page.

-----------------------------------------------------------------------

bedrock 1.6.5 (2008-02-28)

    Tagged the CVS HEAD for bedrock 1.6.5. This is mainly symbolic in that no
    testing, installation procedure, etc. has been provided for this
    release. This release is believed to be the codebase that is currently
    deployed in production at SIS on Apache 1.3.x servers. The CVS tag is:

        bedrock_1-6-5_2008-02-28


    This is also the last release on the CVS HEAD that will be targetted at
    Apache 1.3. A new branch will be created for any additional changes to the
    1.x line of development that runs on Apache 1.3.x. All future development
    on the CVS HEAD will be targetted at Apache 2.0.x.

-----------------------------------------------------------------------

bedrock 1.6.4 (2001-??-??)

    Bedrock 1.6.4 was released sometime back in 2001. It's tarball was created
    by some method that has been lost to us from a CVS source repository that
    was scattered across several different modules. There are no tags on the
    bedrock files in CVS dating from the 2001 era.

    In late February 2008, using the 1.6.4 tarball as a reference point, we
    pulled the various CVS subdirectories together under a single 'bedrock'
    CVS project, tagged the HEAD revisions (which differed slightly from the
    1.6.4 revisions), and then added/removed files and downgraded file
    revisions to tag the repository for those file revsions that are the same
    as those in the bedrock 1.6.4 tarball.

    Note that this was only done for the Perl modules, not for any of the
    pebbles, "bedrock works" subproject files, etc. This compromise was made
    for the sake of efficiency: nobody actually runs the 1.6.4 bedrock code
    anymore, and our interest in it is primarily for historical reference (not
    to be able to create new 1.6.4 tarballs or actually run that version).

    Thus we have created a "retro" CVS tag for the 1.6.4 version of bedrock:

        bedrock_1-6-4_2008-02-28-retro-tag

-----------------------------------------------------------------------
