$Id$

This is the 'NEWS' file for the 'bedrock' project. This file contains
information on changes since the last release of the package, as well as a
running list of changes from previous versions.  If critical bugs are found in
any of the software, notice of such bugs and the versions in which they were
fixed will be noted here, as well.

-----------------------------------------------------------------------
bedrock 2.1.1 (2011-??-??)

    Enhancements:

    - included bedrock.spec for creating RPM file

    - return object for $input.upload_file now includes the mime-type
      (content-type) of the object uploaded.

    - tagx_apps.xml directory level configurations cascade.

      <object>
        <object name="/foo">
          <scalar name="foo">foo</scalar>
        </object>
      </object>

      ...would mean `foo' is available to directories at /foo and
      under /foo

      Likewise for tagx_apps style config files in the
      ~CONFIG/framework directory.  Files in this directory should be
      named for the root directory for which they apply.

    - throw an exception if an option is specified for one of the
      database connect options in <sqlconnect> but no value is
      provided.  This prevents inadvertant connects from succeeding
      because a DBI_DSN, DBI_USER or DBI_PASS is defined but you made
      a typo setting an option.  Example:

      <sqlconnect --data-source=$config.my_data_source
                  --username=$config.my_username
                  --password=$config.my_password>

      ...and any of the $config.my_data_source, $config.my_username,
      $config.my_password are missing or invalid.

    - RPM post installation does not restart apache anymore

    - You can now drop files in ${BEDROCK_CONFIG_PATH}.d to be read by
      Bedrock on startup and merged into the config object

    - Bedrock shell is more compatible with Bedrock with regard to how
      it reads configuration files.  It will use the enviroment
      variable $CONFIG_PATH to find the config directory, however this
      can be overriden on the command line with --config or place in
      the .bedrock_rc file.

    - Bedrock shell assumes that the DOCUMENT_ROOT is the current
      working directory if input is coming from STDIN (or no file specified
      on command line, ala piping).  Likewise it will assume that the
      DOCUMENT_ROOT is the current working directory if the filename
      does not start with '/'. 

    - BLM/Startup/SQLiteSession.pm has been added to Bedrock.  This Plugin
      contributed by Andy Layton, implements sessions based on the
      `sqlite' database.

    - UPDATE_LOGIN_PASSWORD method implementation for
      BLM/Startup/MySQLSession incorrectly implemented SQL statement.

    Fixes:

    - Bedrock/XML.pm claims support for single quotes in XML options
      however prior to 2.1.1 this did not work:

      <scalar name='foo'>foo</scalar>

    - bedrock.conf was renamed to perl-bedrock.conf.in because apache
      has an idiosyncratic way of reading config files from the
      `conf.d' directory (i.e. alphabetically).  Some distributions
      (RedHat) load mod_perl from a perl.conf configure file.  Since
      bedrock.conf includes some directives that test for mod_perl,
      mod_perl must be loaded first.  Since 'b' comes before 'p',
      mod_perl is not loaded and the directives in bedrock.conf that
      test for mod_perl determine it is not loaded when in fact it may
      be loaded during the apache startup process from perl.conf.

      `perl.conf' loads before `perl-bedrock.conf', thus the new name.
 

-----------------------------------------------------------------------
bedrock 2.1.0 (2011-04-27)
    
    2.0.12 has been promoted to 2.1.0 for this release, establishing a
    baseline version of Bedrock 2 that works on Red Hat and Ubuntu
    servers.

    Enhancements:

    - Bedrock Shell is now part of the Bedrock 2 project

      Bedrock Shell installed as /bin/bedrock

      Bedrock Shell enhancements:

      + can accept a Bedrock template input from STDIN
      
      + reads a .bedrock_rc and sets various configuration parameters

        - config file path

        - logging

        - default & named database connnections

    - chomp() method for scalars

      <var $foo.chomp()>

    - <var --table --columns[=columns] >

      columns can now be any one of:

      * a JSON string
      * an array object
      * a comma delimited list of column names

    - <var --checkbox> or <var --radio> automatically generate a label with 
      the value that is the value of the form element.

      <var --checkbox Foo>

      would produce...

      <label for="checkbox_1">Foo</label><input type="checkbox" value="Foo" name="checkbox_1" id="checkbox_1" style="vertical-align:middle;">

      You can use the --no-label option to prevent the label from
      being generated.  You can also use the --no-style option to
      prevent alignment.

    - new widgets

      text, file, code, img, pre, p, anchor, submit, button, blockquote, address

    - standardized HTML widget inteface:

      radio, checkbox, select, select-group
      <var --widget[=attributes] value default-value name label>

      text, textarea, file
      <var --widget[=attributes] default-value name label>

      button, submit
      <var --widget[=attributes] default-value>

      img

      <var --img[=attributes] relative-image-path>

      anchor

      <var --anchor[=attributes] text link>

      address, div, blockquote, code, ol, p, pre, span, table, ul
      
      <var --widget[=attributes] value>

    - documented some of the HTML widget capabilities
       
    - Bedrock.pm (handler) now detects if your LOGDIR variable points
      to a directory that either is non-existent or is not writeable.
      If that's the case we use /tmp and note that in the config
      variable.  Previously, Bedrock would use the /tmp directory but
      not let you know about it in the configuration object since the
      decision to use /tmp was being made by Bedrock::Log, not in the
      initialization stage of the handler.

    - startup.pl will now append the perl include directories
      specified by the --with-perl-includes option to configure to
      perl's search path via 'use lib ...'.  This is necessary for
      mod_perl to find the Bedrock handler and friends.  If you want
      to install Bedrock plugins somewhere else, you'll need to let
      Bedrock now where they are too by specifying those paths in the
      startup.pl script if you are using mod_perl or in the `perl.INC'
      file if you are using bedrock-cgi.

      Note: bedrock.cgi is aware of the paths that are configured at
      build and configure time, thus a perl.INC is not strictly
      required unless you are specifying additional perl search
      directories.

    - ALLOW_BEDROCK_INFO now can be set to 'yes' or 'docs'.  If 'yes'
      all info is available, if 'docs' then just documentation is
      available.

    - Bedrock now includes a Application Plugin stub, similar to
      BLM::PLUGIN that can be sub-classed to provide a very consumable
      starting point for App Plugin creation.

        package BLM::Startup::Foo;

        use BLM::AppPLUGIN;

        @ISA = qw(BLM::AppPLUGIN);

        1;

    - Bedrock handler will set CONFIG_PATH in the config object from
      $ENV{CONFIG_PATH} since the value in tagx.xml, if there is one
      is too late for Bedrock to use.

    - The BLM::PLUGIN class now has a verbose() method that exposes the
      --verbose option if it was specified.  This allows PLUGIN
      writers to detect this option and perhaps be verbose in logging.

    - The BLM::PLUGIN class has some new methods that are just
      convenience routines for Plugin writers that expect their plugin
      to behave somewhat like a Bedrock::Hash (but not too much).

    - added a method called `build_get_url' to the $header object
      which will aid in constructing encode GET URLs of the form:

      /index.rock?parm=val&...

    Fixes:

    - remove '::' from plugin names to support things like <plugin:MIME::Lite>

    - the Bedrock option parser has been 'fixed' so that options that
      would normally take arguments and have been corrupted to be
      "optional" (as in the HTML widget options) are now parsed
      correctly.  Previously, order was important and would break the
      parser.

      <var --table --columns=$foo $array>

      ...would have been misinterpretted since --table can take
      arguments.

      A side effect of this is that lazy programmers that relied on
      this "bug" in Bedrock 1 will find that this does not give the
      desired results:

      <null --create-object "foo" red 1 blue 2 green 3>

      ...nor should it have been tolerated...instead:

      <null --create-object="foo" red 1 blue 2 green 3>

    - <var --radio ...> if no argument threw exception, but even worse
      if the expression argument was undefined the finalize method
      returned without creating the widget.  Similarly for --checkbox widget

    - bugzilla #4531 - plugin Number

    - bugzilla #4533 - session login - use password or encrypt

    - bugzilla #4499 - upload_file()

    - startup.pl was using the libdir variable, whereas the perl
      modules themselves were being installed in DATADIR/perl5 which
      is really set using --with-perl-libdir=.  That value is exposed
      as @PERL_LIBDIR@ and should be used appropriately but wasn't.
      The default value is \$pkglibdir/perl5.

      For a Debian install our rules will set --with-perl-libdir to
      /usr/share/perl5.

    - modules under config.d/startup were not being loaded properly

    - <plugin> --define-plugin was not defined properly in options list

    - <sink> - was only writing first line

    - <include> - Bugzilla #4471

-----------------------------------------------------------------------
bedrock 2.0.11 (2010-12-17)
    
    Enhancements:

    - Bedrock configuration is more finely defined:

      1. The default Bedrock installation includes a `tagx.xml' file
         that should work "out of the box" for a stock Apache server
         installation.

         + The environment variable BEDROCK_CONFIG_PATH defines the
           path to the installed default configuration.
  
      2. Site administrators that wish to use a local version of
         `tagx.xml' for their virtual host can chose to merge or
         override that configuration by settting the environment
         variable:

	 CONFIG_PATH

      3. *.xml files dropped in the configuration directory will be
        merged with Bedrock's configuration.

      4. Localized application plugins (nee: Startup BLMs) can be
         defined by including an application plugin configuration object
         in an Bedrock XML file located in:

         $ENV{CONFIG_PATH} . ".d/startup"

         The file should look similar to:

         <!-- 'foo' plugin -->
         <object>
           <scalar name="binding">foo</scalar>
           <scalar name="module">BLM::Startup::Foo</scalar>
           <object name="config">
              <scalar name="bar">baz</scalar>
           </object>
         </object>

         Only the "binding" and "module" members of the object are
         necessary, however you can provide whatever other object your
         plugin requires.

    - /bedrock status page is new and improved, more prettier than
      ever.

    - <trace --htmlencode>

     + if a dumped variable had tag-like syntax, unexpected results may
       have occurred.

    - <sqlconnect> now will use the values of DBI_DSN, DBI_USER and
      DBI_PASS from Bedrock's configuration object.  Previously,
      <sqlconnect> could be used in a "naked" fashion only if those
      variables were exported to the environment.  That turns out to
      be fairly useless, since nobody should be exporting environment
      variables that include usernames and passwords to databases.

    - In an effort to more clearly abstract the peristence layer of
      Bedrock for use with various databases, we've created a base
      class that can be used for creating a Bedrock session...namely
      BLM::Startup::SQLSession.  This class should be used as a base
      class for specific database implementations of Bedrock
      sessions.  The thought being, to create reference
      implementations for MySQL, Oracle, and PostgreSQL.  This should
      be a transparent change to Bedrock's default implementation
      using MySQL.

    - <sqlselect>, <sql> will now automatically try to connect to the
      default database as defined by DBI_DSN in the config or
      environment. This makes <sqlconnect> optional if you have
      defined those variables in the config file.

    - UserSession.pm is now sub classes MySQLSession.pm by
      default, which is itself a sub class of SQLSession.pm and
      SessionManager.pm  This has been done to make it easier to
      create database specific session managers.  Bedrock now comes
      with both MySQL and PostgreSQL session manager support.  In
      addition, new methods have been added to the session object:

      <null $session.remove_user($username, $password)>

      <null $session.kill_session() >

    - <snippet> tag now requires that --define-snippet= be used to
      define the snippet's name.  Prior to this release, it was
      acceptable to do:

      <snippet:snippet-name:var-name>

      That syntax is wonky and ambiguous, so we'll stick with the
      convention that you can name the output value of the snippet in
      the tag name, but you must define the snippet name if you want
      to name it for future use.  If you don't define the snippet name
      the default name will be $snippet.

        <snippet:foo>
        return "Hello World";

        sub bar {
	  my $self = shift;
	  return uc(shift);
        }      
        </snippet>

	<var $snippet.bar("hello world")>

        <snippet:foo --define-snippet="HelloWorld">
      
        sub bar {
	  my $self = shift;
	  return uc(shift);
        }
        </snippet>

        <var $HelloWorld.bar("hello world")>

    Fixes:
   
    - Setting the content_type under mod_perl never worked, this is
      because mod_perl will ignore any manual setting of the content
      headers.  You must use the ->content_type method of the Apache
      request object to set content type headers under mod_perl.
      Header.pm was therefore fixed to recognize when it is running
      under mod_perl and to use the APACHE_HANDLER for setting the
      content_type.

    - replace openbedrock.org with openbedrock.net
 
    - A dooozy! Bedrock::Array::get did not retrieve indexed item

      $a.get(n) did not work at all

    - remove BLM:: prefix for plugins on /bedrock/plugins page

-----------------------------------------------------------------------
bedrock 2.0.10 (2010-11-26)
    
    Enhancements:

    - In addition to wonderful notes described below, some files have
      been moved around a bit to support a better approach to
      installing Bedrock via Debian apt-get tools.  Specifically,
      since we don't want to pollute the user's environment too much
      we now reference and symlink files in their installation
      directories where ever possible and/or practical.

    - added a README.Apache that describes a simple process for
      Bedrock enabling an existing Apache server configuration.

      + added files to core Bedrock as reference implementation of
        configuration files for this purpose.
    
        * tagx.xml.in
        * tagx_apps.xml.in
        * startup.pl.in
        * bedrock.conf.in

    - <include --source> 

      The include tag now includes an option that tells Bedrock not to
      parse this file, but rather include this a "source code" with
      line numbering and (possibly) syntax highlighting.  The source
      code is displayed with line numbers and is written with class
      identifiers based on the type of tag or element that is being
      output. 

      If used with the standard Bedrock `source.css' included with
      Bedrock version 2.0.10 then you get syntax highlighting.  See
      below:

      <html>
      <head>
      <link rel="stylesheet" type="text/css" href="/bedrock/css/source.css">
      </head>
     
      <body>
      <include --source="index.rock">
      </body>

      </html>

      Potentially useful for a variety of situations, especially for
      creating Bedrock tutorials!

      As part of this change set for supporting source code
      generation, several new environment variables are expected in
      `tagx.xml'.

      BEDROCK_IMAGE_URL       => /bedrock/img
      BEDROCK_POD_CSS_URL     => /bedrock/css/pod.css
      POD_CSS_URL             => deprecated
      BEDROCK_SOURCE_CSS_URL  => /bedrock/css/source.css
      BEDROCK_LOGO            => bedrock.jpg
      BEDROCK_ERROR_LOGO      => bedbug.jpg

      These have been added to a set of reference implementations for
      `tagx.xml', `tagx_apps.xml' and `bedrock.conf' files which are
      now included in the project as a resource available at:

      ${datadir}/bedrock/config

      tagx_xml      => reference implementation for a tagx.xml file

      tagx_apps.xml => reference implementation for a tagx_apps.xml file

      bedrock.conf => reference implementation for an Apache virtual
                      host configuration file that enables Bedrock

      Having reference implementations available should make site
      configuration much easier for the majority of sites that do not
      want to be bothered with an elaborate site build project as
      implemented in the yet-to-be-re-released `bedrock-site-template'.

    - $input.upload_file()

      metadata data now includes the parameter that was the file sent
      from the client.

      <input type='file' name='upfile'>

      'upfile' is now part of the hash returned by
      $input.upload_file().  This was necessitated by the fact that
      the $input.upfile member is a filehandle and a scalar.  Use of
      the value is confusing and does not work under some
      circumstances.  For example:

      <null $input.upfile.replace("\.pdf$", "\.xml")>

    - Plugin documentation standardized and cleaned up

    - BLM::Date - documented AM/PM which was there all the time!
  
    - BLM::Timenow - added AM/PM.  How did we forget that?

    - --expand-args added to <array> tag

      <array:foo 1 2 3>

      <!-- bar: 3 element array -->
      <array:bar --expand-args $foo>

      <!-- baz: 1 element array (an array object) -->
      <array:baz $foo>

    - Iteration on hashes has been tweaked based on comments.  Each
      loop instance exposes a 3 element hash that has a 'key', 'value'
      and an 'index' member.

      <foreach $hash>
       [<var $_.index] <var $_.key> : <var $_.value><br>
      </foreach>

      Interestingly, if you don't like that, try this:

      <foreach $hash>
        <array:foo $_.key $_.value><var $foo.join(':')>
      </foreach>

      or try this

      <foreach $hash>
        <hash:foo $_.key $_.value><var $foo.map("%s:%s")>
      </foreach>

      or the old fashioned way

      <foreach $hash.keys()>
        <var $_> : <var $hash.get($_)>
      </foreach>

      TIMTOWTDI

    - <sqlselect> finally creates a Bedrock Array instead of that
      bastard array thingy

    - --expand-args option now available for <null> tag

      <null --define-array="foo" --expand-args $array>

      <null:array:foo --expand-args $array>

      <null:foo --expand-args $array>    

    - For <hash> and <null> tags, allow first, last elements of a odd
      numbered list to be a hash reference when defining
      objects...makes for nice stuff like:

     <null:object:foo $input another-key "some value"> 

     <null --define-object foo 1 bar 2 $input>

    - Internal documentation for BLMs is now NOT automatic.  In order
      to expose documentation for a BLM (a/k/a Plugin), one needs to
      add use PUBLIC as a level 1 header.

      =pod

      =head1 PUBLIC

      C<BLM::Foo> - A plugin that is foobar.

      The absence of a PUBLIC heading prevents the BLM from showing up
      on Bedrock's list of PUBLIC BLMs.  Best practice is to use:

      =head1 NAME

      when you are developing and then convert to PUBLIC when you want
      to publish the BLM.

    - added variable $Bedrock::VERSION::BUILD_DATE to help better
      track -snapshot versions on development site

    - Plugin definition changed so that --define-plugin should be used
      to name the plugin object and --define-var should be used to
      capture the value of the plugin initialization routine.

      Plugins should override 'init_plugin' if they want to return a
      value ala:

        <plugin:Foo --define-var="x" "argument to init_plugin">

        <var $x>

      which is equivalent to:

        <var $Foo.init_plugin("argument to init_plugin")>

    - <sql> now returns number of rows affected by statement in $_ or 
      --define-var

      <sql:nrows "update custmr set name='FOO' where name='TEST'>

    - <sql> and <sqlselect> can accept a Bedrock array as either --arg
      or --bind arguments

    Fixes:
   
    - BLM::FTP 

      + quit() method did not close data connection properly, example
        didn't even work.

      + put() two argument form did not work, missing second argument

    - <sink> tag was missing documentation on --htmlencode, --htmldecode

    - <var --htmlencode> needed to defer processing this option until
      after other options have been processed, and make sure that 
      arrays are processed, making possible:

      <null:foo --json '{ red: 1, blue : 2, green : 3}'>
      
      <pre>
      <var --htmlencode $foo.map('\<option value="%s"\>%s\</option\>', 'value', 'key')>
      </pre>

    - <trace --compact> didn't do anything since the default is
      'compact' output.  In a sense this changes Bedrock, since you
      need to use --compact to get the 'old' broken behavior.

    - <trace> without compact output keys in sorted order.  Now that
      we have ordered hashes it is preferable to have them output in
      the order in which they were defined.
     
-----------------------------------------------------------------------
bedrock 2.0.9 (2010-11-11)
    
    Enhancements:

    * more experimental HTML widgets
      
      <var --radio=json-string scalar>

        <var --radio='{name : "fruits", value : "bananas"}' $input.fruits>
        <var --radio='{name : "fruits", value : "apples"}' $input.fruits>

      <var --checkbox=json-string scalar|array>

        <null:seats 1 3 4>
        <var --checkbox='{name : "seats", value : 1}' $seats>
        <var --checkbox='{name : "seats", value : 2}' $seats>
        <var --checkbox='{name : "seats", value : 3}' $seats>
        <var --checkbox='{name : "seats", value : 4}' $seats>
        <var --checkbox='{name : "seats", value : 5}' $seats>

    * ALLOW_SNIPPET_TAGS in tagx.xml

      <snippet:foo --define-var="bar" "some arg">

      my $foo = shift;

      $foo =~s/[aeiou]//g;

      return $foo

      sub bar {
        my $self = shift;
        my @args = @_;
        ...

        return;
      }
      </snippet>

    * support --define-object, deprecate --create-object (Bugzilla #4405)

    * sprintf method that makes some sense - finally! Consider the
      scalar a sprintf format string

      <null:format "/%s?foo=%s">
      <var $format.sprintf("index.rock", "bar")>

      as opposed to 'format' method of scalars that is quite lame

      <null:foo "bar">
      <var $foo.format("this is %s")>

    * Bedrock::Array::Reference now available that produces
      a Bedrock::Array object from a reference.  The idea being
      that this is faster, better, cheaper than dereferencing large objects.

    * Added BLM::OrderedObject back to project for compatibility

    * BEDROCK_ERROR_LOCATION should now be used in place of 
      ERROR_LOCATION (relative to DOCUMENT_ROOT)

      - if file pointed to by these config options not present, 
        Bedrock will still puke up a decent error page

    Fixes:

    * SQLConnect.pm type (log_mesasg)

    * Bugzilla # 4410 - 302 redirect issue when page > 8K

    * Bugzilla # 4382 - BLM::Startup::Bedrock did not consider tied
      scalars.

    * minor tweaks to tag documentation, found some places where option
      were  not completely documented.  Added a Bedrock graphic to tag
      and plugin documentation pages.

-----------------------------------------------------------------------
bedrock 2.0.8 (2010-06-25)

    Enhancements:

    * In a perhaps misguided attempt to remove the SIS from Bedrock,
      SIS::Config module was renamed Bedrock::Config.  As the law of
      unintended consequences rears it's ugly head we find that
      Bedrock relies on the perl path being set at various times to:

      PREFIX/lib/bedrock/perl5
      PREFIX/lib/bedrock/perl5/Bedrock

      Which causes some degree of havoc when a module named
      'Config.pm' happens to reside in the
      PREFIX/lib/bedrock/perl5/Bedrock path, conflicting with perl's
      site Config.pm.

      Soooo...I've renamed the module Bedrock/BedrockConfig, while,
      confusingly enough, keeping the package name Bedrock::Config so
      that no actual code changes needed to be made.  It did require
      that:

        use Bedrock::Config;

      be changed to:

        use Bedorck::BedrockConfig; 

      in various files.

    * Cleaned up some code in UserSession.pm to prevent warnings

       my ($verbose, $ctx, $config) = @{$self}{qw(verbose ctx config)};
       my $config = $self->{config}  <- removed these lines, redundant
       my $ctx = $self->{ctx};

    * added --default to <null> tag

      This is an annoying issue:

      <null --define-var="foo" $input.this --or "20">

      results in an array called $foo consisting of $input.this, --or, 20

      <null --define-var="foo" ($input.this --or $that)> 
    
      results in a scalar $foo where $foo = ($input.this ? $input.this : 20)

      a better approach(?):

      <null:foo --default=20 $input.this>
      
      NOTE: --default value is used ONLY if $input.this is UNDEFINED,
      not if it is blank or 0.

    * added --xml options to <var> and <sink> tags
      
      - uses XML::Simple to parse XML and output XML documents
     
      - options to XMLout/XMLin are contained in the XML->in/out
        objects of the tagx.xml

        <object name="XML">
          <object name="out">
            <scalar name="NoAttr">1</scalar>
            <scalar name="KeepRoot">0</scalar>
            <scalar name="RootName">response</scalar>
            <scalar name="NoSort">1</scalar>
            <array name="KeyAttr"></array>
            <scalar name="XMLDecl">1</scalar>
            <scalar name="NoEscape">1</scalar>
          </object>
          <object name="in">
            <scalar name="NoAttr">0</scalar>
            <scalar name="KeepRoot">1</scalar>
            <array name="KeyAttr"></array>
          </object>

      - added a convenience method to the BLM::Startup::Config package
        to allow for setting the XML options in an easy manner.  For example:

        <null $config.XML('in', 'KeepRoot', 0)>
        <null $config.XML('out', 'KeepRoot', 1)>

    * added a 'content-type' method to the BLM::Startup::Header since
      no one should have to remember whether they need to write:

       <null $header.set('Content-type', ...)> or 
       <null $header.set('Content-Type', ...)>

      ...for the record it's 'Content-type'!

    * added method 'map' to Bedrock::Hash, Bedrock::Array

      hash.map(format-string, ['key'|'value'], ['key'|'value'])
      array.map(format-string, ['value'|'index'], ['value'|'index'])

    * added method 'grep' to Bedrock::Array

      array.grep(pattern)

      <null:foo $foo.grep("qr/^i/")>

    * BLM::Number has been implemented as a tied scalar.  Behaves in a
      backward compatible way with previous implementation, however it
      can now accept other BLM::Number plugin objects as arguments.

      <plugin:Number:total 0>
      <plugin:Number:sales 100>

      <var $total.add($sales)>

    * Project pruning and maintenance:

      - SIS:: is no more...moved all things SIS:: up one level to
        Bedrock

        + SIS::Array, SIS::Hash, now Bedrock::Array, Bedrock::Hash,
          naturally

      - Remove PDF modules from project

      - Removed many unnecessary BLMs as most of them duplicate
        functionality you get for free in core Bedrock II

      - Trying hard to vanquish BLM from public lexicon in favor of
        'plugins'.  /bedrock documentation directory now refers to
        Plugins!

        + can overwrite instantiation of a plugin, but it will generate
          a warning in the log file.

          For example:

          <plugin:Date>   <- common current time instantiation
 
	  <plugin:Stat $some_file>

          <plugin:Date $Date.localtime($Stat.mtime)>  <- instantiate with file's mod time

	  See the Date and Stat plugin docs for more details...
        
    * use CGI.pm for parsing input and providing support for file
      uploads

    * $input object now has method `upload_file'
      
      <null $input.upload_file('name', options...)>

      where `name'     => name of form var of type 'FILE'
            `options`' => list of options key/values or hash
 
                          filename     => name of file
                          path         => upload directory
                          content-type => mime-type or [] of
                                          mime-types

      Looks for UPLOAD_FILE config var in tagx.xml, else stores to
      path specified or /tmp.

      Returns undef or Bedrock hash containing file info (see perldoc
      stat or BLM::Stat).

         <null:file_info $input.upload_file('upfile')>

	 $file_info will contain same output as BLM::Stat + a key
        "file" that contains the path name to the uploaded file.

      Throws exception:

         -  on upload error => "upload_file upload error: ...."
         -  content-type does not match list of acceptable content-types => "upload_file content-type error: ..."

      Example...only allow PDFs to be uploaded...:
        <if $input.upfile>  
           <null:file_info $input.upload_file('upfile', 'filename', 'foo.pdf', 'content-type', 'application/pdf')
        </if>

    * JSON support in Bedrock...see specifics below
      - <null>, <sink>, <var>

      - Bedrock objects - SIS::Hash, SIS::Array objects support json() method for
        dumping a Bedrock object as a JSON string

        <var $obj.json()>

        Good use of this would be to return a JSON string to an AJAX call
       
      - JSON quoting...

        JSON support is relaxed in Bedrock, meaning:

        + quotes are optional for keys
        
	  '{ foo : 1, bar : 2}' <=> '{ "foo" : 1, "bar" : 2}'
 
        + single quotes are acceptable for values 

          q{ foo : 'fun', bar : 'evil' }
 
        + you can use Bedrock q{} to quote the entire string

          q{{ foo: 1 , bar: 2}} 
   
    * <null> tag syntax enhancements:

      - new options:

           --json        => consider scalar to be JSON string and create
                            a Bedrock hash or array

      - <null[:type]:name> where 'type' = array|hash

         Example: 

         <null:hash:foo a 1 b 2 c 3>  => creates a hash
         <null:hash:foo json-string>  => create a hash from a JSON string
         <null:foo 1 2 3 4 5>         => creates an array
         <null:foo --json "...">      => creates an array or hash
         <null:foo "Hello World">     => creates a scalar
         <null:foo $foo.blah()>       => ?


    * <sink> tag syntax enhancement

      - <sink:name>  <=> <sink --define-var="name">

      - new option:
 
          --json         => consider contents of block to be a JSON
                            string and create a Bedrock object

          Example:
            <sink --define-var='json_object' --json>
            [ {option: "foo", value: "4"},
              {option: "bar", value: "5"} 
            ]
            </sink>

    * Deprecated use of $Bedock.new in favor of 'plugin' syntax.
      
      - <plugin:plugin-name[:var-name] ...> 

        + if var-name not give, defaults to plugin name

        + <var --define-var="bar" $Bedock.new("BLM::foo", ...)> 

           <=> 
    
         <plugin:foo:bar ... >

      - use BLM::PLUGIN as a base class for building your own
        plugins.  

        Plugins should be well-defined APIs that provide
        specific generic functionality, rather than application
        specific functionality.   Use Startup BLMs to provide
        application functionality that needs access to context
        information (configuration, environment, etc).

        See perldoc BLM::PLUGIN for details

   * <foreach> enhancements
     
     - looping over HASHes, loops over the key

     - looping over HASHes exposes _key, and _value as local variables

       <null:hash:foo '{this:1, that:2'}>

       <foreach $foo>
       <var $_key> : <var $_value><br>
       </foreach>

   * <trace> enhancement

     - does not sort keys of a hash when dumping anymore since all
       hashes ar now ordered hashes

   * <var> tag syntax and feature enhancements

     - --json    => dump a Bedrock object as a JSON string

     - --decode option

       Similar to Oracle DECODE function allows you
       to create a list of values and a default for easy translation
       of a scalar's value.  Use a JSON string to create object.
    
       <var $foo --decode='{bar:"baz", bah:"buz", default:"none of the above"}'>

     - --toggle

       Quick way to toggle a scalar's output between two values

       <var $foo --toggle="bar,baz">

       This is the same as:

       <if $foo --eq "bar">baz<elsif $foo --eq "baz">bar</if>

       ...as this is the <var> tag, the new content is included in
       your output.  The value of the scalar is NOT changed.  To ONLY
       toggle a scalar's value and not display the content, you can
       use the <null> tag and use the scalar method toggle()

     - Experimental HTML widget tags

       Some of the more interesting ones...

       --table

       Create a table from an array

       --ul

       Create an unordered list

       --select

       Create a select element from an array, object or a well
       structructured object (typically created via a JSON string)
       
       --select-group

       Similar to a select element but with item grouping
       
       Documentation on all the widgets to follow...as this
       experiments develops
 
   * Scalars also support these new methods:

     decode() - similar to Oracle DECODE (see above --decode)
     toggle() - toggle between two vars
     sign()   - return of 0,1,-1 if value of scalar is equal to,
                greater than or less than the argument to sign().
     or()     - similar to --default, returns scalar or vale of
                argument if scalar evaluates to false (is undef, is
                blank, is 0)

     <var $foo.decode("foo", "bar", "baz", "bah", "none of the above")>
     <var $foo.toggle("foo", "bar")>
    
-----------------------------------------------------------------------

bedrock 2.0.7 (2009-xx-xx)
bedrock 2.0.6 (2009-xx-xx)

The lost months...FIX ME!

-----------------------------------------------------------------------

bedrock 2.0.5 (2009-01-14)

    Enhancements:

    (None)


    Fixes:

    * Tweaks to a handful of modules for Apache 2 compatibility

-----------------------------------------------------------------------

bedrock 2.0.4 (2008-12-23)

    Enhancements:

      * Minor changes to modules:

            SIS::Array ( added sort() )
            SIS::Config ( added get_module_config() )

-----------------------------------------------------------------------

bedrock 2.0.3 (2008-12-11)

    Enhancements:

      * Minor changes to modules:

            Bedrock::Text::TagX::Expr 
            Bedrock::Text::TagX::Parser

        Added support for new unary operators and ref

-----------------------------------------------------------------------

bedrock 2.0.2 (2008-12-03)

    Enhancements:

      * The Perl 5 modules in the project formerly used the expansion of the
        CVS 'Revsion' keyword when setting the module's $VERSION; such a
        scheme assumes only a single branch of development (ever!) in a single
        repository (which must be CVS or a work-alike), and changes in the
        resulting $VERSION number do not necessarily reflect changes in the
        API (unless one changes that with every commit).

        This practice has been changed to use hard-coded values for
        $VERSION. These have all been set based on the current expansion of
        'Revision', so none of module version numbers have been changed. Going
        forward, module $VERSION will only be changed to reflect API changes
        or other significant changes (as is the common practice in the Perl
        community).


    Bug Fixes:

      * Added check for 'IO::Scalar' perl module to configure-time checks.
        The IO::Scalar module comes from the 'IO-scalar' package, available
        here:

            http://www.cpan.org/modules/by-module/IO/

-----------------------------------------------------------------------

bedrock 2.0.1 (2008-11-26)

    Enhancements:

	* Apache::Bedrock will return 403 if ALLOW_BEDROCK_INFO is not
	* "yes" in tagx.xml and an attempt is made to access /bedrock

	* bedrock.cgi serves a page for a 403 error instead of
	Internal Server Error

	* Experimental use Generic.pm was removed from TagX.pm 

-----------------------------------------------------------------------

bedrock 2.0.0 (2008-11-25)

    Enhancements:

	* munged heavily the Apache::Bedrock module which now implements
    	all that is Bedrock 2.0.  Specifically, but not exhaustively this
	means:

	  - added support for Apache 2.x
	
	  - added support for the concept of a "controller" similar to
	    that of Struts whereby the handler knows how to navigate and
	    serve pages based on some configuration (stored in
	    tagx_apps.xml) and standards with regard to CGI variables that
	    are used to control application behavior. Extensive
	    documentation current is being written in a wiki...

	  - Apache::Bedrock is now able to barf up documentation in the
	    form of HTML pages (pod) regarding itself and it's installed
	    BLMs.  Various tags have been documented, but more needs to be
	    done!

	  - added various mechanisms for reading configuration files that
	    support the separation of applications on a virtual host.
	    Specifically:

	    + ~/config.d/startup - contains specification for startup BLMs
  	      typically contained in tagx.xml under the MODULES section

	    + ~/config.d/*.xml - contains tagx.xml like configuration files
	      that are merged with the site tagx.xml
	
	    + ~/config.d/framework/*.xml - contains configuration files that
	      contain Bedrock framework specific directives

	  - added more logging messages to Apache::Bedrock
  
	* fixed BLM::Startup::UserSession bugs (kill) and added support
	for cookieless sessions

	* new/updated tags and new tag syntax (:)

	  - <pebble>   => better than <exec --pebble=""> ????
	  - <include>  => colon syntactic candy <include:this>
	  - <open>     => could be a useless tag
	  - <blm>      => deprecated use of $Bedrock object
	  - <if>       => added --array, --object --scalar boolean operators
	  - <if>       => added --ref diadic operator that compare ref(lhs) to
	                  rhs
	  - <for>      => added options for counters, that can be arbitrarily
	                  incremented 

	* Added a few new BLMs including a startup BLM
	(BLM::Startup::Tiles) that compliments the Bedrock framework for
	building applications.

	  - BLM::Startup::Tiles - HTML component builder for Bedrock
	    framework
	  - BLM::IndexedTableHandler (and friends) - for supporting
	    applications that use MySQL tables
	  - BLM::SiteFactory - a super class used for building startup
	    BLMs
	  - BLM::DBHandler - yet another class for doing MySQL operations

	* BLM::Startup::Cookie is marginally more useful

	* bedrock running as a CGI script more intelligently handles
	situtations that should not necessarily cause an Internal Server
	Error, but rather a 404 File Not Found error

	* SIS::Log

	  - appends STDERR to the logfile, rather than letting STDERR
	    end-up in either Apache's log, or the virtual host's log file.

	  - looks to LOGDIR, cwd(), or /tmp when trying to create a log
  	    file.

	* There may in fact be some additional changes I forgot, but none
  	  that should be radical or break Bedrock applications


-----------------------------------------------------------------------

bedrock 1.6.6 (2008-??-??)

    Enhancements:

        * Bedrock has been modified to work with Apache 2.x (previous
          versions only worked with Apache 1.3.x). The required
          modifications were minor. It is not yet known whether or not
          the code still works with Apache 1.3.x

        * bedrock-create-site: This is a new program that can be used to
          automate the steps necessary for setting up a Bedrock web site. The
          tool creates the necessary directory structure and config files
          based on values passed via command line params.

          By default the program does not overwrite any existing files. There
          is support for fine-grained tuning of which files should be
          overwritten.

          The program is fully documented in the man bedrock-create-site(1)
          man page.

-----------------------------------------------------------------------

bedrock 1.6.5 (2008-02-28)

    Tagged the CVS HEAD for bedrock 1.6.5. This is mainly symbolic in that no
    testing, installation procedure, etc. has been provided for this
    release. This release is believed to be the codebase that is currently
    deployed in production at SIS on Apache 1.3.x servers. The CVS tag is:

        bedrock_1-6-5_2008-02-28


    This is also the last release on the CVS HEAD that will be targetted at
    Apache 1.3. A new branch will be created for any additional changes to the
    1.x line of development that runs on Apache 1.3.x. All future development
    on the CVS HEAD will be targetted at Apache 2.0.x.

-----------------------------------------------------------------------

bedrock 1.6.4 (2001-??-??)

    Bedrock 1.6.4 was released sometime back in 2001. It's tarball was created
    by some method that has been lost to us from a CVS source repository that
    was scattered across several different modules. There are no tags on the
    bedrock files in CVS dating from the 2001 era.

    In late February 2008, using the 1.6.4 tarball as a reference point, we
    pulled the various CVS subdirectories together under a single 'bedrock'
    CVS project, tagged the HEAD revisions (which differed slightly from the
    1.6.4 revisions), and then added/removed files and downgraded file
    revisions to tag the repository for those file revsions that are the same
    as those in the bedrock 1.6.4 tarball.

    Note that this was only done for the Perl modules, not for any of the
    pebbles, "bedrock works" subproject files, etc. This compromise was made
    for the sake of efficiency: nobody actually runs the 1.6.4 bedrock code
    anymore, and our interest in it is primarily for historical reference (not
    to be able to create new 1.6.4 tarballs or actually run that version).

    Thus we have created a "retro" CVS tag for the 1.6.4 version of bedrock:

        bedrock_1-6-4_2008-02-28-retro-tag

-----------------------------------------------------------------------
