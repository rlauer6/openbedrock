$Id$

This is the 'NEWS' file for the 'bedrock' project. This file contains
information on changes since the last release of the package, as well as a
running list of changes from previous versions.  If critical bugs are found in
any of the software, notice of such bugs and the versions in which they were
fixed will be noted here, as well.

-----------------------------------------------------------------------
bedrock 2.0.8-snapshot (2009-12-  )

    Enhancements:

    * BLM::Number has been implemented as a tied scalar.  Behaves in a
      backward compatible way with previous implementation, however it
      can now accept other BLM::Number plugin objects as arguments.

      <plugin:Number:total 0>
      <plugin:Number:sales 100>

      <var $total.add($sales)>

    * Project pruning and maintenance:

      - SIS:: is no more...moved all things SIS:: up one level to
        Bedrock

        + SIS::Array, SIS::Hash, now Bedrock::Array, Bedrock::Hash,
          naturally

      - Remove PDF modules from project

      - Removed many unnecessary BLMs as most of them duplicate
        functionality you get for free in core Bedrock II

      - Trying hard to vanquish BLM from public lexicon in favor of
        'plugins'.  /bedrock documentation directory now refers to
        Plugins!

        + can overwrite instantiation of a plugin, but it will generate
          a warning in the log file.

          For example:

          <plugin:Date>   <- common current time instantiation
 
	  <plugin:Stat $some_file>

          <plugin:Date $Date.localtime($Stat.mtime)>  <- instantiate with file's mod time

	  See the Date and Stat plugin docs for more details...
        
    * use CGI.pm for parsing input and providing support for file
      uploads

    * $input object now has method `upload_file'
      
      <null $input.upload_file('name', options...)>

      where `name'     => name of form var of type 'FILE'
            `options`' => list of options key/values or hash
 
                          filename     => name of file
                          path         => upload directory
                          content-type => mime-type or [] of
                                          mime-types

      Looks for UPLOAD_FILE config var in tagx.xml, else stores to
      path specified or /tmp.

      Returns undef or filesize.

        Filesize = <var $input.upload_file('upfile')>

      Throws exception:

         -  on upload error => "upload_file upload error: ...."
         -  content-type does not match list of acceptable content-types => "upload_file content-type error: ..."

      Example:
        <if $input.uplfile>  
           <null $input.upload('upfile', 'filename', 'foo.pdf', 'content-type', 'application/pdf')

    * JSON support in Bedrock...see specifics below
      - <null>, <sink>, <var>

      - Bedrock objects - SIS::Hash, SIS::Array objects support json() method for
        dumping a Bedrock object as a JSON string

        <var $obj.json()>

        Good use of this would be to return a JSON string to an AJAX call
       
      - JSON quoting...

        JSON support is relaxed in Bedrock, meaning:

        + quotes are optional for keys
        
	  '{ foo : 1, bar : 2}' <=> '{ "foo" : 1, "bar" : 2}'
 
        + single quotes are acceptable for values 

          q{ foo : 'fun', bar : 'evil' }
 
        + you can use Bedrock q{} to quote the entire string

          q{{ foo: 1 , bar: 2}} 
   
    * <null> tag syntax enhancements:

      - new options:

           --json        => consider scalar to be JSON string and create
                            a Bedrock hash or array

      - <null[:type]:name> where 'type' = array|hash

         Example: 

         <null:hash:foo a 1 b 2 c 3>  => creates a hash
         <null:hash:foo json-string>  => create a hash from a JSON string
         <null:foo 1 2 3 4 5>         => creates an array
         <null:foo --json "...">      => creates an array or hash
         <null:foo "Hello World">     => creates a scalar
         <null:foo $foo.blah()>       => ?


    * <sink> tag syntax enhancement

      - <sink:name>  <=> <sink --define-var="name">

      - new option:
 
          --json         => consider contents of block to be a JSON
                            string and create a Bedrock object

          Example:
            <sink --define-var='json_object' --json>
            [ {option: "foo", value: "4"},
              {option: "bar", value: "5"} 
            ]
            </sink>

    * Deprecated use of $Bedock.new in favor of 'plugin' syntax.
      
      - <plugin:plugin-name[:var-name] ...> 

        + if var-name not give, defaults to plugin name

        + <var --define-var="bar" $Bedock.new("BLM::foo", ...)> 

           <=> 
    
         <plugin:foo:bar ... >

      - use BLM::PLUGIN as a base class for building your own
        plugins.  

        Plugins should be well-defined APIs that provide
        specific generic functionality, rather than application
        specific functionality.   Use Startup BLMs to provide
        application functionality that needs access to context
        information (configuration, environment, etc).

        See perldoc BLM::PLUGIN for details

   * <foreach> enhancements
     
     - looping over HASHes, loops over the key

     - looping over HASHes exposes _key, and _value as local variables

       <null:hash:foo '{this:1, that:2'}>

       <foreach $foo>
       <var $_key> : <var $_value><br>
       </foreach>

   * <trace> enhancement

     - does not sort keys of a hash when dumping anymore since all
       hashes ar now ordered hashes

   * <var> tag syntax and feature enhancements

     - --json    => dump a Bedrock object as a JSON string

     - --decode option

       Similar to Oracle DECODE function allows you
       to create a list of values and a default for easy translation
       of a scalar's value.  Use a JSON string to create object.
    
       <var $foo --decode='{bar:"baz", bah:"buz", default:"none of the above"}'>

     - --toggle

       Quick way to toggle a scalar's output between two values

       <var $foo --toggle="bar,baz">

       This is the same as:

       <if $foo --eq "bar">baz<elsif $foo --eq "baz">bar</if>

       ...as this is the <var> tag, the new content is included in
       your output.  The value of the scalar is NOT changed.  To ONLY
       toggle a scalar's value and not display the content, you can
       use the <null> tag and use the scalar method toggle()

     - Experimental HTML widget tags

       Some of the more interesting ones...

       --table

       Create a table from an array

       --ul

       Create an unordered list

       --select

       Create a select element from an array, object or a well
       structructured object (typically created via a JSON string)
       
       --select-group

       Similar to a select element but with item grouping
       
       Documentation on all the widgets to follow...as this
       experiments develops
 
   * Scalars also support these new methods:

     decode() - similar to Oracle DECODE (see above --decode)
     toggle() - toggle between two vars
     sign()   - return of 0,1,-1 if value of scalar is equal to,
                greater than or less than the argument to sign().
     or()     - similar to --default, returns scalar or vale of
                argument if scalar evaluates to false (is undef, is
                blank, is 0)

     <var $foo.decode("foo", "bar", "baz", "bah", "none of the above")>
     <var $foo.toggle("foo", "bar")>
    
-----------------------------------------------------------------------

bedrock 2.0.7 (2009-xx-xx)
bedrock 2.0.6 (2009-xx-xx)

The lost months...FIX ME!

-----------------------------------------------------------------------

bedrock 2.0.5 (2009-01-14)

    Enhancements:

    (None)


    Fixes:

    * Tweaks to a handful of modules for Apache 2 compatibility

-----------------------------------------------------------------------

bedrock 2.0.4 (2008-12-23)

    Enhancements:

      * Minor changes to modules:

            SIS::Array ( added sort() )
            SIS::Config ( added get_module_config() )

-----------------------------------------------------------------------

bedrock 2.0.3 (2008-12-11)

    Enhancements:

      * Minor changes to modules:

            Bedrock::Text::TagX::Expr 
            Bedrock::Text::TagX::Parser

        Added support for new unary operators and ref

-----------------------------------------------------------------------

bedrock 2.0.2 (2008-12-03)

    Enhancements:

      * The Perl 5 modules in the project formerly used the expansion of the
        CVS 'Revsion' keyword when setting the module's $VERSION; such a
        scheme assumes only a single branch of development (ever!) in a single
        repository (which must be CVS or a work-alike), and changes in the
        resulting $VERSION number do not necessarily reflect changes in the
        API (unless one changes that with every commit).

        This practice has been changed to use hard-coded values for
        $VERSION. These have all been set based on the current expansion of
        'Revision', so none of module version numbers have been changed. Going
        forward, module $VERSION will only be changed to reflect API changes
        or other significant changes (as is the common practice in the Perl
        community).


    Bug Fixes:

      * Added check for 'IO::Scalar' perl module to configure-time checks.
        The IO::Scalar module comes from the 'IO-scalar' package, available
        here:

            http://www.cpan.org/modules/by-module/IO/

-----------------------------------------------------------------------

bedrock 2.0.1 (2008-11-26)

    Enhancements:

	* Apache::Bedrock will return 403 if ALLOW_BEDROCK_INFO is not
	* "yes" in tagx.xml and an attempt is made to access /bedrock

	* bedrock.cgi serves a page for a 403 error instead of
	Internal Server Error

	* Experimental use Generic.pm was removed from TagX.pm 

-----------------------------------------------------------------------

bedrock 2.0.0 (2008-11-25)

    Enhancements:

	* munged heavily the Apache::Bedrock module which now implements
    	all that is Bedrock 2.0.  Specifically, but not exhaustively this
	means:

	  - added support for Apache 2.x
	
	  - added support for the concept of a "controller" similar to
	    that of Struts whereby the handler knows how to navigate and
	    serve pages based on some configuration (stored in
	    tagx_apps.xml) and standards with regard to CGI variables that
	    are used to control application behavior. Extensive
	    documentation current is being written in a wiki...

	  - Apache::Bedrock is now able to barf up documentation in the
	    form of HTML pages (pod) regarding itself and it's installed
	    BLMs.  Various tags have been documented, but more needs to be
	    done!

	  - added various mechanisms for reading configuration files that
	    support the separation of applications on a virtual host.
	    Specifically:

	    + ~/config.d/startup - contains specification for startup BLMs
  	      typically contained in tagx.xml under the MODULES section

	    + ~/config.d/*.xml - contains tagx.xml like configuration files
	      that are merged with the site tagx.xml
	
	    + ~/config.d/framework/*.xml - contains configuration files that
	      contain Bedrock framework specific directives

	  - added more logging messages to Apache::Bedrock
  
	* fixed BLM::Startup::UserSession bugs (kill) and added support
	for cookieless sessions

	* new/updated tags and new tag syntax (:)

	  - <pebble>   => better than <exec --pebble=""> ????
	  - <include>  => colon syntactic candy <include:this>
	  - <open>     => could be a useless tag
	  - <blm>      => deprecated use of $Bedrock object
	  - <if>       => added --array, --object --scalar boolean operators
	  - <if>       => added --ref diadic operator that compare ref(lhs) to
	                  rhs
	  - <for>      => added options for counters, that can be arbitrarily
	                  incremented 

	* Added a few new BLMs including a startup BLM
	(BLM::Startup::Tiles) that compliments the Bedrock framework for
	building applications.

	  - BLM::Startup::Tiles - HTML component builder for Bedrock
	    framework
	  - BLM::IndexedTableHandler (and friends) - for supporting
	    applications that use MySQL tables
	  - BLM::SiteFactory - a super class used for building startup
	    BLMs
	  - BLM::DBHandler - yet another class for doing MySQL operations

	* BLM::Startup::Cookie is marginally more useful

	* bedrock running as a CGI script more intelligently handles
	situtations that should not necessarily cause an Internal Server
	Error, but rather a 404 File Not Found error

	* SIS::Log

	  - appends STDERR to the logfile, rather than letting STDERR
	    end-up in either Apache's log, or the virtual host's log file.

	  - looks to LOGDIR, cwd(), or /tmp when trying to create a log
  	    file.

	* There may in fact be some additional changes I forgot, but none
  	  that should be radical or break Bedrock applications


-----------------------------------------------------------------------

bedrock 1.6.6 (2008-??-??)

    Enhancements:

        * Bedrock has been modified to work with Apache 2.x (previous
          versions only worked with Apache 1.3.x). The required
          modifications were minor. It is not yet known whether or not
          the code still works with Apache 1.3.x

        * bedrock-create-site: This is a new program that can be used to
          automate the steps necessary for setting up a Bedrock web site. The
          tool creates the necessary directory structure and config files
          based on values passed via command line params.

          By default the program does not overwrite any existing files. There
          is support for fine-grained tuning of which files should be
          overwritten.

          The program is fully documented in the man bedrock-create-site(1)
          man page.

-----------------------------------------------------------------------

bedrock 1.6.5 (2008-02-28)

    Tagged the CVS HEAD for bedrock 1.6.5. This is mainly symbolic in that no
    testing, installation procedure, etc. has been provided for this
    release. This release is believed to be the codebase that is currently
    deployed in production at SIS on Apache 1.3.x servers. The CVS tag is:

        bedrock_1-6-5_2008-02-28


    This is also the last release on the CVS HEAD that will be targetted at
    Apache 1.3. A new branch will be created for any additional changes to the
    1.x line of development that runs on Apache 1.3.x. All future development
    on the CVS HEAD will be targetted at Apache 2.0.x.

-----------------------------------------------------------------------

bedrock 1.6.4 (2001-??-??)

    Bedrock 1.6.4 was released sometime back in 2001. It's tarball was created
    by some method that has been lost to us from a CVS source repository that
    was scattered across several different modules. There are no tags on the
    bedrock files in CVS dating from the 2001 era.

    In late February 2008, using the 1.6.4 tarball as a reference point, we
    pulled the various CVS subdirectories together under a single 'bedrock'
    CVS project, tagged the HEAD revisions (which differed slightly from the
    1.6.4 revisions), and then added/removed files and downgraded file
    revisions to tag the repository for those file revsions that are the same
    as those in the bedrock 1.6.4 tarball.

    Note that this was only done for the Perl modules, not for any of the
    pebbles, "bedrock works" subproject files, etc. This compromise was made
    for the sake of efficiency: nobody actually runs the 1.6.4 bedrock code
    anymore, and our interest in it is primarily for historical reference (not
    to be able to create new 1.6.4 tarballs or actually run that version).

    Thus we have created a "retro" CVS tag for the 1.6.4 version of bedrock:

        bedrock_1-6-4_2008-02-28-retro-tag

-----------------------------------------------------------------------
