#! /bin/sh
# From configure.ac Revision: 1.11 .
# Guess values for system-dependent variables and create Makefiles.
# Generated by GNU Autoconf 2.61 for bedrock 1.6.6-snapshot.
#
# Report bugs to <ASalewski@signatureinfo.com>.
#
# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
# 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
# This configure script is free software; the Free Software Foundation
# gives unlimited permission to copy, distribute and modify it.
## --------------------- ##
## M4sh Initialization.  ##
## --------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi




# PATH needs CR
# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  echo "#! /bin/sh" >conf$$.sh
  echo  "exit 0"   >>conf$$.sh
  chmod +x conf$$.sh
  if (PATH="/nonexistent;."; conf$$.sh) >/dev/null 2>&1; then
    PATH_SEPARATOR=';'
  else
    PATH_SEPARATOR=:
  fi
  rm -f conf$$.sh
fi

# Support unset when possible.
if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then
  as_unset=unset
else
  as_unset=false
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
as_nl='
'
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
case $0 in
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  { (exit 1); exit 1; }
fi

# Work around bugs in pre-3.0 UWIN ksh.
for as_var in ENV MAIL MAILPATH
do ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
for as_var in \
  LANG LANGUAGE LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
  LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
  LC_TELEPHONE LC_TIME
do
  if (set +x; test -z "`(eval $as_var=C; export $as_var) 2>&1`"); then
    eval $as_var=C; export $as_var
  else
    ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
  fi
done

# Required to use basename.
if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi


# Name of the executable.
as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# CDPATH.
$as_unset CDPATH


if test "x$CONFIG_SHELL" = x; then
  if (eval ":") 2>/dev/null; then
  as_have_required=yes
else
  as_have_required=no
fi

  if test $as_have_required = yes && 	 (eval ":
(as_func_return () {
  (exit \$1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = \"\$1\" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test \$exitcode = 0) || { (exit 1); exit 1; }

(
  as_lineno_1=\$LINENO
  as_lineno_2=\$LINENO
  test \"x\$as_lineno_1\" != \"x\$as_lineno_2\" &&
  test \"x\`expr \$as_lineno_1 + 1\`\" = \"x\$as_lineno_2\") || { (exit 1); exit 1; }
") 2> /dev/null; then
  :
else
  as_candidate_shells=
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  case $as_dir in
	 /*)
	   for as_base in sh bash ksh sh5; do
	     as_candidate_shells="$as_candidate_shells $as_dir/$as_base"
	   done;;
       esac
done
IFS=$as_save_IFS


      for as_shell in $as_candidate_shells $SHELL; do
	 # Try only shells that exist, to save several forks.
	 if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		{ ("$as_shell") 2> /dev/null <<\_ASEOF
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi


:
_ASEOF
}; then
  CONFIG_SHELL=$as_shell
	       as_have_required=yes
	       if { "$as_shell" 2> /dev/null <<\_ASEOF
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi


:
(as_func_return () {
  (exit $1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = "$1" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test $exitcode = 0) || { (exit 1); exit 1; }

(
  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x`expr $as_lineno_1 + 1`" = "x$as_lineno_2") || { (exit 1); exit 1; }

_ASEOF
}; then
  break
fi

fi

      done

      if test "x$CONFIG_SHELL" != x; then
  for as_var in BASH_ENV ENV
        do ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
        done
        export CONFIG_SHELL
        exec "$CONFIG_SHELL" "$as_myself" ${1+"$@"}
fi


    if test $as_have_required = no; then
  echo This script requires a shell more modern than all the
      echo shells that I found on your system.  Please install a
      echo modern shell, or manually run the script under such a
      echo shell if you do have one.
      { (exit 1); exit 1; }
fi


fi

fi



(eval "as_func_return () {
  (exit \$1)
}
as_func_success () {
  as_func_return 0
}
as_func_failure () {
  as_func_return 1
}
as_func_ret_success () {
  return 0
}
as_func_ret_failure () {
  return 1
}

exitcode=0
if as_func_success; then
  :
else
  exitcode=1
  echo as_func_success failed.
fi

if as_func_failure; then
  exitcode=1
  echo as_func_failure succeeded.
fi

if as_func_ret_success; then
  :
else
  exitcode=1
  echo as_func_ret_success failed.
fi

if as_func_ret_failure; then
  exitcode=1
  echo as_func_ret_failure succeeded.
fi

if ( set x; as_func_ret_success y && test x = \"\$1\" ); then
  :
else
  exitcode=1
  echo positional parameters were not saved.
fi

test \$exitcode = 0") || {
  echo No shell found that supports shell functions.
  echo Please tell autoconf@gnu.org about your system,
  echo including any error possibly output before this
  echo message
}



  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x`expr $as_lineno_1 + 1`" = "x$as_lineno_2" || {

  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
  # uniformly replaced by the line number.  The first 'sed' inserts a
  # line-number line after each line using $LINENO; the second 'sed'
  # does the real work.  The second script uses 'N' to pair each
  # line-number line with the line containing $LINENO, and appends
  # trailing '-' during substitution so that $LINENO is not a special
  # case at line end.
  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
  # scripts with optimization help from Paolo Bonzini.  Blame Lee
  # E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2
   { (exit 1); exit 1; }; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}


if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in
-n*)
  case `echo 'x\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  *)   ECHO_C='\c';;
  esac;;
*)
  ECHO_N='-n';;
esac

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir
fi
echo >conf$$.file
if ln -s conf$$.file conf$$ 2>/dev/null; then
  as_ln_s='ln -s'
  # ... but there are two gotchas:
  # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
  # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
  # In both cases, we have to default to `cp -p'.
  ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
    as_ln_s='cp -p'
elif ln conf$$.file conf$$ 2>/dev/null; then
  as_ln_s=ln
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p=:
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

if test -x / >/dev/null 2>&1; then
  as_test_x='test -x'
else
  if ls -dL / >/dev/null 2>&1; then
    as_ls_L_option=L
  else
    as_ls_L_option=
  fi
  as_test_x='
    eval sh -c '\''
      if test -d "$1"; then
        test -d "$1/.";
      else
	case $1 in
        -*)set "./$1";;
	esac;
	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in
	???[sx]*):;;*)false;;esac;fi
    '\'' sh
  '
fi
as_executable_p=$as_test_x

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"



exec 7<&0 </dev/null 6>&1

# Name of the host.
# hostname on some systems (SVR3.2, Linux) returns a bogus exit status,
# so uname gets run too.
ac_hostname=`(hostname || uname -n) 2>/dev/null | sed 1q`

#
# Initializations.
#
ac_default_prefix=/usr/local
ac_clean_files=
ac_config_libobj_dir=.
LIBOBJS=
cross_compiling=no
subdirs=
MFLAGS=
MAKEFLAGS=
SHELL=${CONFIG_SHELL-/bin/sh}

# Identity of this package.
PACKAGE_NAME='bedrock'
PACKAGE_TARNAME='bedrock'
PACKAGE_VERSION='1.6.6-snapshot'
PACKAGE_STRING='bedrock 1.6.6-snapshot'
PACKAGE_BUGREPORT='ASalewski@signatureinfo.com'

ac_subst_vars='SHELL
PATH_SEPARATOR
PACKAGE_NAME
PACKAGE_TARNAME
PACKAGE_VERSION
PACKAGE_STRING
PACKAGE_BUGREPORT
exec_prefix
prefix
program_transform_name
bindir
sbindir
libexecdir
datarootdir
datadir
sysconfdir
sharedstatedir
localstatedir
includedir
oldincludedir
docdir
infodir
htmldir
dvidir
pdfdir
psdir
libdir
localedir
mandir
DEFS
ECHO_C
ECHO_N
ECHO_T
LIBS
build_alias
host_alias
target_alias
INSTALL_PROGRAM
INSTALL_SCRIPT
INSTALL_DATA
CYGPATH_W
PACKAGE
VERSION
ACLOCAL
AUTOCONF
AUTOMAKE
AUTOHEADER
MAKEINFO
install_sh
STRIP
INSTALL_STRIP_PROGRAM
mkdir_p
AWK
SET_MAKE
am__leading_dot
AMTAR
am__tar
am__untar
LN_S
BASH_SH
CAT
CHGRP
CHOWN
FIND
GREP
SED
RM
RMDIR
PERL
POD2MAN
ax_perl5_extra_includes
ax_perl5_extra_includes_opt
USING_PERL5_EXTRA_INCLUDES_TRUE
USING_PERL5_EXTRA_INCLUDES_FALSE
PERL_LIBDIR
USING_PERL_INSTALLSITELIB_TRUE
USING_PERL_INSTALLSITELIB_FALSE
pkglibdir
cgibindir
htdocsdir
pebblesdir
perl5_pkgdatadir
perl5_pkglibdir
perl5_pkgvdatadir
perl5_pkgvlibdir
do_subst_command
bedrock_perl5_inc_begin_block_snippet_filepath
LIBOBJS
LTLIBOBJS'
ac_subst_files=''
      ac_precious_vars='build_alias
host_alias
target_alias'


# Initialize some variables set by options.
ac_init_help=
ac_init_version=false
# The variables have the same names as the options, with
# dashes changed to underlines.
cache_file=/dev/null
exec_prefix=NONE
no_create=
no_recursion=
prefix=NONE
program_prefix=NONE
program_suffix=NONE
program_transform_name=s,x,x,
silent=
site=
srcdir=
verbose=
x_includes=NONE
x_libraries=NONE

# Installation directory options.
# These are left unexpanded so users can "make install exec_prefix=/foo"
# and all the variables that are supposed to be based on exec_prefix
# by default will actually change.
# Use braces instead of parens because sh, perl, etc. also accept them.
# (The list follows the same order as the GNU Coding Standards.)
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
libexecdir='${exec_prefix}/libexec'
datarootdir='${prefix}/share'
datadir='${datarootdir}'
sysconfdir='${prefix}/etc'
sharedstatedir='${prefix}/com'
localstatedir='${prefix}/var'
includedir='${prefix}/include'
oldincludedir='/usr/include'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
infodir='${datarootdir}/info'
htmldir='${docdir}'
dvidir='${docdir}'
pdfdir='${docdir}'
psdir='${docdir}'
libdir='${exec_prefix}/lib'
localedir='${datarootdir}/locale'
mandir='${datarootdir}/man'

ac_prev=
ac_dashdash=
for ac_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$ac_prev"; then
    eval $ac_prev=\$ac_option
    ac_prev=
    continue
  fi

  case $ac_option in
  *=*)	ac_optarg=`expr "X$ac_option" : '[^=]*=\(.*\)'` ;;
  *)	ac_optarg=yes ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $ac_dashdash$ac_option in
  --)
    ac_dashdash=yes ;;

  -bindir | --bindir | --bindi | --bind | --bin | --bi)
    ac_prev=bindir ;;
  -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)
    bindir=$ac_optarg ;;

  -build | --build | --buil | --bui | --bu)
    ac_prev=build_alias ;;
  -build=* | --build=* | --buil=* | --bui=* | --bu=*)
    build_alias=$ac_optarg ;;

  -cache-file | --cache-file | --cache-fil | --cache-fi \
  | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)
    ac_prev=cache_file ;;
  -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
  | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)
    cache_file=$ac_optarg ;;

  --config-cache | -C)
    cache_file=config.cache ;;

  -datadir | --datadir | --datadi | --datad)
    ac_prev=datadir ;;
  -datadir=* | --datadir=* | --datadi=* | --datad=*)
    datadir=$ac_optarg ;;

  -datarootdir | --datarootdir | --datarootdi | --datarootd | --dataroot \
  | --dataroo | --dataro | --datar)
    ac_prev=datarootdir ;;
  -datarootdir=* | --datarootdir=* | --datarootdi=* | --datarootd=* \
  | --dataroot=* | --dataroo=* | --dataro=* | --datar=*)
    datarootdir=$ac_optarg ;;

  -disable-* | --disable-*)
    ac_feature=`expr "x$ac_option" : 'x-*disable-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_feature" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid feature name: $ac_feature" >&2
   { (exit 1); exit 1; }; }
    ac_feature=`echo $ac_feature | sed 's/[-.]/_/g'`
    eval enable_$ac_feature=no ;;

  -docdir | --docdir | --docdi | --doc | --do)
    ac_prev=docdir ;;
  -docdir=* | --docdir=* | --docdi=* | --doc=* | --do=*)
    docdir=$ac_optarg ;;

  -dvidir | --dvidir | --dvidi | --dvid | --dvi | --dv)
    ac_prev=dvidir ;;
  -dvidir=* | --dvidir=* | --dvidi=* | --dvid=* | --dvi=* | --dv=*)
    dvidir=$ac_optarg ;;

  -enable-* | --enable-*)
    ac_feature=`expr "x$ac_option" : 'x-*enable-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_feature" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid feature name: $ac_feature" >&2
   { (exit 1); exit 1; }; }
    ac_feature=`echo $ac_feature | sed 's/[-.]/_/g'`
    eval enable_$ac_feature=\$ac_optarg ;;

  -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \
  | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \
  | --exec | --exe | --ex)
    ac_prev=exec_prefix ;;
  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \
  | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \
  | --exec=* | --exe=* | --ex=*)
    exec_prefix=$ac_optarg ;;

  -gas | --gas | --ga | --g)
    # Obsolete; use --with-gas.
    with_gas=yes ;;

  -help | --help | --hel | --he | -h)
    ac_init_help=long ;;
  -help=r* | --help=r* | --hel=r* | --he=r* | -hr*)
    ac_init_help=recursive ;;
  -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
    ac_init_help=short ;;

  -host | --host | --hos | --ho)
    ac_prev=host_alias ;;
  -host=* | --host=* | --hos=* | --ho=*)
    host_alias=$ac_optarg ;;

  -htmldir | --htmldir | --htmldi | --htmld | --html | --htm | --ht)
    ac_prev=htmldir ;;
  -htmldir=* | --htmldir=* | --htmldi=* | --htmld=* | --html=* | --htm=* \
  | --ht=*)
    htmldir=$ac_optarg ;;

  -includedir | --includedir | --includedi | --included | --include \
  | --includ | --inclu | --incl | --inc)
    ac_prev=includedir ;;
  -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \
  | --includ=* | --inclu=* | --incl=* | --inc=*)
    includedir=$ac_optarg ;;

  -infodir | --infodir | --infodi | --infod | --info | --inf)
    ac_prev=infodir ;;
  -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)
    infodir=$ac_optarg ;;

  -libdir | --libdir | --libdi | --libd)
    ac_prev=libdir ;;
  -libdir=* | --libdir=* | --libdi=* | --libd=*)
    libdir=$ac_optarg ;;

  -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \
  | --libexe | --libex | --libe)
    ac_prev=libexecdir ;;
  -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \
  | --libexe=* | --libex=* | --libe=*)
    libexecdir=$ac_optarg ;;

  -localedir | --localedir | --localedi | --localed | --locale)
    ac_prev=localedir ;;
  -localedir=* | --localedir=* | --localedi=* | --localed=* | --locale=*)
    localedir=$ac_optarg ;;

  -localstatedir | --localstatedir | --localstatedi | --localstated \
  | --localstate | --localstat | --localsta | --localst | --locals)
    ac_prev=localstatedir ;;
  -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \
  | --localstate=* | --localstat=* | --localsta=* | --localst=* | --locals=*)
    localstatedir=$ac_optarg ;;

  -mandir | --mandir | --mandi | --mand | --man | --ma | --m)
    ac_prev=mandir ;;
  -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)
    mandir=$ac_optarg ;;

  -nfp | --nfp | --nf)
    # Obsolete; use --without-fp.
    with_fp=no ;;

  -no-create | --no-create | --no-creat | --no-crea | --no-cre \
  | --no-cr | --no-c | -n)
    no_create=yes ;;

  -no-recursion | --no-recursion | --no-recursio | --no-recursi \
  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)
    no_recursion=yes ;;

  -oldincludedir | --oldincludedir | --oldincludedi | --oldincluded \
  | --oldinclude | --oldinclud | --oldinclu | --oldincl | --oldinc \
  | --oldin | --oldi | --old | --ol | --o)
    ac_prev=oldincludedir ;;
  -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \
  | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \
  | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)
    oldincludedir=$ac_optarg ;;

  -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
    ac_prev=prefix ;;
  -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
    prefix=$ac_optarg ;;

  -program-prefix | --program-prefix | --program-prefi | --program-pref \
  | --program-pre | --program-pr | --program-p)
    ac_prev=program_prefix ;;
  -program-prefix=* | --program-prefix=* | --program-prefi=* \
  | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)
    program_prefix=$ac_optarg ;;

  -program-suffix | --program-suffix | --program-suffi | --program-suff \
  | --program-suf | --program-su | --program-s)
    ac_prev=program_suffix ;;
  -program-suffix=* | --program-suffix=* | --program-suffi=* \
  | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)
    program_suffix=$ac_optarg ;;

  -program-transform-name | --program-transform-name \
  | --program-transform-nam | --program-transform-na \
  | --program-transform-n | --program-transform- \
  | --program-transform | --program-transfor \
  | --program-transfo | --program-transf \
  | --program-trans | --program-tran \
  | --progr-tra | --program-tr | --program-t)
    ac_prev=program_transform_name ;;
  -program-transform-name=* | --program-transform-name=* \
  | --program-transform-nam=* | --program-transform-na=* \
  | --program-transform-n=* | --program-transform-=* \
  | --program-transform=* | --program-transfor=* \
  | --program-transfo=* | --program-transf=* \
  | --program-trans=* | --program-tran=* \
  | --progr-tra=* | --program-tr=* | --program-t=*)
    program_transform_name=$ac_optarg ;;

  -pdfdir | --pdfdir | --pdfdi | --pdfd | --pdf | --pd)
    ac_prev=pdfdir ;;
  -pdfdir=* | --pdfdir=* | --pdfdi=* | --pdfd=* | --pdf=* | --pd=*)
    pdfdir=$ac_optarg ;;

  -psdir | --psdir | --psdi | --psd | --ps)
    ac_prev=psdir ;;
  -psdir=* | --psdir=* | --psdi=* | --psd=* | --ps=*)
    psdir=$ac_optarg ;;

  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil)
    silent=yes ;;

  -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
    ac_prev=sbindir ;;
  -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
  | --sbi=* | --sb=*)
    sbindir=$ac_optarg ;;

  -sharedstatedir | --sharedstatedir | --sharedstatedi \
  | --sharedstated | --sharedstate | --sharedstat | --sharedsta \
  | --sharedst | --shareds | --shared | --share | --shar \
  | --sha | --sh)
    ac_prev=sharedstatedir ;;
  -sharedstatedir=* | --sharedstatedir=* | --sharedstatedi=* \
  | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \
  | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \
  | --sha=* | --sh=*)
    sharedstatedir=$ac_optarg ;;

  -site | --site | --sit)
    ac_prev=site ;;
  -site=* | --site=* | --sit=*)
    site=$ac_optarg ;;

  -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
    ac_prev=srcdir ;;
  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
    srcdir=$ac_optarg ;;

  -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \
  | --syscon | --sysco | --sysc | --sys | --sy)
    ac_prev=sysconfdir ;;
  -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \
  | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)
    sysconfdir=$ac_optarg ;;

  -target | --target | --targe | --targ | --tar | --ta | --t)
    ac_prev=target_alias ;;
  -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)
    target_alias=$ac_optarg ;;

  -v | -verbose | --verbose | --verbos | --verbo | --verb)
    verbose=yes ;;

  -version | --version | --versio | --versi | --vers | -V)
    ac_init_version=: ;;

  -with-* | --with-*)
    ac_package=`expr "x$ac_option" : 'x-*with-\([^=]*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_package" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid package name: $ac_package" >&2
   { (exit 1); exit 1; }; }
    ac_package=`echo $ac_package | sed 's/[-.]/_/g'`
    eval with_$ac_package=\$ac_optarg ;;

  -without-* | --without-*)
    ac_package=`expr "x$ac_option" : 'x-*without-\(.*\)'`
    # Reject names that are not valid shell variable names.
    expr "x$ac_package" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid package name: $ac_package" >&2
   { (exit 1); exit 1; }; }
    ac_package=`echo $ac_package | sed 's/[-.]/_/g'`
    eval with_$ac_package=no ;;

  --x)
    # Obsolete; use --with-x.
    with_x=yes ;;

  -x-includes | --x-includes | --x-include | --x-includ | --x-inclu \
  | --x-incl | --x-inc | --x-in | --x-i)
    ac_prev=x_includes ;;
  -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \
  | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)
    x_includes=$ac_optarg ;;

  -x-libraries | --x-libraries | --x-librarie | --x-librari \
  | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)
    ac_prev=x_libraries ;;
  -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \
  | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)
    x_libraries=$ac_optarg ;;

  -*) { echo "$as_me: error: unrecognized option: $ac_option
Try \`$0 --help' for more information." >&2
   { (exit 1); exit 1; }; }
    ;;

  *=*)
    ac_envvar=`expr "x$ac_option" : 'x\([^=]*\)='`
    # Reject names that are not valid shell variable names.
    expr "x$ac_envvar" : ".*[^_$as_cr_alnum]" >/dev/null &&
      { echo "$as_me: error: invalid variable name: $ac_envvar" >&2
   { (exit 1); exit 1; }; }
    eval $ac_envvar=\$ac_optarg
    export $ac_envvar ;;

  *)
    # FIXME: should be removed in autoconf 3.0.
    echo "$as_me: WARNING: you should use --build, --host, --target" >&2
    expr "x$ac_option" : ".*[^-._$as_cr_alnum]" >/dev/null &&
      echo "$as_me: WARNING: invalid host type: $ac_option" >&2
    : ${build_alias=$ac_option} ${host_alias=$ac_option} ${target_alias=$ac_option}
    ;;

  esac
done

if test -n "$ac_prev"; then
  ac_option=--`echo $ac_prev | sed 's/_/-/g'`
  { echo "$as_me: error: missing argument to $ac_option" >&2
   { (exit 1); exit 1; }; }
fi

# Be sure to have absolute directory names.
for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
		datadir sysconfdir sharedstatedir localstatedir includedir \
		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
		libdir localedir mandir
do
  eval ac_val=\$$ac_var
  case $ac_val in
    [\\/$]* | ?:[\\/]* )  continue;;
    NONE | '' ) case $ac_var in *prefix ) continue;; esac;;
  esac
  { echo "$as_me: error: expected an absolute directory name for --$ac_var: $ac_val" >&2
   { (exit 1); exit 1; }; }
done

# There might be people who depend on the old broken behavior: `$host'
# used to hold the argument of --host etc.
# FIXME: To remove some day.
build=$build_alias
host=$host_alias
target=$target_alias

# FIXME: To remove some day.
if test "x$host_alias" != x; then
  if test "x$build_alias" = x; then
    cross_compiling=maybe
    echo "$as_me: WARNING: If you wanted to set the --build type, don't use --host.
    If a cross compiler is detected then cross compile mode will be used." >&2
  elif test "x$build_alias" != "x$host_alias"; then
    cross_compiling=yes
  fi
fi

ac_tool_prefix=
test -n "$host_alias" && ac_tool_prefix=$host_alias-

test "$silent" = yes && exec 6>/dev/null


ac_pwd=`pwd` && test -n "$ac_pwd" &&
ac_ls_di=`ls -di .` &&
ac_pwd_ls_di=`cd "$ac_pwd" && ls -di .` ||
  { echo "$as_me: error: Working directory cannot be determined" >&2
   { (exit 1); exit 1; }; }
test "X$ac_ls_di" = "X$ac_pwd_ls_di" ||
  { echo "$as_me: error: pwd does not report name of working directory" >&2
   { (exit 1); exit 1; }; }


# Find the source files, if location was not specified.
if test -z "$srcdir"; then
  ac_srcdir_defaulted=yes
  # Try the directory containing this script, then the parent directory.
  ac_confdir=`$as_dirname -- "$0" ||
$as_expr X"$0" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$0" : 'X\(//\)[^/]' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
echo X"$0" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  srcdir=$ac_confdir
  if test ! -r "$srcdir/$ac_unique_file"; then
    srcdir=..
  fi
else
  ac_srcdir_defaulted=no
fi
if test ! -r "$srcdir/$ac_unique_file"; then
  test "$ac_srcdir_defaulted" = yes && srcdir="$ac_confdir or .."
  { echo "$as_me: error: cannot find sources ($ac_unique_file) in $srcdir" >&2
   { (exit 1); exit 1; }; }
fi
ac_msg="sources are in $srcdir, but \`cd $srcdir' does not work"
ac_abs_confdir=`(
	cd "$srcdir" && test -r "./$ac_unique_file" || { echo "$as_me: error: $ac_msg" >&2
   { (exit 1); exit 1; }; }
	pwd)`
# When building in place, set srcdir=.
if test "$ac_abs_confdir" = "$ac_pwd"; then
  srcdir=.
fi
# Remove unnecessary trailing slashes from srcdir.
# Double slashes in file names in object file debugging info
# mess up M-x gdb in Emacs.
case $srcdir in
*/) srcdir=`expr "X$srcdir" : 'X\(.*[^/]\)' \| "X$srcdir" : 'X\(.*\)'`;;
esac
for ac_var in $ac_precious_vars; do
  eval ac_env_${ac_var}_set=\${${ac_var}+set}
  eval ac_env_${ac_var}_value=\$${ac_var}
  eval ac_cv_env_${ac_var}_set=\${${ac_var}+set}
  eval ac_cv_env_${ac_var}_value=\$${ac_var}
done

#
# Report the --help message.
#
if test "$ac_init_help" = "long"; then
  # Omit some internal or obsolete options to make the list less imposing.
  # This message is too long to be a string in the A/UX 3.1 sh.
  cat <<_ACEOF
\`configure' configures bedrock 1.6.6-snapshot to adapt to many kinds of systems.

Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print \`checking...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for \`--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or \`..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
			  [$ac_default_prefix]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
			  [PREFIX]

By default, \`make install' will install all the files in
\`$ac_default_prefix/bin', \`$ac_default_prefix/lib' etc.  You can specify
an installation prefix other than \`$ac_default_prefix' using \`--prefix',
for instance \`--prefix=\$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --libexecdir=DIR       program executables [EPREFIX/libexec]
  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
  --libdir=DIR           object code libraries [EPREFIX/lib]
  --includedir=DIR       C header files [PREFIX/include]
  --oldincludedir=DIR    C header files for non-gcc [/usr/include]
  --datarootdir=DIR      read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR          read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR          info documentation [DATAROOTDIR/info]
  --localedir=DIR        locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR           man documentation [DATAROOTDIR/man]
  --docdir=DIR           documentation root [DATAROOTDIR/doc/bedrock]
  --htmldir=DIR          html documentation [DOCDIR]
  --dvidir=DIR           dvi documentation [DOCDIR]
  --pdfdir=DIR           pdf documentation [DOCDIR]
  --psdir=DIR            ps documentation [DOCDIR]
_ACEOF

  cat <<\_ACEOF

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
_ACEOF
fi

if test -n "$ac_init_help"; then
  case $ac_init_help in
     short | recursive ) echo "Configuration of bedrock 1.6.6-snapshot:";;
   esac
  cat <<\_ACEOF

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-perl-includes=DIR[:DIR:...]
                          prepend DIRs to Perl's @INC
  --with-perl-libdir=ARG
                          where to install perl modules ARG=no, uses \$pgklibdir/perl5

Report bugs to <ASalewski@signatureinfo.com>.
_ACEOF
ac_status=$?
fi

if test "$ac_init_help" = "recursive"; then
  # If there are subdirs, report their specific --help.
  for ac_dir in : $ac_subdirs_all; do test "x$ac_dir" = x: && continue
    test -d "$ac_dir" || continue
    ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`echo "$ac_dir" | sed 's,^\.[\\/],,'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`echo "$ac_dir_suffix" | sed 's,/[^\\/]*,/..,g;s,/,,'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix

    cd "$ac_dir" || { ac_status=$?; continue; }
    # Check for guested configure.
    if test -f "$ac_srcdir/configure.gnu"; then
      echo &&
      $SHELL "$ac_srcdir/configure.gnu" --help=recursive
    elif test -f "$ac_srcdir/configure"; then
      echo &&
      $SHELL "$ac_srcdir/configure" --help=recursive
    else
      echo "$as_me: WARNING: no configuration information is in $ac_dir" >&2
    fi || ac_status=$?
    cd "$ac_pwd" || { ac_status=$?; break; }
  done
fi

test -n "$ac_init_help" && exit $ac_status
if $ac_init_version; then
  cat <<\_ACEOF
bedrock configure 1.6.6-snapshot
generated by GNU Autoconf 2.61

Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
This configure script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it.
_ACEOF
  exit
fi
cat >config.log <<_ACEOF
This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by bedrock $as_me 1.6.6-snapshot, which was
generated by GNU Autoconf 2.61.  Invocation command line was

  $ $0 $@

_ACEOF
exec 5>>config.log
{
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  echo "PATH: $as_dir"
done
IFS=$as_save_IFS

} >&5

cat >&5 <<_ACEOF


## ----------- ##
## Core tests. ##
## ----------- ##

_ACEOF


# Keep a trace of the command line.
# Strip out --no-create and --no-recursion so they do not pile up.
# Strip out --silent because we don't want to record it for future runs.
# Also quote any args containing shell meta-characters.
# Make two passes to allow for proper duplicate-argument suppression.
ac_configure_args=
ac_configure_args0=
ac_configure_args1=
ac_must_keep_next=false
for ac_pass in 1 2
do
  for ac_arg
  do
    case $ac_arg in
    -no-create | --no-c* | -n | -no-recursion | --no-r*) continue ;;
    -q | -quiet | --quiet | --quie | --qui | --qu | --q \
    | -silent | --silent | --silen | --sile | --sil)
      continue ;;
    *\'*)
      ac_arg=`echo "$ac_arg" | sed "s/'/'\\\\\\\\''/g"` ;;
    esac
    case $ac_pass in
    1) ac_configure_args0="$ac_configure_args0 '$ac_arg'" ;;
    2)
      ac_configure_args1="$ac_configure_args1 '$ac_arg'"
      if test $ac_must_keep_next = true; then
	ac_must_keep_next=false # Got value, back to normal.
      else
	case $ac_arg in
	  *=* | --config-cache | -C | -disable-* | --disable-* \
	  | -enable-* | --enable-* | -gas | --g* | -nfp | --nf* \
	  | -q | -quiet | --q* | -silent | --sil* | -v | -verb* \
	  | -with-* | --with-* | -without-* | --without-* | --x)
	    case "$ac_configure_args0 " in
	      "$ac_configure_args1"*" '$ac_arg' "* ) continue ;;
	    esac
	    ;;
	  -* ) ac_must_keep_next=true ;;
	esac
      fi
      ac_configure_args="$ac_configure_args '$ac_arg'"
      ;;
    esac
  done
done
$as_unset ac_configure_args0 || test "${ac_configure_args0+set}" != set || { ac_configure_args0=; export ac_configure_args0; }
$as_unset ac_configure_args1 || test "${ac_configure_args1+set}" != set || { ac_configure_args1=; export ac_configure_args1; }

# When interrupted or exit'd, cleanup temporary files, and complete
# config.log.  We remove comments because anyway the quotes in there
# would cause problems or look ugly.
# WARNING: Use '\'' to represent an apostrophe within the trap.
# WARNING: Do not start the trap code with a newline, due to a FreeBSD 4.0 bug.
trap 'exit_status=$?
  # Save into config.log some information that might help in debugging.
  {
    echo

    cat <<\_ASBOX
## ---------------- ##
## Cache variables. ##
## ---------------- ##
_ASBOX
    echo
    # The following way of writing the cache mishandles newlines in values,
(
  for ac_var in `(set) 2>&1 | sed -n '\''s/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'\''`; do
    eval ac_val=\$$ac_var
    case $ac_val in #(
    *${as_nl}*)
      case $ac_var in #(
      *_cv_*) { echo "$as_me:$LINENO: WARNING: Cache variable $ac_var contains a newline." >&5
echo "$as_me: WARNING: Cache variable $ac_var contains a newline." >&2;} ;;
      esac
      case $ac_var in #(
      _ | IFS | as_nl) ;; #(
      *) $as_unset $ac_var ;;
      esac ;;
    esac
  done
  (set) 2>&1 |
    case $as_nl`(ac_space='\'' '\''; set) 2>&1` in #(
    *${as_nl}ac_space=\ *)
      sed -n \
	"s/'\''/'\''\\\\'\'''\''/g;
	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\''\\2'\''/p"
      ;; #(
    *)
      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
      ;;
    esac |
    sort
)
    echo

    cat <<\_ASBOX
## ----------------- ##
## Output variables. ##
## ----------------- ##
_ASBOX
    echo
    for ac_var in $ac_subst_vars
    do
      eval ac_val=\$$ac_var
      case $ac_val in
      *\'\''*) ac_val=`echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
      esac
      echo "$ac_var='\''$ac_val'\''"
    done | sort
    echo

    if test -n "$ac_subst_files"; then
      cat <<\_ASBOX
## ------------------- ##
## File substitutions. ##
## ------------------- ##
_ASBOX
      echo
      for ac_var in $ac_subst_files
      do
	eval ac_val=\$$ac_var
	case $ac_val in
	*\'\''*) ac_val=`echo "$ac_val" | sed "s/'\''/'\''\\\\\\\\'\'''\''/g"`;;
	esac
	echo "$ac_var='\''$ac_val'\''"
      done | sort
      echo
    fi

    if test -s confdefs.h; then
      cat <<\_ASBOX
## ----------- ##
## confdefs.h. ##
## ----------- ##
_ASBOX
      echo
      cat confdefs.h
      echo
    fi
    test "$ac_signal" != 0 &&
      echo "$as_me: caught signal $ac_signal"
    echo "$as_me: exit $exit_status"
  } >&5
  rm -f core *.core core.conftest.* &&
    rm -f -r conftest* confdefs* conf$$* $ac_clean_files &&
    exit $exit_status
' 0
for ac_signal in 1 2 13 15; do
  trap 'ac_signal='$ac_signal'; { (exit 1); exit 1; }' $ac_signal
done
ac_signal=0

# confdefs.h avoids OS command line length limits that DEFS can exceed.
rm -f -r conftest* confdefs.h

# Predefined preprocessor variables.

cat >>confdefs.h <<_ACEOF
#define PACKAGE_NAME "$PACKAGE_NAME"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_TARNAME "$PACKAGE_TARNAME"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_VERSION "$PACKAGE_VERSION"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_STRING "$PACKAGE_STRING"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define PACKAGE_BUGREPORT "$PACKAGE_BUGREPORT"
_ACEOF


# Let the site file select an alternate cache file if it wants to.
# Prefer explicitly selected file to automatically selected ones.
if test -n "$CONFIG_SITE"; then
  set x "$CONFIG_SITE"
elif test "x$prefix" != xNONE; then
  set x "$prefix/share/config.site" "$prefix/etc/config.site"
else
  set x "$ac_default_prefix/share/config.site" \
	"$ac_default_prefix/etc/config.site"
fi
shift
for ac_site_file
do
  if test -r "$ac_site_file"; then
    { echo "$as_me:$LINENO: loading site script $ac_site_file" >&5
echo "$as_me: loading site script $ac_site_file" >&6;}
    sed 's/^/| /' "$ac_site_file" >&5
    . "$ac_site_file"
  fi
done

if test -r "$cache_file"; then
  # Some versions of bash will fail to source /dev/null (special
  # files actually), so we avoid doing that.
  if test -f "$cache_file"; then
    { echo "$as_me:$LINENO: loading cache $cache_file" >&5
echo "$as_me: loading cache $cache_file" >&6;}
    case $cache_file in
      [\\/]* | ?:[\\/]* ) . "$cache_file";;
      *)                      . "./$cache_file";;
    esac
  fi
else
  { echo "$as_me:$LINENO: creating cache $cache_file" >&5
echo "$as_me: creating cache $cache_file" >&6;}
  >$cache_file
fi

# Check that the precious variables saved in the cache have kept the same
# value.
ac_cache_corrupted=false
for ac_var in $ac_precious_vars; do
  eval ac_old_set=\$ac_cv_env_${ac_var}_set
  eval ac_new_set=\$ac_env_${ac_var}_set
  eval ac_old_val=\$ac_cv_env_${ac_var}_value
  eval ac_new_val=\$ac_env_${ac_var}_value
  case $ac_old_set,$ac_new_set in
    set,)
      { echo "$as_me:$LINENO: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&5
echo "$as_me: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,set)
      { echo "$as_me:$LINENO: error: \`$ac_var' was not set in the previous run" >&5
echo "$as_me: error: \`$ac_var' was not set in the previous run" >&2;}
      ac_cache_corrupted=: ;;
    ,);;
    *)
      if test "x$ac_old_val" != "x$ac_new_val"; then
	{ echo "$as_me:$LINENO: error: \`$ac_var' has changed since the previous run:" >&5
echo "$as_me: error: \`$ac_var' has changed since the previous run:" >&2;}
	{ echo "$as_me:$LINENO:   former value:  $ac_old_val" >&5
echo "$as_me:   former value:  $ac_old_val" >&2;}
	{ echo "$as_me:$LINENO:   current value: $ac_new_val" >&5
echo "$as_me:   current value: $ac_new_val" >&2;}
	ac_cache_corrupted=:
      fi;;
  esac
  # Pass precious variables to config.status.
  if test "$ac_new_set" = set; then
    case $ac_new_val in
    *\'*) ac_arg=$ac_var=`echo "$ac_new_val" | sed "s/'/'\\\\\\\\''/g"` ;;
    *) ac_arg=$ac_var=$ac_new_val ;;
    esac
    case " $ac_configure_args " in
      *" '$ac_arg' "*) ;; # Avoid dups.  Use of quotes ensures accuracy.
      *) ac_configure_args="$ac_configure_args '$ac_arg'" ;;
    esac
  fi
done
if $ac_cache_corrupted; then
  { echo "$as_me:$LINENO: error: changes in the environment can compromise the build" >&5
echo "$as_me: error: changes in the environment can compromise the build" >&2;}
  { { echo "$as_me:$LINENO: error: run \`make distclean' and/or \`rm $cache_file' and start over" >&5
echo "$as_me: error: run \`make distclean' and/or \`rm $cache_file' and start over" >&2;}
   { (exit 1); exit 1; }; }
fi

























ac_ext=c
ac_cpp='$CPP $CPPFLAGS'
ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
ac_compiler_gnu=$ac_cv_c_compiler_gnu





ac_aux_dir=
for ac_dir in autotools "$srcdir"/autotools; do
  if test -f "$ac_dir/install-sh"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install-sh -c"
    break
  elif test -f "$ac_dir/install.sh"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/install.sh -c"
    break
  elif test -f "$ac_dir/shtool"; then
    ac_aux_dir=$ac_dir
    ac_install_sh="$ac_aux_dir/shtool install -c"
    break
  fi
done
if test -z "$ac_aux_dir"; then
  { { echo "$as_me:$LINENO: error: cannot find install-sh or install.sh in autotools \"$srcdir\"/autotools" >&5
echo "$as_me: error: cannot find install-sh or install.sh in autotools \"$srcdir\"/autotools" >&2;}
   { (exit 1); exit 1; }; }
fi

# These three variables are undocumented and unsupported,
# and are intended to be withdrawn in a future Autoconf release.
# They can cause serious problems if a builder's source tree is in a directory
# whose full name contains unusual characters.
ac_config_guess="$SHELL $ac_aux_dir/config.guess"  # Please don't use this var.
ac_config_sub="$SHELL $ac_aux_dir/config.sub"  # Please don't use this var.
ac_configure="$SHELL $ac_aux_dir/configure"  # Please don't use this var.





am__api_version="1.9"
# Find a good install program.  We prefer a C program (faster),
# so one script is as good as another.  But avoid the broken or
# incompatible versions:
# SysV /etc/install, /usr/sbin/install
# SunOS /usr/etc/install
# IRIX /sbin/install
# AIX /bin/install
# AmigaOS /C/install, which installs bootblocks on floppy discs
# AIX 4 /usr/bin/installbsd, which doesn't work without a -g flag
# AFS /usr/afsws/bin/install, which mishandles nonexistent args
# SVR4 /usr/ucb/install, which tries to use the nonexistent group "staff"
# OS/2's system install, which has a completely different semantic
# ./install, which can be erroneously created by make from ./install.sh.
{ echo "$as_me:$LINENO: checking for a BSD-compatible install" >&5
echo $ECHO_N "checking for a BSD-compatible install... $ECHO_C" >&6; }
if test -z "$INSTALL"; then
if test "${ac_cv_path_install+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  # Account for people who put trailing slashes in PATH elements.
case $as_dir/ in
  ./ | .// | /cC/* | \
  /etc/* | /usr/sbin/* | /usr/etc/* | /sbin/* | /usr/afsws/bin/* | \
  ?:\\/os2\\/install\\/* | ?:\\/OS2\\/INSTALL\\/* | \
  /usr/ucb/* ) ;;
  *)
    # OSF1 and SCO ODT 3.0 have their own names for install.
    # Don't use installbsd from OSF since it installs stuff as root
    # by default.
    for ac_prog in ginstall scoinst install; do
      for ac_exec_ext in '' $ac_executable_extensions; do
	if { test -f "$as_dir/$ac_prog$ac_exec_ext" && $as_test_x "$as_dir/$ac_prog$ac_exec_ext"; }; then
	  if test $ac_prog = install &&
	    grep dspmsg "$as_dir/$ac_prog$ac_exec_ext" >/dev/null 2>&1; then
	    # AIX install.  It has an incompatible calling convention.
	    :
	  elif test $ac_prog = install &&
	    grep pwplus "$as_dir/$ac_prog$ac_exec_ext" >/dev/null 2>&1; then
	    # program-specific install script used by HP pwplus--don't use.
	    :
	  else
	    ac_cv_path_install="$as_dir/$ac_prog$ac_exec_ext -c"
	    break 3
	  fi
	fi
      done
    done
    ;;
esac
done
IFS=$as_save_IFS


fi
  if test "${ac_cv_path_install+set}" = set; then
    INSTALL=$ac_cv_path_install
  else
    # As a last resort, use the slow shell script.  Don't cache a
    # value for INSTALL within a source directory, because that will
    # break other packages using the cache if that directory is
    # removed, or if the value is a relative name.
    INSTALL=$ac_install_sh
  fi
fi
{ echo "$as_me:$LINENO: result: $INSTALL" >&5
echo "${ECHO_T}$INSTALL" >&6; }

# Use test -z because SunOS4 sh mishandles braces in ${var-val}.
# It thinks the first close brace ends the variable substitution.
test -z "$INSTALL_PROGRAM" && INSTALL_PROGRAM='${INSTALL}'

test -z "$INSTALL_SCRIPT" && INSTALL_SCRIPT='${INSTALL}'

test -z "$INSTALL_DATA" && INSTALL_DATA='${INSTALL} -m 644'

{ echo "$as_me:$LINENO: checking whether build environment is sane" >&5
echo $ECHO_N "checking whether build environment is sane... $ECHO_C" >&6; }
# Just in case
sleep 1
echo timestamp > conftest.file
# Do `set' in a subshell so we don't clobber the current shell's
# arguments.  Must try -L first in case configure is actually a
# symlink; some systems play weird games with the mod time of symlinks
# (eg FreeBSD returns the mod time of the symlink's containing
# directory).
if (
   set X `ls -Lt $srcdir/configure conftest.file 2> /dev/null`
   if test "$*" = "X"; then
      # -L didn't work.
      set X `ls -t $srcdir/configure conftest.file`
   fi
   rm -f conftest.file
   if test "$*" != "X $srcdir/configure conftest.file" \
      && test "$*" != "X conftest.file $srcdir/configure"; then

      # If neither matched, then we have a broken ls.  This can happen
      # if, for instance, CONFIG_SHELL is bash and it inherits a
      # broken ls alias from the environment.  This has actually
      # happened.  Such a system could not be considered "sane".
      { { echo "$as_me:$LINENO: error: ls -t appears to fail.  Make sure there is not a broken
alias in your environment" >&5
echo "$as_me: error: ls -t appears to fail.  Make sure there is not a broken
alias in your environment" >&2;}
   { (exit 1); exit 1; }; }
   fi

   test "$2" = conftest.file
   )
then
   # Ok.
   :
else
   { { echo "$as_me:$LINENO: error: newly created file is older than distributed files!
Check your system clock" >&5
echo "$as_me: error: newly created file is older than distributed files!
Check your system clock" >&2;}
   { (exit 1); exit 1; }; }
fi
{ echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6; }
test "$program_prefix" != NONE &&
  program_transform_name="s&^&$program_prefix&;$program_transform_name"
# Use a double $ so make ignores it.
test "$program_suffix" != NONE &&
  program_transform_name="s&\$&$program_suffix&;$program_transform_name"
# Double any \ or $.  echo might interpret backslashes.
# By default was `s,x,x', remove it if useless.
cat <<\_ACEOF >conftest.sed
s/[\\$]/&&/g;s/;s,x,x,$//
_ACEOF
program_transform_name=`echo $program_transform_name | sed -f conftest.sed`
rm -f conftest.sed

# expand $ac_aux_dir to an absolute path
am_aux_dir=`cd $ac_aux_dir && pwd`

test x"${MISSING+set}" = xset || MISSING="\${SHELL} $am_aux_dir/missing"
# Use eval to expand $SHELL
if eval "$MISSING --run true"; then
  am_missing_run="$MISSING --run "
else
  am_missing_run=
  { echo "$as_me:$LINENO: WARNING: \`missing' script is too old or missing" >&5
echo "$as_me: WARNING: \`missing' script is too old or missing" >&2;}
fi

if mkdir -p --version . >/dev/null 2>&1 && test ! -d ./--version; then
  # We used to keeping the `.' as first argument, in order to
  # allow $(mkdir_p) to be used without argument.  As in
  #   $(mkdir_p) $(somedir)
  # where $(somedir) is conditionally defined.  However this is wrong
  # for two reasons:
  #  1. if the package is installed by a user who cannot write `.'
  #     make install will fail,
  #  2. the above comment should most certainly read
  #     $(mkdir_p) $(DESTDIR)$(somedir)
  #     so it does not work when $(somedir) is undefined and
  #     $(DESTDIR) is not.
  #  To support the latter case, we have to write
  #     test -z "$(somedir)" || $(mkdir_p) $(DESTDIR)$(somedir),
  #  so the `.' trick is pointless.
  mkdir_p='mkdir -p --'
else
  # On NextStep and OpenStep, the `mkdir' command does not
  # recognize any option.  It will interpret all options as
  # directories to create, and then abort because `.' already
  # exists.
  for d in ./-p ./--version;
  do
    test -d $d && rmdir $d
  done
  # $(mkinstalldirs) is defined by Automake if mkinstalldirs exists.
  if test -f "$ac_aux_dir/mkinstalldirs"; then
    mkdir_p='$(mkinstalldirs)'
  else
    mkdir_p='$(install_sh) -d'
  fi
fi

for ac_prog in gawk mawk nawk awk
do
  # Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_prog_AWK+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$AWK"; then
  ac_cv_prog_AWK="$AWK" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_prog_AWK="$ac_prog"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

fi
fi
AWK=$ac_cv_prog_AWK
if test -n "$AWK"; then
  { echo "$as_me:$LINENO: result: $AWK" >&5
echo "${ECHO_T}$AWK" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


  test -n "$AWK" && break
done

{ echo "$as_me:$LINENO: checking whether ${MAKE-make} sets \$(MAKE)" >&5
echo $ECHO_N "checking whether ${MAKE-make} sets \$(MAKE)... $ECHO_C" >&6; }
set x ${MAKE-make}; ac_make=`echo "$2" | sed 's/+/p/g; s/[^a-zA-Z0-9_]/_/g'`
if { as_var=ac_cv_prog_make_${ac_make}_set; eval "test \"\${$as_var+set}\" = set"; }; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.make <<\_ACEOF
SHELL = /bin/sh
all:
	@echo '@@@%%%=$(MAKE)=@@@%%%'
_ACEOF
# GNU make sometimes prints "make[1]: Entering...", which would confuse us.
case `${MAKE-make} -f conftest.make 2>/dev/null` in
  *@@@%%%=?*=@@@%%%*)
    eval ac_cv_prog_make_${ac_make}_set=yes;;
  *)
    eval ac_cv_prog_make_${ac_make}_set=no;;
esac
rm -f conftest.make
fi
if eval test \$ac_cv_prog_make_${ac_make}_set = yes; then
  { echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6; }
  SET_MAKE=
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
  SET_MAKE="MAKE=${MAKE-make}"
fi

rm -rf .tst 2>/dev/null
mkdir .tst 2>/dev/null
if test -d .tst; then
  am__leading_dot=.
else
  am__leading_dot=_
fi
rmdir .tst 2>/dev/null

# test to see if srcdir already configured
if test "`cd $srcdir && pwd`" != "`pwd`" &&
   test -f $srcdir/config.status; then
  { { echo "$as_me:$LINENO: error: source directory already configured; run \"make distclean\" there first" >&5
echo "$as_me: error: source directory already configured; run \"make distclean\" there first" >&2;}
   { (exit 1); exit 1; }; }
fi

# test whether we have cygpath
if test -z "$CYGPATH_W"; then
  if (cygpath --version) >/dev/null 2>/dev/null; then
    CYGPATH_W='cygpath -w'
  else
    CYGPATH_W=echo
  fi
fi


# Define the identity of the package.
 PACKAGE='bedrock'
 VERSION='1.6.6-snapshot'


cat >>confdefs.h <<_ACEOF
#define PACKAGE "$PACKAGE"
_ACEOF


cat >>confdefs.h <<_ACEOF
#define VERSION "$VERSION"
_ACEOF

# Some tools Automake needs.

ACLOCAL=${ACLOCAL-"${am_missing_run}aclocal-${am__api_version}"}


AUTOCONF=${AUTOCONF-"${am_missing_run}autoconf"}


AUTOMAKE=${AUTOMAKE-"${am_missing_run}automake-${am__api_version}"}


AUTOHEADER=${AUTOHEADER-"${am_missing_run}autoheader"}


MAKEINFO=${MAKEINFO-"${am_missing_run}makeinfo"}

install_sh=${install_sh-"$am_aux_dir/install-sh"}

# Installed binaries are usually stripped using `strip' when the user
# run `make install-strip'.  However `strip' might not be the right
# tool to use in cross-compilation environments, therefore Automake
# will honor the `STRIP' environment variable to overrule this program.
if test "$cross_compiling" != no; then
  if test -n "$ac_tool_prefix"; then
  # Extract the first word of "${ac_tool_prefix}strip", so it can be a program name with args.
set dummy ${ac_tool_prefix}strip; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_prog_STRIP+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$STRIP"; then
  ac_cv_prog_STRIP="$STRIP" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_prog_STRIP="${ac_tool_prefix}strip"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

fi
fi
STRIP=$ac_cv_prog_STRIP
if test -n "$STRIP"; then
  { echo "$as_me:$LINENO: result: $STRIP" >&5
echo "${ECHO_T}$STRIP" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


fi
if test -z "$ac_cv_prog_STRIP"; then
  ac_ct_STRIP=$STRIP
  # Extract the first word of "strip", so it can be a program name with args.
set dummy strip; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_prog_ac_ct_STRIP+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  if test -n "$ac_ct_STRIP"; then
  ac_cv_prog_ac_ct_STRIP="$ac_ct_STRIP" # Let the user override the test.
else
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_prog_ac_ct_STRIP="strip"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

fi
fi
ac_ct_STRIP=$ac_cv_prog_ac_ct_STRIP
if test -n "$ac_ct_STRIP"; then
  { echo "$as_me:$LINENO: result: $ac_ct_STRIP" >&5
echo "${ECHO_T}$ac_ct_STRIP" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi

  if test "x$ac_ct_STRIP" = x; then
    STRIP=":"
  else
    case $cross_compiling:$ac_tool_warned in
yes:)
{ echo "$as_me:$LINENO: WARNING: In the future, Autoconf will not detect cross-tools
whose name does not start with the host triplet.  If you think this
configuration is useful to you, please write to autoconf@gnu.org." >&5
echo "$as_me: WARNING: In the future, Autoconf will not detect cross-tools
whose name does not start with the host triplet.  If you think this
configuration is useful to you, please write to autoconf@gnu.org." >&2;}
ac_tool_warned=yes ;;
esac
    STRIP=$ac_ct_STRIP
  fi
else
  STRIP="$ac_cv_prog_STRIP"
fi

fi
INSTALL_STRIP_PROGRAM="\${SHELL} \$(install_sh) -c -s"

# We need awk for the "check" target.  The system "awk" is bad on
# some platforms.
# Always define AMTAR for backward compatibility.

AMTAR=${AMTAR-"${am_missing_run}tar"}

am__tar='${AMTAR} chof - "$$tardir"'; am__untar='${AMTAR} xf -'








# DFLT_MAINTAINER="ASalewski@signatureinfo.com"
# AC_SUBST([DFLT_MAINTAINER])


{ echo "$as_me:$LINENO: checking whether ln -s works" >&5
echo $ECHO_N "checking whether ln -s works... $ECHO_C" >&6; }
LN_S=$as_ln_s
if test "$LN_S" = "ln -s"; then
  { echo "$as_me:$LINENO: result: yes" >&5
echo "${ECHO_T}yes" >&6; }
else
  { echo "$as_me:$LINENO: result: no, using $LN_S" >&5
echo "${ECHO_T}no, using $LN_S" >&6; }
fi


## We need bash >= 2.x, but at Signture Information Solutions, LLC, we
## don't have any machines ancient enough that we need to be concerned
## that a too-ancient version will be found (I hope).
# Extract the first word of "bash", so it can be a program name with args.
set dummy bash; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_BASH_SH+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $BASH_SH in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_BASH_SH="$BASH_SH" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_BASH_SH="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
BASH_SH=$ac_cv_path_BASH_SH
if test -n "$BASH_SH"; then
  { echo "$as_me:$LINENO: result: $BASH_SH" >&5
echo "${ECHO_T}$BASH_SH" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$BASH_SH"; then
    { { echo "$as_me:$LINENO: error: bash not found" >&5
echo "$as_me: error: bash not found" >&2;}
   { (exit 1); exit 1; }; }
fi

# Extract the first word of "cat", so it can be a program name with args.
set dummy cat; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_CAT+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $CAT in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_CAT="$CAT" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_CAT="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
CAT=$ac_cv_path_CAT
if test -n "$CAT"; then
  { echo "$as_me:$LINENO: result: $CAT" >&5
echo "${ECHO_T}$CAT" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$CAT"; then
    { { echo "$as_me:$LINENO: error: cat not found" >&5
echo "$as_me: error: cat not found" >&2;}
   { (exit 1); exit 1; }; }
fi

# Extract the first word of "chgrp", so it can be a program name with args.
set dummy chgrp; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_CHGRP+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $CHGRP in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_CHGRP="$CHGRP" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_CHGRP="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
CHGRP=$ac_cv_path_CHGRP
if test -n "$CHGRP"; then
  { echo "$as_me:$LINENO: result: $CHGRP" >&5
echo "${ECHO_T}$CHGRP" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$CHGRP"; then
    { { echo "$as_me:$LINENO: error: chgrp not found" >&5
echo "$as_me: error: chgrp not found" >&2;}
   { (exit 1); exit 1; }; }
fi

# Extract the first word of "chown", so it can be a program name with args.
set dummy chown; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_CHOWN+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $CHOWN in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_CHOWN="$CHOWN" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_CHOWN="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
CHOWN=$ac_cv_path_CHOWN
if test -n "$CHOWN"; then
  { echo "$as_me:$LINENO: result: $CHOWN" >&5
echo "${ECHO_T}$CHOWN" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$CHOWN"; then
    { { echo "$as_me:$LINENO: error: chown not found" >&5
echo "$as_me: error: chown not found" >&2;}
   { (exit 1); exit 1; }; }
fi

# Extract the first word of "find", so it can be a program name with args.
set dummy find; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_FIND+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $FIND in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_FIND="$FIND" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_FIND="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
FIND=$ac_cv_path_FIND
if test -n "$FIND"; then
  { echo "$as_me:$LINENO: result: $FIND" >&5
echo "${ECHO_T}$FIND" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$FIND"; then
    { { echo "$as_me:$LINENO: error: find not found" >&5
echo "$as_me: error: find not found" >&2;}
   { (exit 1); exit 1; }; };fi

# Extract the first word of "grep", so it can be a program name with args.
set dummy grep; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_GREP+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $GREP in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_GREP="$GREP" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_GREP="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
GREP=$ac_cv_path_GREP
if test -n "$GREP"; then
  { echo "$as_me:$LINENO: result: $GREP" >&5
echo "${ECHO_T}$GREP" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$GREP"; then
    { { echo "$as_me:$LINENO: error: grep not found" >&5
echo "$as_me: error: grep not found" >&2;}
   { (exit 1); exit 1; }; }
fi

# Extract the first word of "sed", so it can be a program name with args.
set dummy sed; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_SED+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $SED in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_SED="$SED" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_SED="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
SED=$ac_cv_path_SED
if test -n "$SED"; then
  { echo "$as_me:$LINENO: result: $SED" >&5
echo "${ECHO_T}$SED" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$SED"; then
    { { echo "$as_me:$LINENO: error: sed not found" >&5
echo "$as_me: error: sed not found" >&2;}
   { (exit 1); exit 1; }; }
fi

# Extract the first word of "rm", so it can be a program name with args.
set dummy rm; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_RM+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $RM in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_RM="$RM" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_RM="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
RM=$ac_cv_path_RM
if test -n "$RM"; then
  { echo "$as_me:$LINENO: result: $RM" >&5
echo "${ECHO_T}$RM" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$RM"; then
    { { echo "$as_me:$LINENO: error: rm not found" >&5
echo "$as_me: error: rm not found" >&2;}
   { (exit 1); exit 1; }; }
fi

# Extract the first word of "rmdir", so it can be a program name with args.
set dummy rmdir; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_RMDIR+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $RMDIR in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_RMDIR="$RMDIR" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_RMDIR="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
RMDIR=$ac_cv_path_RMDIR
if test -n "$RMDIR"; then
  { echo "$as_me:$LINENO: result: $RMDIR" >&5
echo "${ECHO_T}$RMDIR" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$RMDIR"; then
    { { echo "$as_me:$LINENO: error: rmdir not found" >&5
echo "$as_me: error: rmdir not found" >&2;}
   { (exit 1); exit 1; }; }
fi



    req_perl_version="5.008000"
    if test -z "$req_perl_version"; then
        req_perl_version="5.005"
    fi
    # Extract the first word of "perl", so it can be a program name with args.
set dummy perl; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_PERL+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $PERL in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_PERL="$PERL" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_PERL="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
PERL=$ac_cv_path_PERL
if test -n "$PERL"; then
  { echo "$as_me:$LINENO: result: $PERL" >&5
echo "${ECHO_T}$PERL" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


    if test -z "$PERL"; then
        { { echo "$as_me:$LINENO: error: perl not found" >&5
echo "$as_me: error: perl not found" >&2;}
   { (exit 1); exit 1; }; }
    fi
    $PERL -e "require ${req_perl_version};" || {
        { { echo "$as_me:$LINENO: error: perl $req_perl_version or newer is required" >&5
echo "$as_me: error: perl $req_perl_version or newer is required" >&2;}
   { (exit 1); exit 1; }; }
    }


# pod2man comes with perl, which the above verifies that we have. Not yet sure
# if we can rely on that (distribution packaging may provide it in an optional
# package, for instance), so we check for it explicitly here. We use pod2man
# at build time to create some of our man pages.
# Extract the first word of "pod2man", so it can be a program name with args.
set dummy pod2man; ac_word=$2
{ echo "$as_me:$LINENO: checking for $ac_word" >&5
echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6; }
if test "${ac_cv_path_POD2MAN+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  case $POD2MAN in
  [\\/]* | ?:[\\/]*)
  ac_cv_path_POD2MAN="$POD2MAN" # Let the user override the test with a path.
  ;;
  *)
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  for ac_exec_ext in '' $ac_executable_extensions; do
  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
    ac_cv_path_POD2MAN="$as_dir/$ac_word$ac_exec_ext"
    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
    break 2
  fi
done
done
IFS=$as_save_IFS

  ;;
esac
fi
POD2MAN=$ac_cv_path_POD2MAN
if test -n "$POD2MAN"; then
  { echo "$as_me:$LINENO: result: $POD2MAN" >&5
echo "${ECHO_T}$POD2MAN" >&6; }
else
  { echo "$as_me:$LINENO: result: no" >&5
echo "${ECHO_T}no" >&6; }
fi


if test -z "$POD2MAN"; then
    { { echo "$as_me:$LINENO: error: pod2man program not found" >&5
echo "$as_me: error: pod2man program not found" >&2;}
   { (exit 1); exit 1; }; }
fi







# Check whether --with-perl-includes was given.
if test "${with_perl_includes+set}" = set; then
  withval=$with_perl_includes;  # AC_ARG_WITH: option if given
            { echo "$as_me:$LINENO: checking for dirs to prepend to Perl's @INC" >&5
echo $ECHO_N "checking for dirs to prepend to Perl's @INC... $ECHO_C" >&6; }


            if test "$withval" = "no"  || \
               test "$withval" = "yes" || \
               test -z "$withval"; then
                # The above result from one of the following spefications by the user:
                #
                #     --with-perl-includes=yes
                #     --with-perl-includes=no
                #
                # Both of the above are bogus because they are equivalent to these:
                #
                #     --with-perl-includes
                #     --without-perl-includes
                #
                # The DIR param is required.

                { { echo "$as_me:$LINENO: error: missing argument to --with-perl-includes" >&5
echo "$as_me: error: missing argument to --with-perl-includes" >&2;}
   { (exit 1); exit 1; }; }

            else

                # Verify that the user-specified directory (or directories) exists. Build
                # up our internal ax_perl5_* variables at the same time.
                _tmp_results_string=''
                IFShold=$IFS
                IFS=':'
                for _tdir in ${withval}; do
                    if test -d "${_tdir}"; then :; else
                        IFS=$IFShold

                        { { echo "$as_me:$LINENO: error: no such directory: ${_tdir}" >&5
echo "$as_me: error: no such directory: ${_tdir}" >&2;}
   { (exit 1); exit 1; }; }

                    fi

                    if test -z "$ax_perl5_extra_includes"; then
                        ax_perl5_extra_includes="${_tdir}"
                        ax_perl5_extra_includes_opt="-I\"${_tdir}\""  # for passing on 'perl' command line, if needed
                        _tmp_results_string="`printf "\n    ${_tdir}"`"
                    else
                        ax_perl5_extra_includes="${ax_perl5_extra_includes}:${_tdir}"
                        ax_perl5_extra_includes_opt=${ax_perl5_extra_includes_opt}" -I\"${_tdir}\""
                        _tmp_results_string="${_tmp_results_string}`printf "\n    ${_tdir}"`"
                    fi
                done
                IFS=$IFShold

                { echo "$as_me:$LINENO: result: ${_tmp_results_string}" >&5
echo "${ECHO_T}${_tmp_results_string}" >&6; }

            fi


else
   # AC_ARG_WITH: option if not given, same as --without-perl-includes
            { echo "$as_me:$LINENO: checking for dirs to prepend to Perl's @INC" >&5
echo $ECHO_N "checking for dirs to prepend to Perl's @INC... $ECHO_C" >&6; }
            { echo "$as_me:$LINENO: result: none" >&5
echo "${ECHO_T}none" >&6; }


fi






if test -n "${ax_perl5_extra_includes}"; then
  USING_PERL5_EXTRA_INCLUDES_TRUE=
  USING_PERL5_EXTRA_INCLUDES_FALSE='#'
else
  USING_PERL5_EXTRA_INCLUDES_TRUE='#'
  USING_PERL5_EXTRA_INCLUDES_FALSE=
fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Carp
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Cwd
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=DBI
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=1.13

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Date::Calc
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=4.3

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Fcntl
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=File::Basename
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=File::Copy
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=File::Path
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=File::Spec::Functions
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi









    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Getopt::Long
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi









    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=GDBM_File
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=1.03

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi









    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Hash::Util
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi









    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Net::FTP
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=2.56

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Net::SMTP
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=2.15

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi








    _tmp_macro_name='ads_PERL_MODULE.m4'

    # (required) This should be something like Foo::Bar::Baz
    _tmp_perl_mod_name=Term::ReadKey
    if test -z "${_tmp_perl_mod_name}"; then
        # This is almost certainly a programmer error

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: required 'PERL_MODULE_NAME' param not provided

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If not provided, then we assume that the Perl
    # module is required. Valid values are 'REQUIRED' or 'OPTIONAL'.
    _tmp_perl_mod_required_or_optional=REQUIRED
    if test -z "${_tmp_perl_mod_required_or_optional}"; then
        _tmp_perl_mod_required_or_optional='REQUIRED'  # dflt
    fi
    if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED' ||
       test "${_tmp_perl_mod_required_or_optional}" = 'OPTIONAL'; then :; else

        { { echo "$as_me:$LINENO: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&5
echo "$as_me: error:
    ${_tmp_macro_name} ERROR: second macro param must be either 'REQUIRED' or 'OPTIONAL' (got \"${_tmp_perl_mod_required_or_optional}\")

    Usage:
        ${_tmp_macro_name}(PERL_MODULE_NAME, [REQUIRED|OPTIONAL], [PERL_MODULE_VERSION])
" >&2;}
   { (exit 1); exit 1; }; }

    fi

    # (optional) If provided, this should be the perl module version
    _tmp_perl_mod_version=

    _tmp_check_msg="for ${_tmp_perl_mod_name}"
    if test -n "${_tmp_perl_mod_version}"; then
        _tmp_check_msg="${_tmp_check_msg} ${_tmp_perl_mod_version}"
    fi

    _tmp_perl_mod_msg_version="${_tmp_perl_mod_version}"
    if test -z "${_tmp_perl_mod_version}"; then
        _tmp_perl_mod_msg_version='(any version)'
    fi

    { echo "$as_me:$LINENO: checking for ${_tmp_check_msg}" >&5
echo $ECHO_N "checking for ${_tmp_check_msg}... $ECHO_C" >&6; }

    # Invoking perl twice is inefficient, but better isolates our test
    eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
              -we "'""use strict; use ${_tmp_perl_mod_name} ${_tmp_perl_mod_version};""'"
    if test $? -eq 0; then
        # Great, we have the module. Now print where it was found:
        _tmp_perl_mod_path="$( eval "'""${PERL}""'" "${ax_perl5_extra_includes_opt}" \
          -MFile::Spec -wle "'"'
            use strict;
            my $modname = shift;
            eval "require ${modname}";
            ${@} and die qq{Was unable to require module "$modname": ${@}};
            $modname .= q{.pm};
            my $found = undef;
            my $shortpath = File::Spec->catdir( split(q{::}, $modname) );
            my $fullpath;
            if (exists $INC{ $shortpath } && defined $INC{ $shortpath }) {
                $found = 1;
                $fullpath = $INC{ $shortpath };
            }
            $fullpath = q{<path unavailable in %INC}
                unless defined $fullpath && length $fullpath;
            print $fullpath;
            exit ($found ? 0 : 1);  # parens required
        '"'" "'""${_tmp_perl_mod_name}""'")"
        if test $? -ne 0; then



            { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    determine the path to the module. This is likely a bug in the ${_tmp_macro_name}
    autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        # Always attempt to determine the version number of the module
        # that was acutally found and display it to the user. Not all
        # Perl modules provide a $VERSION variable, but if the one
        # we're testing for does, then we'll show it.
        #
        # Note that we do this even for those modules for which the
        # user has requested a specific version because the
        # user-specified version is understood as "this version or
        # newer", so may be different from the version of the module
        # actually found on the system.

        _tmp_found_mod_version="$(
          eval "'""${PERL}""'" "'""-M${_tmp_perl_mod_name}""'" \
            "${ax_perl5_extra_includes_opt}" -wle "'"'
               my $modname = shift;
               my $ver = "${modname}::VERSION";
               print $$ver if defined $$ver && length $$ver;
            '"'" "'""${_tmp_perl_mod_name}""'"
        )"
        if test $? -ne 0; then

                { { echo "$as_me:$LINENO: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&5
echo "$as_me: error:
    Perl module ${_tmp_perl_mod_name} exists, but 'configure' was unable to
    test whether or not the module specifies a version number. This is likely
    a bug in the ${_tmp_macro_name} autoconf macro; please report this as a bug.
" >&2;}
   { (exit 1); exit 1; }; }

        fi

        if test "${_tmp_found_mod_version}x" = 'x'; then
            # Module does not provide version info, so use bogon string
            _tmp_perl_mod_path="(???) ${_tmp_perl_mod_path}"
        else
            # Prepend the value to the module path for display to the user
            _tmp_perl_mod_path="(${_tmp_found_mod_version}) ${_tmp_perl_mod_path}"
        fi

        { echo "$as_me:$LINENO: result: ${_tmp_perl_mod_path}" >&5
echo "${ECHO_T}${_tmp_perl_mod_path}" >&6; }

    else
        if test "${_tmp_perl_mod_required_or_optional}" = 'REQUIRED'; then

            { { echo "$as_me:$LINENO: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&5
echo "$as_me: error:
    Was unable to locate Perl module ${_tmp_perl_mod_name} ${_tmp_perl_mod_msg_version}
" >&2;}
   { (exit 1); exit 1; }; }

        else  # presence of module was optional

            { echo "$as_me:$LINENO: result: no (ok)" >&5
echo "${ECHO_T}no (ok)" >&6; }

        fi
    fi












# Check whether --with-perl-libdir was given.
if test "${with_perl_libdir+set}" = set; then
  withval=$with_perl_libdir;  # AC_ARG_WITH: option if given
    { echo "$as_me:$LINENO: checking for where to install perl modules" >&5
echo $ECHO_N "checking for where to install perl modules... $ECHO_C" >&6; }
    # each condition sets 'using_perlsysdirs' to either "yes" or "no", and
    # sets 'PERL_LIBDIR' to a non-empty DIR value
    if test "$withval" = "no"; then
        # --with-perl-libdir=no AKA --without-perl-libdir uses $pkglibdir (dflt)
        using_perlsysdirs="no"

        # note that we're constructing pkglibdir as automake would, but not
        # using the shell variable directly; this is because automake (at least
        # as of 1.4-p5) only defines '$pkglibdir' in the generated Makefile.in
        # files, but not in 'configure.in'. We need it defined in configure
        # in order for the assignment to PERL_LIBDIR to work.
        PERL_LIBDIR=${libdir}/${PACKAGE}/perl5
        { echo "$as_me:$LINENO: result: \$pkglibdir: ${libdir}/${PACKAGE}/perl5" >&5
echo "${ECHO_T}\$pkglibdir: ${libdir}/${PACKAGE}/perl5" >&6; }
    elif test -z "$withval" || \
         test "$withval" = "yes"; then
        # --with-perl-libdir AKA --with-perl-libdir=yes uses 'perl -V:installsitelib'
        using_perlsysdirs="yes"
        { echo "$as_me:$LINENO: result: Perl's \"installsitelib\"" >&5
echo "${ECHO_T}Perl's \"installsitelib\"" >&6; }

        { echo "$as_me:$LINENO: checking for perl installsitelib dir" >&5
echo $ECHO_N "checking for perl installsitelib dir... $ECHO_C" >&6; }
        PERL_LIBDIR=`$PERL '-V:installsitelib*' | \
                     $SED -e "s/^installsitelib='\(.*\)'\$/\1/"`
        if test "${PERL_LIBDIR}" = "undef" || \
           test "${PERL_LIBDIR}X" = "X"; then
            tmp_valid_opts="`printf "\t"`"`$PERL -le 'print join $/."\t", @INC'`
            { { echo "$as_me:$LINENO: error:
    Perl\'s installsitelib is not defined, and this is the preferred
    location in which to install the perl libraries included with ${PACKAGE}.
    Of course, you may specify that the perl libraries be installed anywhere
    perl will find them (anywhere in the @INC array), but you must explicitely
    request where, as this is non-standard. You may specify where to place them
    by using the \'--with-perl-libdir=DIR\' option to \'configure\'. All of the
    following are in @INC:
$tmp_valid_opts
" >&5
echo "$as_me: error:
    Perl\'s installsitelib is not defined, and this is the preferred
    location in which to install the perl libraries included with ${PACKAGE}.
    Of course, you may specify that the perl libraries be installed anywhere
    perl will find them (anywhere in the @INC array), but you must explicitely
    request where, as this is non-standard. You may specify where to place them
    by using the \'--with-perl-libdir=DIR\' option to \'configure\'. All of the
    following are in @INC:
$tmp_valid_opts
" >&2;}
   { (exit 1); exit 1; }; }
        fi
        { echo "$as_me:$LINENO: result: $PERL_LIBDIR" >&5
echo "${ECHO_T}$PERL_LIBDIR" >&6; }

    else
        # --with-perl-libdir=DIR, use user-specified directory
        using_perlsysdirs="no"
        PERL_LIBDIR="${withval}"
        { echo "$as_me:$LINENO: result: specified dir: $withval" >&5
echo "${ECHO_T}specified dir: $withval" >&6; }
            fi

else
   # AC_ARG_WITH: option if not given, same as --without-perl-libdir
    { echo "$as_me:$LINENO: checking for where to install perl modules" >&5
echo $ECHO_N "checking for where to install perl modules... $ECHO_C" >&6; }

    # note that we're constructing pkglibdir as automake would, but not
    # using the shell variable directly; this is because automake (at least
    # as of 1.4-p5) only defines '$pkglibdir' in the generated Makefile.in
    # files, but not in 'configure.in'. We need it defined in configure
    # in order for the assignment to PERL_LIBDIR to work.
    PERL_LIBDIR=${libdir}/${PACKAGE}/perl5
    { echo "$as_me:$LINENO: result: \$pkglibdir: ${libdir}/${PACKAGE}/perl5" >&5
echo "${ECHO_T}\$pkglibdir: ${libdir}/${PACKAGE}/perl5" >&6; }

fi




if test x$using_perlsysdirs = x$yes; then
  USING_PERL_INSTALLSITELIB_TRUE=
  USING_PERL_INSTALLSITELIB_FALSE='#'
else
  USING_PERL_INSTALLSITELIB_TRUE='#'
  USING_PERL_INSTALLSITELIB_FALSE=
fi



pkglibdir=${libdir}/${PACKAGE}


cgibindir=${pkglibdir}/cgi-bin
cgibindir="\${pkglibdir}/cgi-bin"


htdocsdir=${datadir}/htdocs
htdocsdir="\${datadir}/htdocs"


pebblesdir=${datadir}/pebbles
pebblesdir="\${datadir}/pebbles"



# FIXME: These are not general, so won't be correct in all
#        circumstances. They'll work correctly once we have full Perl
#        support.
perl5_pkgdatadir="\${datadir}/${PACKAGE}/perl5"

perl5_pkglibdir="\${libdir}/${PACKAGE}/perl5"

perl5_pkgvdatadir="\${datadir}/${PACKAGE}-${VERSION}/perl5"

perl5_pkgvlibdir="\${libdir}/${PACKAGE}-${VERSION}/perl5"



## The 'do_subst' Makefile var is the conventional name for manual
## filtering process that needs to be done at build time.
##
## Basically, any file we generate that is not a Makefile should be
## filtered at build time rather than at configure time; at build
## time, autotools variables will be fully expanded (well, expanded
## recursively, which amounts to the same thing) and allows any of the
## make vars to be overridden on the 'make' command line. This also
## avoids other kludgey hacks, such as eval'ing shell variables to
## expand them at configure time).
##
## Note that we replace all of the autoconf installation directory
## vars (see "Installation Directory Variables" in the autoconf
## manual) and most of the autoconf preset output variables (see
## "Preset Output Variables" in the autoconf manual). The exceptions
## to that latter are flag vars to the C/C++/Fortran compilers,
## linkers, etc. (CFLAGS and friends), and the 'configure_input' var,
## which we have to provide our own variation of. We also omit
## 'builddir' (which is always '.'); in this last case, what you
## probably want instead is 'abs_builddir', which we provide.

do_subst_command='do_subst = sed \
  -e '"'"'s,[@]PACKAGE[@],$(PACKAGE),g'"'"' \
  -e '"'"'s,[@]VERSION[@],$(VERSION),g'"'"' \
  -e '"'"'s,[@]PATH_SEPARATOR[@],$(PATH_SEPARATOR),g'"'"' \
  -e '"'"'s,[@]configure_input[@],Generated from $@.in; do not edit by hand.,g'"'"' \
  -e "s,[@]BUILD_DATE[@],$$(date '"'"'+%Y-%m-%d %H:%M:%S'"'"'),g" \
  \
  -e '"'"'s,[@]bindir[@],$(bindir),g'"'"' \
  -e '"'"'s,[@]datadir[@],$(datadir),g'"'"' \
  -e '"'"'s,[@]exec_prefix[@],$(exec_prefix),g'"'"' \
  -e '"'"'s,[@]includedir[@],$(includedir),g'"'"' \
  -e '"'"'s,[@]infodir[@],$(infodir),g'"'"' \
  -e '"'"'s,[@]libdir[@],$(libdir),g'"'"' \
  -e '"'"'s,[@]libexecdir[@],$(libexecdir),g'"'"' \
  -e '"'"'s,[@]localstatedir[@],$(localstatedir),g'"'"' \
  -e '"'"'s,[@]mandir[@],$(mandir),g'"'"' \
  -e '"'"'s,[@]oldincludedir[@],$(oldincludedir),g'"'"' \
  -e '"'"'s,[@]prefix[@],$(prefix),g'"'"' \
  -e '"'"'s,[@]sbindir[@],$(sbindir),g'"'"' \
  -e '"'"'s,[@]sharedstatedir[@],$(sharedstatedir),g'"'"' \
  -e '"'"'s,[@]sysconfdir[@],$(sysconfdir),g'"'"' \
  \
  -e '"'"'s,[@]abs_builddir[@],$(abs_builddir),g'"'"' \
  -e '"'"'s,[@]abs_srcdir[@],$(abs_srcdir),g'"'"' \
  -e '"'"'s,[@]abs_top_builddir[@],$(abs_top_builddir),g'"'"' \
  -e '"'"'s,[@]srcdir[@],$(srcdir),g'"'"' \
  -e '"'"'s,[@]top_builddir[@],$(top_builddir),g'"'"' \
  -e '"'"'s,[@]top_srcdir[@],$(top_srcdir),g'"'"' \
  \
  -e '"'"'s,[@]cgibindir[@],$(cgibindir),g'"'"' \
  -e '"'"'s,[@]htdocsdir[@],$(htdocsdir),g'"'"' \
  -e '"'"'s,[@]pebblesdir[@],$(pebblesdir),g'"'"' \
  -e '"'"'s,[@]pkglibdir[@],$(pkglibdir),g'"'"' \
  \
  -e '"'"'s,[@]PERL[@],$(PERL),g'"'"' \
  -e '"'"'s,[@]PERL_LIBDIR[@],$(PERL_LIBDIR),g'"'"' \
  -e '"'"'s,[@]POD2MAN[@],$(POD2MAN),g'"'"' \
  -e '"'"'s,[@]ax_perl5_extra_includes[@],$(ax_perl5_extra_includes),g'"'"' \
  -e '"'"'s,[@]perl5_pkgdatadir[@],$(perl5_pkgdatadir),g'"'"' \
  -e '"'"'s,[@]perl5_pkgvdatadir[@],$(perl5_pkgvdatadir),g'"'"' \
  -e '"'"'s,[@]perl5_pkglibdir[@],$(perl5_pkglibdir),g'"'"' \
  -e '"'"'s,[@]perl5_pkgvlibdir[@],$(perl5_pkgvlibdir),g'"'"' \
  \
  -e '"'"'s,[@]BASH_SH[@],$(BASH_SH),g'"'"' \
  -e '"'"'s,[@]CAT[@],$(CAT),g'"'"' \
  -e '"'"'s,[@]CHGRP[@],$(CHGRP),g'"'"' \
  -e '"'"'s,[@]CHOWN[@],$(CHOWN),g'"'"' \
  -e '"'"'s,[@]FIND[@],$(FIND),g'"'"' \
  -e '"'"'s,[@]GREP[@],$(GREP),g'"'"' \
  -e '"'"'s,[@]SED[@],$(SED),g'"'"' \
  -e '"'"'s,[@]RM[@],$(RM),g'"'"' \
  -e '"'"'s,[@]RMDIR[@],$(RMDIR),g'"'"' \
'




# Tell our Makefiles where to find our Perl 5 @INC munger snippet. Making
# this a configure-time substitution var allows us to move the file
# someplace else in the source tree or rename it w/o modifying any of our
# Makefile.am files.
bedrock_perl5_inc_begin_block_snippet_filepath="\$(top_builddir)/src/main/resources/bedrock-perl5-inc-begin-block.snippet"




ac_config_files="$ac_config_files Makefile bin/Makefile src/Makefile src/main/Makefile src/main/bedrock/Makefile src/main/bedrock/pebbles/Makefile src/main/perl/Makefile src/main/perl/bin/Makefile src/main/perl/cgi-bin/Makefile src/main/perl/lib/Makefile src/main/resources/Makefile src/main/resources/htdocs/Makefile"


cat >confcache <<\_ACEOF
# This file is a shell script that caches the results of configure
# tests run on this system so they can be shared between configure
# scripts and configure runs, see configure's option --config-cache.
# It is not useful on other systems.  If it contains results you don't
# want to keep, you may remove or edit it.
#
# config.status only pays attention to the cache file if you give it
# the --recheck option to rerun configure.
#
# `ac_cv_env_foo' variables (set or unset) will be overridden when
# loading this file, other *unset* `ac_cv_foo' will be assigned the
# following values.

_ACEOF

# The following way of writing the cache mishandles newlines in values,
# but we know of no workaround that is simple, portable, and efficient.
# So, we kill variables containing newlines.
# Ultrix sh set writes to stderr and can't be redirected directly,
# and sets the high bit in the cache file unless we assign to the vars.
(
  for ac_var in `(set) 2>&1 | sed -n 's/^\([a-zA-Z_][a-zA-Z0-9_]*\)=.*/\1/p'`; do
    eval ac_val=\$$ac_var
    case $ac_val in #(
    *${as_nl}*)
      case $ac_var in #(
      *_cv_*) { echo "$as_me:$LINENO: WARNING: Cache variable $ac_var contains a newline." >&5
echo "$as_me: WARNING: Cache variable $ac_var contains a newline." >&2;} ;;
      esac
      case $ac_var in #(
      _ | IFS | as_nl) ;; #(
      *) $as_unset $ac_var ;;
      esac ;;
    esac
  done

  (set) 2>&1 |
    case $as_nl`(ac_space=' '; set) 2>&1` in #(
    *${as_nl}ac_space=\ *)
      # `set' does not quote correctly, so add quotes (double-quote
      # substitution turns \\\\ into \\, and sed turns \\ into \).
      sed -n \
	"s/'/'\\\\''/g;
	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\\2'/p"
      ;; #(
    *)
      # `set' quotes correctly as required by POSIX, so do not add quotes.
      sed -n "/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p"
      ;;
    esac |
    sort
) |
  sed '
     /^ac_cv_env_/b end
     t clear
     :clear
     s/^\([^=]*\)=\(.*[{}].*\)$/test "${\1+set}" = set || &/
     t end
     s/^\([^=]*\)=\(.*\)$/\1=${\1=\2}/
     :end' >>confcache
if diff "$cache_file" confcache >/dev/null 2>&1; then :; else
  if test -w "$cache_file"; then
    test "x$cache_file" != "x/dev/null" &&
      { echo "$as_me:$LINENO: updating cache $cache_file" >&5
echo "$as_me: updating cache $cache_file" >&6;}
    cat confcache >$cache_file
  else
    { echo "$as_me:$LINENO: not updating unwritable cache $cache_file" >&5
echo "$as_me: not updating unwritable cache $cache_file" >&6;}
  fi
fi
rm -f confcache

test "x$prefix" = xNONE && prefix=$ac_default_prefix
# Let make expand exec_prefix.
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

# Transform confdefs.h into DEFS.
# Protect against shell expansion while executing Makefile rules.
# Protect against Makefile macro expansion.
#
# If the first sed substitution is executed (which looks for macros that
# take arguments), then branch to the quote section.  Otherwise,
# look for a macro that doesn't take arguments.
ac_script='
t clear
:clear
s/^[	 ]*#[	 ]*define[	 ][	 ]*\([^	 (][^	 (]*([^)]*)\)[	 ]*\(.*\)/-D\1=\2/g
t quote
s/^[	 ]*#[	 ]*define[	 ][	 ]*\([^	 ][^	 ]*\)[	 ]*\(.*\)/-D\1=\2/g
t quote
b any
:quote
s/[	 `~#$^&*(){}\\|;'\''"<>?]/\\&/g
s/\[/\\&/g
s/\]/\\&/g
s/\$/$$/g
H
:any
${
	g
	s/^\n//
	s/\n/ /g
	p
}
'
DEFS=`sed -n "$ac_script" confdefs.h`


ac_libobjs=
ac_ltlibobjs=
for ac_i in : $LIBOBJS; do test "x$ac_i" = x: && continue
  # 1. Remove the extension, and $U if already installed.
  ac_script='s/\$U\././;s/\.o$//;s/\.obj$//'
  ac_i=`echo "$ac_i" | sed "$ac_script"`
  # 2. Prepend LIBOBJDIR.  When used with automake>=1.10 LIBOBJDIR
  #    will be set to the directory where LIBOBJS objects are built.
  ac_libobjs="$ac_libobjs \${LIBOBJDIR}$ac_i\$U.$ac_objext"
  ac_ltlibobjs="$ac_ltlibobjs \${LIBOBJDIR}$ac_i"'$U.lo'
done
LIBOBJS=$ac_libobjs

LTLIBOBJS=$ac_ltlibobjs


if test -z "${USING_PERL5_EXTRA_INCLUDES_TRUE}" && test -z "${USING_PERL5_EXTRA_INCLUDES_FALSE}"; then
  { { echo "$as_me:$LINENO: error: conditional \"USING_PERL5_EXTRA_INCLUDES\" was never defined.
Usually this means the macro was only invoked conditionally." >&5
echo "$as_me: error: conditional \"USING_PERL5_EXTRA_INCLUDES\" was never defined.
Usually this means the macro was only invoked conditionally." >&2;}
   { (exit 1); exit 1; }; }
fi
if test -z "${USING_PERL_INSTALLSITELIB_TRUE}" && test -z "${USING_PERL_INSTALLSITELIB_FALSE}"; then
  { { echo "$as_me:$LINENO: error: conditional \"USING_PERL_INSTALLSITELIB\" was never defined.
Usually this means the macro was only invoked conditionally." >&5
echo "$as_me: error: conditional \"USING_PERL_INSTALLSITELIB\" was never defined.
Usually this means the macro was only invoked conditionally." >&2;}
   { (exit 1); exit 1; }; }
fi

: ${CONFIG_STATUS=./config.status}
ac_clean_files_save=$ac_clean_files
ac_clean_files="$ac_clean_files $CONFIG_STATUS"
{ echo "$as_me:$LINENO: creating $CONFIG_STATUS" >&5
echo "$as_me: creating $CONFIG_STATUS" >&6;}
cat >$CONFIG_STATUS <<_ACEOF
#! $SHELL
# Generated by $as_me.
# Run this file to recreate the current configuration.
# Compiler output produced by configure, useful for debugging
# configure, is in config.log if it exists.

debug=false
ac_cs_recheck=false
ac_cs_silent=false
SHELL=\${CONFIG_SHELL-$SHELL}
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF
## --------------------- ##
## M4sh Initialization.  ##
## --------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
  *posix*) set -o posix ;;
esac

fi




# PATH needs CR
# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  echo "#! /bin/sh" >conf$$.sh
  echo  "exit 0"   >>conf$$.sh
  chmod +x conf$$.sh
  if (PATH="/nonexistent;."; conf$$.sh) >/dev/null 2>&1; then
    PATH_SEPARATOR=';'
  else
    PATH_SEPARATOR=:
  fi
  rm -f conf$$.sh
fi

# Support unset when possible.
if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then
  as_unset=unset
else
  as_unset=false
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
as_nl='
'
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
case $0 in
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  { (exit 1); exit 1; }
fi

# Work around bugs in pre-3.0 UWIN ksh.
for as_var in ENV MAIL MAILPATH
do ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
for as_var in \
  LANG LANGUAGE LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
  LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
  LC_TELEPHONE LC_TIME
do
  if (set +x; test -z "`(eval $as_var=C; export $as_var) 2>&1`"); then
    eval $as_var=C; export $as_var
  else
    ($as_unset $as_var) >/dev/null 2>&1 && $as_unset $as_var
  fi
done

# Required to use basename.
if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi


# Name of the executable.
as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# CDPATH.
$as_unset CDPATH



  as_lineno_1=$LINENO
  as_lineno_2=$LINENO
  test "x$as_lineno_1" != "x$as_lineno_2" &&
  test "x`expr $as_lineno_1 + 1`" = "x$as_lineno_2" || {

  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
  # uniformly replaced by the line number.  The first 'sed' inserts a
  # line-number line after each line using $LINENO; the second 'sed'
  # does the real work.  The second script uses 'N' to pair each
  # line-number line with the line containing $LINENO, and appends
  # trailing '-' during substitution so that $LINENO is not a special
  # case at line end.
  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
  # scripts with optimization help from Paolo Bonzini.  Blame Lee
  # E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2
   { (exit 1); exit 1; }; }

  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}


if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in
-n*)
  case `echo 'x\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  *)   ECHO_C='\c';;
  esac;;
*)
  ECHO_N='-n';;
esac

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir
fi
echo >conf$$.file
if ln -s conf$$.file conf$$ 2>/dev/null; then
  as_ln_s='ln -s'
  # ... but there are two gotchas:
  # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
  # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
  # In both cases, we have to default to `cp -p'.
  ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
    as_ln_s='cp -p'
elif ln conf$$.file conf$$ 2>/dev/null; then
  as_ln_s=ln
else
  as_ln_s='cp -p'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p=:
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

if test -x / >/dev/null 2>&1; then
  as_test_x='test -x'
else
  if ls -dL / >/dev/null 2>&1; then
    as_ls_L_option=L
  else
    as_ls_L_option=
  fi
  as_test_x='
    eval sh -c '\''
      if test -d "$1"; then
        test -d "$1/.";
      else
	case $1 in
        -*)set "./$1";;
	esac;
	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in
	???[sx]*):;;*)false;;esac;fi
    '\'' sh
  '
fi
as_executable_p=$as_test_x

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


exec 6>&1

# Save the log message, to keep $[0] and so on meaningful, and to
# report actual input values of CONFIG_FILES etc. instead of their
# values after options handling.
ac_log="
This file was extended by bedrock $as_me 1.6.6-snapshot, which was
generated by GNU Autoconf 2.61.  Invocation command line was

  CONFIG_FILES    = $CONFIG_FILES
  CONFIG_HEADERS  = $CONFIG_HEADERS
  CONFIG_LINKS    = $CONFIG_LINKS
  CONFIG_COMMANDS = $CONFIG_COMMANDS
  $ $0 $@

on `(hostname || uname -n) 2>/dev/null | sed 1q`
"

_ACEOF

cat >>$CONFIG_STATUS <<_ACEOF
# Files that config.status was made for.
config_files="$ac_config_files"

_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF
ac_cs_usage="\
\`$as_me' instantiates files from templates according to the
current configuration.

Usage: $0 [OPTIONS] [FILE]...

  -h, --help       print this help, then exit
  -V, --version    print version number and configuration settings, then exit
  -q, --quiet      do not print progress messages
  -d, --debug      don't remove temporary files
      --recheck    update $as_me by reconfiguring in the same conditions
  --file=FILE[:TEMPLATE]
		   instantiate the configuration file FILE

Configuration files:
$config_files

Report bugs to <bug-autoconf@gnu.org>."

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF
ac_cs_version="\\
bedrock config.status 1.6.6-snapshot
configured by $0, generated by GNU Autoconf 2.61,
  with options \\"`echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`\\"

Copyright (C) 2006 Free Software Foundation, Inc.
This config.status script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it."

ac_pwd='$ac_pwd'
srcdir='$srcdir'
INSTALL='$INSTALL'
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF
# If no file are specified by the user, then we need to provide default
# value.  By we need to know if files were specified by the user.
ac_need_defaults=:
while test $# != 0
do
  case $1 in
  --*=*)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=`expr "X$1" : 'X[^=]*=\(.*\)'`
    ac_shift=:
    ;;
  *)
    ac_option=$1
    ac_optarg=$2
    ac_shift=shift
    ;;
  esac

  case $ac_option in
  # Handling of the options.
  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
    ac_cs_recheck=: ;;
  --version | --versio | --versi | --vers | --ver | --ve | --v | -V )
    echo "$ac_cs_version"; exit ;;
  --debug | --debu | --deb | --de | --d | -d )
    debug=: ;;
  --file | --fil | --fi | --f )
    $ac_shift
    CONFIG_FILES="$CONFIG_FILES $ac_optarg"
    ac_need_defaults=false;;
  --he | --h |  --help | --hel | -h )
    echo "$ac_cs_usage"; exit ;;
  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil | --si | --s)
    ac_cs_silent=: ;;

  # This is an error.
  -*) { echo "$as_me: error: unrecognized option: $1
Try \`$0 --help' for more information." >&2
   { (exit 1); exit 1; }; } ;;

  *) ac_config_targets="$ac_config_targets $1"
     ac_need_defaults=false ;;

  esac
  shift
done

ac_configure_extra_args=

if $ac_cs_silent; then
  exec 6>/dev/null
  ac_configure_extra_args="$ac_configure_extra_args --silent"
fi

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF
if \$ac_cs_recheck; then
  echo "running CONFIG_SHELL=$SHELL $SHELL $0 "$ac_configure_args \$ac_configure_extra_args " --no-create --no-recursion" >&6
  CONFIG_SHELL=$SHELL
  export CONFIG_SHELL
  exec $SHELL "$0"$ac_configure_args \$ac_configure_extra_args --no-create --no-recursion
fi

_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF
exec 5>>config.log
{
  echo
  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## Running $as_me. ##
_ASBOX
  echo "$ac_log"
} >&5

_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF

# Handling of arguments.
for ac_config_target in $ac_config_targets
do
  case $ac_config_target in
    "Makefile") CONFIG_FILES="$CONFIG_FILES Makefile" ;;
    "bin/Makefile") CONFIG_FILES="$CONFIG_FILES bin/Makefile" ;;
    "src/Makefile") CONFIG_FILES="$CONFIG_FILES src/Makefile" ;;
    "src/main/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/Makefile" ;;
    "src/main/bedrock/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/bedrock/Makefile" ;;
    "src/main/bedrock/pebbles/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/bedrock/pebbles/Makefile" ;;
    "src/main/perl/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/perl/Makefile" ;;
    "src/main/perl/bin/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/perl/bin/Makefile" ;;
    "src/main/perl/cgi-bin/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/perl/cgi-bin/Makefile" ;;
    "src/main/perl/lib/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/perl/lib/Makefile" ;;
    "src/main/resources/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/resources/Makefile" ;;
    "src/main/resources/htdocs/Makefile") CONFIG_FILES="$CONFIG_FILES src/main/resources/htdocs/Makefile" ;;

  *) { { echo "$as_me:$LINENO: error: invalid argument: $ac_config_target" >&5
echo "$as_me: error: invalid argument: $ac_config_target" >&2;}
   { (exit 1); exit 1; }; };;
  esac
done


# If the user did not use the arguments to specify the items to instantiate,
# then the envvar interface is used.  Set only those that are not.
# We use the long form for the default assignment because of an extremely
# bizarre bug on SunOS 4.1.3.
if $ac_need_defaults; then
  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
fi

# Have a temporary directory for convenience.  Make it in the build tree
# simply because there is no reason against having it here, and in addition,
# creating and moving files from /tmp can sometimes cause problems.
# Hook for its removal unless debugging.
# Note that there is a small window in which the directory will not be cleaned:
# after its creation but before its name has been assigned to `$tmp'.
$debug ||
{
  tmp=
  trap 'exit_status=$?
  { test -z "$tmp" || test ! -d "$tmp" || rm -fr "$tmp"; } && exit $exit_status
' 0
  trap '{ (exit 1); exit 1; }' 1 2 13 15
}
# Create a (secure) tmp directory for tmp files.

{
  tmp=`(umask 077 && mktemp -d "./confXXXXXX") 2>/dev/null` &&
  test -n "$tmp" && test -d "$tmp"
}  ||
{
  tmp=./conf$$-$RANDOM
  (umask 077 && mkdir "$tmp")
} ||
{
   echo "$me: cannot create a temporary directory in ." >&2
   { (exit 1); exit 1; }
}

#
# Set up the sed scripts for CONFIG_FILES section.
#

# No need to generate the scripts if there are no CONFIG_FILES.
# This happens for instance when ./config.status config.h
if test -n "$CONFIG_FILES"; then

_ACEOF



ac_delim='%!_!# '
for ac_last_try in false false false false false :; do
  cat >conf$$subs.sed <<_ACEOF
SHELL!$SHELL$ac_delim
PATH_SEPARATOR!$PATH_SEPARATOR$ac_delim
PACKAGE_NAME!$PACKAGE_NAME$ac_delim
PACKAGE_TARNAME!$PACKAGE_TARNAME$ac_delim
PACKAGE_VERSION!$PACKAGE_VERSION$ac_delim
PACKAGE_STRING!$PACKAGE_STRING$ac_delim
PACKAGE_BUGREPORT!$PACKAGE_BUGREPORT$ac_delim
exec_prefix!$exec_prefix$ac_delim
prefix!$prefix$ac_delim
program_transform_name!$program_transform_name$ac_delim
bindir!$bindir$ac_delim
sbindir!$sbindir$ac_delim
libexecdir!$libexecdir$ac_delim
datarootdir!$datarootdir$ac_delim
datadir!$datadir$ac_delim
sysconfdir!$sysconfdir$ac_delim
sharedstatedir!$sharedstatedir$ac_delim
localstatedir!$localstatedir$ac_delim
includedir!$includedir$ac_delim
oldincludedir!$oldincludedir$ac_delim
docdir!$docdir$ac_delim
infodir!$infodir$ac_delim
htmldir!$htmldir$ac_delim
dvidir!$dvidir$ac_delim
pdfdir!$pdfdir$ac_delim
psdir!$psdir$ac_delim
libdir!$libdir$ac_delim
localedir!$localedir$ac_delim
mandir!$mandir$ac_delim
DEFS!$DEFS$ac_delim
ECHO_C!$ECHO_C$ac_delim
ECHO_N!$ECHO_N$ac_delim
ECHO_T!$ECHO_T$ac_delim
LIBS!$LIBS$ac_delim
build_alias!$build_alias$ac_delim
host_alias!$host_alias$ac_delim
target_alias!$target_alias$ac_delim
INSTALL_PROGRAM!$INSTALL_PROGRAM$ac_delim
INSTALL_SCRIPT!$INSTALL_SCRIPT$ac_delim
INSTALL_DATA!$INSTALL_DATA$ac_delim
CYGPATH_W!$CYGPATH_W$ac_delim
PACKAGE!$PACKAGE$ac_delim
VERSION!$VERSION$ac_delim
ACLOCAL!$ACLOCAL$ac_delim
AUTOCONF!$AUTOCONF$ac_delim
AUTOMAKE!$AUTOMAKE$ac_delim
AUTOHEADER!$AUTOHEADER$ac_delim
MAKEINFO!$MAKEINFO$ac_delim
install_sh!$install_sh$ac_delim
STRIP!$STRIP$ac_delim
INSTALL_STRIP_PROGRAM!$INSTALL_STRIP_PROGRAM$ac_delim
mkdir_p!$mkdir_p$ac_delim
AWK!$AWK$ac_delim
SET_MAKE!$SET_MAKE$ac_delim
am__leading_dot!$am__leading_dot$ac_delim
AMTAR!$AMTAR$ac_delim
am__tar!$am__tar$ac_delim
am__untar!$am__untar$ac_delim
LN_S!$LN_S$ac_delim
BASH_SH!$BASH_SH$ac_delim
CAT!$CAT$ac_delim
CHGRP!$CHGRP$ac_delim
CHOWN!$CHOWN$ac_delim
FIND!$FIND$ac_delim
GREP!$GREP$ac_delim
SED!$SED$ac_delim
RM!$RM$ac_delim
RMDIR!$RMDIR$ac_delim
PERL!$PERL$ac_delim
POD2MAN!$POD2MAN$ac_delim
ax_perl5_extra_includes!$ax_perl5_extra_includes$ac_delim
ax_perl5_extra_includes_opt!$ax_perl5_extra_includes_opt$ac_delim
USING_PERL5_EXTRA_INCLUDES_TRUE!$USING_PERL5_EXTRA_INCLUDES_TRUE$ac_delim
USING_PERL5_EXTRA_INCLUDES_FALSE!$USING_PERL5_EXTRA_INCLUDES_FALSE$ac_delim
PERL_LIBDIR!$PERL_LIBDIR$ac_delim
USING_PERL_INSTALLSITELIB_TRUE!$USING_PERL_INSTALLSITELIB_TRUE$ac_delim
USING_PERL_INSTALLSITELIB_FALSE!$USING_PERL_INSTALLSITELIB_FALSE$ac_delim
pkglibdir!$pkglibdir$ac_delim
cgibindir!$cgibindir$ac_delim
htdocsdir!$htdocsdir$ac_delim
pebblesdir!$pebblesdir$ac_delim
perl5_pkgdatadir!$perl5_pkgdatadir$ac_delim
perl5_pkglibdir!$perl5_pkglibdir$ac_delim
perl5_pkgvdatadir!$perl5_pkgvdatadir$ac_delim
perl5_pkgvlibdir!$perl5_pkgvlibdir$ac_delim
do_subst_command!$do_subst_command$ac_delim
bedrock_perl5_inc_begin_block_snippet_filepath!$bedrock_perl5_inc_begin_block_snippet_filepath$ac_delim
LIBOBJS!$LIBOBJS$ac_delim
LTLIBOBJS!$LTLIBOBJS$ac_delim
_ACEOF

  if test `sed -n "s/.*$ac_delim\$/X/p" conf$$subs.sed | grep -c X` = 89; then
    break
  elif $ac_last_try; then
    { { echo "$as_me:$LINENO: error: could not make $CONFIG_STATUS" >&5
echo "$as_me: error: could not make $CONFIG_STATUS" >&2;}
   { (exit 1); exit 1; }; }
  else
    ac_delim="$ac_delim!$ac_delim _$ac_delim!! "
  fi
done

ac_eof=`sed -n '/^CEOF[0-9]*$/s/CEOF/0/p' conf$$subs.sed`
if test -n "$ac_eof"; then
  ac_eof=`echo "$ac_eof" | sort -nru | sed 1q`
  ac_eof=`expr $ac_eof + 1`
fi

cat >>$CONFIG_STATUS <<_ACEOF
cat >"\$tmp/subs-1.sed" <<\CEOF$ac_eof
/@[a-zA-Z_][a-zA-Z_0-9]*@/!b end
_ACEOF
sed '
s/[,\\&]/\\&/g; s/@/@|#_!!_#|/g
s/^/s,@/; s/!/@,|#_!!_#|/
:n
t n
s/'"$ac_delim"'$/,g/; t
s/$/\\/; p
N; s/^.*\n//; s/[,\\&]/\\&/g; s/@/@|#_!!_#|/g; b n
' >>$CONFIG_STATUS <conf$$subs.sed
rm -f conf$$subs.sed
cat >>$CONFIG_STATUS <<_ACEOF
:end
s/|#_!!_#|//g
CEOF$ac_eof
_ACEOF


# VPATH may cause trouble with some makes, so we remove $(srcdir),
# ${srcdir} and @srcdir@ from VPATH if srcdir is ".", strip leading and
# trailing colons and then remove the whole line if VPATH becomes empty
# (actually we leave an empty line to preserve line numbers).
if test "x$srcdir" = x.; then
  ac_vpsub='/^[	 ]*VPATH[	 ]*=/{
s/:*\$(srcdir):*/:/
s/:*\${srcdir}:*/:/
s/:*@srcdir@:*/:/
s/^\([^=]*=[	 ]*\):*/\1/
s/:*$//
s/^[^=]*=[	 ]*$//
}'
fi

cat >>$CONFIG_STATUS <<\_ACEOF
fi # test -n "$CONFIG_FILES"


for ac_tag in  :F $CONFIG_FILES
do
  case $ac_tag in
  :[FHLC]) ac_mode=$ac_tag; continue;;
  esac
  case $ac_mode$ac_tag in
  :[FHL]*:*);;
  :L* | :C*:*) { { echo "$as_me:$LINENO: error: Invalid tag $ac_tag." >&5
echo "$as_me: error: Invalid tag $ac_tag." >&2;}
   { (exit 1); exit 1; }; };;
  :[FH]-) ac_tag=-:-;;
  :[FH]*) ac_tag=$ac_tag:$ac_tag.in;;
  esac
  ac_save_IFS=$IFS
  IFS=:
  set x $ac_tag
  IFS=$ac_save_IFS
  shift
  ac_file=$1
  shift

  case $ac_mode in
  :L) ac_source=$1;;
  :[FH])
    ac_file_inputs=
    for ac_f
    do
      case $ac_f in
      -) ac_f="$tmp/stdin";;
      *) # Look for the file first in the build tree, then in the source tree
	 # (if the path is not absolute).  The absolute path cannot be DOS-style,
	 # because $ac_f cannot contain `:'.
	 test -f "$ac_f" ||
	   case $ac_f in
	   [\\/$]*) false;;
	   *) test -f "$srcdir/$ac_f" && ac_f="$srcdir/$ac_f";;
	   esac ||
	   { { echo "$as_me:$LINENO: error: cannot find input file: $ac_f" >&5
echo "$as_me: error: cannot find input file: $ac_f" >&2;}
   { (exit 1); exit 1; }; };;
      esac
      ac_file_inputs="$ac_file_inputs $ac_f"
    done

    # Let's still pretend it is `configure' which instantiates (i.e., don't
    # use $as_me), people would be surprised to read:
    #    /* config.h.  Generated by config.status.  */
    configure_input="Generated from "`IFS=:
	  echo $* | sed 's|^[^:]*/||;s|:[^:]*/|, |g'`" by configure."
    if test x"$ac_file" != x-; then
      configure_input="$ac_file.  $configure_input"
      { echo "$as_me:$LINENO: creating $ac_file" >&5
echo "$as_me: creating $ac_file" >&6;}
    fi

    case $ac_tag in
    *:-:* | *:-) cat >"$tmp/stdin";;
    esac
    ;;
  esac

  ac_dir=`$as_dirname -- "$ac_file" ||
$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$ac_file" : 'X\(//\)[^/]' \| \
	 X"$ac_file" : 'X\(//\)$' \| \
	 X"$ac_file" : 'X\(/\)' \| . 2>/dev/null ||
echo X"$ac_file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  { as_dir="$ac_dir"
  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || { $as_mkdir_p && mkdir -p "$as_dir"; } || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || { { echo "$as_me:$LINENO: error: cannot create directory $as_dir" >&5
echo "$as_me: error: cannot create directory $as_dir" >&2;}
   { (exit 1); exit 1; }; }; }
  ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`echo "$ac_dir" | sed 's,^\.[\\/],,'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`echo "$ac_dir_suffix" | sed 's,/[^\\/]*,/..,g;s,/,,'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix


  case $ac_mode in
  :F)
  #
  # CONFIG_FILE
  #

  case $INSTALL in
  [\\/$]* | ?:[\\/]* ) ac_INSTALL=$INSTALL ;;
  *) ac_INSTALL=$ac_top_build_prefix$INSTALL ;;
  esac
_ACEOF

cat >>$CONFIG_STATUS <<\_ACEOF
# If the template does not know about datarootdir, expand it.
# FIXME: This hack should be removed a few years after 2.60.
ac_datarootdir_hack=; ac_datarootdir_seen=

case `sed -n '/datarootdir/ {
  p
  q
}
/@datadir@/p
/@docdir@/p
/@infodir@/p
/@localedir@/p
/@mandir@/p
' $ac_file_inputs` in
*datarootdir*) ac_datarootdir_seen=yes;;
*@datadir@*|*@docdir@*|*@infodir@*|*@localedir@*|*@mandir@*)
  { echo "$as_me:$LINENO: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&5
echo "$as_me: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&2;}
_ACEOF
cat >>$CONFIG_STATUS <<_ACEOF
  ac_datarootdir_hack='
  s&@datadir@&$datadir&g
  s&@docdir@&$docdir&g
  s&@infodir@&$infodir&g
  s&@localedir@&$localedir&g
  s&@mandir@&$mandir&g
    s&\\\${datarootdir}&$datarootdir&g' ;;
esac
_ACEOF

# Neutralize VPATH when `$srcdir' = `.'.
# Shell code in configure.ac might set extrasub.
# FIXME: do we really want to maintain this feature?
cat >>$CONFIG_STATUS <<_ACEOF
  sed "$ac_vpsub
$extrasub
_ACEOF
cat >>$CONFIG_STATUS <<\_ACEOF
:t
/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
s&@configure_input@&$configure_input&;t t
s&@top_builddir@&$ac_top_builddir_sub&;t t
s&@srcdir@&$ac_srcdir&;t t
s&@abs_srcdir@&$ac_abs_srcdir&;t t
s&@top_srcdir@&$ac_top_srcdir&;t t
s&@abs_top_srcdir@&$ac_abs_top_srcdir&;t t
s&@builddir@&$ac_builddir&;t t
s&@abs_builddir@&$ac_abs_builddir&;t t
s&@abs_top_builddir@&$ac_abs_top_builddir&;t t
s&@INSTALL@&$ac_INSTALL&;t t
$ac_datarootdir_hack
" $ac_file_inputs | sed -f "$tmp/subs-1.sed" >$tmp/out

test -z "$ac_datarootdir_hack$ac_datarootdir_seen" &&
  { ac_out=`sed -n '/\${datarootdir}/p' "$tmp/out"`; test -n "$ac_out"; } &&
  { ac_out=`sed -n '/^[	 ]*datarootdir[	 ]*:*=/p' "$tmp/out"`; test -z "$ac_out"; } &&
  { echo "$as_me:$LINENO: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined." >&5
echo "$as_me: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined." >&2;}

  rm -f "$tmp/stdin"
  case $ac_file in
  -) cat "$tmp/out"; rm -f "$tmp/out";;
  *) rm -f "$ac_file"; mv "$tmp/out" $ac_file;;
  esac
 ;;



  esac

done # for ac_tag


{ (exit 0); exit 0; }
_ACEOF
chmod +x $CONFIG_STATUS
ac_clean_files=$ac_clean_files_save


# configure is writing to config.log, and then calls config.status.
# config.status does its own redirection, appending to config.log.
# Unfortunately, on DOS this fails, as config.log is still kept open
# by configure, so config.status won't be able to write to it; its
# output is simply discarded.  So we exec the FD to /dev/null,
# effectively closing config.log, so it can be properly (re)opened and
# appended to by config.status.  When coming back to configure, we
# need to make the FD available again.
if test "$no_create" != yes; then
  ac_cs_success=:
  ac_config_status_args=
  test "$silent" = yes &&
    ac_config_status_args="$ac_config_status_args --quiet"
  exec 5>/dev/null
  $SHELL $CONFIG_STATUS $ac_config_status_args || ac_cs_success=false
  exec 5>>config.log
  # Use ||, not &&, to avoid exiting from the if with $? = 1, which
  # would make configure fail if this is the last instruction.
  $ac_cs_success || { (exit 1); exit 1; }
fi



# I know that shell functions are not considered portable to old
# ancient *nices, but at ChoicePoint/Signature Information Solutions,
# LLC we can be confident that a non-total-suck shell is being
# used. We may need to beef something up to /find/ it, but there
# should definately be a shell installed that understands functions...
#
# Prints on stdout the fully expanded path represented by the value in
# the SHELL_VAR_NAME param. Does /not/ assign the expanded value to
# the named shell var.
#
# __poor_mans_expand_file_name( SHELL_VAR_NAME )
#
# @param SHELL_VAR_NAME should be set to the /name/ of an existing
#                       shell variable whose value contains a
#                       directory path that may or may not need
#                       expansion of the configure shell variables
#                       ($prefix, and the like).
#
__poor_mans_expand_file_name () {
    _tmp_name=$1
    _tmp_last="`eval echo '${'"${_tmp_name}"'}'`"
    if test -z "${_tmp_last}"; then
        printf "__poor_mans_expand_file_name() (WARNING): var \"%s\" is empty\n" \
          "${_tmp_name}" 1>&2
        return 0;  # nothing to do
    fi
    _tmp_last_expanded="`eval echo ${_tmp_last}`"
    while test "${_tmp_last_expanded}" != "${_tmp_last}"; do

        # Set 'last' hold var to most recently expanded version...
        _tmp_last="${_tmp_last_expanded}"

        # ...and try to expand further.
        _tmp_last_expanded="`eval echo ${_tmp_last_expanded}`"
    done
    printf "%s\n" "${_tmp_last_expanded}"
    unset _tmp_last_expanded
    unset _tmp_last
    unset _tmp_name
    return 0;
}

printf "\n"
printf "${PACKAGE} has been configured with the following options:\n"
printf "                        Prefix: %s\n" "`__poor_mans_expand_file_name prefix`"
printf "                 User binaries: %s\n" "`__poor_mans_expand_file_name bindir`"
printf "               System binaries: %s\n" "`__poor_mans_expand_file_name sbindir`"
printf "           Configuration files: %s\n" "`__poor_mans_expand_file_name sysconfdir`"
printf "                  Manual pages: %s\n" "`__poor_mans_expand_file_name mandir`"
printf "\n"
printf "                     pkglibdir: %s\n" "`__poor_mans_expand_file_name pkglibdir`"
printf "                     cgibindir: %s\n" "`__poor_mans_expand_file_name cgibindir`"
printf "                     htdocsdir: %s\n" "`__poor_mans_expand_file_name htdocsdir`"
printf "                    pebblesdir: %s\n" "`__poor_mans_expand_file_name pebblesdir`"
printf "\n"
printf "                          bash: %s\n" "`__poor_mans_expand_file_name BASH_SH`"
printf "                          perl: %s\n" "`__poor_mans_expand_file_name PERL`"
printf "\n"


## DEBUG: Show all variables set in the shell at the end of 'configure' run
## set | grep -v '^[ {}]' | sort
